// source: broker.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.com.keus.broker.CONNECTION_STATE', null, global);
goog.exportSymbol('proto.com.keus.broker.CONNECTION_STATUS', null, global);
goog.exportSymbol('proto.com.keus.broker.ChannelRequest', null, global);
goog.exportSymbol('proto.com.keus.broker.ChannelRequest.DataCase', null, global);
goog.exportSymbol('proto.com.keus.broker.ChannelResponse', null, global);
goog.exportSymbol('proto.com.keus.broker.ChannelResponse.DataCase', null, global);
goog.exportSymbol('proto.com.keus.broker.ClientData', null, global);
goog.exportSymbol('proto.com.keus.broker.DefaultServiceRequest', null, global);
goog.exportSymbol('proto.com.keus.broker.DefaultServiceResponse', null, global);
goog.exportSymbol('proto.com.keus.broker.EventMessage', null, global);
goog.exportSymbol('proto.com.keus.broker.HeartBeat', null, global);
goog.exportSymbol('proto.com.keus.broker.PingAck', null, global);
goog.exportSymbol('proto.com.keus.broker.PingData', null, global);
goog.exportSymbol('proto.com.keus.broker.PublishAck', null, global);
goog.exportSymbol('proto.com.keus.broker.PublishData', null, global);
goog.exportSymbol('proto.com.keus.broker.RemoveDefaultServiceRequest', null, global);
goog.exportSymbol('proto.com.keus.broker.RequestData', null, global);
goog.exportSymbol('proto.com.keus.broker.ResponseAck', null, global);
goog.exportSymbol('proto.com.keus.broker.ResponseData', null, global);
goog.exportSymbol('proto.com.keus.broker.ServerError', null, global);
goog.exportSymbol('proto.com.keus.broker.ServiceAck', null, global);
goog.exportSymbol('proto.com.keus.broker.ServiceData', null, global);
goog.exportSymbol('proto.com.keus.broker.ServiceMessage', null, global);
goog.exportSymbol('proto.com.keus.broker.SubscribeAck', null, global);
goog.exportSymbol('proto.com.keus.broker.SubscribeData', null, global);
goog.exportSymbol('proto.com.keus.broker.ValidationRequest', null, global);
goog.exportSymbol('proto.com.keus.broker.ValidationResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.PingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.PingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.PingData.displayName = 'proto.com.keus.broker.PingData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.PingAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.PingAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.PingAck.displayName = 'proto.com.keus.broker.PingAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.keus.broker.ChannelRequest.oneofGroups_);
};
goog.inherits(proto.com.keus.broker.ChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ChannelRequest.displayName = 'proto.com.keus.broker.ChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ValidationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.ValidationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ValidationRequest.displayName = 'proto.com.keus.broker.ValidationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ValidationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.keus.broker.ValidationResponse.repeatedFields_, null);
};
goog.inherits(proto.com.keus.broker.ValidationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ValidationResponse.displayName = 'proto.com.keus.broker.ValidationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.DefaultServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.DefaultServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.DefaultServiceRequest.displayName = 'proto.com.keus.broker.DefaultServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.DefaultServiceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.DefaultServiceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.DefaultServiceResponse.displayName = 'proto.com.keus.broker.DefaultServiceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.RemoveDefaultServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.RemoveDefaultServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.RemoveDefaultServiceRequest.displayName = 'proto.com.keus.broker.RemoveDefaultServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.keus.broker.ChannelResponse.oneofGroups_);
};
goog.inherits(proto.com.keus.broker.ChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ChannelResponse.displayName = 'proto.com.keus.broker.ChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.HeartBeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.HeartBeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.HeartBeat.displayName = 'proto.com.keus.broker.HeartBeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ServiceMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.ServiceMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ServiceMessage.displayName = 'proto.com.keus.broker.ServiceMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.EventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.EventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.EventMessage.displayName = 'proto.com.keus.broker.EventMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ClientData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.ClientData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ClientData.displayName = 'proto.com.keus.broker.ClientData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ServiceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.ServiceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ServiceData.displayName = 'proto.com.keus.broker.ServiceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ServiceAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.ServiceAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ServiceAck.displayName = 'proto.com.keus.broker.ServiceAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.RequestData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.RequestData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.RequestData.displayName = 'proto.com.keus.broker.RequestData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ResponseData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.ResponseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ResponseData.displayName = 'proto.com.keus.broker.ResponseData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ResponseAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.ResponseAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ResponseAck.displayName = 'proto.com.keus.broker.ResponseAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.ServerError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.ServerError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.ServerError.displayName = 'proto.com.keus.broker.ServerError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.SubscribeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.SubscribeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.SubscribeData.displayName = 'proto.com.keus.broker.SubscribeData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.SubscribeAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.SubscribeAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.SubscribeAck.displayName = 'proto.com.keus.broker.SubscribeAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.PublishData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.PublishData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.PublishData.displayName = 'proto.com.keus.broker.PublishData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.keus.broker.PublishAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.keus.broker.PublishAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.keus.broker.PublishAck.displayName = 'proto.com.keus.broker.PublishAck';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.PingData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.PingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.PingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.PingData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.PingData}
 */
proto.com.keus.broker.PingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.PingData;
  return proto.com.keus.broker.PingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.PingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.PingData}
 */
proto.com.keus.broker.PingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.PingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.PingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.PingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.PingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.PingAck.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.PingAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.PingAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.PingAck.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.PingAck}
 */
proto.com.keus.broker.PingAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.PingAck;
  return proto.com.keus.broker.PingAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.PingAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.PingAck}
 */
proto.com.keus.broker.PingAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.PingAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.PingAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.PingAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.PingAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.keus.broker.ChannelRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.com.keus.broker.ChannelRequest.DataCase = {
  DATA_NOT_SET: 0,
  BEAT: 1,
  VALIDATION_REQUEST: 2,
  DEFAULT_SERVICE_REQUEST: 3
};

/**
 * @return {proto.com.keus.broker.ChannelRequest.DataCase}
 */
proto.com.keus.broker.ChannelRequest.prototype.getDataCase = function() {
  return /** @type {proto.com.keus.broker.ChannelRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.com.keus.broker.ChannelRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    beat: (f = msg.getBeat()) && proto.com.keus.broker.HeartBeat.toObject(includeInstance, f),
    validationRequest: (f = msg.getValidationRequest()) && proto.com.keus.broker.ValidationRequest.toObject(includeInstance, f),
    defaultServiceRequest: (f = msg.getDefaultServiceRequest()) && proto.com.keus.broker.DefaultServiceRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ChannelRequest}
 */
proto.com.keus.broker.ChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ChannelRequest;
  return proto.com.keus.broker.ChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ChannelRequest}
 */
proto.com.keus.broker.ChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.keus.broker.HeartBeat;
      reader.readMessage(value,proto.com.keus.broker.HeartBeat.deserializeBinaryFromReader);
      msg.setBeat(value);
      break;
    case 2:
      var value = new proto.com.keus.broker.ValidationRequest;
      reader.readMessage(value,proto.com.keus.broker.ValidationRequest.deserializeBinaryFromReader);
      msg.setValidationRequest(value);
      break;
    case 3:
      var value = new proto.com.keus.broker.DefaultServiceRequest;
      reader.readMessage(value,proto.com.keus.broker.DefaultServiceRequest.deserializeBinaryFromReader);
      msg.setDefaultServiceRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.keus.broker.HeartBeat.serializeBinaryToWriter
    );
  }
  f = message.getValidationRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.keus.broker.ValidationRequest.serializeBinaryToWriter
    );
  }
  f = message.getDefaultServiceRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.keus.broker.DefaultServiceRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional HeartBeat beat = 1;
 * @return {?proto.com.keus.broker.HeartBeat}
 */
proto.com.keus.broker.ChannelRequest.prototype.getBeat = function() {
  return /** @type{?proto.com.keus.broker.HeartBeat} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.HeartBeat, 1));
};


/**
 * @param {?proto.com.keus.broker.HeartBeat|undefined} value
 * @return {!proto.com.keus.broker.ChannelRequest} returns this
*/
proto.com.keus.broker.ChannelRequest.prototype.setBeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.com.keus.broker.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ChannelRequest} returns this
 */
proto.com.keus.broker.ChannelRequest.prototype.clearBeat = function() {
  return this.setBeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ChannelRequest.prototype.hasBeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ValidationRequest validation_request = 2;
 * @return {?proto.com.keus.broker.ValidationRequest}
 */
proto.com.keus.broker.ChannelRequest.prototype.getValidationRequest = function() {
  return /** @type{?proto.com.keus.broker.ValidationRequest} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.ValidationRequest, 2));
};


/**
 * @param {?proto.com.keus.broker.ValidationRequest|undefined} value
 * @return {!proto.com.keus.broker.ChannelRequest} returns this
*/
proto.com.keus.broker.ChannelRequest.prototype.setValidationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.com.keus.broker.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ChannelRequest} returns this
 */
proto.com.keus.broker.ChannelRequest.prototype.clearValidationRequest = function() {
  return this.setValidationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ChannelRequest.prototype.hasValidationRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DefaultServiceRequest default_service_request = 3;
 * @return {?proto.com.keus.broker.DefaultServiceRequest}
 */
proto.com.keus.broker.ChannelRequest.prototype.getDefaultServiceRequest = function() {
  return /** @type{?proto.com.keus.broker.DefaultServiceRequest} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.DefaultServiceRequest, 3));
};


/**
 * @param {?proto.com.keus.broker.DefaultServiceRequest|undefined} value
 * @return {!proto.com.keus.broker.ChannelRequest} returns this
*/
proto.com.keus.broker.ChannelRequest.prototype.setDefaultServiceRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.com.keus.broker.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ChannelRequest} returns this
 */
proto.com.keus.broker.ChannelRequest.prototype.clearDefaultServiceRequest = function() {
  return this.setDefaultServiceRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ChannelRequest.prototype.hasDefaultServiceRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ValidationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ValidationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ValidationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ValidationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsonBody: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ValidationRequest}
 */
proto.com.keus.broker.ValidationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ValidationRequest;
  return proto.com.keus.broker.ValidationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ValidationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ValidationRequest}
 */
proto.com.keus.broker.ValidationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ValidationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ValidationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ValidationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ValidationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJsonBody();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string json_body = 1;
 * @return {string}
 */
proto.com.keus.broker.ValidationRequest.prototype.getJsonBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ValidationRequest} returns this
 */
proto.com.keus.broker.ValidationRequest.prototype.setJsonBody = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.keus.broker.ValidationResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ValidationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ValidationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ValidationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ValidationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorReason: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientData: (f = msg.getClientData()) && proto.com.keus.broker.ClientData.toObject(includeInstance, f),
    accessServicesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ValidationResponse}
 */
proto.com.keus.broker.ValidationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ValidationResponse;
  return proto.com.keus.broker.ValidationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ValidationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ValidationResponse}
 */
proto.com.keus.broker.ValidationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorReason(value);
      break;
    case 4:
      var value = new proto.com.keus.broker.ClientData;
      reader.readMessage(value,proto.com.keus.broker.ClientData.deserializeBinaryFromReader);
      msg.setClientData(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccessServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ValidationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ValidationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ValidationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ValidationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getErrorReason();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.keus.broker.ClientData.serializeBinaryToWriter
    );
  }
  f = message.getAccessServicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.com.keus.broker.ValidationResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.keus.broker.ValidationResponse} returns this
 */
proto.com.keus.broker.ValidationResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 error_code = 2;
 * @return {number}
 */
proto.com.keus.broker.ValidationResponse.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.ValidationResponse} returns this
 */
proto.com.keus.broker.ValidationResponse.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_reason = 3;
 * @return {string}
 */
proto.com.keus.broker.ValidationResponse.prototype.getErrorReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ValidationResponse} returns this
 */
proto.com.keus.broker.ValidationResponse.prototype.setErrorReason = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ClientData client_data = 4;
 * @return {?proto.com.keus.broker.ClientData}
 */
proto.com.keus.broker.ValidationResponse.prototype.getClientData = function() {
  return /** @type{?proto.com.keus.broker.ClientData} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.ClientData, 4));
};


/**
 * @param {?proto.com.keus.broker.ClientData|undefined} value
 * @return {!proto.com.keus.broker.ValidationResponse} returns this
*/
proto.com.keus.broker.ValidationResponse.prototype.setClientData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ValidationResponse} returns this
 */
proto.com.keus.broker.ValidationResponse.prototype.clearClientData = function() {
  return this.setClientData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ValidationResponse.prototype.hasClientData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string access_services = 5;
 * @return {!Array<string>}
 */
proto.com.keus.broker.ValidationResponse.prototype.getAccessServicesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.com.keus.broker.ValidationResponse} returns this
 */
proto.com.keus.broker.ValidationResponse.prototype.setAccessServicesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.com.keus.broker.ValidationResponse} returns this
 */
proto.com.keus.broker.ValidationResponse.prototype.addAccessServices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.keus.broker.ValidationResponse} returns this
 */
proto.com.keus.broker.ValidationResponse.prototype.clearAccessServicesList = function() {
  return this.setAccessServicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.DefaultServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.DefaultServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.DefaultServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.DefaultServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicePassword: jspb.Message.getFieldWithDefault(msg, 1, ""),
    defaultServiceName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.DefaultServiceRequest}
 */
proto.com.keus.broker.DefaultServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.DefaultServiceRequest;
  return proto.com.keus.broker.DefaultServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.DefaultServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.DefaultServiceRequest}
 */
proto.com.keus.broker.DefaultServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicePassword(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultServiceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.DefaultServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.DefaultServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.DefaultServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.DefaultServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicePassword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDefaultServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string service_password = 1;
 * @return {string}
 */
proto.com.keus.broker.DefaultServiceRequest.prototype.getServicePassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.DefaultServiceRequest} returns this
 */
proto.com.keus.broker.DefaultServiceRequest.prototype.setServicePassword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string default_service_name = 2;
 * @return {string}
 */
proto.com.keus.broker.DefaultServiceRequest.prototype.getDefaultServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.DefaultServiceRequest} returns this
 */
proto.com.keus.broker.DefaultServiceRequest.prototype.setDefaultServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.DefaultServiceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.DefaultServiceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.DefaultServiceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorReason: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientData: (f = msg.getClientData()) && proto.com.keus.broker.ClientData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.DefaultServiceResponse}
 */
proto.com.keus.broker.DefaultServiceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.DefaultServiceResponse;
  return proto.com.keus.broker.DefaultServiceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.DefaultServiceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.DefaultServiceResponse}
 */
proto.com.keus.broker.DefaultServiceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorReason(value);
      break;
    case 4:
      var value = new proto.com.keus.broker.ClientData;
      reader.readMessage(value,proto.com.keus.broker.ClientData.deserializeBinaryFromReader);
      msg.setClientData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.DefaultServiceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.DefaultServiceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.DefaultServiceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getErrorReason();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.keus.broker.ClientData.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.keus.broker.DefaultServiceResponse} returns this
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 error_code = 2;
 * @return {number}
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.DefaultServiceResponse} returns this
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_reason = 3;
 * @return {string}
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.getErrorReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.DefaultServiceResponse} returns this
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.setErrorReason = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ClientData client_data = 4;
 * @return {?proto.com.keus.broker.ClientData}
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.getClientData = function() {
  return /** @type{?proto.com.keus.broker.ClientData} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.ClientData, 4));
};


/**
 * @param {?proto.com.keus.broker.ClientData|undefined} value
 * @return {!proto.com.keus.broker.DefaultServiceResponse} returns this
*/
proto.com.keus.broker.DefaultServiceResponse.prototype.setClientData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.DefaultServiceResponse} returns this
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.clearClientData = function() {
  return this.setClientData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.DefaultServiceResponse.prototype.hasClientData = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.RemoveDefaultServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.RemoveDefaultServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultServiceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    servicePassword: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientData: (f = msg.getClientData()) && proto.com.keus.broker.ClientData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.RemoveDefaultServiceRequest}
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.RemoveDefaultServiceRequest;
  return proto.com.keus.broker.RemoveDefaultServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.RemoveDefaultServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.RemoveDefaultServiceRequest}
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultServiceName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicePassword(value);
      break;
    case 3:
      var value = new proto.com.keus.broker.ClientData;
      reader.readMessage(value,proto.com.keus.broker.ClientData.deserializeBinaryFromReader);
      msg.setClientData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.RemoveDefaultServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.RemoveDefaultServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultServiceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServicePassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.keus.broker.ClientData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string default_service_name = 1;
 * @return {string}
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.getDefaultServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.RemoveDefaultServiceRequest} returns this
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.setDefaultServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_password = 2;
 * @return {string}
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.getServicePassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.RemoveDefaultServiceRequest} returns this
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.setServicePassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ClientData client_data = 3;
 * @return {?proto.com.keus.broker.ClientData}
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.getClientData = function() {
  return /** @type{?proto.com.keus.broker.ClientData} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.ClientData, 3));
};


/**
 * @param {?proto.com.keus.broker.ClientData|undefined} value
 * @return {!proto.com.keus.broker.RemoveDefaultServiceRequest} returns this
*/
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.setClientData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.RemoveDefaultServiceRequest} returns this
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.clearClientData = function() {
  return this.setClientData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.RemoveDefaultServiceRequest.prototype.hasClientData = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.keus.broker.ChannelResponse.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.com.keus.broker.ChannelResponse.DataCase = {
  DATA_NOT_SET: 0,
  BEAT: 2,
  SERVICE_MESSAGE: 3,
  EVENT_MESSAGE: 4,
  VALIDATION_RESPONSE: 5,
  DEFAULT_SERVICE_RESPONSE: 6
};

/**
 * @return {proto.com.keus.broker.ChannelResponse.DataCase}
 */
proto.com.keus.broker.ChannelResponse.prototype.getDataCase = function() {
  return /** @type {proto.com.keus.broker.ChannelResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.com.keus.broker.ChannelResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    beat: (f = msg.getBeat()) && proto.com.keus.broker.HeartBeat.toObject(includeInstance, f),
    serviceMessage: (f = msg.getServiceMessage()) && proto.com.keus.broker.ServiceMessage.toObject(includeInstance, f),
    eventMessage: (f = msg.getEventMessage()) && proto.com.keus.broker.EventMessage.toObject(includeInstance, f),
    validationResponse: (f = msg.getValidationResponse()) && proto.com.keus.broker.ValidationResponse.toObject(includeInstance, f),
    defaultServiceResponse: (f = msg.getDefaultServiceResponse()) && proto.com.keus.broker.DefaultServiceResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ChannelResponse}
 */
proto.com.keus.broker.ChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ChannelResponse;
  return proto.com.keus.broker.ChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ChannelResponse}
 */
proto.com.keus.broker.ChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.com.keus.broker.HeartBeat;
      reader.readMessage(value,proto.com.keus.broker.HeartBeat.deserializeBinaryFromReader);
      msg.setBeat(value);
      break;
    case 3:
      var value = new proto.com.keus.broker.ServiceMessage;
      reader.readMessage(value,proto.com.keus.broker.ServiceMessage.deserializeBinaryFromReader);
      msg.setServiceMessage(value);
      break;
    case 4:
      var value = new proto.com.keus.broker.EventMessage;
      reader.readMessage(value,proto.com.keus.broker.EventMessage.deserializeBinaryFromReader);
      msg.setEventMessage(value);
      break;
    case 5:
      var value = new proto.com.keus.broker.ValidationResponse;
      reader.readMessage(value,proto.com.keus.broker.ValidationResponse.deserializeBinaryFromReader);
      msg.setValidationResponse(value);
      break;
    case 6:
      var value = new proto.com.keus.broker.DefaultServiceResponse;
      reader.readMessage(value,proto.com.keus.broker.DefaultServiceResponse.deserializeBinaryFromReader);
      msg.setDefaultServiceResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.keus.broker.HeartBeat.serializeBinaryToWriter
    );
  }
  f = message.getServiceMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.keus.broker.ServiceMessage.serializeBinaryToWriter
    );
  }
  f = message.getEventMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.keus.broker.EventMessage.serializeBinaryToWriter
    );
  }
  f = message.getValidationResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.com.keus.broker.ValidationResponse.serializeBinaryToWriter
    );
  }
  f = message.getDefaultServiceResponse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.com.keus.broker.DefaultServiceResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional HeartBeat beat = 2;
 * @return {?proto.com.keus.broker.HeartBeat}
 */
proto.com.keus.broker.ChannelResponse.prototype.getBeat = function() {
  return /** @type{?proto.com.keus.broker.HeartBeat} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.HeartBeat, 2));
};


/**
 * @param {?proto.com.keus.broker.HeartBeat|undefined} value
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
*/
proto.com.keus.broker.ChannelResponse.prototype.setBeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.com.keus.broker.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
 */
proto.com.keus.broker.ChannelResponse.prototype.clearBeat = function() {
  return this.setBeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ChannelResponse.prototype.hasBeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ServiceMessage service_message = 3;
 * @return {?proto.com.keus.broker.ServiceMessage}
 */
proto.com.keus.broker.ChannelResponse.prototype.getServiceMessage = function() {
  return /** @type{?proto.com.keus.broker.ServiceMessage} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.ServiceMessage, 3));
};


/**
 * @param {?proto.com.keus.broker.ServiceMessage|undefined} value
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
*/
proto.com.keus.broker.ChannelResponse.prototype.setServiceMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.com.keus.broker.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
 */
proto.com.keus.broker.ChannelResponse.prototype.clearServiceMessage = function() {
  return this.setServiceMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ChannelResponse.prototype.hasServiceMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventMessage event_message = 4;
 * @return {?proto.com.keus.broker.EventMessage}
 */
proto.com.keus.broker.ChannelResponse.prototype.getEventMessage = function() {
  return /** @type{?proto.com.keus.broker.EventMessage} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.EventMessage, 4));
};


/**
 * @param {?proto.com.keus.broker.EventMessage|undefined} value
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
*/
proto.com.keus.broker.ChannelResponse.prototype.setEventMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.com.keus.broker.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
 */
proto.com.keus.broker.ChannelResponse.prototype.clearEventMessage = function() {
  return this.setEventMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ChannelResponse.prototype.hasEventMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ValidationResponse validation_response = 5;
 * @return {?proto.com.keus.broker.ValidationResponse}
 */
proto.com.keus.broker.ChannelResponse.prototype.getValidationResponse = function() {
  return /** @type{?proto.com.keus.broker.ValidationResponse} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.ValidationResponse, 5));
};


/**
 * @param {?proto.com.keus.broker.ValidationResponse|undefined} value
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
*/
proto.com.keus.broker.ChannelResponse.prototype.setValidationResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.com.keus.broker.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
 */
proto.com.keus.broker.ChannelResponse.prototype.clearValidationResponse = function() {
  return this.setValidationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ChannelResponse.prototype.hasValidationResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DefaultServiceResponse default_service_response = 6;
 * @return {?proto.com.keus.broker.DefaultServiceResponse}
 */
proto.com.keus.broker.ChannelResponse.prototype.getDefaultServiceResponse = function() {
  return /** @type{?proto.com.keus.broker.DefaultServiceResponse} */ (
    jspb.Message.getWrapperField(this, proto.com.keus.broker.DefaultServiceResponse, 6));
};


/**
 * @param {?proto.com.keus.broker.DefaultServiceResponse|undefined} value
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
*/
proto.com.keus.broker.ChannelResponse.prototype.setDefaultServiceResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.com.keus.broker.ChannelResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ChannelResponse} returns this
 */
proto.com.keus.broker.ChannelResponse.prototype.clearDefaultServiceResponse = function() {
  return this.setDefaultServiceResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ChannelResponse.prototype.hasDefaultServiceResponse = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.HeartBeat.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.HeartBeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.HeartBeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.HeartBeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    beat: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    interval: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.HeartBeat}
 */
proto.com.keus.broker.HeartBeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.HeartBeat;
  return proto.com.keus.broker.HeartBeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.HeartBeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.HeartBeat}
 */
proto.com.keus.broker.HeartBeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.HeartBeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.HeartBeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.HeartBeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.HeartBeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeat();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInterval();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bool beat = 1;
 * @return {boolean}
 */
proto.com.keus.broker.HeartBeat.prototype.getBeat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.keus.broker.HeartBeat} returns this
 */
proto.com.keus.broker.HeartBeat.prototype.setBeat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 interval = 2;
 * @return {number}
 */
proto.com.keus.broker.HeartBeat.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.HeartBeat} returns this
 */
proto.com.keus.broker.HeartBeat.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ServiceMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ServiceMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ServiceMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ServiceMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    callerMetadata: jspb.Message.getFieldWithDefault(msg, 4, ""),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ServiceMessage}
 */
proto.com.keus.broker.ServiceMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ServiceMessage;
  return proto.com.keus.broker.ServiceMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ServiceMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ServiceMessage}
 */
proto.com.keus.broker.ServiceMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallerMetadata(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ServiceMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ServiceMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ServiceMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ServiceMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallerMetadata();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.com.keus.broker.ServiceMessage.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ServiceMessage} returns this
 */
proto.com.keus.broker.ServiceMessage.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_name = 2;
 * @return {string}
 */
proto.com.keus.broker.ServiceMessage.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ServiceMessage} returns this
 */
proto.com.keus.broker.ServiceMessage.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string caller_metadata = 4;
 * @return {string}
 */
proto.com.keus.broker.ServiceMessage.prototype.getCallerMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ServiceMessage} returns this
 */
proto.com.keus.broker.ServiceMessage.prototype.setCallerMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Any data = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.com.keus.broker.ServiceMessage.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.com.keus.broker.ServiceMessage} returns this
*/
proto.com.keus.broker.ServiceMessage.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ServiceMessage} returns this
 */
proto.com.keus.broker.ServiceMessage.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ServiceMessage.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.EventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.EventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.EventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.EventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventData: (f = msg.getEventData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.EventMessage}
 */
proto.com.keus.broker.EventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.EventMessage;
  return proto.com.keus.broker.EventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.EventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.EventMessage}
 */
proto.com.keus.broker.EventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setEventData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.EventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.EventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.EventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.EventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_name = 1;
 * @return {string}
 */
proto.com.keus.broker.EventMessage.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.EventMessage} returns this
 */
proto.com.keus.broker.EventMessage.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any event_data = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.com.keus.broker.EventMessage.prototype.getEventData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.com.keus.broker.EventMessage} returns this
*/
proto.com.keus.broker.EventMessage.prototype.setEventData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.EventMessage} returns this
 */
proto.com.keus.broker.EventMessage.prototype.clearEventData = function() {
  return this.setEventData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.EventMessage.prototype.hasEventData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ClientData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ClientData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ClientData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ClientData.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ClientData}
 */
proto.com.keus.broker.ClientData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ClientData;
  return proto.com.keus.broker.ClientData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ClientData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ClientData}
 */
proto.com.keus.broker.ClientData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ClientData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ClientData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ClientData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ClientData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.com.keus.broker.ClientData.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ClientData} returns this
 */
proto.com.keus.broker.ClientData.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ServiceData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ServiceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ServiceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ServiceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ServiceData}
 */
proto.com.keus.broker.ServiceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ServiceData;
  return proto.com.keus.broker.ServiceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ServiceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ServiceData}
 */
proto.com.keus.broker.ServiceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ServiceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ServiceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ServiceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ServiceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.com.keus.broker.ServiceData.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ServiceData} returns this
 */
proto.com.keus.broker.ServiceData.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_name = 2;
 * @return {string}
 */
proto.com.keus.broker.ServiceData.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ServiceData} returns this
 */
proto.com.keus.broker.ServiceData.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ServiceAck.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ServiceAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ServiceAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ServiceAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ServiceAck}
 */
proto.com.keus.broker.ServiceAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ServiceAck;
  return proto.com.keus.broker.ServiceAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ServiceAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ServiceAck}
 */
proto.com.keus.broker.ServiceAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ServiceAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ServiceAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ServiceAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ServiceAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.com.keus.broker.ServiceAck.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.keus.broker.ServiceAck} returns this
 */
proto.com.keus.broker.ServiceAck.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.com.keus.broker.ServiceAck.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ServiceAck} returns this
 */
proto.com.keus.broker.ServiceAck.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 code = 3;
 * @return {number}
 */
proto.com.keus.broker.ServiceAck.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.ServiceAck} returns this
 */
proto.com.keus.broker.ServiceAck.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.RequestData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.RequestData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.RequestData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.RequestData.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.RequestData}
 */
proto.com.keus.broker.RequestData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.RequestData;
  return proto.com.keus.broker.RequestData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.RequestData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.RequestData}
 */
proto.com.keus.broker.RequestData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.RequestData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.RequestData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.RequestData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.RequestData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.com.keus.broker.RequestData.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.RequestData} returns this
 */
proto.com.keus.broker.RequestData.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_name = 2;
 * @return {string}
 */
proto.com.keus.broker.RequestData.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.RequestData} returns this
 */
proto.com.keus.broker.RequestData.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any data = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.com.keus.broker.RequestData.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.com.keus.broker.RequestData} returns this
*/
proto.com.keus.broker.RequestData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.RequestData} returns this
 */
proto.com.keus.broker.RequestData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.RequestData.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ResponseData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ResponseData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ResponseData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ResponseData.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serviceName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ResponseData}
 */
proto.com.keus.broker.ResponseData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ResponseData;
  return proto.com.keus.broker.ResponseData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ResponseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ResponseData}
 */
proto.com.keus.broker.ResponseData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ResponseData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ResponseData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ResponseData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ResponseData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.com.keus.broker.ResponseData.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ResponseData} returns this
 */
proto.com.keus.broker.ResponseData.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request_id = 2;
 * @return {string}
 */
proto.com.keus.broker.ResponseData.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ResponseData} returns this
 */
proto.com.keus.broker.ResponseData.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string service_name = 3;
 * @return {string}
 */
proto.com.keus.broker.ResponseData.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ResponseData} returns this
 */
proto.com.keus.broker.ResponseData.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Any data = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.com.keus.broker.ResponseData.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.com.keus.broker.ResponseData} returns this
*/
proto.com.keus.broker.ResponseData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.ResponseData} returns this
 */
proto.com.keus.broker.ResponseData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.ResponseData.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ResponseAck.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ResponseAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ResponseAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ResponseAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ResponseAck}
 */
proto.com.keus.broker.ResponseAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ResponseAck;
  return proto.com.keus.broker.ResponseAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ResponseAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ResponseAck}
 */
proto.com.keus.broker.ResponseAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ResponseAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ResponseAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ResponseAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ResponseAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.com.keus.broker.ResponseAck.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.keus.broker.ResponseAck} returns this
 */
proto.com.keus.broker.ResponseAck.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.com.keus.broker.ResponseAck.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ResponseAck} returns this
 */
proto.com.keus.broker.ResponseAck.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 code = 3;
 * @return {number}
 */
proto.com.keus.broker.ResponseAck.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.ResponseAck} returns this
 */
proto.com.keus.broker.ResponseAck.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.ServerError.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.ServerError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.ServerError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ServerError.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.ServerError}
 */
proto.com.keus.broker.ServerError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.ServerError;
  return proto.com.keus.broker.ServerError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.ServerError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.ServerError}
 */
proto.com.keus.broker.ServerError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.ServerError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.ServerError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.ServerError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.ServerError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.com.keus.broker.ServerError.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.keus.broker.ServerError} returns this
 */
proto.com.keus.broker.ServerError.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.com.keus.broker.ServerError.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.ServerError} returns this
 */
proto.com.keus.broker.ServerError.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 code = 3;
 * @return {number}
 */
proto.com.keus.broker.ServerError.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.ServerError} returns this
 */
proto.com.keus.broker.ServerError.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.SubscribeData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.SubscribeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.SubscribeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.SubscribeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.SubscribeData}
 */
proto.com.keus.broker.SubscribeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.SubscribeData;
  return proto.com.keus.broker.SubscribeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.SubscribeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.SubscribeData}
 */
proto.com.keus.broker.SubscribeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.SubscribeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.SubscribeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.SubscribeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.SubscribeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.com.keus.broker.SubscribeData.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.SubscribeData} returns this
 */
proto.com.keus.broker.SubscribeData.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event_name = 2;
 * @return {string}
 */
proto.com.keus.broker.SubscribeData.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.SubscribeData} returns this
 */
proto.com.keus.broker.SubscribeData.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.SubscribeAck.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.SubscribeAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.SubscribeAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.SubscribeAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.SubscribeAck}
 */
proto.com.keus.broker.SubscribeAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.SubscribeAck;
  return proto.com.keus.broker.SubscribeAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.SubscribeAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.SubscribeAck}
 */
proto.com.keus.broker.SubscribeAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.SubscribeAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.SubscribeAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.SubscribeAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.SubscribeAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.com.keus.broker.SubscribeAck.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.keus.broker.SubscribeAck} returns this
 */
proto.com.keus.broker.SubscribeAck.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.com.keus.broker.SubscribeAck.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.SubscribeAck} returns this
 */
proto.com.keus.broker.SubscribeAck.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 code = 3;
 * @return {number}
 */
proto.com.keus.broker.SubscribeAck.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.SubscribeAck} returns this
 */
proto.com.keus.broker.SubscribeAck.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.PublishData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.PublishData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.PublishData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.PublishData.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    role: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.PublishData}
 */
proto.com.keus.broker.PublishData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.PublishData;
  return proto.com.keus.broker.PublishData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.PublishData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.PublishData}
 */
proto.com.keus.broker.PublishData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRole(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.PublishData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.PublishData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.PublishData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.PublishData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRole();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.com.keus.broker.PublishData.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.PublishData} returns this
 */
proto.com.keus.broker.PublishData.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event_name = 2;
 * @return {string}
 */
proto.com.keus.broker.PublishData.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.PublishData} returns this
 */
proto.com.keus.broker.PublishData.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 role = 3;
 * @return {number}
 */
proto.com.keus.broker.PublishData.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.PublishData} returns this
 */
proto.com.keus.broker.PublishData.prototype.setRole = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Any data = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.com.keus.broker.PublishData.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.com.keus.broker.PublishData} returns this
*/
proto.com.keus.broker.PublishData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.keus.broker.PublishData} returns this
 */
proto.com.keus.broker.PublishData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.keus.broker.PublishData.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.keus.broker.PublishAck.prototype.toObject = function(opt_includeInstance) {
  return proto.com.keus.broker.PublishAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.keus.broker.PublishAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.PublishAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.keus.broker.PublishAck}
 */
proto.com.keus.broker.PublishAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.keus.broker.PublishAck;
  return proto.com.keus.broker.PublishAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.keus.broker.PublishAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.keus.broker.PublishAck}
 */
proto.com.keus.broker.PublishAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.keus.broker.PublishAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.keus.broker.PublishAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.keus.broker.PublishAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.keus.broker.PublishAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.com.keus.broker.PublishAck.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.keus.broker.PublishAck} returns this
 */
proto.com.keus.broker.PublishAck.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.com.keus.broker.PublishAck.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.keus.broker.PublishAck} returns this
 */
proto.com.keus.broker.PublishAck.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 code = 3;
 * @return {number}
 */
proto.com.keus.broker.PublishAck.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.keus.broker.PublishAck} returns this
 */
proto.com.keus.broker.PublishAck.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.com.keus.broker.CONNECTION_STATE = {
  CONNECTION_UNKNOWN: 0,
  CONNECTION_ERROR: 1,
  CONNECTION_ACCEPT: 2,
  CONNECTION_CHALLENGING: 3,
  CONNECTION_REJECT: 4,
  CONNECTION_RETRYING: 5,
  CONNECTION_CLOSING: 6,
  CONNECTION_CLOSED: 7
};

/**
 * @enum {number}
 */
proto.com.keus.broker.CONNECTION_STATUS = {
  NOT_CONNECTED: 0,
  NOT_AUTHENTICATED: 1,
  AUTHENTICATED: 2,
  CONNECTING: 3
};

goog.object.extend(exports, proto.com.keus.broker);
