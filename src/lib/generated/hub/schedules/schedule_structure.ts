/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/schedules/schedule_structure.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../devices/zigbee_curtain_controller";
import * as dependency_2 from "./../devices/zigbee_dimmable_driver";
import * as dependency_3 from "./../devices/zigbee_nondimmable_driver";
import * as dependency_4 from "./../devices/dali_dimmable_driver";
import * as dependency_5 from "./../devices/dali_color_tunable_driver";
import * as dependency_6 from "./../devices/dali_nondimmable_driver";
import * as dependency_7 from "./../devices/zigbee_inline_dimmer";
import * as dependency_8 from "./../devices/zigbee_rgbwwa_driver";
import * as dependency_9 from "./../devices/zigbee_embedded_switch";
import * as dependency_10 from "./../devices/zigbee_ac_fan_controller";
import * as dependency_11 from "./../devices/zigbee_dc_fan_controller";
import * as dependency_12 from "./../devices/smart_console";
import * as dependency_13 from "./../devices/zigbee_ir_blaster";
import * as dependency_14 from "./../scenes/scene_structures";
import * as dependency_15 from "./../devices/zigbee_contact_sensor";
import * as dependency_16 from "./../gateway-models/appliances/appliance";
import * as dependency_17 from "./../gateway-models/groups/gmgroups";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum SCHEDULE_TYPE {
        SCHEDULE = 0,
        MOMENT = 1,
        PRESET = 2
    }
    export enum SCHEDULE_ACTION_TYPE {
        ZIGBEE_DIMMABLE_DRIVER = 0,
        ZIGBEE_NON_DIMMABLE_DRIVER = 1,
        DALI_DIMMABLE_DRIVER = 2,
        DALI_NON_DIMMABLE_DRIVER = 3,
        ZIGBEE_CURTAIN_CONTROLLER = 4,
        ZIGBEE_EMBEDDED_SWITCH = 5,
        ZIGBEE_AC_FAN_CONTROLLER = 6,
        ZIGBEE_DC_FAN_CONTROLLER = 7,
        ZIGBEE_RGBWWA = 8,
        ZIGBEE_SMART_CONSOLE_RELAY = 9,
        ZIGBEE_IR_REMOTE = 10,
        SCENE_EXECUTION = 11,
        GROUP_APPLIANCE_ON0FF = 12,
        GROUP_APPLIANCE_SINGLE_DIMMER = 13,
        GROUP_APPLIANCE_FAN = 14,
        GROUP_APPLIANCE_COLOR_TUNABLE = 15,
        GROUP_ZIGBEE_RGBWWA = 16,
        DALI_COLOR_TUNABLE_DRIVER = 17,
        ZIGBEE_CONTACT_SENSOR = 18,
        SCH_GMAPPLIANCE = 19,
        SCH_GMGROUP = 20
    }
    export enum LAST_EXECUTION_STATUS {
        SUCCESS = 0,
        FAIL = 1
    }
    export class GMScheduleAction extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            gmappliance_action?: dependency_16.com.keus.gateway.GMApplianceScheduleAction;
            gmgroup_action?: never;
        } | {
            gmappliance_action?: never;
            gmgroup_action?: dependency_17.com.keus.gateway.GMGroupScheduleAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gmappliance_action" in data && data.gmappliance_action != undefined) {
                    this.gmappliance_action = data.gmappliance_action;
                }
                if ("gmgroup_action" in data && data.gmgroup_action != undefined) {
                    this.gmgroup_action = data.gmgroup_action;
                }
            }
        }
        get gmappliance_action() {
            return pb_1.Message.getWrapperField(this, dependency_16.com.keus.gateway.GMApplianceScheduleAction, 1) as dependency_16.com.keus.gateway.GMApplianceScheduleAction;
        }
        set gmappliance_action(value: dependency_16.com.keus.gateway.GMApplianceScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_gmappliance_action() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get gmgroup_action() {
            return pb_1.Message.getWrapperField(this, dependency_17.com.keus.gateway.GMGroupScheduleAction, 2) as dependency_17.com.keus.gateway.GMGroupScheduleAction;
        }
        set gmgroup_action(value: dependency_17.com.keus.gateway.GMGroupScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_gmgroup_action() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get gmaction_item() {
            const cases: {
                [index: number]: "none" | "gmappliance_action" | "gmgroup_action";
            } = {
                0: "none",
                1: "gmappliance_action",
                2: "gmgroup_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            gmappliance_action?: ReturnType<typeof dependency_16.com.keus.gateway.GMApplianceScheduleAction.prototype.toObject>;
            gmgroup_action?: ReturnType<typeof dependency_17.com.keus.gateway.GMGroupScheduleAction.prototype.toObject>;
        }): GMScheduleAction {
            const message = new GMScheduleAction({});
            if (data.gmappliance_action != null) {
                message.gmappliance_action = dependency_16.com.keus.gateway.GMApplianceScheduleAction.fromObject(data.gmappliance_action);
            }
            if (data.gmgroup_action != null) {
                message.gmgroup_action = dependency_17.com.keus.gateway.GMGroupScheduleAction.fromObject(data.gmgroup_action);
            }
            return message;
        }
        toObject() {
            const data: {
                gmappliance_action?: ReturnType<typeof dependency_16.com.keus.gateway.GMApplianceScheduleAction.prototype.toObject>;
                gmgroup_action?: ReturnType<typeof dependency_17.com.keus.gateway.GMGroupScheduleAction.prototype.toObject>;
            } = {};
            if (this.gmappliance_action != null) {
                data.gmappliance_action = this.gmappliance_action.toObject();
            }
            if (this.gmgroup_action != null) {
                data.gmgroup_action = this.gmgroup_action.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_gmappliance_action)
                writer.writeMessage(1, this.gmappliance_action, () => this.gmappliance_action.serialize(writer));
            if (this.has_gmgroup_action)
                writer.writeMessage(2, this.gmgroup_action, () => this.gmgroup_action.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMScheduleAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMScheduleAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.gmappliance_action, () => message.gmappliance_action = dependency_16.com.keus.gateway.GMApplianceScheduleAction.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.gmgroup_action, () => message.gmgroup_action = dependency_17.com.keus.gateway.GMGroupScheduleAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMScheduleAction {
            return GMScheduleAction.deserialize(bytes);
        }
    }
    export class Schedule extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 40, 51]];
        constructor(data?: any[] | ({
            schedule_id?: string;
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_section?: string;
            schedule_room?: string;
            start_time?: number;
            end_time?: number;
            repeat?: string[];
            created_by?: string;
            created_by_name?: string;
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            active_status?: boolean;
            schedule_running?: boolean;
            force_execute?: boolean;
            force_execute_status?: string;
            last_execution_status?: LAST_EXECUTION_STATUS;
            last_executed_time?: number;
            last_execution_status_message?: string;
        } & (({
            zdimmable_driver_action?: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: dependency_4.com.keus.hub.DaliDimmableDriverAction;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: dependency_9.com.keus.hub.EmbeddedApplianceAction;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: dependency_12.com.keus.hub.SmartConsoleRelayAction;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: dependency_14.com.keus.hub.ExecuteScene;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: dependency_9.com.keus.hub.GroupOnOffApplianceAction;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: dependency_9.com.keus.hub.GroupFanApplianceAction;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: dependency_15.com.keus.hub.ContactSensorScheduleAction;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: GMScheduleAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
                if ("schedule_name" in data && data.schedule_name != undefined) {
                    this.schedule_name = data.schedule_name;
                }
                if ("schedule_type" in data && data.schedule_type != undefined) {
                    this.schedule_type = data.schedule_type;
                }
                if ("schedule_section" in data && data.schedule_section != undefined) {
                    this.schedule_section = data.schedule_section;
                }
                if ("schedule_room" in data && data.schedule_room != undefined) {
                    this.schedule_room = data.schedule_room;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("repeat" in data && data.repeat != undefined) {
                    this.repeat = data.repeat;
                }
                if ("created_by" in data && data.created_by != undefined) {
                    this.created_by = data.created_by;
                }
                if ("zdimmable_driver_action" in data && data.zdimmable_driver_action != undefined) {
                    this.zdimmable_driver_action = data.zdimmable_driver_action;
                }
                if ("znondimmable_driver_action" in data && data.znondimmable_driver_action != undefined) {
                    this.znondimmable_driver_action = data.znondimmable_driver_action;
                }
                if ("ddimmable_driver_action" in data && data.ddimmable_driver_action != undefined) {
                    this.ddimmable_driver_action = data.ddimmable_driver_action;
                }
                if ("dnondimmable_driver_action" in data && data.dnondimmable_driver_action != undefined) {
                    this.dnondimmable_driver_action = data.dnondimmable_driver_action;
                }
                if ("zcurtain_controller_action" in data && data.zcurtain_controller_action != undefined) {
                    this.zcurtain_controller_action = data.zcurtain_controller_action;
                }
                if ("embedded_appliance_action" in data && data.embedded_appliance_action != undefined) {
                    this.embedded_appliance_action = data.embedded_appliance_action;
                }
                if ("zACFan_controller_action" in data && data.zACFan_controller_action != undefined) {
                    this.zACFan_controller_action = data.zACFan_controller_action;
                }
                if ("zDCFan_controller_action" in data && data.zDCFan_controller_action != undefined) {
                    this.zDCFan_controller_action = data.zDCFan_controller_action;
                }
                if ("zRgbwwwa_driver_action" in data && data.zRgbwwwa_driver_action != undefined) {
                    this.zRgbwwwa_driver_action = data.zRgbwwwa_driver_action;
                }
                if ("zsc_relay_action" in data && data.zsc_relay_action != undefined) {
                    this.zsc_relay_action = data.zsc_relay_action;
                }
                if ("zir_blaster_action" in data && data.zir_blaster_action != undefined) {
                    this.zir_blaster_action = data.zir_blaster_action;
                }
                if ("scene_action" in data && data.scene_action != undefined) {
                    this.scene_action = data.scene_action;
                }
                if ("grp_onoff_action" in data && data.grp_onoff_action != undefined) {
                    this.grp_onoff_action = data.grp_onoff_action;
                }
                if ("grp_singledimmer_action" in data && data.grp_singledimmer_action != undefined) {
                    this.grp_singledimmer_action = data.grp_singledimmer_action;
                }
                if ("grp_fan_action" in data && data.grp_fan_action != undefined) {
                    this.grp_fan_action = data.grp_fan_action;
                }
                if ("grp_colortunable_action" in data && data.grp_colortunable_action != undefined) {
                    this.grp_colortunable_action = data.grp_colortunable_action;
                }
                if ("grp_zrgbwwa_action" in data && data.grp_zrgbwwa_action != undefined) {
                    this.grp_zrgbwwa_action = data.grp_zrgbwwa_action;
                }
                if ("dcolortunable_driver_action" in data && data.dcolortunable_driver_action != undefined) {
                    this.dcolortunable_driver_action = data.dcolortunable_driver_action;
                }
                if ("zcs_action" in data && data.zcs_action != undefined) {
                    this.zcs_action = data.zcs_action;
                }
                if ("gmschedule_action" in data && data.gmschedule_action != undefined) {
                    this.gmschedule_action = data.gmschedule_action;
                }
                if ("created_by_name" in data && data.created_by_name != undefined) {
                    this.created_by_name = data.created_by_name;
                }
                if ("schedule_action_type" in data && data.schedule_action_type != undefined) {
                    this.schedule_action_type = data.schedule_action_type;
                }
                if ("active_status" in data && data.active_status != undefined) {
                    this.active_status = data.active_status;
                }
                if ("schedule_running" in data && data.schedule_running != undefined) {
                    this.schedule_running = data.schedule_running;
                }
                if ("force_execute" in data && data.force_execute != undefined) {
                    this.force_execute = data.force_execute;
                }
                if ("force_execute_status" in data && data.force_execute_status != undefined) {
                    this.force_execute_status = data.force_execute_status;
                }
                if ("last_execution_status" in data && data.last_execution_status != undefined) {
                    this.last_execution_status = data.last_execution_status;
                }
                if ("last_executed_time" in data && data.last_executed_time != undefined) {
                    this.last_executed_time = data.last_executed_time;
                }
                if ("last_execution_status_message" in data && data.last_execution_status_message != undefined) {
                    this.last_execution_status_message = data.last_execution_status_message;
                }
            }
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set schedule_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get schedule_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, SCHEDULE_TYPE.SCHEDULE) as SCHEDULE_TYPE;
        }
        set schedule_type(value: SCHEDULE_TYPE) {
            pb_1.Message.setField(this, 3, value);
        }
        get schedule_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set schedule_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get schedule_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set schedule_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get repeat() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set repeat(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get created_by() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set created_by(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get zdimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverAction, 10) as dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
        }
        set zdimmable_driver_action(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_action() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get znondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction, 11) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
        }
        set znondimmable_driver_action(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_action() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get ddimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverAction, 12) as dependency_4.com.keus.hub.DaliDimmableDriverAction;
        }
        set ddimmable_driver_action(value: dependency_4.com.keus.hub.DaliDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_action() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get dnondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverAction, 13) as dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
        }
        set dnondimmable_driver_action(value: dependency_6.com.keus.hub.DaliNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_action() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zcurtain_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerAction, 14) as dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
        }
        set zcurtain_controller_action(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zcurtain_controller_action() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get embedded_appliance_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.EmbeddedApplianceAction, 15) as dependency_9.com.keus.hub.EmbeddedApplianceAction;
        }
        set embedded_appliance_action(value: dependency_9.com.keus.hub.EmbeddedApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_embedded_appliance_action() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get zACFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ZigbeeACFanControllerAction, 16) as dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
        }
        set zACFan_controller_action(value: dependency_10.com.keus.hub.ZigbeeACFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_zACFan_controller_action() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get zDCFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.hub.ZigbeeDCFanControllerAction, 17) as dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
        }
        set zDCFan_controller_action(value: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_zDCFan_controller_action() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get zRgbwwwa_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ZigbeeRgbwwaAction, 18) as dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
        }
        set zRgbwwwa_driver_action(value: dependency_8.com.keus.hub.ZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_zRgbwwwa_driver_action() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get zsc_relay_action() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.hub.SmartConsoleRelayAction, 19) as dependency_12.com.keus.hub.SmartConsoleRelayAction;
        }
        set zsc_relay_action(value: dependency_12.com.keus.hub.SmartConsoleRelayAction) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_zsc_relay_action() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get zir_blaster_action() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.hub.ZigbeeIRBlasterAction, 20) as dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
        }
        set zir_blaster_action(value: dependency_13.com.keus.hub.ZigbeeIRBlasterAction) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_zir_blaster_action() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get scene_action() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.hub.ExecuteScene, 21) as dependency_14.com.keus.hub.ExecuteScene;
        }
        set scene_action(value: dependency_14.com.keus.hub.ExecuteScene) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_scene_action() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get grp_onoff_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupOnOffApplianceAction, 25) as dependency_9.com.keus.hub.GroupOnOffApplianceAction;
        }
        set grp_onoff_action(value: dependency_9.com.keus.hub.GroupOnOffApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_grp_onoff_action() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get grp_singledimmer_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction, 26) as dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
        }
        set grp_singledimmer_action(value: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_grp_singledimmer_action() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get grp_fan_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupFanApplianceAction, 27) as dependency_9.com.keus.hub.GroupFanApplianceAction;
        }
        set grp_fan_action(value: dependency_9.com.keus.hub.GroupFanApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_grp_fan_action() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get grp_colortunable_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupColorTunableApplianceAction, 28) as dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
        }
        set grp_colortunable_action(value: dependency_9.com.keus.hub.GroupColorTunableApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_grp_colortunable_action() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get grp_zrgbwwa_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction, 29) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
        }
        set grp_zrgbwwa_action(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
        }
        get has_grp_zrgbwwa_action() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get dcolortunable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction, 30) as dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction;
        }
        set dcolortunable_driver_action(value: dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_action() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get zcs_action() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.ContactSensorScheduleAction, 40) as dependency_15.com.keus.hub.ContactSensorScheduleAction;
        }
        set zcs_action(value: dependency_15.com.keus.hub.ContactSensorScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 40, this.#one_of_decls[0], value);
        }
        get has_zcs_action() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get gmschedule_action() {
            return pb_1.Message.getWrapperField(this, GMScheduleAction, 51) as GMScheduleAction;
        }
        set gmschedule_action(value: GMScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 51, this.#one_of_decls[0], value);
        }
        get has_gmschedule_action() {
            return pb_1.Message.getField(this, 51) != null;
        }
        get created_by_name() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set created_by_name(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get schedule_action_type() {
            return pb_1.Message.getFieldWithDefault(this, 23, SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER) as SCHEDULE_ACTION_TYPE;
        }
        set schedule_action_type(value: SCHEDULE_ACTION_TYPE) {
            pb_1.Message.setField(this, 23, value);
        }
        get active_status() {
            return pb_1.Message.getFieldWithDefault(this, 24, false) as boolean;
        }
        set active_status(value: boolean) {
            pb_1.Message.setField(this, 24, value);
        }
        get schedule_running() {
            return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
        }
        set schedule_running(value: boolean) {
            pb_1.Message.setField(this, 31, value);
        }
        get force_execute() {
            return pb_1.Message.getFieldWithDefault(this, 32, false) as boolean;
        }
        set force_execute(value: boolean) {
            pb_1.Message.setField(this, 32, value);
        }
        get force_execute_status() {
            return pb_1.Message.getFieldWithDefault(this, 33, "") as string;
        }
        set force_execute_status(value: string) {
            pb_1.Message.setField(this, 33, value);
        }
        get last_execution_status() {
            return pb_1.Message.getFieldWithDefault(this, 34, LAST_EXECUTION_STATUS.SUCCESS) as LAST_EXECUTION_STATUS;
        }
        set last_execution_status(value: LAST_EXECUTION_STATUS) {
            pb_1.Message.setField(this, 34, value);
        }
        get last_executed_time() {
            return pb_1.Message.getFieldWithDefault(this, 35, 0) as number;
        }
        set last_executed_time(value: number) {
            pb_1.Message.setField(this, 35, value);
        }
        get last_execution_status_message() {
            return pb_1.Message.getFieldWithDefault(this, 36, "") as string;
        }
        set last_execution_status_message(value: string) {
            pb_1.Message.setField(this, 36, value);
        }
        get schedule_action() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_action" | "znondimmable_driver_action" | "ddimmable_driver_action" | "dnondimmable_driver_action" | "zcurtain_controller_action" | "embedded_appliance_action" | "zACFan_controller_action" | "zDCFan_controller_action" | "zRgbwwwa_driver_action" | "zsc_relay_action" | "zir_blaster_action" | "scene_action" | "grp_onoff_action" | "grp_singledimmer_action" | "grp_fan_action" | "grp_colortunable_action" | "grp_zrgbwwa_action" | "dcolortunable_driver_action" | "zcs_action" | "gmschedule_action";
            } = {
                0: "none",
                10: "zdimmable_driver_action",
                11: "znondimmable_driver_action",
                12: "ddimmable_driver_action",
                13: "dnondimmable_driver_action",
                14: "zcurtain_controller_action",
                15: "embedded_appliance_action",
                16: "zACFan_controller_action",
                17: "zDCFan_controller_action",
                18: "zRgbwwwa_driver_action",
                19: "zsc_relay_action",
                20: "zir_blaster_action",
                21: "scene_action",
                25: "grp_onoff_action",
                26: "grp_singledimmer_action",
                27: "grp_fan_action",
                28: "grp_colortunable_action",
                29: "grp_zrgbwwa_action",
                30: "dcolortunable_driver_action",
                40: "zcs_action",
                51: "gmschedule_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 40, 51])];
        }
        static fromObject(data: {
            schedule_id?: string;
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_section?: string;
            schedule_room?: string;
            start_time?: number;
            end_time?: number;
            repeat?: string[];
            created_by?: string;
            zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
            znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
            ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
            dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
            zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
            embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
            zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
            zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
            zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
            zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
            zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
            scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
            grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
            grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
            grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
            grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
            grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
            dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.prototype.toObject>;
            zcs_action?: ReturnType<typeof dependency_15.com.keus.hub.ContactSensorScheduleAction.prototype.toObject>;
            gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
            created_by_name?: string;
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            active_status?: boolean;
            schedule_running?: boolean;
            force_execute?: boolean;
            force_execute_status?: string;
            last_execution_status?: LAST_EXECUTION_STATUS;
            last_executed_time?: number;
            last_execution_status_message?: string;
        }): Schedule {
            const message = new Schedule({});
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            if (data.schedule_name != null) {
                message.schedule_name = data.schedule_name;
            }
            if (data.schedule_type != null) {
                message.schedule_type = data.schedule_type;
            }
            if (data.schedule_section != null) {
                message.schedule_section = data.schedule_section;
            }
            if (data.schedule_room != null) {
                message.schedule_room = data.schedule_room;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.repeat != null) {
                message.repeat = data.repeat;
            }
            if (data.created_by != null) {
                message.created_by = data.created_by;
            }
            if (data.zdimmable_driver_action != null) {
                message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.fromObject(data.zdimmable_driver_action);
            }
            if (data.znondimmable_driver_action != null) {
                message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.fromObject(data.znondimmable_driver_action);
            }
            if (data.ddimmable_driver_action != null) {
                message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.fromObject(data.ddimmable_driver_action);
            }
            if (data.dnondimmable_driver_action != null) {
                message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.fromObject(data.dnondimmable_driver_action);
            }
            if (data.zcurtain_controller_action != null) {
                message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.fromObject(data.zcurtain_controller_action);
            }
            if (data.embedded_appliance_action != null) {
                message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.fromObject(data.embedded_appliance_action);
            }
            if (data.zACFan_controller_action != null) {
                message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.fromObject(data.zACFan_controller_action);
            }
            if (data.zDCFan_controller_action != null) {
                message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.fromObject(data.zDCFan_controller_action);
            }
            if (data.zRgbwwwa_driver_action != null) {
                message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.fromObject(data.zRgbwwwa_driver_action);
            }
            if (data.zsc_relay_action != null) {
                message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.fromObject(data.zsc_relay_action);
            }
            if (data.zir_blaster_action != null) {
                message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.fromObject(data.zir_blaster_action);
            }
            if (data.scene_action != null) {
                message.scene_action = dependency_14.com.keus.hub.ExecuteScene.fromObject(data.scene_action);
            }
            if (data.grp_onoff_action != null) {
                message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.fromObject(data.grp_onoff_action);
            }
            if (data.grp_singledimmer_action != null) {
                message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.fromObject(data.grp_singledimmer_action);
            }
            if (data.grp_fan_action != null) {
                message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.fromObject(data.grp_fan_action);
            }
            if (data.grp_colortunable_action != null) {
                message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.fromObject(data.grp_colortunable_action);
            }
            if (data.grp_zrgbwwa_action != null) {
                message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.fromObject(data.grp_zrgbwwa_action);
            }
            if (data.dcolortunable_driver_action != null) {
                message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.fromObject(data.dcolortunable_driver_action);
            }
            if (data.zcs_action != null) {
                message.zcs_action = dependency_15.com.keus.hub.ContactSensorScheduleAction.fromObject(data.zcs_action);
            }
            if (data.gmschedule_action != null) {
                message.gmschedule_action = GMScheduleAction.fromObject(data.gmschedule_action);
            }
            if (data.created_by_name != null) {
                message.created_by_name = data.created_by_name;
            }
            if (data.schedule_action_type != null) {
                message.schedule_action_type = data.schedule_action_type;
            }
            if (data.active_status != null) {
                message.active_status = data.active_status;
            }
            if (data.schedule_running != null) {
                message.schedule_running = data.schedule_running;
            }
            if (data.force_execute != null) {
                message.force_execute = data.force_execute;
            }
            if (data.force_execute_status != null) {
                message.force_execute_status = data.force_execute_status;
            }
            if (data.last_execution_status != null) {
                message.last_execution_status = data.last_execution_status;
            }
            if (data.last_executed_time != null) {
                message.last_executed_time = data.last_executed_time;
            }
            if (data.last_execution_status_message != null) {
                message.last_execution_status_message = data.last_execution_status_message;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_id?: string;
                schedule_name?: string;
                schedule_type?: SCHEDULE_TYPE;
                schedule_section?: string;
                schedule_room?: string;
                start_time?: number;
                end_time?: number;
                repeat?: string[];
                created_by?: string;
                zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
                znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
                ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
                dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
                zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
                embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
                zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
                zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
                zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
                zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
                zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
                scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
                grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
                grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
                grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
                grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
                grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
                dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.prototype.toObject>;
                zcs_action?: ReturnType<typeof dependency_15.com.keus.hub.ContactSensorScheduleAction.prototype.toObject>;
                gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
                created_by_name?: string;
                schedule_action_type?: SCHEDULE_ACTION_TYPE;
                active_status?: boolean;
                schedule_running?: boolean;
                force_execute?: boolean;
                force_execute_status?: string;
                last_execution_status?: LAST_EXECUTION_STATUS;
                last_executed_time?: number;
                last_execution_status_message?: string;
            } = {};
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            if (this.schedule_name != null) {
                data.schedule_name = this.schedule_name;
            }
            if (this.schedule_type != null) {
                data.schedule_type = this.schedule_type;
            }
            if (this.schedule_section != null) {
                data.schedule_section = this.schedule_section;
            }
            if (this.schedule_room != null) {
                data.schedule_room = this.schedule_room;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.repeat != null) {
                data.repeat = this.repeat;
            }
            if (this.created_by != null) {
                data.created_by = this.created_by;
            }
            if (this.zdimmable_driver_action != null) {
                data.zdimmable_driver_action = this.zdimmable_driver_action.toObject();
            }
            if (this.znondimmable_driver_action != null) {
                data.znondimmable_driver_action = this.znondimmable_driver_action.toObject();
            }
            if (this.ddimmable_driver_action != null) {
                data.ddimmable_driver_action = this.ddimmable_driver_action.toObject();
            }
            if (this.dnondimmable_driver_action != null) {
                data.dnondimmable_driver_action = this.dnondimmable_driver_action.toObject();
            }
            if (this.zcurtain_controller_action != null) {
                data.zcurtain_controller_action = this.zcurtain_controller_action.toObject();
            }
            if (this.embedded_appliance_action != null) {
                data.embedded_appliance_action = this.embedded_appliance_action.toObject();
            }
            if (this.zACFan_controller_action != null) {
                data.zACFan_controller_action = this.zACFan_controller_action.toObject();
            }
            if (this.zDCFan_controller_action != null) {
                data.zDCFan_controller_action = this.zDCFan_controller_action.toObject();
            }
            if (this.zRgbwwwa_driver_action != null) {
                data.zRgbwwwa_driver_action = this.zRgbwwwa_driver_action.toObject();
            }
            if (this.zsc_relay_action != null) {
                data.zsc_relay_action = this.zsc_relay_action.toObject();
            }
            if (this.zir_blaster_action != null) {
                data.zir_blaster_action = this.zir_blaster_action.toObject();
            }
            if (this.scene_action != null) {
                data.scene_action = this.scene_action.toObject();
            }
            if (this.grp_onoff_action != null) {
                data.grp_onoff_action = this.grp_onoff_action.toObject();
            }
            if (this.grp_singledimmer_action != null) {
                data.grp_singledimmer_action = this.grp_singledimmer_action.toObject();
            }
            if (this.grp_fan_action != null) {
                data.grp_fan_action = this.grp_fan_action.toObject();
            }
            if (this.grp_colortunable_action != null) {
                data.grp_colortunable_action = this.grp_colortunable_action.toObject();
            }
            if (this.grp_zrgbwwa_action != null) {
                data.grp_zrgbwwa_action = this.grp_zrgbwwa_action.toObject();
            }
            if (this.dcolortunable_driver_action != null) {
                data.dcolortunable_driver_action = this.dcolortunable_driver_action.toObject();
            }
            if (this.zcs_action != null) {
                data.zcs_action = this.zcs_action.toObject();
            }
            if (this.gmschedule_action != null) {
                data.gmschedule_action = this.gmschedule_action.toObject();
            }
            if (this.created_by_name != null) {
                data.created_by_name = this.created_by_name;
            }
            if (this.schedule_action_type != null) {
                data.schedule_action_type = this.schedule_action_type;
            }
            if (this.active_status != null) {
                data.active_status = this.active_status;
            }
            if (this.schedule_running != null) {
                data.schedule_running = this.schedule_running;
            }
            if (this.force_execute != null) {
                data.force_execute = this.force_execute;
            }
            if (this.force_execute_status != null) {
                data.force_execute_status = this.force_execute_status;
            }
            if (this.last_execution_status != null) {
                data.last_execution_status = this.last_execution_status;
            }
            if (this.last_executed_time != null) {
                data.last_executed_time = this.last_executed_time;
            }
            if (this.last_execution_status_message != null) {
                data.last_execution_status_message = this.last_execution_status_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_id.length)
                writer.writeString(1, this.schedule_id);
            if (this.schedule_name.length)
                writer.writeString(2, this.schedule_name);
            if (this.schedule_type != SCHEDULE_TYPE.SCHEDULE)
                writer.writeEnum(3, this.schedule_type);
            if (this.schedule_section.length)
                writer.writeString(4, this.schedule_section);
            if (this.schedule_room.length)
                writer.writeString(5, this.schedule_room);
            if (this.start_time != 0)
                writer.writeUint64(6, this.start_time);
            if (this.end_time != 0)
                writer.writeUint64(7, this.end_time);
            if (this.repeat.length)
                writer.writeRepeatedString(8, this.repeat);
            if (this.created_by.length)
                writer.writeString(9, this.created_by);
            if (this.has_zdimmable_driver_action)
                writer.writeMessage(10, this.zdimmable_driver_action, () => this.zdimmable_driver_action.serialize(writer));
            if (this.has_znondimmable_driver_action)
                writer.writeMessage(11, this.znondimmable_driver_action, () => this.znondimmable_driver_action.serialize(writer));
            if (this.has_ddimmable_driver_action)
                writer.writeMessage(12, this.ddimmable_driver_action, () => this.ddimmable_driver_action.serialize(writer));
            if (this.has_dnondimmable_driver_action)
                writer.writeMessage(13, this.dnondimmable_driver_action, () => this.dnondimmable_driver_action.serialize(writer));
            if (this.has_zcurtain_controller_action)
                writer.writeMessage(14, this.zcurtain_controller_action, () => this.zcurtain_controller_action.serialize(writer));
            if (this.has_embedded_appliance_action)
                writer.writeMessage(15, this.embedded_appliance_action, () => this.embedded_appliance_action.serialize(writer));
            if (this.has_zACFan_controller_action)
                writer.writeMessage(16, this.zACFan_controller_action, () => this.zACFan_controller_action.serialize(writer));
            if (this.has_zDCFan_controller_action)
                writer.writeMessage(17, this.zDCFan_controller_action, () => this.zDCFan_controller_action.serialize(writer));
            if (this.has_zRgbwwwa_driver_action)
                writer.writeMessage(18, this.zRgbwwwa_driver_action, () => this.zRgbwwwa_driver_action.serialize(writer));
            if (this.has_zsc_relay_action)
                writer.writeMessage(19, this.zsc_relay_action, () => this.zsc_relay_action.serialize(writer));
            if (this.has_zir_blaster_action)
                writer.writeMessage(20, this.zir_blaster_action, () => this.zir_blaster_action.serialize(writer));
            if (this.has_scene_action)
                writer.writeMessage(21, this.scene_action, () => this.scene_action.serialize(writer));
            if (this.has_grp_onoff_action)
                writer.writeMessage(25, this.grp_onoff_action, () => this.grp_onoff_action.serialize(writer));
            if (this.has_grp_singledimmer_action)
                writer.writeMessage(26, this.grp_singledimmer_action, () => this.grp_singledimmer_action.serialize(writer));
            if (this.has_grp_fan_action)
                writer.writeMessage(27, this.grp_fan_action, () => this.grp_fan_action.serialize(writer));
            if (this.has_grp_colortunable_action)
                writer.writeMessage(28, this.grp_colortunable_action, () => this.grp_colortunable_action.serialize(writer));
            if (this.has_grp_zrgbwwa_action)
                writer.writeMessage(29, this.grp_zrgbwwa_action, () => this.grp_zrgbwwa_action.serialize(writer));
            if (this.has_dcolortunable_driver_action)
                writer.writeMessage(30, this.dcolortunable_driver_action, () => this.dcolortunable_driver_action.serialize(writer));
            if (this.has_zcs_action)
                writer.writeMessage(40, this.zcs_action, () => this.zcs_action.serialize(writer));
            if (this.has_gmschedule_action)
                writer.writeMessage(51, this.gmschedule_action, () => this.gmschedule_action.serialize(writer));
            if (this.created_by_name.length)
                writer.writeString(22, this.created_by_name);
            if (this.schedule_action_type != SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER)
                writer.writeEnum(23, this.schedule_action_type);
            if (this.active_status != false)
                writer.writeBool(24, this.active_status);
            if (this.schedule_running != false)
                writer.writeBool(31, this.schedule_running);
            if (this.force_execute != false)
                writer.writeBool(32, this.force_execute);
            if (this.force_execute_status.length)
                writer.writeString(33, this.force_execute_status);
            if (this.last_execution_status != LAST_EXECUTION_STATUS.SUCCESS)
                writer.writeEnum(34, this.last_execution_status);
            if (this.last_executed_time != 0)
                writer.writeUint64(35, this.last_executed_time);
            if (this.last_execution_status_message.length)
                writer.writeString(36, this.last_execution_status_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Schedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Schedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_id = reader.readString();
                        break;
                    case 2:
                        message.schedule_name = reader.readString();
                        break;
                    case 3:
                        message.schedule_type = reader.readEnum();
                        break;
                    case 4:
                        message.schedule_section = reader.readString();
                        break;
                    case 5:
                        message.schedule_room = reader.readString();
                        break;
                    case 6:
                        message.start_time = reader.readUint64();
                        break;
                    case 7:
                        message.end_time = reader.readUint64();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.created_by = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.zdimmable_driver_action, () => message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.znondimmable_driver_action, () => message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.ddimmable_driver_action, () => message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.dnondimmable_driver_action, () => message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zcurtain_controller_action, () => message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.embedded_appliance_action, () => message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.zACFan_controller_action, () => message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.zDCFan_controller_action, () => message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.zRgbwwwa_driver_action, () => message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.zsc_relay_action, () => message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.zir_blaster_action, () => message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.scene_action, () => message.scene_action = dependency_14.com.keus.hub.ExecuteScene.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.grp_onoff_action, () => message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.grp_singledimmer_action, () => message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.grp_fan_action, () => message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.grp_colortunable_action, () => message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.grp_zrgbwwa_action, () => message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.dcolortunable_driver_action, () => message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.deserialize(reader));
                        break;
                    case 40:
                        reader.readMessage(message.zcs_action, () => message.zcs_action = dependency_15.com.keus.hub.ContactSensorScheduleAction.deserialize(reader));
                        break;
                    case 51:
                        reader.readMessage(message.gmschedule_action, () => message.gmschedule_action = GMScheduleAction.deserialize(reader));
                        break;
                    case 22:
                        message.created_by_name = reader.readString();
                        break;
                    case 23:
                        message.schedule_action_type = reader.readEnum();
                        break;
                    case 24:
                        message.active_status = reader.readBool();
                        break;
                    case 31:
                        message.schedule_running = reader.readBool();
                        break;
                    case 32:
                        message.force_execute = reader.readBool();
                        break;
                    case 33:
                        message.force_execute_status = reader.readString();
                        break;
                    case 34:
                        message.last_execution_status = reader.readEnum();
                        break;
                    case 35:
                        message.last_executed_time = reader.readUint64();
                        break;
                    case 36:
                        message.last_execution_status_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Schedule {
            return Schedule.deserialize(bytes);
        }
    }
    export class CreateSchedule extends pb_1.Message {
        #one_of_decls: number[][] = [[8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 40, 51]];
        constructor(data?: any[] | ({
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_room?: string;
            start_time?: number;
            end_time?: number;
            repeat?: string[];
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            schedule_section?: string;
            active_status?: boolean;
            force_execute?: boolean;
        } & (({
            zdimmable_driver_action?: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: dependency_4.com.keus.hub.DaliDimmableDriverAction;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: dependency_9.com.keus.hub.EmbeddedApplianceAction;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: dependency_12.com.keus.hub.SmartConsoleRelayAction;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: dependency_14.com.keus.hub.ExecuteScene;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: dependency_9.com.keus.hub.GroupOnOffApplianceAction;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: dependency_9.com.keus.hub.GroupFanApplianceAction;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: dependency_15.com.keus.hub.ContactSensorScheduleAction;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: GMScheduleAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_name" in data && data.schedule_name != undefined) {
                    this.schedule_name = data.schedule_name;
                }
                if ("schedule_type" in data && data.schedule_type != undefined) {
                    this.schedule_type = data.schedule_type;
                }
                if ("schedule_room" in data && data.schedule_room != undefined) {
                    this.schedule_room = data.schedule_room;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("repeat" in data && data.repeat != undefined) {
                    this.repeat = data.repeat;
                }
                if ("schedule_action_type" in data && data.schedule_action_type != undefined) {
                    this.schedule_action_type = data.schedule_action_type;
                }
                if ("zdimmable_driver_action" in data && data.zdimmable_driver_action != undefined) {
                    this.zdimmable_driver_action = data.zdimmable_driver_action;
                }
                if ("znondimmable_driver_action" in data && data.znondimmable_driver_action != undefined) {
                    this.znondimmable_driver_action = data.znondimmable_driver_action;
                }
                if ("ddimmable_driver_action" in data && data.ddimmable_driver_action != undefined) {
                    this.ddimmable_driver_action = data.ddimmable_driver_action;
                }
                if ("dnondimmable_driver_action" in data && data.dnondimmable_driver_action != undefined) {
                    this.dnondimmable_driver_action = data.dnondimmable_driver_action;
                }
                if ("zcurtain_controller_action" in data && data.zcurtain_controller_action != undefined) {
                    this.zcurtain_controller_action = data.zcurtain_controller_action;
                }
                if ("embedded_appliance_action" in data && data.embedded_appliance_action != undefined) {
                    this.embedded_appliance_action = data.embedded_appliance_action;
                }
                if ("zACFan_controller_action" in data && data.zACFan_controller_action != undefined) {
                    this.zACFan_controller_action = data.zACFan_controller_action;
                }
                if ("zDCFan_controller_action" in data && data.zDCFan_controller_action != undefined) {
                    this.zDCFan_controller_action = data.zDCFan_controller_action;
                }
                if ("zRgbwwwa_driver_action" in data && data.zRgbwwwa_driver_action != undefined) {
                    this.zRgbwwwa_driver_action = data.zRgbwwwa_driver_action;
                }
                if ("zsc_relay_action" in data && data.zsc_relay_action != undefined) {
                    this.zsc_relay_action = data.zsc_relay_action;
                }
                if ("zir_blaster_action" in data && data.zir_blaster_action != undefined) {
                    this.zir_blaster_action = data.zir_blaster_action;
                }
                if ("scene_action" in data && data.scene_action != undefined) {
                    this.scene_action = data.scene_action;
                }
                if ("grp_onoff_action" in data && data.grp_onoff_action != undefined) {
                    this.grp_onoff_action = data.grp_onoff_action;
                }
                if ("grp_singledimmer_action" in data && data.grp_singledimmer_action != undefined) {
                    this.grp_singledimmer_action = data.grp_singledimmer_action;
                }
                if ("grp_fan_action" in data && data.grp_fan_action != undefined) {
                    this.grp_fan_action = data.grp_fan_action;
                }
                if ("grp_colortunable_action" in data && data.grp_colortunable_action != undefined) {
                    this.grp_colortunable_action = data.grp_colortunable_action;
                }
                if ("grp_zrgbwwa_action" in data && data.grp_zrgbwwa_action != undefined) {
                    this.grp_zrgbwwa_action = data.grp_zrgbwwa_action;
                }
                if ("dcolortunable_driver_action" in data && data.dcolortunable_driver_action != undefined) {
                    this.dcolortunable_driver_action = data.dcolortunable_driver_action;
                }
                if ("zcs_action" in data && data.zcs_action != undefined) {
                    this.zcs_action = data.zcs_action;
                }
                if ("gmschedule_action" in data && data.gmschedule_action != undefined) {
                    this.gmschedule_action = data.gmschedule_action;
                }
                if ("schedule_section" in data && data.schedule_section != undefined) {
                    this.schedule_section = data.schedule_section;
                }
                if ("active_status" in data && data.active_status != undefined) {
                    this.active_status = data.active_status;
                }
                if ("force_execute" in data && data.force_execute != undefined) {
                    this.force_execute = data.force_execute;
                }
            }
        }
        get schedule_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, SCHEDULE_TYPE.SCHEDULE) as SCHEDULE_TYPE;
        }
        set schedule_type(value: SCHEDULE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get schedule_room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set schedule_room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get repeat() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set repeat(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get schedule_action_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER) as SCHEDULE_ACTION_TYPE;
        }
        set schedule_action_type(value: SCHEDULE_ACTION_TYPE) {
            pb_1.Message.setField(this, 7, value);
        }
        get zdimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverAction, 8) as dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
        }
        set zdimmable_driver_action(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_action() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get znondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction, 9) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
        }
        set znondimmable_driver_action(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_action() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get ddimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverAction, 10) as dependency_4.com.keus.hub.DaliDimmableDriverAction;
        }
        set ddimmable_driver_action(value: dependency_4.com.keus.hub.DaliDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_action() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get dnondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverAction, 11) as dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
        }
        set dnondimmable_driver_action(value: dependency_6.com.keus.hub.DaliNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_action() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get zcurtain_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerAction, 12) as dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
        }
        set zcurtain_controller_action(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_zcurtain_controller_action() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get embedded_appliance_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.EmbeddedApplianceAction, 13) as dependency_9.com.keus.hub.EmbeddedApplianceAction;
        }
        set embedded_appliance_action(value: dependency_9.com.keus.hub.EmbeddedApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_embedded_appliance_action() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zACFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ZigbeeACFanControllerAction, 14) as dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
        }
        set zACFan_controller_action(value: dependency_10.com.keus.hub.ZigbeeACFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zACFan_controller_action() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get zDCFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.hub.ZigbeeDCFanControllerAction, 15) as dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
        }
        set zDCFan_controller_action(value: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_zDCFan_controller_action() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get zRgbwwwa_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ZigbeeRgbwwaAction, 16) as dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
        }
        set zRgbwwwa_driver_action(value: dependency_8.com.keus.hub.ZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_zRgbwwwa_driver_action() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get zsc_relay_action() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.hub.SmartConsoleRelayAction, 17) as dependency_12.com.keus.hub.SmartConsoleRelayAction;
        }
        set zsc_relay_action(value: dependency_12.com.keus.hub.SmartConsoleRelayAction) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_zsc_relay_action() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get zir_blaster_action() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.hub.ZigbeeIRBlasterAction, 18) as dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
        }
        set zir_blaster_action(value: dependency_13.com.keus.hub.ZigbeeIRBlasterAction) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_zir_blaster_action() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get scene_action() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.hub.ExecuteScene, 19) as dependency_14.com.keus.hub.ExecuteScene;
        }
        set scene_action(value: dependency_14.com.keus.hub.ExecuteScene) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_scene_action() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get grp_onoff_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupOnOffApplianceAction, 25) as dependency_9.com.keus.hub.GroupOnOffApplianceAction;
        }
        set grp_onoff_action(value: dependency_9.com.keus.hub.GroupOnOffApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_grp_onoff_action() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get grp_singledimmer_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction, 26) as dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
        }
        set grp_singledimmer_action(value: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_grp_singledimmer_action() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get grp_fan_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupFanApplianceAction, 27) as dependency_9.com.keus.hub.GroupFanApplianceAction;
        }
        set grp_fan_action(value: dependency_9.com.keus.hub.GroupFanApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_grp_fan_action() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get grp_colortunable_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupColorTunableApplianceAction, 28) as dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
        }
        set grp_colortunable_action(value: dependency_9.com.keus.hub.GroupColorTunableApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_grp_colortunable_action() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get grp_zrgbwwa_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction, 29) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
        }
        set grp_zrgbwwa_action(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
        }
        get has_grp_zrgbwwa_action() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get dcolortunable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction, 30) as dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction;
        }
        set dcolortunable_driver_action(value: dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_action() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get zcs_action() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.ContactSensorScheduleAction, 40) as dependency_15.com.keus.hub.ContactSensorScheduleAction;
        }
        set zcs_action(value: dependency_15.com.keus.hub.ContactSensorScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 40, this.#one_of_decls[0], value);
        }
        get has_zcs_action() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get gmschedule_action() {
            return pb_1.Message.getWrapperField(this, GMScheduleAction, 51) as GMScheduleAction;
        }
        set gmschedule_action(value: GMScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 51, this.#one_of_decls[0], value);
        }
        get has_gmschedule_action() {
            return pb_1.Message.getField(this, 51) != null;
        }
        get schedule_section() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set schedule_section(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get active_status() {
            return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
        }
        set active_status(value: boolean) {
            pb_1.Message.setField(this, 21, value);
        }
        get force_execute() {
            return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
        }
        set force_execute(value: boolean) {
            pb_1.Message.setField(this, 31, value);
        }
        get schedule_action() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_action" | "znondimmable_driver_action" | "ddimmable_driver_action" | "dnondimmable_driver_action" | "zcurtain_controller_action" | "embedded_appliance_action" | "zACFan_controller_action" | "zDCFan_controller_action" | "zRgbwwwa_driver_action" | "zsc_relay_action" | "zir_blaster_action" | "scene_action" | "grp_onoff_action" | "grp_singledimmer_action" | "grp_fan_action" | "grp_colortunable_action" | "grp_zrgbwwa_action" | "dcolortunable_driver_action" | "zcs_action" | "gmschedule_action";
            } = {
                0: "none",
                8: "zdimmable_driver_action",
                9: "znondimmable_driver_action",
                10: "ddimmable_driver_action",
                11: "dnondimmable_driver_action",
                12: "zcurtain_controller_action",
                13: "embedded_appliance_action",
                14: "zACFan_controller_action",
                15: "zDCFan_controller_action",
                16: "zRgbwwwa_driver_action",
                17: "zsc_relay_action",
                18: "zir_blaster_action",
                19: "scene_action",
                25: "grp_onoff_action",
                26: "grp_singledimmer_action",
                27: "grp_fan_action",
                28: "grp_colortunable_action",
                29: "grp_zrgbwwa_action",
                30: "dcolortunable_driver_action",
                40: "zcs_action",
                51: "gmschedule_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 40, 51])];
        }
        static fromObject(data: {
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_room?: string;
            start_time?: number;
            end_time?: number;
            repeat?: string[];
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
            znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
            ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
            dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
            zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
            embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
            zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
            zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
            zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
            zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
            zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
            scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
            grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
            grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
            grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
            grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
            grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
            dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.prototype.toObject>;
            zcs_action?: ReturnType<typeof dependency_15.com.keus.hub.ContactSensorScheduleAction.prototype.toObject>;
            gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
            schedule_section?: string;
            active_status?: boolean;
            force_execute?: boolean;
        }): CreateSchedule {
            const message = new CreateSchedule({});
            if (data.schedule_name != null) {
                message.schedule_name = data.schedule_name;
            }
            if (data.schedule_type != null) {
                message.schedule_type = data.schedule_type;
            }
            if (data.schedule_room != null) {
                message.schedule_room = data.schedule_room;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.repeat != null) {
                message.repeat = data.repeat;
            }
            if (data.schedule_action_type != null) {
                message.schedule_action_type = data.schedule_action_type;
            }
            if (data.zdimmable_driver_action != null) {
                message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.fromObject(data.zdimmable_driver_action);
            }
            if (data.znondimmable_driver_action != null) {
                message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.fromObject(data.znondimmable_driver_action);
            }
            if (data.ddimmable_driver_action != null) {
                message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.fromObject(data.ddimmable_driver_action);
            }
            if (data.dnondimmable_driver_action != null) {
                message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.fromObject(data.dnondimmable_driver_action);
            }
            if (data.zcurtain_controller_action != null) {
                message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.fromObject(data.zcurtain_controller_action);
            }
            if (data.embedded_appliance_action != null) {
                message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.fromObject(data.embedded_appliance_action);
            }
            if (data.zACFan_controller_action != null) {
                message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.fromObject(data.zACFan_controller_action);
            }
            if (data.zDCFan_controller_action != null) {
                message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.fromObject(data.zDCFan_controller_action);
            }
            if (data.zRgbwwwa_driver_action != null) {
                message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.fromObject(data.zRgbwwwa_driver_action);
            }
            if (data.zsc_relay_action != null) {
                message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.fromObject(data.zsc_relay_action);
            }
            if (data.zir_blaster_action != null) {
                message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.fromObject(data.zir_blaster_action);
            }
            if (data.scene_action != null) {
                message.scene_action = dependency_14.com.keus.hub.ExecuteScene.fromObject(data.scene_action);
            }
            if (data.grp_onoff_action != null) {
                message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.fromObject(data.grp_onoff_action);
            }
            if (data.grp_singledimmer_action != null) {
                message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.fromObject(data.grp_singledimmer_action);
            }
            if (data.grp_fan_action != null) {
                message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.fromObject(data.grp_fan_action);
            }
            if (data.grp_colortunable_action != null) {
                message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.fromObject(data.grp_colortunable_action);
            }
            if (data.grp_zrgbwwa_action != null) {
                message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.fromObject(data.grp_zrgbwwa_action);
            }
            if (data.dcolortunable_driver_action != null) {
                message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.fromObject(data.dcolortunable_driver_action);
            }
            if (data.zcs_action != null) {
                message.zcs_action = dependency_15.com.keus.hub.ContactSensorScheduleAction.fromObject(data.zcs_action);
            }
            if (data.gmschedule_action != null) {
                message.gmschedule_action = GMScheduleAction.fromObject(data.gmschedule_action);
            }
            if (data.schedule_section != null) {
                message.schedule_section = data.schedule_section;
            }
            if (data.active_status != null) {
                message.active_status = data.active_status;
            }
            if (data.force_execute != null) {
                message.force_execute = data.force_execute;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_name?: string;
                schedule_type?: SCHEDULE_TYPE;
                schedule_room?: string;
                start_time?: number;
                end_time?: number;
                repeat?: string[];
                schedule_action_type?: SCHEDULE_ACTION_TYPE;
                zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
                znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
                ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
                dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
                zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
                embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
                zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
                zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
                zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
                zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
                zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
                scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
                grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
                grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
                grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
                grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
                grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
                dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.prototype.toObject>;
                zcs_action?: ReturnType<typeof dependency_15.com.keus.hub.ContactSensorScheduleAction.prototype.toObject>;
                gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
                schedule_section?: string;
                active_status?: boolean;
                force_execute?: boolean;
            } = {};
            if (this.schedule_name != null) {
                data.schedule_name = this.schedule_name;
            }
            if (this.schedule_type != null) {
                data.schedule_type = this.schedule_type;
            }
            if (this.schedule_room != null) {
                data.schedule_room = this.schedule_room;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.repeat != null) {
                data.repeat = this.repeat;
            }
            if (this.schedule_action_type != null) {
                data.schedule_action_type = this.schedule_action_type;
            }
            if (this.zdimmable_driver_action != null) {
                data.zdimmable_driver_action = this.zdimmable_driver_action.toObject();
            }
            if (this.znondimmable_driver_action != null) {
                data.znondimmable_driver_action = this.znondimmable_driver_action.toObject();
            }
            if (this.ddimmable_driver_action != null) {
                data.ddimmable_driver_action = this.ddimmable_driver_action.toObject();
            }
            if (this.dnondimmable_driver_action != null) {
                data.dnondimmable_driver_action = this.dnondimmable_driver_action.toObject();
            }
            if (this.zcurtain_controller_action != null) {
                data.zcurtain_controller_action = this.zcurtain_controller_action.toObject();
            }
            if (this.embedded_appliance_action != null) {
                data.embedded_appliance_action = this.embedded_appliance_action.toObject();
            }
            if (this.zACFan_controller_action != null) {
                data.zACFan_controller_action = this.zACFan_controller_action.toObject();
            }
            if (this.zDCFan_controller_action != null) {
                data.zDCFan_controller_action = this.zDCFan_controller_action.toObject();
            }
            if (this.zRgbwwwa_driver_action != null) {
                data.zRgbwwwa_driver_action = this.zRgbwwwa_driver_action.toObject();
            }
            if (this.zsc_relay_action != null) {
                data.zsc_relay_action = this.zsc_relay_action.toObject();
            }
            if (this.zir_blaster_action != null) {
                data.zir_blaster_action = this.zir_blaster_action.toObject();
            }
            if (this.scene_action != null) {
                data.scene_action = this.scene_action.toObject();
            }
            if (this.grp_onoff_action != null) {
                data.grp_onoff_action = this.grp_onoff_action.toObject();
            }
            if (this.grp_singledimmer_action != null) {
                data.grp_singledimmer_action = this.grp_singledimmer_action.toObject();
            }
            if (this.grp_fan_action != null) {
                data.grp_fan_action = this.grp_fan_action.toObject();
            }
            if (this.grp_colortunable_action != null) {
                data.grp_colortunable_action = this.grp_colortunable_action.toObject();
            }
            if (this.grp_zrgbwwa_action != null) {
                data.grp_zrgbwwa_action = this.grp_zrgbwwa_action.toObject();
            }
            if (this.dcolortunable_driver_action != null) {
                data.dcolortunable_driver_action = this.dcolortunable_driver_action.toObject();
            }
            if (this.zcs_action != null) {
                data.zcs_action = this.zcs_action.toObject();
            }
            if (this.gmschedule_action != null) {
                data.gmschedule_action = this.gmschedule_action.toObject();
            }
            if (this.schedule_section != null) {
                data.schedule_section = this.schedule_section;
            }
            if (this.active_status != null) {
                data.active_status = this.active_status;
            }
            if (this.force_execute != null) {
                data.force_execute = this.force_execute;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_name.length)
                writer.writeString(1, this.schedule_name);
            if (this.schedule_type != SCHEDULE_TYPE.SCHEDULE)
                writer.writeEnum(2, this.schedule_type);
            if (this.schedule_room.length)
                writer.writeString(3, this.schedule_room);
            if (this.start_time != 0)
                writer.writeUint64(4, this.start_time);
            if (this.end_time != 0)
                writer.writeUint64(5, this.end_time);
            if (this.repeat.length)
                writer.writeRepeatedString(6, this.repeat);
            if (this.schedule_action_type != SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER)
                writer.writeEnum(7, this.schedule_action_type);
            if (this.has_zdimmable_driver_action)
                writer.writeMessage(8, this.zdimmable_driver_action, () => this.zdimmable_driver_action.serialize(writer));
            if (this.has_znondimmable_driver_action)
                writer.writeMessage(9, this.znondimmable_driver_action, () => this.znondimmable_driver_action.serialize(writer));
            if (this.has_ddimmable_driver_action)
                writer.writeMessage(10, this.ddimmable_driver_action, () => this.ddimmable_driver_action.serialize(writer));
            if (this.has_dnondimmable_driver_action)
                writer.writeMessage(11, this.dnondimmable_driver_action, () => this.dnondimmable_driver_action.serialize(writer));
            if (this.has_zcurtain_controller_action)
                writer.writeMessage(12, this.zcurtain_controller_action, () => this.zcurtain_controller_action.serialize(writer));
            if (this.has_embedded_appliance_action)
                writer.writeMessage(13, this.embedded_appliance_action, () => this.embedded_appliance_action.serialize(writer));
            if (this.has_zACFan_controller_action)
                writer.writeMessage(14, this.zACFan_controller_action, () => this.zACFan_controller_action.serialize(writer));
            if (this.has_zDCFan_controller_action)
                writer.writeMessage(15, this.zDCFan_controller_action, () => this.zDCFan_controller_action.serialize(writer));
            if (this.has_zRgbwwwa_driver_action)
                writer.writeMessage(16, this.zRgbwwwa_driver_action, () => this.zRgbwwwa_driver_action.serialize(writer));
            if (this.has_zsc_relay_action)
                writer.writeMessage(17, this.zsc_relay_action, () => this.zsc_relay_action.serialize(writer));
            if (this.has_zir_blaster_action)
                writer.writeMessage(18, this.zir_blaster_action, () => this.zir_blaster_action.serialize(writer));
            if (this.has_scene_action)
                writer.writeMessage(19, this.scene_action, () => this.scene_action.serialize(writer));
            if (this.has_grp_onoff_action)
                writer.writeMessage(25, this.grp_onoff_action, () => this.grp_onoff_action.serialize(writer));
            if (this.has_grp_singledimmer_action)
                writer.writeMessage(26, this.grp_singledimmer_action, () => this.grp_singledimmer_action.serialize(writer));
            if (this.has_grp_fan_action)
                writer.writeMessage(27, this.grp_fan_action, () => this.grp_fan_action.serialize(writer));
            if (this.has_grp_colortunable_action)
                writer.writeMessage(28, this.grp_colortunable_action, () => this.grp_colortunable_action.serialize(writer));
            if (this.has_grp_zrgbwwa_action)
                writer.writeMessage(29, this.grp_zrgbwwa_action, () => this.grp_zrgbwwa_action.serialize(writer));
            if (this.has_dcolortunable_driver_action)
                writer.writeMessage(30, this.dcolortunable_driver_action, () => this.dcolortunable_driver_action.serialize(writer));
            if (this.has_zcs_action)
                writer.writeMessage(40, this.zcs_action, () => this.zcs_action.serialize(writer));
            if (this.has_gmschedule_action)
                writer.writeMessage(51, this.gmschedule_action, () => this.gmschedule_action.serialize(writer));
            if (this.schedule_section.length)
                writer.writeString(20, this.schedule_section);
            if (this.active_status != false)
                writer.writeBool(21, this.active_status);
            if (this.force_execute != false)
                writer.writeBool(31, this.force_execute);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_name = reader.readString();
                        break;
                    case 2:
                        message.schedule_type = reader.readEnum();
                        break;
                    case 3:
                        message.schedule_room = reader.readString();
                        break;
                    case 4:
                        message.start_time = reader.readUint64();
                        break;
                    case 5:
                        message.end_time = reader.readUint64();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.schedule_action_type = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message.zdimmable_driver_action, () => message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.znondimmable_driver_action, () => message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.ddimmable_driver_action, () => message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.dnondimmable_driver_action, () => message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.zcurtain_controller_action, () => message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.embedded_appliance_action, () => message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zACFan_controller_action, () => message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.zDCFan_controller_action, () => message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.zRgbwwwa_driver_action, () => message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.zsc_relay_action, () => message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.zir_blaster_action, () => message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.scene_action, () => message.scene_action = dependency_14.com.keus.hub.ExecuteScene.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.grp_onoff_action, () => message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.grp_singledimmer_action, () => message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.grp_fan_action, () => message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.grp_colortunable_action, () => message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.grp_zrgbwwa_action, () => message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.dcolortunable_driver_action, () => message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.deserialize(reader));
                        break;
                    case 40:
                        reader.readMessage(message.zcs_action, () => message.zcs_action = dependency_15.com.keus.hub.ContactSensorScheduleAction.deserialize(reader));
                        break;
                    case 51:
                        reader.readMessage(message.gmschedule_action, () => message.gmschedule_action = GMScheduleAction.deserialize(reader));
                        break;
                    case 20:
                        message.schedule_section = reader.readString();
                        break;
                    case 21:
                        message.active_status = reader.readBool();
                        break;
                    case 31:
                        message.force_execute = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSchedule {
            return CreateSchedule.deserialize(bytes);
        }
    }
    export class CreateScheduleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            schedule_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set schedule_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            schedule_id?: string;
            ops_message?: string;
        }): CreateScheduleResponse {
            const message = new CreateScheduleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                schedule_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.schedule_id.length)
                writer.writeString(4, this.schedule_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateScheduleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateScheduleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.schedule_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateScheduleResponse {
            return CreateScheduleResponse.deserialize(bytes);
        }
    }
    export class EditSchedule extends pb_1.Message {
        #one_of_decls: number[][] = [[8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 40, 51]];
        constructor(data?: any[] | ({
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_room?: string;
            start_time?: number;
            end_time?: number;
            repeat?: string[];
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            schedule_section?: string;
            schedule_id?: string;
            force_execute?: boolean;
        } & (({
            zdimmable_driver_action?: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: dependency_4.com.keus.hub.DaliDimmableDriverAction;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: dependency_9.com.keus.hub.EmbeddedApplianceAction;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: dependency_12.com.keus.hub.SmartConsoleRelayAction;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: dependency_14.com.keus.hub.ExecuteScene;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: dependency_9.com.keus.hub.GroupOnOffApplianceAction;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: dependency_9.com.keus.hub.GroupFanApplianceAction;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: dependency_15.com.keus.hub.ContactSensorScheduleAction;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: GMScheduleAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_name" in data && data.schedule_name != undefined) {
                    this.schedule_name = data.schedule_name;
                }
                if ("schedule_type" in data && data.schedule_type != undefined) {
                    this.schedule_type = data.schedule_type;
                }
                if ("schedule_room" in data && data.schedule_room != undefined) {
                    this.schedule_room = data.schedule_room;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("repeat" in data && data.repeat != undefined) {
                    this.repeat = data.repeat;
                }
                if ("schedule_action_type" in data && data.schedule_action_type != undefined) {
                    this.schedule_action_type = data.schedule_action_type;
                }
                if ("zdimmable_driver_action" in data && data.zdimmable_driver_action != undefined) {
                    this.zdimmable_driver_action = data.zdimmable_driver_action;
                }
                if ("znondimmable_driver_action" in data && data.znondimmable_driver_action != undefined) {
                    this.znondimmable_driver_action = data.znondimmable_driver_action;
                }
                if ("ddimmable_driver_action" in data && data.ddimmable_driver_action != undefined) {
                    this.ddimmable_driver_action = data.ddimmable_driver_action;
                }
                if ("dnondimmable_driver_action" in data && data.dnondimmable_driver_action != undefined) {
                    this.dnondimmable_driver_action = data.dnondimmable_driver_action;
                }
                if ("zcurtain_controller_action" in data && data.zcurtain_controller_action != undefined) {
                    this.zcurtain_controller_action = data.zcurtain_controller_action;
                }
                if ("embedded_appliance_action" in data && data.embedded_appliance_action != undefined) {
                    this.embedded_appliance_action = data.embedded_appliance_action;
                }
                if ("zACFan_controller_action" in data && data.zACFan_controller_action != undefined) {
                    this.zACFan_controller_action = data.zACFan_controller_action;
                }
                if ("zDCFan_controller_action" in data && data.zDCFan_controller_action != undefined) {
                    this.zDCFan_controller_action = data.zDCFan_controller_action;
                }
                if ("zRgbwwwa_driver_action" in data && data.zRgbwwwa_driver_action != undefined) {
                    this.zRgbwwwa_driver_action = data.zRgbwwwa_driver_action;
                }
                if ("zsc_relay_action" in data && data.zsc_relay_action != undefined) {
                    this.zsc_relay_action = data.zsc_relay_action;
                }
                if ("zir_blaster_action" in data && data.zir_blaster_action != undefined) {
                    this.zir_blaster_action = data.zir_blaster_action;
                }
                if ("scene_action" in data && data.scene_action != undefined) {
                    this.scene_action = data.scene_action;
                }
                if ("grp_onoff_action" in data && data.grp_onoff_action != undefined) {
                    this.grp_onoff_action = data.grp_onoff_action;
                }
                if ("grp_singledimmer_action" in data && data.grp_singledimmer_action != undefined) {
                    this.grp_singledimmer_action = data.grp_singledimmer_action;
                }
                if ("grp_fan_action" in data && data.grp_fan_action != undefined) {
                    this.grp_fan_action = data.grp_fan_action;
                }
                if ("grp_colortunable_action" in data && data.grp_colortunable_action != undefined) {
                    this.grp_colortunable_action = data.grp_colortunable_action;
                }
                if ("grp_zrgbwwa_action" in data && data.grp_zrgbwwa_action != undefined) {
                    this.grp_zrgbwwa_action = data.grp_zrgbwwa_action;
                }
                if ("dcolortunable_driver_action" in data && data.dcolortunable_driver_action != undefined) {
                    this.dcolortunable_driver_action = data.dcolortunable_driver_action;
                }
                if ("zcs_action" in data && data.zcs_action != undefined) {
                    this.zcs_action = data.zcs_action;
                }
                if ("gmschedule_action" in data && data.gmschedule_action != undefined) {
                    this.gmschedule_action = data.gmschedule_action;
                }
                if ("schedule_section" in data && data.schedule_section != undefined) {
                    this.schedule_section = data.schedule_section;
                }
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
                if ("force_execute" in data && data.force_execute != undefined) {
                    this.force_execute = data.force_execute;
                }
            }
        }
        get schedule_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, SCHEDULE_TYPE.SCHEDULE) as SCHEDULE_TYPE;
        }
        set schedule_type(value: SCHEDULE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get schedule_room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set schedule_room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get repeat() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set repeat(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get schedule_action_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER) as SCHEDULE_ACTION_TYPE;
        }
        set schedule_action_type(value: SCHEDULE_ACTION_TYPE) {
            pb_1.Message.setField(this, 7, value);
        }
        get zdimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverAction, 8) as dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
        }
        set zdimmable_driver_action(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_action() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get znondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction, 9) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
        }
        set znondimmable_driver_action(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_action() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get ddimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverAction, 10) as dependency_4.com.keus.hub.DaliDimmableDriverAction;
        }
        set ddimmable_driver_action(value: dependency_4.com.keus.hub.DaliDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_action() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get dnondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverAction, 11) as dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
        }
        set dnondimmable_driver_action(value: dependency_6.com.keus.hub.DaliNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_action() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get zcurtain_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerAction, 12) as dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
        }
        set zcurtain_controller_action(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_zcurtain_controller_action() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get embedded_appliance_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.EmbeddedApplianceAction, 13) as dependency_9.com.keus.hub.EmbeddedApplianceAction;
        }
        set embedded_appliance_action(value: dependency_9.com.keus.hub.EmbeddedApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_embedded_appliance_action() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zACFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ZigbeeACFanControllerAction, 14) as dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
        }
        set zACFan_controller_action(value: dependency_10.com.keus.hub.ZigbeeACFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zACFan_controller_action() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get zDCFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.hub.ZigbeeDCFanControllerAction, 15) as dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
        }
        set zDCFan_controller_action(value: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_zDCFan_controller_action() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get zRgbwwwa_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ZigbeeRgbwwaAction, 16) as dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
        }
        set zRgbwwwa_driver_action(value: dependency_8.com.keus.hub.ZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_zRgbwwwa_driver_action() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get zsc_relay_action() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.hub.SmartConsoleRelayAction, 17) as dependency_12.com.keus.hub.SmartConsoleRelayAction;
        }
        set zsc_relay_action(value: dependency_12.com.keus.hub.SmartConsoleRelayAction) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_zsc_relay_action() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get zir_blaster_action() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.hub.ZigbeeIRBlasterAction, 18) as dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
        }
        set zir_blaster_action(value: dependency_13.com.keus.hub.ZigbeeIRBlasterAction) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_zir_blaster_action() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get scene_action() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.hub.ExecuteScene, 19) as dependency_14.com.keus.hub.ExecuteScene;
        }
        set scene_action(value: dependency_14.com.keus.hub.ExecuteScene) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_scene_action() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get grp_onoff_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupOnOffApplianceAction, 25) as dependency_9.com.keus.hub.GroupOnOffApplianceAction;
        }
        set grp_onoff_action(value: dependency_9.com.keus.hub.GroupOnOffApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_grp_onoff_action() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get grp_singledimmer_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction, 26) as dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
        }
        set grp_singledimmer_action(value: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_grp_singledimmer_action() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get grp_fan_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupFanApplianceAction, 27) as dependency_9.com.keus.hub.GroupFanApplianceAction;
        }
        set grp_fan_action(value: dependency_9.com.keus.hub.GroupFanApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_grp_fan_action() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get grp_colortunable_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupColorTunableApplianceAction, 28) as dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
        }
        set grp_colortunable_action(value: dependency_9.com.keus.hub.GroupColorTunableApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_grp_colortunable_action() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get grp_zrgbwwa_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction, 29) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
        }
        set grp_zrgbwwa_action(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
        }
        get has_grp_zrgbwwa_action() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get dcolortunable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction, 30) as dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction;
        }
        set dcolortunable_driver_action(value: dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_action() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get zcs_action() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.ContactSensorScheduleAction, 40) as dependency_15.com.keus.hub.ContactSensorScheduleAction;
        }
        set zcs_action(value: dependency_15.com.keus.hub.ContactSensorScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 40, this.#one_of_decls[0], value);
        }
        get has_zcs_action() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get gmschedule_action() {
            return pb_1.Message.getWrapperField(this, GMScheduleAction, 51) as GMScheduleAction;
        }
        set gmschedule_action(value: GMScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 51, this.#one_of_decls[0], value);
        }
        get has_gmschedule_action() {
            return pb_1.Message.getField(this, 51) != null;
        }
        get schedule_section() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set schedule_section(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set schedule_id(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get force_execute() {
            return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
        }
        set force_execute(value: boolean) {
            pb_1.Message.setField(this, 31, value);
        }
        get schedule_action() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_action" | "znondimmable_driver_action" | "ddimmable_driver_action" | "dnondimmable_driver_action" | "zcurtain_controller_action" | "embedded_appliance_action" | "zACFan_controller_action" | "zDCFan_controller_action" | "zRgbwwwa_driver_action" | "zsc_relay_action" | "zir_blaster_action" | "scene_action" | "grp_onoff_action" | "grp_singledimmer_action" | "grp_fan_action" | "grp_colortunable_action" | "grp_zrgbwwa_action" | "dcolortunable_driver_action" | "zcs_action" | "gmschedule_action";
            } = {
                0: "none",
                8: "zdimmable_driver_action",
                9: "znondimmable_driver_action",
                10: "ddimmable_driver_action",
                11: "dnondimmable_driver_action",
                12: "zcurtain_controller_action",
                13: "embedded_appliance_action",
                14: "zACFan_controller_action",
                15: "zDCFan_controller_action",
                16: "zRgbwwwa_driver_action",
                17: "zsc_relay_action",
                18: "zir_blaster_action",
                19: "scene_action",
                25: "grp_onoff_action",
                26: "grp_singledimmer_action",
                27: "grp_fan_action",
                28: "grp_colortunable_action",
                29: "grp_zrgbwwa_action",
                30: "dcolortunable_driver_action",
                40: "zcs_action",
                51: "gmschedule_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 40, 51])];
        }
        static fromObject(data: {
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_room?: string;
            start_time?: number;
            end_time?: number;
            repeat?: string[];
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
            znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
            ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
            dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
            zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
            embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
            zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
            zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
            zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
            zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
            zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
            scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
            grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
            grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
            grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
            grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
            grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
            dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.prototype.toObject>;
            zcs_action?: ReturnType<typeof dependency_15.com.keus.hub.ContactSensorScheduleAction.prototype.toObject>;
            gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
            schedule_section?: string;
            schedule_id?: string;
            force_execute?: boolean;
        }): EditSchedule {
            const message = new EditSchedule({});
            if (data.schedule_name != null) {
                message.schedule_name = data.schedule_name;
            }
            if (data.schedule_type != null) {
                message.schedule_type = data.schedule_type;
            }
            if (data.schedule_room != null) {
                message.schedule_room = data.schedule_room;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.repeat != null) {
                message.repeat = data.repeat;
            }
            if (data.schedule_action_type != null) {
                message.schedule_action_type = data.schedule_action_type;
            }
            if (data.zdimmable_driver_action != null) {
                message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.fromObject(data.zdimmable_driver_action);
            }
            if (data.znondimmable_driver_action != null) {
                message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.fromObject(data.znondimmable_driver_action);
            }
            if (data.ddimmable_driver_action != null) {
                message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.fromObject(data.ddimmable_driver_action);
            }
            if (data.dnondimmable_driver_action != null) {
                message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.fromObject(data.dnondimmable_driver_action);
            }
            if (data.zcurtain_controller_action != null) {
                message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.fromObject(data.zcurtain_controller_action);
            }
            if (data.embedded_appliance_action != null) {
                message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.fromObject(data.embedded_appliance_action);
            }
            if (data.zACFan_controller_action != null) {
                message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.fromObject(data.zACFan_controller_action);
            }
            if (data.zDCFan_controller_action != null) {
                message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.fromObject(data.zDCFan_controller_action);
            }
            if (data.zRgbwwwa_driver_action != null) {
                message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.fromObject(data.zRgbwwwa_driver_action);
            }
            if (data.zsc_relay_action != null) {
                message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.fromObject(data.zsc_relay_action);
            }
            if (data.zir_blaster_action != null) {
                message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.fromObject(data.zir_blaster_action);
            }
            if (data.scene_action != null) {
                message.scene_action = dependency_14.com.keus.hub.ExecuteScene.fromObject(data.scene_action);
            }
            if (data.grp_onoff_action != null) {
                message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.fromObject(data.grp_onoff_action);
            }
            if (data.grp_singledimmer_action != null) {
                message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.fromObject(data.grp_singledimmer_action);
            }
            if (data.grp_fan_action != null) {
                message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.fromObject(data.grp_fan_action);
            }
            if (data.grp_colortunable_action != null) {
                message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.fromObject(data.grp_colortunable_action);
            }
            if (data.grp_zrgbwwa_action != null) {
                message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.fromObject(data.grp_zrgbwwa_action);
            }
            if (data.dcolortunable_driver_action != null) {
                message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.fromObject(data.dcolortunable_driver_action);
            }
            if (data.zcs_action != null) {
                message.zcs_action = dependency_15.com.keus.hub.ContactSensorScheduleAction.fromObject(data.zcs_action);
            }
            if (data.gmschedule_action != null) {
                message.gmschedule_action = GMScheduleAction.fromObject(data.gmschedule_action);
            }
            if (data.schedule_section != null) {
                message.schedule_section = data.schedule_section;
            }
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            if (data.force_execute != null) {
                message.force_execute = data.force_execute;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_name?: string;
                schedule_type?: SCHEDULE_TYPE;
                schedule_room?: string;
                start_time?: number;
                end_time?: number;
                repeat?: string[];
                schedule_action_type?: SCHEDULE_ACTION_TYPE;
                zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
                znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
                ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
                dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
                zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
                embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
                zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
                zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
                zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
                zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
                zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
                scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
                grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
                grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
                grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
                grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
                grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
                dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.prototype.toObject>;
                zcs_action?: ReturnType<typeof dependency_15.com.keus.hub.ContactSensorScheduleAction.prototype.toObject>;
                gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
                schedule_section?: string;
                schedule_id?: string;
                force_execute?: boolean;
            } = {};
            if (this.schedule_name != null) {
                data.schedule_name = this.schedule_name;
            }
            if (this.schedule_type != null) {
                data.schedule_type = this.schedule_type;
            }
            if (this.schedule_room != null) {
                data.schedule_room = this.schedule_room;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.repeat != null) {
                data.repeat = this.repeat;
            }
            if (this.schedule_action_type != null) {
                data.schedule_action_type = this.schedule_action_type;
            }
            if (this.zdimmable_driver_action != null) {
                data.zdimmable_driver_action = this.zdimmable_driver_action.toObject();
            }
            if (this.znondimmable_driver_action != null) {
                data.znondimmable_driver_action = this.znondimmable_driver_action.toObject();
            }
            if (this.ddimmable_driver_action != null) {
                data.ddimmable_driver_action = this.ddimmable_driver_action.toObject();
            }
            if (this.dnondimmable_driver_action != null) {
                data.dnondimmable_driver_action = this.dnondimmable_driver_action.toObject();
            }
            if (this.zcurtain_controller_action != null) {
                data.zcurtain_controller_action = this.zcurtain_controller_action.toObject();
            }
            if (this.embedded_appliance_action != null) {
                data.embedded_appliance_action = this.embedded_appliance_action.toObject();
            }
            if (this.zACFan_controller_action != null) {
                data.zACFan_controller_action = this.zACFan_controller_action.toObject();
            }
            if (this.zDCFan_controller_action != null) {
                data.zDCFan_controller_action = this.zDCFan_controller_action.toObject();
            }
            if (this.zRgbwwwa_driver_action != null) {
                data.zRgbwwwa_driver_action = this.zRgbwwwa_driver_action.toObject();
            }
            if (this.zsc_relay_action != null) {
                data.zsc_relay_action = this.zsc_relay_action.toObject();
            }
            if (this.zir_blaster_action != null) {
                data.zir_blaster_action = this.zir_blaster_action.toObject();
            }
            if (this.scene_action != null) {
                data.scene_action = this.scene_action.toObject();
            }
            if (this.grp_onoff_action != null) {
                data.grp_onoff_action = this.grp_onoff_action.toObject();
            }
            if (this.grp_singledimmer_action != null) {
                data.grp_singledimmer_action = this.grp_singledimmer_action.toObject();
            }
            if (this.grp_fan_action != null) {
                data.grp_fan_action = this.grp_fan_action.toObject();
            }
            if (this.grp_colortunable_action != null) {
                data.grp_colortunable_action = this.grp_colortunable_action.toObject();
            }
            if (this.grp_zrgbwwa_action != null) {
                data.grp_zrgbwwa_action = this.grp_zrgbwwa_action.toObject();
            }
            if (this.dcolortunable_driver_action != null) {
                data.dcolortunable_driver_action = this.dcolortunable_driver_action.toObject();
            }
            if (this.zcs_action != null) {
                data.zcs_action = this.zcs_action.toObject();
            }
            if (this.gmschedule_action != null) {
                data.gmschedule_action = this.gmschedule_action.toObject();
            }
            if (this.schedule_section != null) {
                data.schedule_section = this.schedule_section;
            }
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            if (this.force_execute != null) {
                data.force_execute = this.force_execute;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_name.length)
                writer.writeString(1, this.schedule_name);
            if (this.schedule_type != SCHEDULE_TYPE.SCHEDULE)
                writer.writeEnum(2, this.schedule_type);
            if (this.schedule_room.length)
                writer.writeString(3, this.schedule_room);
            if (this.start_time != 0)
                writer.writeUint64(4, this.start_time);
            if (this.end_time != 0)
                writer.writeUint64(5, this.end_time);
            if (this.repeat.length)
                writer.writeRepeatedString(6, this.repeat);
            if (this.schedule_action_type != SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER)
                writer.writeEnum(7, this.schedule_action_type);
            if (this.has_zdimmable_driver_action)
                writer.writeMessage(8, this.zdimmable_driver_action, () => this.zdimmable_driver_action.serialize(writer));
            if (this.has_znondimmable_driver_action)
                writer.writeMessage(9, this.znondimmable_driver_action, () => this.znondimmable_driver_action.serialize(writer));
            if (this.has_ddimmable_driver_action)
                writer.writeMessage(10, this.ddimmable_driver_action, () => this.ddimmable_driver_action.serialize(writer));
            if (this.has_dnondimmable_driver_action)
                writer.writeMessage(11, this.dnondimmable_driver_action, () => this.dnondimmable_driver_action.serialize(writer));
            if (this.has_zcurtain_controller_action)
                writer.writeMessage(12, this.zcurtain_controller_action, () => this.zcurtain_controller_action.serialize(writer));
            if (this.has_embedded_appliance_action)
                writer.writeMessage(13, this.embedded_appliance_action, () => this.embedded_appliance_action.serialize(writer));
            if (this.has_zACFan_controller_action)
                writer.writeMessage(14, this.zACFan_controller_action, () => this.zACFan_controller_action.serialize(writer));
            if (this.has_zDCFan_controller_action)
                writer.writeMessage(15, this.zDCFan_controller_action, () => this.zDCFan_controller_action.serialize(writer));
            if (this.has_zRgbwwwa_driver_action)
                writer.writeMessage(16, this.zRgbwwwa_driver_action, () => this.zRgbwwwa_driver_action.serialize(writer));
            if (this.has_zsc_relay_action)
                writer.writeMessage(17, this.zsc_relay_action, () => this.zsc_relay_action.serialize(writer));
            if (this.has_zir_blaster_action)
                writer.writeMessage(18, this.zir_blaster_action, () => this.zir_blaster_action.serialize(writer));
            if (this.has_scene_action)
                writer.writeMessage(19, this.scene_action, () => this.scene_action.serialize(writer));
            if (this.has_grp_onoff_action)
                writer.writeMessage(25, this.grp_onoff_action, () => this.grp_onoff_action.serialize(writer));
            if (this.has_grp_singledimmer_action)
                writer.writeMessage(26, this.grp_singledimmer_action, () => this.grp_singledimmer_action.serialize(writer));
            if (this.has_grp_fan_action)
                writer.writeMessage(27, this.grp_fan_action, () => this.grp_fan_action.serialize(writer));
            if (this.has_grp_colortunable_action)
                writer.writeMessage(28, this.grp_colortunable_action, () => this.grp_colortunable_action.serialize(writer));
            if (this.has_grp_zrgbwwa_action)
                writer.writeMessage(29, this.grp_zrgbwwa_action, () => this.grp_zrgbwwa_action.serialize(writer));
            if (this.has_dcolortunable_driver_action)
                writer.writeMessage(30, this.dcolortunable_driver_action, () => this.dcolortunable_driver_action.serialize(writer));
            if (this.has_zcs_action)
                writer.writeMessage(40, this.zcs_action, () => this.zcs_action.serialize(writer));
            if (this.has_gmschedule_action)
                writer.writeMessage(51, this.gmschedule_action, () => this.gmschedule_action.serialize(writer));
            if (this.schedule_section.length)
                writer.writeString(20, this.schedule_section);
            if (this.schedule_id.length)
                writer.writeString(21, this.schedule_id);
            if (this.force_execute != false)
                writer.writeBool(31, this.force_execute);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditSchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditSchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_name = reader.readString();
                        break;
                    case 2:
                        message.schedule_type = reader.readEnum();
                        break;
                    case 3:
                        message.schedule_room = reader.readString();
                        break;
                    case 4:
                        message.start_time = reader.readUint64();
                        break;
                    case 5:
                        message.end_time = reader.readUint64();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.schedule_action_type = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message.zdimmable_driver_action, () => message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.znondimmable_driver_action, () => message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.ddimmable_driver_action, () => message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.dnondimmable_driver_action, () => message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.zcurtain_controller_action, () => message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.embedded_appliance_action, () => message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zACFan_controller_action, () => message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.zDCFan_controller_action, () => message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.zRgbwwwa_driver_action, () => message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.zsc_relay_action, () => message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.zir_blaster_action, () => message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.scene_action, () => message.scene_action = dependency_14.com.keus.hub.ExecuteScene.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.grp_onoff_action, () => message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.grp_singledimmer_action, () => message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.grp_fan_action, () => message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.grp_colortunable_action, () => message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.grp_zrgbwwa_action, () => message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.dcolortunable_driver_action, () => message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.deserialize(reader));
                        break;
                    case 40:
                        reader.readMessage(message.zcs_action, () => message.zcs_action = dependency_15.com.keus.hub.ContactSensorScheduleAction.deserialize(reader));
                        break;
                    case 51:
                        reader.readMessage(message.gmschedule_action, () => message.gmschedule_action = GMScheduleAction.deserialize(reader));
                        break;
                    case 20:
                        message.schedule_section = reader.readString();
                        break;
                    case 21:
                        message.schedule_id = reader.readString();
                        break;
                    case 31:
                        message.force_execute = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditSchedule {
            return EditSchedule.deserialize(bytes);
        }
    }
    export class EditScheduleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EditScheduleResponse {
            const message = new EditScheduleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditScheduleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditScheduleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditScheduleResponse {
            return EditScheduleResponse.deserialize(bytes);
        }
    }
    export class EditScheduleProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_room?: string;
            start_time?: number;
            end_time?: number;
            repeat?: string[];
            schedule_id?: string;
            schedule_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_name" in data && data.schedule_name != undefined) {
                    this.schedule_name = data.schedule_name;
                }
                if ("schedule_type" in data && data.schedule_type != undefined) {
                    this.schedule_type = data.schedule_type;
                }
                if ("schedule_room" in data && data.schedule_room != undefined) {
                    this.schedule_room = data.schedule_room;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("repeat" in data && data.repeat != undefined) {
                    this.repeat = data.repeat;
                }
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
                if ("schedule_section" in data && data.schedule_section != undefined) {
                    this.schedule_section = data.schedule_section;
                }
            }
        }
        get schedule_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, SCHEDULE_TYPE.SCHEDULE) as SCHEDULE_TYPE;
        }
        set schedule_type(value: SCHEDULE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get schedule_room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set schedule_room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get repeat() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set repeat(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set schedule_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get schedule_section() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set schedule_section(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_room?: string;
            start_time?: number;
            end_time?: number;
            repeat?: string[];
            schedule_id?: string;
            schedule_section?: string;
        }): EditScheduleProperties {
            const message = new EditScheduleProperties({});
            if (data.schedule_name != null) {
                message.schedule_name = data.schedule_name;
            }
            if (data.schedule_type != null) {
                message.schedule_type = data.schedule_type;
            }
            if (data.schedule_room != null) {
                message.schedule_room = data.schedule_room;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.repeat != null) {
                message.repeat = data.repeat;
            }
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            if (data.schedule_section != null) {
                message.schedule_section = data.schedule_section;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_name?: string;
                schedule_type?: SCHEDULE_TYPE;
                schedule_room?: string;
                start_time?: number;
                end_time?: number;
                repeat?: string[];
                schedule_id?: string;
                schedule_section?: string;
            } = {};
            if (this.schedule_name != null) {
                data.schedule_name = this.schedule_name;
            }
            if (this.schedule_type != null) {
                data.schedule_type = this.schedule_type;
            }
            if (this.schedule_room != null) {
                data.schedule_room = this.schedule_room;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.repeat != null) {
                data.repeat = this.repeat;
            }
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            if (this.schedule_section != null) {
                data.schedule_section = this.schedule_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_name.length)
                writer.writeString(1, this.schedule_name);
            if (this.schedule_type != SCHEDULE_TYPE.SCHEDULE)
                writer.writeEnum(2, this.schedule_type);
            if (this.schedule_room.length)
                writer.writeString(3, this.schedule_room);
            if (this.start_time != 0)
                writer.writeUint64(4, this.start_time);
            if (this.end_time != 0)
                writer.writeUint64(5, this.end_time);
            if (this.repeat.length)
                writer.writeRepeatedString(6, this.repeat);
            if (this.schedule_id.length)
                writer.writeString(7, this.schedule_id);
            if (this.schedule_section.length)
                writer.writeString(8, this.schedule_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditScheduleProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditScheduleProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_name = reader.readString();
                        break;
                    case 2:
                        message.schedule_type = reader.readEnum();
                        break;
                    case 3:
                        message.schedule_room = reader.readString();
                        break;
                    case 4:
                        message.start_time = reader.readUint64();
                        break;
                    case 5:
                        message.end_time = reader.readUint64();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.schedule_id = reader.readString();
                        break;
                    case 8:
                        message.schedule_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditScheduleProperties {
            return EditScheduleProperties.deserialize(bytes);
        }
    }
    export class EditSchedulePropertiesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EditSchedulePropertiesResponse {
            const message = new EditSchedulePropertiesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditSchedulePropertiesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditSchedulePropertiesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditSchedulePropertiesResponse {
            return EditSchedulePropertiesResponse.deserialize(bytes);
        }
    }
    export class EditScheduleAction extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 51]];
        constructor(data?: any[] | ({
            schedule_id?: string;
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
        } & (({
            zdimmable_driver_action?: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: dependency_4.com.keus.hub.DaliDimmableDriverAction;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: dependency_9.com.keus.hub.EmbeddedApplianceAction;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: dependency_12.com.keus.hub.SmartConsoleRelayAction;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
            scene_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: dependency_14.com.keus.hub.ExecuteScene;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            gmschedule_action?: GMScheduleAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
                if ("schedule_action_type" in data && data.schedule_action_type != undefined) {
                    this.schedule_action_type = data.schedule_action_type;
                }
                if ("zdimmable_driver_action" in data && data.zdimmable_driver_action != undefined) {
                    this.zdimmable_driver_action = data.zdimmable_driver_action;
                }
                if ("znondimmable_driver_action" in data && data.znondimmable_driver_action != undefined) {
                    this.znondimmable_driver_action = data.znondimmable_driver_action;
                }
                if ("ddimmable_driver_action" in data && data.ddimmable_driver_action != undefined) {
                    this.ddimmable_driver_action = data.ddimmable_driver_action;
                }
                if ("dnondimmable_driver_action" in data && data.dnondimmable_driver_action != undefined) {
                    this.dnondimmable_driver_action = data.dnondimmable_driver_action;
                }
                if ("zcurtain_controller_action" in data && data.zcurtain_controller_action != undefined) {
                    this.zcurtain_controller_action = data.zcurtain_controller_action;
                }
                if ("embedded_appliance_action" in data && data.embedded_appliance_action != undefined) {
                    this.embedded_appliance_action = data.embedded_appliance_action;
                }
                if ("zACFan_controller_action" in data && data.zACFan_controller_action != undefined) {
                    this.zACFan_controller_action = data.zACFan_controller_action;
                }
                if ("zDCFan_controller_action" in data && data.zDCFan_controller_action != undefined) {
                    this.zDCFan_controller_action = data.zDCFan_controller_action;
                }
                if ("zRgbwwwa_driver_action" in data && data.zRgbwwwa_driver_action != undefined) {
                    this.zRgbwwwa_driver_action = data.zRgbwwwa_driver_action;
                }
                if ("zsc_relay_action" in data && data.zsc_relay_action != undefined) {
                    this.zsc_relay_action = data.zsc_relay_action;
                }
                if ("zir_blaster_action" in data && data.zir_blaster_action != undefined) {
                    this.zir_blaster_action = data.zir_blaster_action;
                }
                if ("scene_action" in data && data.scene_action != undefined) {
                    this.scene_action = data.scene_action;
                }
                if ("gmschedule_action" in data && data.gmschedule_action != undefined) {
                    this.gmschedule_action = data.gmschedule_action;
                }
            }
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule_action_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER) as SCHEDULE_ACTION_TYPE;
        }
        set schedule_action_type(value: SCHEDULE_ACTION_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get zdimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverAction, 3) as dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
        }
        set zdimmable_driver_action(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_action() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get znondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction, 4) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
        }
        set znondimmable_driver_action(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_action() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ddimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverAction, 5) as dependency_4.com.keus.hub.DaliDimmableDriverAction;
        }
        set ddimmable_driver_action(value: dependency_4.com.keus.hub.DaliDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_action() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get dnondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverAction, 6) as dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
        }
        set dnondimmable_driver_action(value: dependency_6.com.keus.hub.DaliNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_action() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get zcurtain_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerAction, 7) as dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
        }
        set zcurtain_controller_action(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_zcurtain_controller_action() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get embedded_appliance_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.EmbeddedApplianceAction, 8) as dependency_9.com.keus.hub.EmbeddedApplianceAction;
        }
        set embedded_appliance_action(value: dependency_9.com.keus.hub.EmbeddedApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_embedded_appliance_action() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get zACFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ZigbeeACFanControllerAction, 9) as dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
        }
        set zACFan_controller_action(value: dependency_10.com.keus.hub.ZigbeeACFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_zACFan_controller_action() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get zDCFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.hub.ZigbeeDCFanControllerAction, 10) as dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
        }
        set zDCFan_controller_action(value: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_zDCFan_controller_action() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get zRgbwwwa_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ZigbeeRgbwwaAction, 11) as dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
        }
        set zRgbwwwa_driver_action(value: dependency_8.com.keus.hub.ZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_zRgbwwwa_driver_action() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get zsc_relay_action() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.hub.SmartConsoleRelayAction, 12) as dependency_12.com.keus.hub.SmartConsoleRelayAction;
        }
        set zsc_relay_action(value: dependency_12.com.keus.hub.SmartConsoleRelayAction) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_zsc_relay_action() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get zir_blaster_action() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.hub.ZigbeeIRBlasterAction, 13) as dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
        }
        set zir_blaster_action(value: dependency_13.com.keus.hub.ZigbeeIRBlasterAction) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_zir_blaster_action() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get scene_action() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.hub.ExecuteScene, 14) as dependency_14.com.keus.hub.ExecuteScene;
        }
        set scene_action(value: dependency_14.com.keus.hub.ExecuteScene) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_scene_action() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get gmschedule_action() {
            return pb_1.Message.getWrapperField(this, GMScheduleAction, 51) as GMScheduleAction;
        }
        set gmschedule_action(value: GMScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 51, this.#one_of_decls[0], value);
        }
        get has_gmschedule_action() {
            return pb_1.Message.getField(this, 51) != null;
        }
        get schedule_action() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_action" | "znondimmable_driver_action" | "ddimmable_driver_action" | "dnondimmable_driver_action" | "zcurtain_controller_action" | "embedded_appliance_action" | "zACFan_controller_action" | "zDCFan_controller_action" | "zRgbwwwa_driver_action" | "zsc_relay_action" | "zir_blaster_action" | "scene_action" | "gmschedule_action";
            } = {
                0: "none",
                3: "zdimmable_driver_action",
                4: "znondimmable_driver_action",
                5: "ddimmable_driver_action",
                6: "dnondimmable_driver_action",
                7: "zcurtain_controller_action",
                8: "embedded_appliance_action",
                9: "zACFan_controller_action",
                10: "zDCFan_controller_action",
                11: "zRgbwwwa_driver_action",
                12: "zsc_relay_action",
                13: "zir_blaster_action",
                14: "scene_action",
                51: "gmschedule_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 51])];
        }
        static fromObject(data: {
            schedule_id?: string;
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
            znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
            ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
            dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
            zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
            embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
            zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
            zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
            zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
            zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
            zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
            scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
            gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
        }): EditScheduleAction {
            const message = new EditScheduleAction({});
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            if (data.schedule_action_type != null) {
                message.schedule_action_type = data.schedule_action_type;
            }
            if (data.zdimmable_driver_action != null) {
                message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.fromObject(data.zdimmable_driver_action);
            }
            if (data.znondimmable_driver_action != null) {
                message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.fromObject(data.znondimmable_driver_action);
            }
            if (data.ddimmable_driver_action != null) {
                message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.fromObject(data.ddimmable_driver_action);
            }
            if (data.dnondimmable_driver_action != null) {
                message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.fromObject(data.dnondimmable_driver_action);
            }
            if (data.zcurtain_controller_action != null) {
                message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.fromObject(data.zcurtain_controller_action);
            }
            if (data.embedded_appliance_action != null) {
                message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.fromObject(data.embedded_appliance_action);
            }
            if (data.zACFan_controller_action != null) {
                message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.fromObject(data.zACFan_controller_action);
            }
            if (data.zDCFan_controller_action != null) {
                message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.fromObject(data.zDCFan_controller_action);
            }
            if (data.zRgbwwwa_driver_action != null) {
                message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.fromObject(data.zRgbwwwa_driver_action);
            }
            if (data.zsc_relay_action != null) {
                message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.fromObject(data.zsc_relay_action);
            }
            if (data.zir_blaster_action != null) {
                message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.fromObject(data.zir_blaster_action);
            }
            if (data.scene_action != null) {
                message.scene_action = dependency_14.com.keus.hub.ExecuteScene.fromObject(data.scene_action);
            }
            if (data.gmschedule_action != null) {
                message.gmschedule_action = GMScheduleAction.fromObject(data.gmschedule_action);
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_id?: string;
                schedule_action_type?: SCHEDULE_ACTION_TYPE;
                zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
                znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
                ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
                dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
                zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
                embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
                zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
                zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
                zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
                zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
                zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
                scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
                gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
            } = {};
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            if (this.schedule_action_type != null) {
                data.schedule_action_type = this.schedule_action_type;
            }
            if (this.zdimmable_driver_action != null) {
                data.zdimmable_driver_action = this.zdimmable_driver_action.toObject();
            }
            if (this.znondimmable_driver_action != null) {
                data.znondimmable_driver_action = this.znondimmable_driver_action.toObject();
            }
            if (this.ddimmable_driver_action != null) {
                data.ddimmable_driver_action = this.ddimmable_driver_action.toObject();
            }
            if (this.dnondimmable_driver_action != null) {
                data.dnondimmable_driver_action = this.dnondimmable_driver_action.toObject();
            }
            if (this.zcurtain_controller_action != null) {
                data.zcurtain_controller_action = this.zcurtain_controller_action.toObject();
            }
            if (this.embedded_appliance_action != null) {
                data.embedded_appliance_action = this.embedded_appliance_action.toObject();
            }
            if (this.zACFan_controller_action != null) {
                data.zACFan_controller_action = this.zACFan_controller_action.toObject();
            }
            if (this.zDCFan_controller_action != null) {
                data.zDCFan_controller_action = this.zDCFan_controller_action.toObject();
            }
            if (this.zRgbwwwa_driver_action != null) {
                data.zRgbwwwa_driver_action = this.zRgbwwwa_driver_action.toObject();
            }
            if (this.zsc_relay_action != null) {
                data.zsc_relay_action = this.zsc_relay_action.toObject();
            }
            if (this.zir_blaster_action != null) {
                data.zir_blaster_action = this.zir_blaster_action.toObject();
            }
            if (this.scene_action != null) {
                data.scene_action = this.scene_action.toObject();
            }
            if (this.gmschedule_action != null) {
                data.gmschedule_action = this.gmschedule_action.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_id.length)
                writer.writeString(1, this.schedule_id);
            if (this.schedule_action_type != SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER)
                writer.writeEnum(2, this.schedule_action_type);
            if (this.has_zdimmable_driver_action)
                writer.writeMessage(3, this.zdimmable_driver_action, () => this.zdimmable_driver_action.serialize(writer));
            if (this.has_znondimmable_driver_action)
                writer.writeMessage(4, this.znondimmable_driver_action, () => this.znondimmable_driver_action.serialize(writer));
            if (this.has_ddimmable_driver_action)
                writer.writeMessage(5, this.ddimmable_driver_action, () => this.ddimmable_driver_action.serialize(writer));
            if (this.has_dnondimmable_driver_action)
                writer.writeMessage(6, this.dnondimmable_driver_action, () => this.dnondimmable_driver_action.serialize(writer));
            if (this.has_zcurtain_controller_action)
                writer.writeMessage(7, this.zcurtain_controller_action, () => this.zcurtain_controller_action.serialize(writer));
            if (this.has_embedded_appliance_action)
                writer.writeMessage(8, this.embedded_appliance_action, () => this.embedded_appliance_action.serialize(writer));
            if (this.has_zACFan_controller_action)
                writer.writeMessage(9, this.zACFan_controller_action, () => this.zACFan_controller_action.serialize(writer));
            if (this.has_zDCFan_controller_action)
                writer.writeMessage(10, this.zDCFan_controller_action, () => this.zDCFan_controller_action.serialize(writer));
            if (this.has_zRgbwwwa_driver_action)
                writer.writeMessage(11, this.zRgbwwwa_driver_action, () => this.zRgbwwwa_driver_action.serialize(writer));
            if (this.has_zsc_relay_action)
                writer.writeMessage(12, this.zsc_relay_action, () => this.zsc_relay_action.serialize(writer));
            if (this.has_zir_blaster_action)
                writer.writeMessage(13, this.zir_blaster_action, () => this.zir_blaster_action.serialize(writer));
            if (this.has_scene_action)
                writer.writeMessage(14, this.scene_action, () => this.scene_action.serialize(writer));
            if (this.has_gmschedule_action)
                writer.writeMessage(51, this.gmschedule_action, () => this.gmschedule_action.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditScheduleAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditScheduleAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_id = reader.readString();
                        break;
                    case 2:
                        message.schedule_action_type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.zdimmable_driver_action, () => message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.znondimmable_driver_action, () => message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.ddimmable_driver_action, () => message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.dnondimmable_driver_action, () => message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.zcurtain_controller_action, () => message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.embedded_appliance_action, () => message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.zACFan_controller_action, () => message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.zDCFan_controller_action, () => message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.zRgbwwwa_driver_action, () => message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.zsc_relay_action, () => message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.zir_blaster_action, () => message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.scene_action, () => message.scene_action = dependency_14.com.keus.hub.ExecuteScene.deserialize(reader));
                        break;
                    case 51:
                        reader.readMessage(message.gmschedule_action, () => message.gmschedule_action = GMScheduleAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditScheduleAction {
            return EditScheduleAction.deserialize(bytes);
        }
    }
    export class EditScheduleActionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EditScheduleActionResponse {
            const message = new EditScheduleActionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditScheduleActionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditScheduleActionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditScheduleActionResponse {
            return EditScheduleActionResponse.deserialize(bytes);
        }
    }
    export class DeleteSchedule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schedule_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
            }
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            schedule_id?: string;
        }): DeleteSchedule {
            const message = new DeleteSchedule({});
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_id?: string;
            } = {};
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_id.length)
                writer.writeString(1, this.schedule_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSchedule {
            return DeleteSchedule.deserialize(bytes);
        }
    }
    export class DeleteScheduleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): DeleteScheduleResponse {
            const message = new DeleteScheduleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteScheduleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteScheduleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteScheduleResponse {
            return DeleteScheduleResponse.deserialize(bytes);
        }
    }
    export class EnableDisableSchedule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schedule_id?: string;
            active_status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
                if ("active_status" in data && data.active_status != undefined) {
                    this.active_status = data.active_status;
                }
            }
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get active_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set active_status(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            schedule_id?: string;
            active_status?: boolean;
        }): EnableDisableSchedule {
            const message = new EnableDisableSchedule({});
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            if (data.active_status != null) {
                message.active_status = data.active_status;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_id?: string;
                active_status?: boolean;
            } = {};
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            if (this.active_status != null) {
                data.active_status = this.active_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_id.length)
                writer.writeString(1, this.schedule_id);
            if (this.active_status != false)
                writer.writeBool(2, this.active_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableDisableSchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableDisableSchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_id = reader.readString();
                        break;
                    case 2:
                        message.active_status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableDisableSchedule {
            return EnableDisableSchedule.deserialize(bytes);
        }
    }
    export class EnableDisableScheduleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EnableDisableScheduleResponse {
            const message = new EnableDisableScheduleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableDisableScheduleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableDisableScheduleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableDisableScheduleResponse {
            return EnableDisableScheduleResponse.deserialize(bytes);
        }
    }
    export class GetSchedules extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetSchedules {
            const message = new GetSchedules({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSchedules {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSchedules();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSchedules {
            return GetSchedules.deserialize(bytes);
        }
    }
    export class GetSchedulesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            schedules?: Schedule[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("schedules" in data && data.schedules != undefined) {
                    this.schedules = data.schedules;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get schedules() {
            return pb_1.Message.getRepeatedWrapperField(this, Schedule, 4) as Schedule[];
        }
        set schedules(value: Schedule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            schedules?: ReturnType<typeof Schedule.prototype.toObject>[];
            ops_message?: string;
        }): GetSchedulesResponse {
            const message = new GetSchedulesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.schedules != null) {
                message.schedules = data.schedules.map(item => Schedule.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                schedules?: ReturnType<typeof Schedule.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.schedules != null) {
                data.schedules = this.schedules.map((item: Schedule) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.schedules.length)
                writer.writeRepeatedMessage(4, this.schedules, (item: Schedule) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSchedulesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSchedulesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.schedules, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Schedule.deserialize(reader), Schedule));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSchedulesResponse {
            return GetSchedulesResponse.deserialize(bytes);
        }
    }
    export class CreatePresetSchedule extends pb_1.Message {
        #one_of_decls: number[][] = [[8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 40, 51]];
        constructor(data?: any[] | ({
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_room?: string;
            duration?: number;
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            schedule_section?: string;
            active_status?: boolean;
            force_execute?: boolean;
        } & (({
            zdimmable_driver_action?: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: dependency_4.com.keus.hub.DaliDimmableDriverAction;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: dependency_9.com.keus.hub.EmbeddedApplianceAction;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: dependency_12.com.keus.hub.SmartConsoleRelayAction;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: dependency_14.com.keus.hub.ExecuteScene;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: dependency_9.com.keus.hub.GroupOnOffApplianceAction;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: dependency_9.com.keus.hub.GroupFanApplianceAction;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction;
            zcs_action?: never;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: dependency_15.com.keus.hub.ContactSensorScheduleAction;
            gmschedule_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            scene_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            zcs_action?: never;
            gmschedule_action?: GMScheduleAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_name" in data && data.schedule_name != undefined) {
                    this.schedule_name = data.schedule_name;
                }
                if ("schedule_type" in data && data.schedule_type != undefined) {
                    this.schedule_type = data.schedule_type;
                }
                if ("schedule_room" in data && data.schedule_room != undefined) {
                    this.schedule_room = data.schedule_room;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("schedule_action_type" in data && data.schedule_action_type != undefined) {
                    this.schedule_action_type = data.schedule_action_type;
                }
                if ("zdimmable_driver_action" in data && data.zdimmable_driver_action != undefined) {
                    this.zdimmable_driver_action = data.zdimmable_driver_action;
                }
                if ("znondimmable_driver_action" in data && data.znondimmable_driver_action != undefined) {
                    this.znondimmable_driver_action = data.znondimmable_driver_action;
                }
                if ("ddimmable_driver_action" in data && data.ddimmable_driver_action != undefined) {
                    this.ddimmable_driver_action = data.ddimmable_driver_action;
                }
                if ("dnondimmable_driver_action" in data && data.dnondimmable_driver_action != undefined) {
                    this.dnondimmable_driver_action = data.dnondimmable_driver_action;
                }
                if ("zcurtain_controller_action" in data && data.zcurtain_controller_action != undefined) {
                    this.zcurtain_controller_action = data.zcurtain_controller_action;
                }
                if ("embedded_appliance_action" in data && data.embedded_appliance_action != undefined) {
                    this.embedded_appliance_action = data.embedded_appliance_action;
                }
                if ("zACFan_controller_action" in data && data.zACFan_controller_action != undefined) {
                    this.zACFan_controller_action = data.zACFan_controller_action;
                }
                if ("zDCFan_controller_action" in data && data.zDCFan_controller_action != undefined) {
                    this.zDCFan_controller_action = data.zDCFan_controller_action;
                }
                if ("zRgbwwwa_driver_action" in data && data.zRgbwwwa_driver_action != undefined) {
                    this.zRgbwwwa_driver_action = data.zRgbwwwa_driver_action;
                }
                if ("zsc_relay_action" in data && data.zsc_relay_action != undefined) {
                    this.zsc_relay_action = data.zsc_relay_action;
                }
                if ("zir_blaster_action" in data && data.zir_blaster_action != undefined) {
                    this.zir_blaster_action = data.zir_blaster_action;
                }
                if ("scene_action" in data && data.scene_action != undefined) {
                    this.scene_action = data.scene_action;
                }
                if ("grp_onoff_action" in data && data.grp_onoff_action != undefined) {
                    this.grp_onoff_action = data.grp_onoff_action;
                }
                if ("grp_singledimmer_action" in data && data.grp_singledimmer_action != undefined) {
                    this.grp_singledimmer_action = data.grp_singledimmer_action;
                }
                if ("grp_fan_action" in data && data.grp_fan_action != undefined) {
                    this.grp_fan_action = data.grp_fan_action;
                }
                if ("grp_colortunable_action" in data && data.grp_colortunable_action != undefined) {
                    this.grp_colortunable_action = data.grp_colortunable_action;
                }
                if ("grp_zrgbwwa_action" in data && data.grp_zrgbwwa_action != undefined) {
                    this.grp_zrgbwwa_action = data.grp_zrgbwwa_action;
                }
                if ("dcolortunable_driver_action" in data && data.dcolortunable_driver_action != undefined) {
                    this.dcolortunable_driver_action = data.dcolortunable_driver_action;
                }
                if ("zcs_action" in data && data.zcs_action != undefined) {
                    this.zcs_action = data.zcs_action;
                }
                if ("gmschedule_action" in data && data.gmschedule_action != undefined) {
                    this.gmschedule_action = data.gmschedule_action;
                }
                if ("schedule_section" in data && data.schedule_section != undefined) {
                    this.schedule_section = data.schedule_section;
                }
                if ("active_status" in data && data.active_status != undefined) {
                    this.active_status = data.active_status;
                }
                if ("force_execute" in data && data.force_execute != undefined) {
                    this.force_execute = data.force_execute;
                }
            }
        }
        get schedule_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, SCHEDULE_TYPE.SCHEDULE) as SCHEDULE_TYPE;
        }
        set schedule_type(value: SCHEDULE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get schedule_room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set schedule_room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get schedule_action_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER) as SCHEDULE_ACTION_TYPE;
        }
        set schedule_action_type(value: SCHEDULE_ACTION_TYPE) {
            pb_1.Message.setField(this, 7, value);
        }
        get zdimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverAction, 8) as dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
        }
        set zdimmable_driver_action(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_action() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get znondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction, 9) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
        }
        set znondimmable_driver_action(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_action() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get ddimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverAction, 10) as dependency_4.com.keus.hub.DaliDimmableDriverAction;
        }
        set ddimmable_driver_action(value: dependency_4.com.keus.hub.DaliDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_action() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get dnondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverAction, 11) as dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
        }
        set dnondimmable_driver_action(value: dependency_6.com.keus.hub.DaliNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_action() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get zcurtain_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerAction, 12) as dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
        }
        set zcurtain_controller_action(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_zcurtain_controller_action() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get embedded_appliance_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.EmbeddedApplianceAction, 13) as dependency_9.com.keus.hub.EmbeddedApplianceAction;
        }
        set embedded_appliance_action(value: dependency_9.com.keus.hub.EmbeddedApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_embedded_appliance_action() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zACFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ZigbeeACFanControllerAction, 14) as dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
        }
        set zACFan_controller_action(value: dependency_10.com.keus.hub.ZigbeeACFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zACFan_controller_action() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get zDCFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.hub.ZigbeeDCFanControllerAction, 15) as dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
        }
        set zDCFan_controller_action(value: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_zDCFan_controller_action() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get zRgbwwwa_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ZigbeeRgbwwaAction, 16) as dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
        }
        set zRgbwwwa_driver_action(value: dependency_8.com.keus.hub.ZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_zRgbwwwa_driver_action() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get zsc_relay_action() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.hub.SmartConsoleRelayAction, 17) as dependency_12.com.keus.hub.SmartConsoleRelayAction;
        }
        set zsc_relay_action(value: dependency_12.com.keus.hub.SmartConsoleRelayAction) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_zsc_relay_action() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get zir_blaster_action() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.hub.ZigbeeIRBlasterAction, 18) as dependency_13.com.keus.hub.ZigbeeIRBlasterAction;
        }
        set zir_blaster_action(value: dependency_13.com.keus.hub.ZigbeeIRBlasterAction) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_zir_blaster_action() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get scene_action() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.hub.ExecuteScene, 19) as dependency_14.com.keus.hub.ExecuteScene;
        }
        set scene_action(value: dependency_14.com.keus.hub.ExecuteScene) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_scene_action() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get grp_onoff_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupOnOffApplianceAction, 25) as dependency_9.com.keus.hub.GroupOnOffApplianceAction;
        }
        set grp_onoff_action(value: dependency_9.com.keus.hub.GroupOnOffApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_grp_onoff_action() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get grp_singledimmer_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction, 26) as dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
        }
        set grp_singledimmer_action(value: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_grp_singledimmer_action() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get grp_fan_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupFanApplianceAction, 27) as dependency_9.com.keus.hub.GroupFanApplianceAction;
        }
        set grp_fan_action(value: dependency_9.com.keus.hub.GroupFanApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_grp_fan_action() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get grp_colortunable_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupColorTunableApplianceAction, 28) as dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
        }
        set grp_colortunable_action(value: dependency_9.com.keus.hub.GroupColorTunableApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_grp_colortunable_action() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get grp_zrgbwwa_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction, 29) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
        }
        set grp_zrgbwwa_action(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
        }
        get has_grp_zrgbwwa_action() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get dcolortunable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction, 30) as dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction;
        }
        set dcolortunable_driver_action(value: dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_action() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get zcs_action() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.ContactSensorScheduleAction, 40) as dependency_15.com.keus.hub.ContactSensorScheduleAction;
        }
        set zcs_action(value: dependency_15.com.keus.hub.ContactSensorScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 40, this.#one_of_decls[0], value);
        }
        get has_zcs_action() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get gmschedule_action() {
            return pb_1.Message.getWrapperField(this, GMScheduleAction, 51) as GMScheduleAction;
        }
        set gmschedule_action(value: GMScheduleAction) {
            pb_1.Message.setOneofWrapperField(this, 51, this.#one_of_decls[0], value);
        }
        get has_gmschedule_action() {
            return pb_1.Message.getField(this, 51) != null;
        }
        get schedule_section() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set schedule_section(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get active_status() {
            return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
        }
        set active_status(value: boolean) {
            pb_1.Message.setField(this, 21, value);
        }
        get force_execute() {
            return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
        }
        set force_execute(value: boolean) {
            pb_1.Message.setField(this, 31, value);
        }
        get schedule_action() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_action" | "znondimmable_driver_action" | "ddimmable_driver_action" | "dnondimmable_driver_action" | "zcurtain_controller_action" | "embedded_appliance_action" | "zACFan_controller_action" | "zDCFan_controller_action" | "zRgbwwwa_driver_action" | "zsc_relay_action" | "zir_blaster_action" | "scene_action" | "grp_onoff_action" | "grp_singledimmer_action" | "grp_fan_action" | "grp_colortunable_action" | "grp_zrgbwwa_action" | "dcolortunable_driver_action" | "zcs_action" | "gmschedule_action";
            } = {
                0: "none",
                8: "zdimmable_driver_action",
                9: "znondimmable_driver_action",
                10: "ddimmable_driver_action",
                11: "dnondimmable_driver_action",
                12: "zcurtain_controller_action",
                13: "embedded_appliance_action",
                14: "zACFan_controller_action",
                15: "zDCFan_controller_action",
                16: "zRgbwwwa_driver_action",
                17: "zsc_relay_action",
                18: "zir_blaster_action",
                19: "scene_action",
                25: "grp_onoff_action",
                26: "grp_singledimmer_action",
                27: "grp_fan_action",
                28: "grp_colortunable_action",
                29: "grp_zrgbwwa_action",
                30: "dcolortunable_driver_action",
                40: "zcs_action",
                51: "gmschedule_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 40, 51])];
        }
        static fromObject(data: {
            schedule_name?: string;
            schedule_type?: SCHEDULE_TYPE;
            schedule_room?: string;
            duration?: number;
            schedule_action_type?: SCHEDULE_ACTION_TYPE;
            zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
            znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
            ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
            dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
            zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
            embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
            zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
            zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
            zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
            zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
            zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
            scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
            grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
            grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
            grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
            grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
            grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
            dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.prototype.toObject>;
            zcs_action?: ReturnType<typeof dependency_15.com.keus.hub.ContactSensorScheduleAction.prototype.toObject>;
            gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
            schedule_section?: string;
            active_status?: boolean;
            force_execute?: boolean;
        }): CreatePresetSchedule {
            const message = new CreatePresetSchedule({});
            if (data.schedule_name != null) {
                message.schedule_name = data.schedule_name;
            }
            if (data.schedule_type != null) {
                message.schedule_type = data.schedule_type;
            }
            if (data.schedule_room != null) {
                message.schedule_room = data.schedule_room;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.schedule_action_type != null) {
                message.schedule_action_type = data.schedule_action_type;
            }
            if (data.zdimmable_driver_action != null) {
                message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.fromObject(data.zdimmable_driver_action);
            }
            if (data.znondimmable_driver_action != null) {
                message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.fromObject(data.znondimmable_driver_action);
            }
            if (data.ddimmable_driver_action != null) {
                message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.fromObject(data.ddimmable_driver_action);
            }
            if (data.dnondimmable_driver_action != null) {
                message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.fromObject(data.dnondimmable_driver_action);
            }
            if (data.zcurtain_controller_action != null) {
                message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.fromObject(data.zcurtain_controller_action);
            }
            if (data.embedded_appliance_action != null) {
                message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.fromObject(data.embedded_appliance_action);
            }
            if (data.zACFan_controller_action != null) {
                message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.fromObject(data.zACFan_controller_action);
            }
            if (data.zDCFan_controller_action != null) {
                message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.fromObject(data.zDCFan_controller_action);
            }
            if (data.zRgbwwwa_driver_action != null) {
                message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.fromObject(data.zRgbwwwa_driver_action);
            }
            if (data.zsc_relay_action != null) {
                message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.fromObject(data.zsc_relay_action);
            }
            if (data.zir_blaster_action != null) {
                message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.fromObject(data.zir_blaster_action);
            }
            if (data.scene_action != null) {
                message.scene_action = dependency_14.com.keus.hub.ExecuteScene.fromObject(data.scene_action);
            }
            if (data.grp_onoff_action != null) {
                message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.fromObject(data.grp_onoff_action);
            }
            if (data.grp_singledimmer_action != null) {
                message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.fromObject(data.grp_singledimmer_action);
            }
            if (data.grp_fan_action != null) {
                message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.fromObject(data.grp_fan_action);
            }
            if (data.grp_colortunable_action != null) {
                message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.fromObject(data.grp_colortunable_action);
            }
            if (data.grp_zrgbwwa_action != null) {
                message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.fromObject(data.grp_zrgbwwa_action);
            }
            if (data.dcolortunable_driver_action != null) {
                message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.fromObject(data.dcolortunable_driver_action);
            }
            if (data.zcs_action != null) {
                message.zcs_action = dependency_15.com.keus.hub.ContactSensorScheduleAction.fromObject(data.zcs_action);
            }
            if (data.gmschedule_action != null) {
                message.gmschedule_action = GMScheduleAction.fromObject(data.gmschedule_action);
            }
            if (data.schedule_section != null) {
                message.schedule_section = data.schedule_section;
            }
            if (data.active_status != null) {
                message.active_status = data.active_status;
            }
            if (data.force_execute != null) {
                message.force_execute = data.force_execute;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_name?: string;
                schedule_type?: SCHEDULE_TYPE;
                schedule_room?: string;
                duration?: number;
                schedule_action_type?: SCHEDULE_ACTION_TYPE;
                zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
                znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
                ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
                dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
                zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
                embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
                zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
                zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
                zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
                zsc_relay_action?: ReturnType<typeof dependency_12.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
                zir_blaster_action?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
                scene_action?: ReturnType<typeof dependency_14.com.keus.hub.ExecuteScene.prototype.toObject>;
                grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
                grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
                grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
                grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
                grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
                dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.prototype.toObject>;
                zcs_action?: ReturnType<typeof dependency_15.com.keus.hub.ContactSensorScheduleAction.prototype.toObject>;
                gmschedule_action?: ReturnType<typeof GMScheduleAction.prototype.toObject>;
                schedule_section?: string;
                active_status?: boolean;
                force_execute?: boolean;
            } = {};
            if (this.schedule_name != null) {
                data.schedule_name = this.schedule_name;
            }
            if (this.schedule_type != null) {
                data.schedule_type = this.schedule_type;
            }
            if (this.schedule_room != null) {
                data.schedule_room = this.schedule_room;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.schedule_action_type != null) {
                data.schedule_action_type = this.schedule_action_type;
            }
            if (this.zdimmable_driver_action != null) {
                data.zdimmable_driver_action = this.zdimmable_driver_action.toObject();
            }
            if (this.znondimmable_driver_action != null) {
                data.znondimmable_driver_action = this.znondimmable_driver_action.toObject();
            }
            if (this.ddimmable_driver_action != null) {
                data.ddimmable_driver_action = this.ddimmable_driver_action.toObject();
            }
            if (this.dnondimmable_driver_action != null) {
                data.dnondimmable_driver_action = this.dnondimmable_driver_action.toObject();
            }
            if (this.zcurtain_controller_action != null) {
                data.zcurtain_controller_action = this.zcurtain_controller_action.toObject();
            }
            if (this.embedded_appliance_action != null) {
                data.embedded_appliance_action = this.embedded_appliance_action.toObject();
            }
            if (this.zACFan_controller_action != null) {
                data.zACFan_controller_action = this.zACFan_controller_action.toObject();
            }
            if (this.zDCFan_controller_action != null) {
                data.zDCFan_controller_action = this.zDCFan_controller_action.toObject();
            }
            if (this.zRgbwwwa_driver_action != null) {
                data.zRgbwwwa_driver_action = this.zRgbwwwa_driver_action.toObject();
            }
            if (this.zsc_relay_action != null) {
                data.zsc_relay_action = this.zsc_relay_action.toObject();
            }
            if (this.zir_blaster_action != null) {
                data.zir_blaster_action = this.zir_blaster_action.toObject();
            }
            if (this.scene_action != null) {
                data.scene_action = this.scene_action.toObject();
            }
            if (this.grp_onoff_action != null) {
                data.grp_onoff_action = this.grp_onoff_action.toObject();
            }
            if (this.grp_singledimmer_action != null) {
                data.grp_singledimmer_action = this.grp_singledimmer_action.toObject();
            }
            if (this.grp_fan_action != null) {
                data.grp_fan_action = this.grp_fan_action.toObject();
            }
            if (this.grp_colortunable_action != null) {
                data.grp_colortunable_action = this.grp_colortunable_action.toObject();
            }
            if (this.grp_zrgbwwa_action != null) {
                data.grp_zrgbwwa_action = this.grp_zrgbwwa_action.toObject();
            }
            if (this.dcolortunable_driver_action != null) {
                data.dcolortunable_driver_action = this.dcolortunable_driver_action.toObject();
            }
            if (this.zcs_action != null) {
                data.zcs_action = this.zcs_action.toObject();
            }
            if (this.gmschedule_action != null) {
                data.gmschedule_action = this.gmschedule_action.toObject();
            }
            if (this.schedule_section != null) {
                data.schedule_section = this.schedule_section;
            }
            if (this.active_status != null) {
                data.active_status = this.active_status;
            }
            if (this.force_execute != null) {
                data.force_execute = this.force_execute;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_name.length)
                writer.writeString(1, this.schedule_name);
            if (this.schedule_type != SCHEDULE_TYPE.SCHEDULE)
                writer.writeEnum(2, this.schedule_type);
            if (this.schedule_room.length)
                writer.writeString(3, this.schedule_room);
            if (this.duration != 0)
                writer.writeUint64(4, this.duration);
            if (this.schedule_action_type != SCHEDULE_ACTION_TYPE.ZIGBEE_DIMMABLE_DRIVER)
                writer.writeEnum(7, this.schedule_action_type);
            if (this.has_zdimmable_driver_action)
                writer.writeMessage(8, this.zdimmable_driver_action, () => this.zdimmable_driver_action.serialize(writer));
            if (this.has_znondimmable_driver_action)
                writer.writeMessage(9, this.znondimmable_driver_action, () => this.znondimmable_driver_action.serialize(writer));
            if (this.has_ddimmable_driver_action)
                writer.writeMessage(10, this.ddimmable_driver_action, () => this.ddimmable_driver_action.serialize(writer));
            if (this.has_dnondimmable_driver_action)
                writer.writeMessage(11, this.dnondimmable_driver_action, () => this.dnondimmable_driver_action.serialize(writer));
            if (this.has_zcurtain_controller_action)
                writer.writeMessage(12, this.zcurtain_controller_action, () => this.zcurtain_controller_action.serialize(writer));
            if (this.has_embedded_appliance_action)
                writer.writeMessage(13, this.embedded_appliance_action, () => this.embedded_appliance_action.serialize(writer));
            if (this.has_zACFan_controller_action)
                writer.writeMessage(14, this.zACFan_controller_action, () => this.zACFan_controller_action.serialize(writer));
            if (this.has_zDCFan_controller_action)
                writer.writeMessage(15, this.zDCFan_controller_action, () => this.zDCFan_controller_action.serialize(writer));
            if (this.has_zRgbwwwa_driver_action)
                writer.writeMessage(16, this.zRgbwwwa_driver_action, () => this.zRgbwwwa_driver_action.serialize(writer));
            if (this.has_zsc_relay_action)
                writer.writeMessage(17, this.zsc_relay_action, () => this.zsc_relay_action.serialize(writer));
            if (this.has_zir_blaster_action)
                writer.writeMessage(18, this.zir_blaster_action, () => this.zir_blaster_action.serialize(writer));
            if (this.has_scene_action)
                writer.writeMessage(19, this.scene_action, () => this.scene_action.serialize(writer));
            if (this.has_grp_onoff_action)
                writer.writeMessage(25, this.grp_onoff_action, () => this.grp_onoff_action.serialize(writer));
            if (this.has_grp_singledimmer_action)
                writer.writeMessage(26, this.grp_singledimmer_action, () => this.grp_singledimmer_action.serialize(writer));
            if (this.has_grp_fan_action)
                writer.writeMessage(27, this.grp_fan_action, () => this.grp_fan_action.serialize(writer));
            if (this.has_grp_colortunable_action)
                writer.writeMessage(28, this.grp_colortunable_action, () => this.grp_colortunable_action.serialize(writer));
            if (this.has_grp_zrgbwwa_action)
                writer.writeMessage(29, this.grp_zrgbwwa_action, () => this.grp_zrgbwwa_action.serialize(writer));
            if (this.has_dcolortunable_driver_action)
                writer.writeMessage(30, this.dcolortunable_driver_action, () => this.dcolortunable_driver_action.serialize(writer));
            if (this.has_zcs_action)
                writer.writeMessage(40, this.zcs_action, () => this.zcs_action.serialize(writer));
            if (this.has_gmschedule_action)
                writer.writeMessage(51, this.gmschedule_action, () => this.gmschedule_action.serialize(writer));
            if (this.schedule_section.length)
                writer.writeString(20, this.schedule_section);
            if (this.active_status != false)
                writer.writeBool(21, this.active_status);
            if (this.force_execute != false)
                writer.writeBool(31, this.force_execute);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePresetSchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePresetSchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_name = reader.readString();
                        break;
                    case 2:
                        message.schedule_type = reader.readEnum();
                        break;
                    case 3:
                        message.schedule_room = reader.readString();
                        break;
                    case 4:
                        message.duration = reader.readUint64();
                        break;
                    case 7:
                        message.schedule_action_type = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message.zdimmable_driver_action, () => message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.znondimmable_driver_action, () => message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.ddimmable_driver_action, () => message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.dnondimmable_driver_action, () => message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.zcurtain_controller_action, () => message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.embedded_appliance_action, () => message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zACFan_controller_action, () => message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.zDCFan_controller_action, () => message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.zRgbwwwa_driver_action, () => message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.zsc_relay_action, () => message.zsc_relay_action = dependency_12.com.keus.hub.SmartConsoleRelayAction.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.zir_blaster_action, () => message.zir_blaster_action = dependency_13.com.keus.hub.ZigbeeIRBlasterAction.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.scene_action, () => message.scene_action = dependency_14.com.keus.hub.ExecuteScene.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.grp_onoff_action, () => message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.grp_singledimmer_action, () => message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.grp_fan_action, () => message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.grp_colortunable_action, () => message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.grp_zrgbwwa_action, () => message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.dcolortunable_driver_action, () => message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupScheculeAction.deserialize(reader));
                        break;
                    case 40:
                        reader.readMessage(message.zcs_action, () => message.zcs_action = dependency_15.com.keus.hub.ContactSensorScheduleAction.deserialize(reader));
                        break;
                    case 51:
                        reader.readMessage(message.gmschedule_action, () => message.gmschedule_action = GMScheduleAction.deserialize(reader));
                        break;
                    case 20:
                        message.schedule_section = reader.readString();
                        break;
                    case 21:
                        message.active_status = reader.readBool();
                        break;
                    case 31:
                        message.force_execute = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePresetSchedule {
            return CreatePresetSchedule.deserialize(bytes);
        }
    }
    export class CreatePresetScheduleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            schedule?: Schedule;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("schedule" in data && data.schedule != undefined) {
                    this.schedule = data.schedule;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get schedule() {
            return pb_1.Message.getWrapperField(this, Schedule, 4) as Schedule;
        }
        set schedule(value: Schedule) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_schedule() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            schedule?: ReturnType<typeof Schedule.prototype.toObject>;
            ops_message?: string;
        }): CreatePresetScheduleResponse {
            const message = new CreatePresetScheduleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.schedule != null) {
                message.schedule = Schedule.fromObject(data.schedule);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                schedule?: ReturnType<typeof Schedule.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.schedule != null) {
                data.schedule = this.schedule.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_schedule)
                writer.writeMessage(4, this.schedule, () => this.schedule.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePresetScheduleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePresetScheduleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.schedule, () => message.schedule = Schedule.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePresetScheduleResponse {
            return CreatePresetScheduleResponse.deserialize(bytes);
        }
    }
}
