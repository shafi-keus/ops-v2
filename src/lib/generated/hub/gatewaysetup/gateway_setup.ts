/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gatewaysetup/gateway_setup.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum GatewayModes {
        GATEWAY_MAIN = 0,
        GATEWAY_MINI = 1
    }
    export class ConfigureGateway extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            service_user?: string;
            service_user_password?: string;
            gateway_key?: string;
            hub_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("service_user" in data && data.service_user != undefined) {
                    this.service_user = data.service_user;
                }
                if ("service_user_password" in data && data.service_user_password != undefined) {
                    this.service_user_password = data.service_user_password;
                }
                if ("gateway_key" in data && data.gateway_key != undefined) {
                    this.gateway_key = data.gateway_key;
                }
                if ("hub_version" in data && data.hub_version != undefined) {
                    this.hub_version = data.hub_version;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service_user() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set service_user(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get service_user_password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set service_user_password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get gateway_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set gateway_key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get hub_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set hub_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            service_user?: string;
            service_user_password?: string;
            gateway_key?: string;
            hub_version?: string;
        }): ConfigureGateway {
            const message = new ConfigureGateway({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.service_user != null) {
                message.service_user = data.service_user;
            }
            if (data.service_user_password != null) {
                message.service_user_password = data.service_user_password;
            }
            if (data.gateway_key != null) {
                message.gateway_key = data.gateway_key;
            }
            if (data.hub_version != null) {
                message.hub_version = data.hub_version;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                service_user?: string;
                service_user_password?: string;
                gateway_key?: string;
                hub_version?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.service_user != null) {
                data.service_user = this.service_user;
            }
            if (this.service_user_password != null) {
                data.service_user_password = this.service_user_password;
            }
            if (this.gateway_key != null) {
                data.gateway_key = this.gateway_key;
            }
            if (this.hub_version != null) {
                data.hub_version = this.hub_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.service_user.length)
                writer.writeString(2, this.service_user);
            if (this.service_user_password.length)
                writer.writeString(3, this.service_user_password);
            if (this.gateway_key.length)
                writer.writeString(4, this.gateway_key);
            if (this.hub_version.length)
                writer.writeString(5, this.hub_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureGateway {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureGateway();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.service_user = reader.readString();
                        break;
                    case 3:
                        message.service_user_password = reader.readString();
                        break;
                    case 4:
                        message.gateway_key = reader.readString();
                        break;
                    case 5:
                        message.hub_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureGateway {
            return ConfigureGateway.deserialize(bytes);
        }
    }
    export class ConfigureGatewayResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureGatewayResponse {
            const message = new ConfigureGatewayResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureGatewayResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureGatewayResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureGatewayResponse {
            return ConfigureGatewayResponse.deserialize(bytes);
        }
    }
    export class GetGatewayStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetGatewayStatus {
            const message = new GetGatewayStatus({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGatewayStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGatewayStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetGatewayStatus {
            return GetGatewayStatus.deserialize(bytes);
        }
    }
    export class GatewayStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_configured?: boolean;
            is_super_user_assigned?: boolean;
            is_registered_to_cloud?: boolean;
            gateway_id?: string;
            super_user_phone?: string;
            gateway_mode?: GatewayModes;
            mini_gateway_id?: string;
            main_gateway_ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_configured" in data && data.is_configured != undefined) {
                    this.is_configured = data.is_configured;
                }
                if ("is_super_user_assigned" in data && data.is_super_user_assigned != undefined) {
                    this.is_super_user_assigned = data.is_super_user_assigned;
                }
                if ("is_registered_to_cloud" in data && data.is_registered_to_cloud != undefined) {
                    this.is_registered_to_cloud = data.is_registered_to_cloud;
                }
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("super_user_phone" in data && data.super_user_phone != undefined) {
                    this.super_user_phone = data.super_user_phone;
                }
                if ("gateway_mode" in data && data.gateway_mode != undefined) {
                    this.gateway_mode = data.gateway_mode;
                }
                if ("mini_gateway_id" in data && data.mini_gateway_id != undefined) {
                    this.mini_gateway_id = data.mini_gateway_id;
                }
                if ("main_gateway_ip" in data && data.main_gateway_ip != undefined) {
                    this.main_gateway_ip = data.main_gateway_ip;
                }
            }
        }
        get is_configured() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_configured(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_super_user_assigned() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_super_user_assigned(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_registered_to_cloud() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_registered_to_cloud(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get super_user_phone() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set super_user_phone(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get gateway_mode() {
            return pb_1.Message.getFieldWithDefault(this, 6, GatewayModes.GATEWAY_MAIN) as GatewayModes;
        }
        set gateway_mode(value: GatewayModes) {
            pb_1.Message.setField(this, 6, value);
        }
        get mini_gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set mini_gateway_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get main_gateway_ip() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set main_gateway_ip(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            is_configured?: boolean;
            is_super_user_assigned?: boolean;
            is_registered_to_cloud?: boolean;
            gateway_id?: string;
            super_user_phone?: string;
            gateway_mode?: GatewayModes;
            mini_gateway_id?: string;
            main_gateway_ip?: string;
        }): GatewayStatus {
            const message = new GatewayStatus({});
            if (data.is_configured != null) {
                message.is_configured = data.is_configured;
            }
            if (data.is_super_user_assigned != null) {
                message.is_super_user_assigned = data.is_super_user_assigned;
            }
            if (data.is_registered_to_cloud != null) {
                message.is_registered_to_cloud = data.is_registered_to_cloud;
            }
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.super_user_phone != null) {
                message.super_user_phone = data.super_user_phone;
            }
            if (data.gateway_mode != null) {
                message.gateway_mode = data.gateway_mode;
            }
            if (data.mini_gateway_id != null) {
                message.mini_gateway_id = data.mini_gateway_id;
            }
            if (data.main_gateway_ip != null) {
                message.main_gateway_ip = data.main_gateway_ip;
            }
            return message;
        }
        toObject() {
            const data: {
                is_configured?: boolean;
                is_super_user_assigned?: boolean;
                is_registered_to_cloud?: boolean;
                gateway_id?: string;
                super_user_phone?: string;
                gateway_mode?: GatewayModes;
                mini_gateway_id?: string;
                main_gateway_ip?: string;
            } = {};
            if (this.is_configured != null) {
                data.is_configured = this.is_configured;
            }
            if (this.is_super_user_assigned != null) {
                data.is_super_user_assigned = this.is_super_user_assigned;
            }
            if (this.is_registered_to_cloud != null) {
                data.is_registered_to_cloud = this.is_registered_to_cloud;
            }
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.super_user_phone != null) {
                data.super_user_phone = this.super_user_phone;
            }
            if (this.gateway_mode != null) {
                data.gateway_mode = this.gateway_mode;
            }
            if (this.mini_gateway_id != null) {
                data.mini_gateway_id = this.mini_gateway_id;
            }
            if (this.main_gateway_ip != null) {
                data.main_gateway_ip = this.main_gateway_ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_configured != false)
                writer.writeBool(1, this.is_configured);
            if (this.is_super_user_assigned != false)
                writer.writeBool(2, this.is_super_user_assigned);
            if (this.is_registered_to_cloud != false)
                writer.writeBool(3, this.is_registered_to_cloud);
            if (this.gateway_id.length)
                writer.writeString(4, this.gateway_id);
            if (this.super_user_phone.length)
                writer.writeString(5, this.super_user_phone);
            if (this.gateway_mode != GatewayModes.GATEWAY_MAIN)
                writer.writeEnum(6, this.gateway_mode);
            if (this.mini_gateway_id.length)
                writer.writeString(7, this.mini_gateway_id);
            if (this.main_gateway_ip.length)
                writer.writeString(8, this.main_gateway_ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GatewayStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GatewayStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_configured = reader.readBool();
                        break;
                    case 2:
                        message.is_super_user_assigned = reader.readBool();
                        break;
                    case 3:
                        message.is_registered_to_cloud = reader.readBool();
                        break;
                    case 4:
                        message.gateway_id = reader.readString();
                        break;
                    case 5:
                        message.super_user_phone = reader.readString();
                        break;
                    case 6:
                        message.gateway_mode = reader.readEnum();
                        break;
                    case 7:
                        message.mini_gateway_id = reader.readString();
                        break;
                    case 8:
                        message.main_gateway_ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GatewayStatus {
            return GatewayStatus.deserialize(bytes);
        }
    }
    export class GetGatewayStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            gateway_info?: GatewayStatus;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("gateway_info" in data && data.gateway_info != undefined) {
                    this.gateway_info = data.gateway_info;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get gateway_info() {
            return pb_1.Message.getWrapperField(this, GatewayStatus, 4) as GatewayStatus;
        }
        set gateway_info(value: GatewayStatus) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_gateway_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            gateway_info?: ReturnType<typeof GatewayStatus.prototype.toObject>;
            ops_message?: string;
        }): GetGatewayStatusResponse {
            const message = new GetGatewayStatusResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.gateway_info != null) {
                message.gateway_info = GatewayStatus.fromObject(data.gateway_info);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                gateway_info?: ReturnType<typeof GatewayStatus.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.gateway_info != null) {
                data.gateway_info = this.gateway_info.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_gateway_info)
                writer.writeMessage(4, this.gateway_info, () => this.gateway_info.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGatewayStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGatewayStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.gateway_info, () => message.gateway_info = GatewayStatus.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetGatewayStatusResponse {
            return GetGatewayStatusResponse.deserialize(bytes);
        }
    }
    export class ServiceLogin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_user?: string;
            service_user_password?: string;
            device_id?: string;
            device_type?: string;
            device_name?: string;
            service_phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_user" in data && data.service_user != undefined) {
                    this.service_user = data.service_user;
                }
                if ("service_user_password" in data && data.service_user_password != undefined) {
                    this.service_user_password = data.service_user_password;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("service_phone" in data && data.service_phone != undefined) {
                    this.service_phone = data.service_phone;
                }
            }
        }
        get service_user() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_user(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service_user_password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set service_user_password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get service_phone() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set service_phone(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            service_user?: string;
            service_user_password?: string;
            device_id?: string;
            device_type?: string;
            device_name?: string;
            service_phone?: string;
        }): ServiceLogin {
            const message = new ServiceLogin({});
            if (data.service_user != null) {
                message.service_user = data.service_user;
            }
            if (data.service_user_password != null) {
                message.service_user_password = data.service_user_password;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.service_phone != null) {
                message.service_phone = data.service_phone;
            }
            return message;
        }
        toObject() {
            const data: {
                service_user?: string;
                service_user_password?: string;
                device_id?: string;
                device_type?: string;
                device_name?: string;
                service_phone?: string;
            } = {};
            if (this.service_user != null) {
                data.service_user = this.service_user;
            }
            if (this.service_user_password != null) {
                data.service_user_password = this.service_user_password;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.service_phone != null) {
                data.service_phone = this.service_phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_user.length)
                writer.writeString(1, this.service_user);
            if (this.service_user_password.length)
                writer.writeString(2, this.service_user_password);
            if (this.device_id.length)
                writer.writeString(3, this.device_id);
            if (this.device_type.length)
                writer.writeString(4, this.device_type);
            if (this.device_name.length)
                writer.writeString(5, this.device_name);
            if (this.service_phone.length)
                writer.writeString(6, this.service_phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceLogin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceLogin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_user = reader.readString();
                        break;
                    case 2:
                        message.service_user_password = reader.readString();
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.device_type = reader.readString();
                        break;
                    case 5:
                        message.device_name = reader.readString();
                        break;
                    case 6:
                        message.service_phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceLogin {
            return ServiceLogin.deserialize(bytes);
        }
    }
    export class ServiceLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            device_key?: string;
            secret_key?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("device_key" in data && data.device_key != undefined) {
                    this.device_key = data.device_key;
                }
                if ("secret_key" in data && data.secret_key != undefined) {
                    this.secret_key = data.secret_key;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get secret_key() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set secret_key(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            device_key?: string;
            secret_key?: string;
            ops_message?: string;
        }): ServiceLoginResponse {
            const message = new ServiceLoginResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.device_key != null) {
                message.device_key = data.device_key;
            }
            if (data.secret_key != null) {
                message.secret_key = data.secret_key;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                device_key?: string;
                secret_key?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.device_key != null) {
                data.device_key = this.device_key;
            }
            if (this.secret_key != null) {
                data.secret_key = this.secret_key;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.device_key.length)
                writer.writeString(4, this.device_key);
            if (this.secret_key.length)
                writer.writeString(5, this.secret_key);
            if (this.ops_message.length)
                writer.writeString(6, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.device_key = reader.readString();
                        break;
                    case 5:
                        message.secret_key = reader.readString();
                        break;
                    case 6:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceLoginResponse {
            return ServiceLoginResponse.deserialize(bytes);
        }
    }
    export class RegisterGatewayToCloud extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            gateway_id?: string;
        }): RegisterGatewayToCloud {
            const message = new RegisterGatewayToCloud({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterGatewayToCloud {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterGatewayToCloud();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterGatewayToCloud {
            return RegisterGatewayToCloud.deserialize(bytes);
        }
    }
    export class RegisterGatewayToCloudResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RegisterGatewayToCloudResponse {
            const message = new RegisterGatewayToCloudResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterGatewayToCloudResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterGatewayToCloudResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterGatewayToCloudResponse {
            return RegisterGatewayToCloudResponse.deserialize(bytes);
        }
    }
    export class SetGatewayMode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_mode?: GatewayModes;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_mode" in data && data.gateway_mode != undefined) {
                    this.gateway_mode = data.gateway_mode;
                }
            }
        }
        get gateway_mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, GatewayModes.GATEWAY_MAIN) as GatewayModes;
        }
        set gateway_mode(value: GatewayModes) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            gateway_mode?: GatewayModes;
        }): SetGatewayMode {
            const message = new SetGatewayMode({});
            if (data.gateway_mode != null) {
                message.gateway_mode = data.gateway_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_mode?: GatewayModes;
            } = {};
            if (this.gateway_mode != null) {
                data.gateway_mode = this.gateway_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_mode != GatewayModes.GATEWAY_MAIN)
                writer.writeEnum(1, this.gateway_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGatewayMode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGatewayMode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetGatewayMode {
            return SetGatewayMode.deserialize(bytes);
        }
    }
    export class SetGatewayModeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetGatewayModeResponse {
            const message = new SetGatewayModeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGatewayModeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGatewayModeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetGatewayModeResponse {
            return SetGatewayModeResponse.deserialize(bytes);
        }
    }
    export class SetGatewayChannel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_channel?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_channel" in data && data.gateway_channel != undefined) {
                    this.gateway_channel = data.gateway_channel;
                }
            }
        }
        get gateway_channel() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set gateway_channel(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            gateway_channel?: number;
        }): SetGatewayChannel {
            const message = new SetGatewayChannel({});
            if (data.gateway_channel != null) {
                message.gateway_channel = data.gateway_channel;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_channel?: number;
            } = {};
            if (this.gateway_channel != null) {
                data.gateway_channel = this.gateway_channel;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_channel != 0)
                writer.writeUint32(1, this.gateway_channel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGatewayChannel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGatewayChannel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_channel = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetGatewayChannel {
            return SetGatewayChannel.deserialize(bytes);
        }
    }
    export class SetGatewayChannelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetGatewayChannelResponse {
            const message = new SetGatewayChannelResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGatewayChannelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGatewayChannelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetGatewayChannelResponse {
            return SetGatewayChannelResponse.deserialize(bytes);
        }
    }
    export class MainGatewayZigbeeChannel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            zigbee_channel?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("zigbee_channel" in data && data.zigbee_channel != undefined) {
                    this.zigbee_channel = data.zigbee_channel;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get zigbee_channel() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set zigbee_channel(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            zigbee_channel?: number;
        }): MainGatewayZigbeeChannel {
            const message = new MainGatewayZigbeeChannel({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.zigbee_channel != null) {
                message.zigbee_channel = data.zigbee_channel;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                zigbee_channel?: number;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.zigbee_channel != null) {
                data.zigbee_channel = this.zigbee_channel;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.zigbee_channel != 0)
                writer.writeInt32(2, this.zigbee_channel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MainGatewayZigbeeChannel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MainGatewayZigbeeChannel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.zigbee_channel = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MainGatewayZigbeeChannel {
            return MainGatewayZigbeeChannel.deserialize(bytes);
        }
    }
    export class MiniGatewayZigbeeChannel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            zigbee_channel?: number;
            location?: string;
            floor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("zigbee_channel" in data && data.zigbee_channel != undefined) {
                    this.zigbee_channel = data.zigbee_channel;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("floor" in data && data.floor != undefined) {
                    this.floor = data.floor;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get zigbee_channel() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set zigbee_channel(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get floor() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set floor(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            zigbee_channel?: number;
            location?: string;
            floor?: string;
        }): MiniGatewayZigbeeChannel {
            const message = new MiniGatewayZigbeeChannel({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.zigbee_channel != null) {
                message.zigbee_channel = data.zigbee_channel;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.floor != null) {
                message.floor = data.floor;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                zigbee_channel?: number;
                location?: string;
                floor?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.zigbee_channel != null) {
                data.zigbee_channel = this.zigbee_channel;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.floor != null) {
                data.floor = this.floor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.zigbee_channel != 0)
                writer.writeInt32(2, this.zigbee_channel);
            if (this.location.length)
                writer.writeString(3, this.location);
            if (this.floor.length)
                writer.writeString(4, this.floor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MiniGatewayZigbeeChannel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MiniGatewayZigbeeChannel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.zigbee_channel = reader.readInt32();
                        break;
                    case 3:
                        message.location = reader.readString();
                        break;
                    case 4:
                        message.floor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MiniGatewayZigbeeChannel {
            return MiniGatewayZigbeeChannel.deserialize(bytes);
        }
    }
    export class GetGatewayZigbeeChannels extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetGatewayZigbeeChannels {
            const message = new GetGatewayZigbeeChannels({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGatewayZigbeeChannels {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGatewayZigbeeChannels();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetGatewayZigbeeChannels {
            return GetGatewayZigbeeChannels.deserialize(bytes);
        }
    }
    export class GetGatewayZigbeeChannelsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            main_gateway_zigbee_channel?: MainGatewayZigbeeChannel;
            mini_gateway_zigbee_channels?: MiniGatewayZigbeeChannel[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("main_gateway_zigbee_channel" in data && data.main_gateway_zigbee_channel != undefined) {
                    this.main_gateway_zigbee_channel = data.main_gateway_zigbee_channel;
                }
                if ("mini_gateway_zigbee_channels" in data && data.mini_gateway_zigbee_channels != undefined) {
                    this.mini_gateway_zigbee_channels = data.mini_gateway_zigbee_channels;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get main_gateway_zigbee_channel() {
            return pb_1.Message.getWrapperField(this, MainGatewayZigbeeChannel, 4) as MainGatewayZigbeeChannel;
        }
        set main_gateway_zigbee_channel(value: MainGatewayZigbeeChannel) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_main_gateway_zigbee_channel() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get mini_gateway_zigbee_channels() {
            return pb_1.Message.getRepeatedWrapperField(this, MiniGatewayZigbeeChannel, 5) as MiniGatewayZigbeeChannel[];
        }
        set mini_gateway_zigbee_channels(value: MiniGatewayZigbeeChannel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            main_gateway_zigbee_channel?: ReturnType<typeof MainGatewayZigbeeChannel.prototype.toObject>;
            mini_gateway_zigbee_channels?: ReturnType<typeof MiniGatewayZigbeeChannel.prototype.toObject>[];
            ops_message?: string;
        }): GetGatewayZigbeeChannelsResponse {
            const message = new GetGatewayZigbeeChannelsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.main_gateway_zigbee_channel != null) {
                message.main_gateway_zigbee_channel = MainGatewayZigbeeChannel.fromObject(data.main_gateway_zigbee_channel);
            }
            if (data.mini_gateway_zigbee_channels != null) {
                message.mini_gateway_zigbee_channels = data.mini_gateway_zigbee_channels.map(item => MiniGatewayZigbeeChannel.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                main_gateway_zigbee_channel?: ReturnType<typeof MainGatewayZigbeeChannel.prototype.toObject>;
                mini_gateway_zigbee_channels?: ReturnType<typeof MiniGatewayZigbeeChannel.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.main_gateway_zigbee_channel != null) {
                data.main_gateway_zigbee_channel = this.main_gateway_zigbee_channel.toObject();
            }
            if (this.mini_gateway_zigbee_channels != null) {
                data.mini_gateway_zigbee_channels = this.mini_gateway_zigbee_channels.map((item: MiniGatewayZigbeeChannel) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_main_gateway_zigbee_channel)
                writer.writeMessage(4, this.main_gateway_zigbee_channel, () => this.main_gateway_zigbee_channel.serialize(writer));
            if (this.mini_gateway_zigbee_channels.length)
                writer.writeRepeatedMessage(5, this.mini_gateway_zigbee_channels, (item: MiniGatewayZigbeeChannel) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(6, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGatewayZigbeeChannelsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGatewayZigbeeChannelsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.main_gateway_zigbee_channel, () => message.main_gateway_zigbee_channel = MainGatewayZigbeeChannel.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.mini_gateway_zigbee_channels, () => pb_1.Message.addToRepeatedWrapperField(message, 5, MiniGatewayZigbeeChannel.deserialize(reader), MiniGatewayZigbeeChannel));
                        break;
                    case 6:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetGatewayZigbeeChannelsResponse {
            return GetGatewayZigbeeChannelsResponse.deserialize(bytes);
        }
    }
}
