/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/activity/activity_structures.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../devices/zigbee_curtain_controller";
import * as dependency_2 from "./../devices/zigbee_dimmable_driver";
import * as dependency_3 from "./../devices/zigbee_nondimmable_driver";
import * as dependency_4 from "./../devices/dali_dimmable_driver";
import * as dependency_5 from "./../devices/dali_nondimmable_driver";
import * as dependency_6 from "./../devices/smart_console";
import * as dependency_7 from "./../devices/scene_wizard";
import * as dependency_8 from "./../devices/zigbee_embedded_switch";
import * as dependency_9 from "./../devices/zigbee_ac_fan_controller";
import * as dependency_10 from "./../devices/zigbee_dc_fan_controller";
import * as dependency_11 from "./../devices/zigbee_rgbwwa_driver";
import * as dependency_12 from "./../devices/zigbee_embedded_scene_switch";
import * as dependency_13 from "./../devices/zigbee_inline_dimmer";
import * as dependency_14 from "./../devices/device_constants";
import * as dependency_15 from "./../devices/zigbee_ir_blaster";
import * as dependency_16 from "./../scenes/scene_structures";
import * as dependency_17 from "./../groups/group_structures";
import * as dependency_18 from "./activity_constants";
import * as dependency_19 from "./gmactivity";
import * as dependency_20 from "./../gateway-models/appliances/appliance";
import * as dependency_21 from "./../scenes/scene_constants";
import * as dependency_22 from "./../gateway-models/appliances/appliance_constants";
import * as dependency_23 from "./../gateway-models/groups/gmgroups";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum ACTIVITY_TYPES {
        DEVICE = 0,
        SCENE = 1,
        GROUP = 2,
        ACTIVITY_GMAPPLIANCE = 3,
        ACTIVITY_GMGROUP = 4,
        ACTIVITY_GMSCENE = 5
    }
    export class EmbeddedSwitchActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5]];
        constructor(data?: any[] | ({
            appliance_id?: string;
            appliance_name?: string;
            appliance_type?: dependency_14.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
        } & (({
            on_off_state?: dependency_8.com.keus.hub.OnOffApplianceState;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: dependency_8.com.keus.hub.SingleDimmerApplianceState;
            fan_state?: never;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: dependency_8.com.keus.hub.FanApplianceState;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: dependency_8.com.keus.hub.ColorTunableApplianceState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("on_off_state" in data && data.on_off_state != undefined) {
                    this.on_off_state = data.on_off_state;
                }
                if ("single_dimmer_state" in data && data.single_dimmer_state != undefined) {
                    this.single_dimmer_state = data.single_dimmer_state;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("color_tunable_state" in data && data.color_tunable_state != undefined) {
                    this.color_tunable_state = data.color_tunable_state;
                }
                if ("appliance_name" in data && data.appliance_name != undefined) {
                    this.appliance_name = data.appliance_name;
                }
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get on_off_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.OnOffApplianceState, 2) as dependency_8.com.keus.hub.OnOffApplianceState;
        }
        set on_off_state(value: dependency_8.com.keus.hub.OnOffApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_on_off_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get single_dimmer_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.SingleDimmerApplianceState, 3) as dependency_8.com.keus.hub.SingleDimmerApplianceState;
        }
        set single_dimmer_state(value: dependency_8.com.keus.hub.SingleDimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_single_dimmer_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get fan_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.FanApplianceState, 4) as dependency_8.com.keus.hub.FanApplianceState;
        }
        set fan_state(value: dependency_8.com.keus.hub.FanApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_fan_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get color_tunable_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ColorTunableApplianceState, 5) as dependency_8.com.keus.hub.ColorTunableApplianceState;
        }
        set color_tunable_state(value: dependency_8.com.keus.hub.ColorTunableApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_color_tunable_state() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get appliance_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set appliance_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_14.com.keus.hub.EMBEDDED_APPLIANCE_TYPES.ON_OFF) as dependency_14.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
        }
        set appliance_type(value: dependency_14.com.keus.hub.EMBEDDED_APPLIANCE_TYPES) {
            pb_1.Message.setField(this, 7, value);
        }
        get appliance_state() {
            const cases: {
                [index: number]: "none" | "on_off_state" | "single_dimmer_state" | "fan_state" | "color_tunable_state";
            } = {
                0: "none",
                2: "on_off_state",
                3: "single_dimmer_state",
                4: "fan_state",
                5: "color_tunable_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5])];
        }
        static fromObject(data: {
            appliance_id?: string;
            on_off_state?: ReturnType<typeof dependency_8.com.keus.hub.OnOffApplianceState.prototype.toObject>;
            single_dimmer_state?: ReturnType<typeof dependency_8.com.keus.hub.SingleDimmerApplianceState.prototype.toObject>;
            fan_state?: ReturnType<typeof dependency_8.com.keus.hub.FanApplianceState.prototype.toObject>;
            color_tunable_state?: ReturnType<typeof dependency_8.com.keus.hub.ColorTunableApplianceState.prototype.toObject>;
            appliance_name?: string;
            appliance_type?: dependency_14.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
        }): EmbeddedSwitchActivityAction {
            const message = new EmbeddedSwitchActivityAction({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.on_off_state != null) {
                message.on_off_state = dependency_8.com.keus.hub.OnOffApplianceState.fromObject(data.on_off_state);
            }
            if (data.single_dimmer_state != null) {
                message.single_dimmer_state = dependency_8.com.keus.hub.SingleDimmerApplianceState.fromObject(data.single_dimmer_state);
            }
            if (data.fan_state != null) {
                message.fan_state = dependency_8.com.keus.hub.FanApplianceState.fromObject(data.fan_state);
            }
            if (data.color_tunable_state != null) {
                message.color_tunable_state = dependency_8.com.keus.hub.ColorTunableApplianceState.fromObject(data.color_tunable_state);
            }
            if (data.appliance_name != null) {
                message.appliance_name = data.appliance_name;
            }
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                on_off_state?: ReturnType<typeof dependency_8.com.keus.hub.OnOffApplianceState.prototype.toObject>;
                single_dimmer_state?: ReturnType<typeof dependency_8.com.keus.hub.SingleDimmerApplianceState.prototype.toObject>;
                fan_state?: ReturnType<typeof dependency_8.com.keus.hub.FanApplianceState.prototype.toObject>;
                color_tunable_state?: ReturnType<typeof dependency_8.com.keus.hub.ColorTunableApplianceState.prototype.toObject>;
                appliance_name?: string;
                appliance_type?: dependency_14.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.on_off_state != null) {
                data.on_off_state = this.on_off_state.toObject();
            }
            if (this.single_dimmer_state != null) {
                data.single_dimmer_state = this.single_dimmer_state.toObject();
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state.toObject();
            }
            if (this.color_tunable_state != null) {
                data.color_tunable_state = this.color_tunable_state.toObject();
            }
            if (this.appliance_name != null) {
                data.appliance_name = this.appliance_name;
            }
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.has_on_off_state)
                writer.writeMessage(2, this.on_off_state, () => this.on_off_state.serialize(writer));
            if (this.has_single_dimmer_state)
                writer.writeMessage(3, this.single_dimmer_state, () => this.single_dimmer_state.serialize(writer));
            if (this.has_fan_state)
                writer.writeMessage(4, this.fan_state, () => this.fan_state.serialize(writer));
            if (this.has_color_tunable_state)
                writer.writeMessage(5, this.color_tunable_state, () => this.color_tunable_state.serialize(writer));
            if (this.appliance_name.length)
                writer.writeString(6, this.appliance_name);
            if (this.appliance_type != dependency_14.com.keus.hub.EMBEDDED_APPLIANCE_TYPES.ON_OFF)
                writer.writeEnum(7, this.appliance_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddedSwitchActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddedSwitchActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.on_off_state, () => message.on_off_state = dependency_8.com.keus.hub.OnOffApplianceState.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.single_dimmer_state, () => message.single_dimmer_state = dependency_8.com.keus.hub.SingleDimmerApplianceState.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.fan_state, () => message.fan_state = dependency_8.com.keus.hub.FanApplianceState.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.color_tunable_state, () => message.color_tunable_state = dependency_8.com.keus.hub.ColorTunableApplianceState.deserialize(reader));
                        break;
                    case 6:
                        message.appliance_name = reader.readString();
                        break;
                    case 7:
                        message.appliance_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddedSwitchActivityAction {
            return EmbeddedSwitchActivityAction.deserialize(bytes);
        }
    }
    export class SmartConsoleActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            relay_id?: number;
            relay_name?: string;
            relay_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
                if ("relay_name" in data && data.relay_name != undefined) {
                    this.relay_name = data.relay_name;
                }
                if ("relay_state" in data && data.relay_state != undefined) {
                    this.relay_state = data.relay_state;
                }
            }
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set relay_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get relay_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set relay_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            relay_id?: number;
            relay_name?: string;
            relay_state?: number;
        }): SmartConsoleActivityAction {
            const message = new SmartConsoleActivityAction({});
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            if (data.relay_name != null) {
                message.relay_name = data.relay_name;
            }
            if (data.relay_state != null) {
                message.relay_state = data.relay_state;
            }
            return message;
        }
        toObject() {
            const data: {
                relay_id?: number;
                relay_name?: string;
                relay_state?: number;
            } = {};
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            if (this.relay_name != null) {
                data.relay_name = this.relay_name;
            }
            if (this.relay_state != null) {
                data.relay_state = this.relay_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.relay_id != 0)
                writer.writeInt32(1, this.relay_id);
            if (this.relay_name.length)
                writer.writeString(2, this.relay_name);
            if (this.relay_state != 0)
                writer.writeInt32(3, this.relay_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.relay_id = reader.readInt32();
                        break;
                    case 2:
                        message.relay_name = reader.readString();
                        break;
                    case 3:
                        message.relay_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleActivityAction {
            return SmartConsoleActivityAction.deserialize(bytes);
        }
    }
    export class IRRemoteActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({
            remote_id?: string;
            remote_name?: string;
            remote_type?: dependency_14.com.keus.hub.IR_REMOTE_TYPES;
        } & (({
            ac_blast_info?: dependency_15.com.keus.hub.IRACBlast;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: dependency_15.com.keus.hub.IRTVBlast;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: dependency_15.com.keus.hub.IRAMPBlast;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: dependency_15.com.keus.hub.IRPRBlast;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: dependency_15.com.keus.hub.IRFANBlast;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
                if ("remote_name" in data && data.remote_name != undefined) {
                    this.remote_name = data.remote_name;
                }
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
                if ("ac_blast_info" in data && data.ac_blast_info != undefined) {
                    this.ac_blast_info = data.ac_blast_info;
                }
                if ("tv_blast_info" in data && data.tv_blast_info != undefined) {
                    this.tv_blast_info = data.tv_blast_info;
                }
                if ("amp_blast_info" in data && data.amp_blast_info != undefined) {
                    this.amp_blast_info = data.amp_blast_info;
                }
                if ("pr_blast_info" in data && data.pr_blast_info != undefined) {
                    this.pr_blast_info = data.pr_blast_info;
                }
                if ("fan_blast_info" in data && data.fan_blast_info != undefined) {
                    this.fan_blast_info = data.fan_blast_info;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get remote_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set remote_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, dependency_14.com.keus.hub.IR_REMOTE_TYPES.IR_AC) as dependency_14.com.keus.hub.IR_REMOTE_TYPES;
        }
        set remote_type(value: dependency_14.com.keus.hub.IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 8, value);
        }
        get ac_blast_info() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.IRACBlast, 3) as dependency_15.com.keus.hub.IRACBlast;
        }
        set ac_blast_info(value: dependency_15.com.keus.hub.IRACBlast) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_ac_blast_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get tv_blast_info() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.IRTVBlast, 4) as dependency_15.com.keus.hub.IRTVBlast;
        }
        set tv_blast_info(value: dependency_15.com.keus.hub.IRTVBlast) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_tv_blast_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get amp_blast_info() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.IRAMPBlast, 5) as dependency_15.com.keus.hub.IRAMPBlast;
        }
        set amp_blast_info(value: dependency_15.com.keus.hub.IRAMPBlast) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_amp_blast_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get pr_blast_info() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.IRPRBlast, 6) as dependency_15.com.keus.hub.IRPRBlast;
        }
        set pr_blast_info(value: dependency_15.com.keus.hub.IRPRBlast) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_pr_blast_info() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get fan_blast_info() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.hub.IRFANBlast, 7) as dependency_15.com.keus.hub.IRFANBlast;
        }
        set fan_blast_info(value: dependency_15.com.keus.hub.IRFANBlast) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_fan_blast_info() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get blast_info() {
            const cases: {
                [index: number]: "none" | "ac_blast_info" | "tv_blast_info" | "amp_blast_info" | "pr_blast_info" | "fan_blast_info";
            } = {
                0: "none",
                3: "ac_blast_info",
                4: "tv_blast_info",
                5: "amp_blast_info",
                6: "pr_blast_info",
                7: "fan_blast_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            remote_id?: string;
            remote_name?: string;
            remote_type?: dependency_14.com.keus.hub.IR_REMOTE_TYPES;
            ac_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRACBlast.prototype.toObject>;
            tv_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRTVBlast.prototype.toObject>;
            amp_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRAMPBlast.prototype.toObject>;
            pr_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRPRBlast.prototype.toObject>;
            fan_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRFANBlast.prototype.toObject>;
        }): IRRemoteActivityAction {
            const message = new IRRemoteActivityAction({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            if (data.remote_name != null) {
                message.remote_name = data.remote_name;
            }
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            if (data.ac_blast_info != null) {
                message.ac_blast_info = dependency_15.com.keus.hub.IRACBlast.fromObject(data.ac_blast_info);
            }
            if (data.tv_blast_info != null) {
                message.tv_blast_info = dependency_15.com.keus.hub.IRTVBlast.fromObject(data.tv_blast_info);
            }
            if (data.amp_blast_info != null) {
                message.amp_blast_info = dependency_15.com.keus.hub.IRAMPBlast.fromObject(data.amp_blast_info);
            }
            if (data.pr_blast_info != null) {
                message.pr_blast_info = dependency_15.com.keus.hub.IRPRBlast.fromObject(data.pr_blast_info);
            }
            if (data.fan_blast_info != null) {
                message.fan_blast_info = dependency_15.com.keus.hub.IRFANBlast.fromObject(data.fan_blast_info);
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
                remote_name?: string;
                remote_type?: dependency_14.com.keus.hub.IR_REMOTE_TYPES;
                ac_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRACBlast.prototype.toObject>;
                tv_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRTVBlast.prototype.toObject>;
                amp_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRAMPBlast.prototype.toObject>;
                pr_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRPRBlast.prototype.toObject>;
                fan_blast_info?: ReturnType<typeof dependency_15.com.keus.hub.IRFANBlast.prototype.toObject>;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            if (this.remote_name != null) {
                data.remote_name = this.remote_name;
            }
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            if (this.ac_blast_info != null) {
                data.ac_blast_info = this.ac_blast_info.toObject();
            }
            if (this.tv_blast_info != null) {
                data.tv_blast_info = this.tv_blast_info.toObject();
            }
            if (this.amp_blast_info != null) {
                data.amp_blast_info = this.amp_blast_info.toObject();
            }
            if (this.pr_blast_info != null) {
                data.pr_blast_info = this.pr_blast_info.toObject();
            }
            if (this.fan_blast_info != null) {
                data.fan_blast_info = this.fan_blast_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (this.remote_name.length)
                writer.writeString(2, this.remote_name);
            if (this.remote_type != dependency_14.com.keus.hub.IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(8, this.remote_type);
            if (this.has_ac_blast_info)
                writer.writeMessage(3, this.ac_blast_info, () => this.ac_blast_info.serialize(writer));
            if (this.has_tv_blast_info)
                writer.writeMessage(4, this.tv_blast_info, () => this.tv_blast_info.serialize(writer));
            if (this.has_amp_blast_info)
                writer.writeMessage(5, this.amp_blast_info, () => this.amp_blast_info.serialize(writer));
            if (this.has_pr_blast_info)
                writer.writeMessage(6, this.pr_blast_info, () => this.pr_blast_info.serialize(writer));
            if (this.has_fan_blast_info)
                writer.writeMessage(7, this.fan_blast_info, () => this.fan_blast_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRRemoteActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRRemoteActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    case 2:
                        message.remote_name = reader.readString();
                        break;
                    case 8:
                        message.remote_type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.ac_blast_info, () => message.ac_blast_info = dependency_15.com.keus.hub.IRACBlast.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.tv_blast_info, () => message.tv_blast_info = dependency_15.com.keus.hub.IRTVBlast.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.amp_blast_info, () => message.amp_blast_info = dependency_15.com.keus.hub.IRAMPBlast.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.pr_blast_info, () => message.pr_blast_info = dependency_15.com.keus.hub.IRPRBlast.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.fan_blast_info, () => message.fan_blast_info = dependency_15.com.keus.hub.IRFANBlast.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRRemoteActivityAction {
            return IRRemoteActivityAction.deserialize(bytes);
        }
    }
    export class RgbwwaActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_state?: number;
            red?: number;
            green?: number;
            blue?: number;
            warm_white?: number;
            cool_white?: number;
            amber?: number;
            pattern?: number;
            updateType?: dependency_14.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("red" in data && data.red != undefined) {
                    this.red = data.red;
                }
                if ("green" in data && data.green != undefined) {
                    this.green = data.green;
                }
                if ("blue" in data && data.blue != undefined) {
                    this.blue = data.blue;
                }
                if ("warm_white" in data && data.warm_white != undefined) {
                    this.warm_white = data.warm_white;
                }
                if ("cool_white" in data && data.cool_white != undefined) {
                    this.cool_white = data.cool_white;
                }
                if ("amber" in data && data.amber != undefined) {
                    this.amber = data.amber;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
                if ("updateType" in data && data.updateType != undefined) {
                    this.updateType = data.updateType;
                }
            }
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get red() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set red(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get green() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set green(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get blue() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set blue(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get warm_white() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set warm_white(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get cool_white() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set cool_white(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get amber() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set amber(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set pattern(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get updateType() {
            return pb_1.Message.getFieldWithDefault(this, 9, dependency_14.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_14.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set updateType(value: dependency_14.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            device_state?: number;
            red?: number;
            green?: number;
            blue?: number;
            warm_white?: number;
            cool_white?: number;
            amber?: number;
            pattern?: number;
            updateType?: dependency_14.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }): RgbwwaActivityAction {
            const message = new RgbwwaActivityAction({});
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.red != null) {
                message.red = data.red;
            }
            if (data.green != null) {
                message.green = data.green;
            }
            if (data.blue != null) {
                message.blue = data.blue;
            }
            if (data.warm_white != null) {
                message.warm_white = data.warm_white;
            }
            if (data.cool_white != null) {
                message.cool_white = data.cool_white;
            }
            if (data.amber != null) {
                message.amber = data.amber;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            if (data.updateType != null) {
                message.updateType = data.updateType;
            }
            return message;
        }
        toObject() {
            const data: {
                device_state?: number;
                red?: number;
                green?: number;
                blue?: number;
                warm_white?: number;
                cool_white?: number;
                amber?: number;
                pattern?: number;
                updateType?: dependency_14.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            } = {};
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.red != null) {
                data.red = this.red;
            }
            if (this.green != null) {
                data.green = this.green;
            }
            if (this.blue != null) {
                data.blue = this.blue;
            }
            if (this.warm_white != null) {
                data.warm_white = this.warm_white;
            }
            if (this.cool_white != null) {
                data.cool_white = this.cool_white;
            }
            if (this.amber != null) {
                data.amber = this.amber;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            if (this.updateType != null) {
                data.updateType = this.updateType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_state != 0)
                writer.writeInt32(1, this.device_state);
            if (this.red != 0)
                writer.writeInt32(2, this.red);
            if (this.green != 0)
                writer.writeInt32(3, this.green);
            if (this.blue != 0)
                writer.writeInt32(4, this.blue);
            if (this.warm_white != 0)
                writer.writeInt32(5, this.warm_white);
            if (this.cool_white != 0)
                writer.writeInt32(6, this.cool_white);
            if (this.amber != 0)
                writer.writeInt32(7, this.amber);
            if (this.pattern != 0)
                writer.writeInt32(8, this.pattern);
            if (this.updateType != dependency_14.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(9, this.updateType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RgbwwaActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RgbwwaActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_state = reader.readInt32();
                        break;
                    case 2:
                        message.red = reader.readInt32();
                        break;
                    case 3:
                        message.green = reader.readInt32();
                        break;
                    case 4:
                        message.blue = reader.readInt32();
                        break;
                    case 5:
                        message.warm_white = reader.readInt32();
                        break;
                    case 6:
                        message.cool_white = reader.readInt32();
                        break;
                    case 7:
                        message.amber = reader.readInt32();
                        break;
                    case 8:
                        message.pattern = reader.readInt32();
                        break;
                    case 9:
                        message.updateType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RgbwwaActivityAction {
            return RgbwwaActivityAction.deserialize(bytes);
        }
    }
    export class DriverActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driver_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            driver_state?: number;
        }): DriverActivityAction {
            const message = new DriverActivityAction({});
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            return message;
        }
        toObject() {
            const data: {
                driver_state?: number;
            } = {};
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.driver_state != 0)
                writer.writeInt32(1, this.driver_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DriverActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DriverActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.driver_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DriverActivityAction {
            return DriverActivityAction.deserialize(bytes);
        }
    }
    export class CurtainActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            curtain_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("curtain_state" in data && data.curtain_state != undefined) {
                    this.curtain_state = data.curtain_state;
                }
            }
        }
        get curtain_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set curtain_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            curtain_state?: number;
        }): CurtainActivityAction {
            const message = new CurtainActivityAction({});
            if (data.curtain_state != null) {
                message.curtain_state = data.curtain_state;
            }
            return message;
        }
        toObject() {
            const data: {
                curtain_state?: number;
            } = {};
            if (this.curtain_state != null) {
                data.curtain_state = this.curtain_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.curtain_state != 0)
                writer.writeInt32(1, this.curtain_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurtainActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurtainActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.curtain_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurtainActivityAction {
            return CurtainActivityAction.deserialize(bytes);
        }
    }
    export class ContactSensorActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            device_state?: number;
            notifications_enabled?: never;
        } | {
            device_state?: never;
            notifications_enabled?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("notifications_enabled" in data && data.notifications_enabled != undefined) {
                    this.notifications_enabled = data.notifications_enabled;
                }
            }
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_device_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get notifications_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set notifications_enabled(value: boolean) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_notifications_enabled() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get activity_state() {
            const cases: {
                [index: number]: "none" | "device_state" | "notifications_enabled";
            } = {
                0: "none",
                1: "device_state",
                2: "notifications_enabled"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            device_state?: number;
            notifications_enabled?: boolean;
        }): ContactSensorActivityAction {
            const message = new ContactSensorActivityAction({});
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.notifications_enabled != null) {
                message.notifications_enabled = data.notifications_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                device_state?: number;
                notifications_enabled?: boolean;
            } = {};
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.notifications_enabled != null) {
                data.notifications_enabled = this.notifications_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_device_state)
                writer.writeInt32(1, this.device_state);
            if (this.has_notifications_enabled)
                writer.writeBool(2, this.notifications_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactSensorActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactSensorActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_state = reader.readInt32();
                        break;
                    case 2:
                        message.notifications_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContactSensorActivityAction {
            return ContactSensorActivityAction.deserialize(bytes);
        }
    }
    export class AcFancontrollerActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fan_state?: number;
            light_state?: number;
            swing_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("swing_state" in data && data.swing_state != undefined) {
                    this.swing_state = data.swing_state;
                }
            }
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fan_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get swing_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set swing_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            fan_state?: number;
            light_state?: number;
            swing_state?: number;
        }): AcFancontrollerActivityAction {
            const message = new AcFancontrollerActivityAction({});
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.swing_state != null) {
                message.swing_state = data.swing_state;
            }
            return message;
        }
        toObject() {
            const data: {
                fan_state?: number;
                light_state?: number;
                swing_state?: number;
            } = {};
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.swing_state != null) {
                data.swing_state = this.swing_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fan_state != 0)
                writer.writeInt32(1, this.fan_state);
            if (this.light_state != 0)
                writer.writeInt32(2, this.light_state);
            if (this.swing_state != 0)
                writer.writeInt32(3, this.swing_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcFancontrollerActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcFancontrollerActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fan_state = reader.readInt32();
                        break;
                    case 2:
                        message.light_state = reader.readInt32();
                        break;
                    case 3:
                        message.swing_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcFancontrollerActivityAction {
            return AcFancontrollerActivityAction.deserialize(bytes);
        }
    }
    export class DcFancontrollerActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fan_state?: number;
            light_state?: number;
            light_temperature?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("light_temperature" in data && data.light_temperature != undefined) {
                    this.light_temperature = data.light_temperature;
                }
            }
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fan_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get light_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set light_temperature(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            fan_state?: number;
            light_state?: number;
            light_temperature?: number;
        }): DcFancontrollerActivityAction {
            const message = new DcFancontrollerActivityAction({});
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.light_temperature != null) {
                message.light_temperature = data.light_temperature;
            }
            return message;
        }
        toObject() {
            const data: {
                fan_state?: number;
                light_state?: number;
                light_temperature?: number;
            } = {};
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.light_temperature != null) {
                data.light_temperature = this.light_temperature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fan_state != 0)
                writer.writeInt32(1, this.fan_state);
            if (this.light_state != 0)
                writer.writeInt32(2, this.light_state);
            if (this.light_temperature != 0)
                writer.writeInt32(3, this.light_temperature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DcFancontrollerActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DcFancontrollerActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fan_state = reader.readInt32();
                        break;
                    case 2:
                        message.light_state = reader.readInt32();
                        break;
                    case 3:
                        message.light_temperature = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DcFancontrollerActivityAction {
            return DcFancontrollerActivityAction.deserialize(bytes);
        }
    }
    export class DaliColorTunableActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driver_state?: number;
            color_temperature?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
                if ("color_temperature" in data && data.color_temperature != undefined) {
                    this.color_temperature = data.color_temperature;
                }
            }
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get color_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set color_temperature(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            driver_state?: number;
            color_temperature?: number;
        }): DaliColorTunableActivityAction {
            const message = new DaliColorTunableActivityAction({});
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            if (data.color_temperature != null) {
                message.color_temperature = data.color_temperature;
            }
            return message;
        }
        toObject() {
            const data: {
                driver_state?: number;
                color_temperature?: number;
            } = {};
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            if (this.color_temperature != null) {
                data.color_temperature = this.color_temperature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.driver_state != 0)
                writer.writeInt32(1, this.driver_state);
            if (this.color_temperature != 0)
                writer.writeInt32(2, this.color_temperature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliColorTunableActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliColorTunableActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.driver_state = reader.readInt32();
                        break;
                    case 2:
                        message.color_temperature = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliColorTunableActivityAction {
            return DaliColorTunableActivityAction.deserialize(bytes);
        }
    }
    export class DaliDimmableDriverActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driver_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            driver_state?: number;
        }): DaliDimmableDriverActivityAction {
            const message = new DaliDimmableDriverActivityAction({});
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            return message;
        }
        toObject() {
            const data: {
                driver_state?: number;
            } = {};
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.driver_state != 0)
                writer.writeInt32(1, this.driver_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliDimmableDriverActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliDimmableDriverActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.driver_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliDimmableDriverActivityAction {
            return DaliDimmableDriverActivityAction.deserialize(bytes);
        }
    }
    export class DaliNonDimmableDriverActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driver_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            driver_state?: number;
        }): DaliNonDimmableDriverActivityAction {
            const message = new DaliNonDimmableDriverActivityAction({});
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            return message;
        }
        toObject() {
            const data: {
                driver_state?: number;
            } = {};
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.driver_state != 0)
                writer.writeInt32(1, this.driver_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliNonDimmableDriverActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliNonDimmableDriverActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.driver_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliNonDimmableDriverActivityAction {
            return DaliNonDimmableDriverActivityAction.deserialize(bytes);
        }
    }
    export class ZigbeeDimmableDriverActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driver_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            driver_state?: number;
        }): ZigbeeDimmableDriverActivityAction {
            const message = new ZigbeeDimmableDriverActivityAction({});
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            return message;
        }
        toObject() {
            const data: {
                driver_state?: number;
            } = {};
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.driver_state != 0)
                writer.writeInt32(1, this.driver_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeDimmableDriverActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeDimmableDriverActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.driver_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeDimmableDriverActivityAction {
            return ZigbeeDimmableDriverActivityAction.deserialize(bytes);
        }
    }
    export class ZigbeeNonDimmableDriverActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driver_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            driver_state?: number;
        }): ZigbeeNonDimmableDriverActivityAction {
            const message = new ZigbeeNonDimmableDriverActivityAction({});
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            return message;
        }
        toObject() {
            const data: {
                driver_state?: number;
            } = {};
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.driver_state != 0)
                writer.writeInt32(1, this.driver_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeNonDimmableDriverActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeNonDimmableDriverActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.driver_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeNonDimmableDriverActivityAction {
            return ZigbeeNonDimmableDriverActivityAction.deserialize(bytes);
        }
    }
    export class InlineDimmerActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
            }
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_state?: number;
        }): InlineDimmerActivityAction {
            const message = new InlineDimmerActivityAction({});
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_state?: number;
            } = {};
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_state != 0)
                writer.writeInt32(1, this.device_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InlineDimmerActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InlineDimmerActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InlineDimmerActivityAction {
            return InlineDimmerActivityAction.deserialize(bytes);
        }
    }
    export class DeviceActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [[21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]];
        constructor(data?: any[] | ({
            device_id?: string;
            device_category?: string;
            device_name?: string;
            device_section?: string;
            device_room?: string;
            device_room_name?: string;
            device_area?: number;
            device_section_name?: string;
        } & (({
            inline_dimmer_activity?: InlineDimmerActivityAction;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: DcFancontrollerActivityAction;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: AcFancontrollerActivityAction;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: ContactSensorActivityAction;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: CurtainActivityAction;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: DriverActivityAction;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: RgbwwaActivityAction;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: EmbeddedSwitchActivityAction;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: SmartConsoleActivityAction;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: IRRemoteActivityAction;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: DaliColorTunableActivityAction;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: DaliDimmableDriverActivityAction;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: DaliNonDimmableDriverActivityAction;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: ZigbeeDimmableDriverActivityAction;
            ZB_nondimmable_driver_activity?: never;
        } | {
            inline_dimmer_activity?: never;
            dc_fan_activity?: never;
            ac_fan_activity?: never;
            contact_sensor_activity?: never;
            curtain_activity?: never;
            driver_common_activity?: never;
            rgbwwa_activity?: never;
            es_activity?: never;
            sc_activty?: never;
            IRremote_activity?: never;
            dali_ct_activity?: never;
            dali_dimmable_driver_activity?: never;
            dali_nondimmable_driver_activity?: never;
            ZB_dimmable_driver_activity?: never;
            ZB_nondimmable_driver_activity?: ZigbeeNonDimmableDriverActivityAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_category" in data && data.device_category != undefined) {
                    this.device_category = data.device_category;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_room_name" in data && data.device_room_name != undefined) {
                    this.device_room_name = data.device_room_name;
                }
                if ("device_area" in data && data.device_area != undefined) {
                    this.device_area = data.device_area;
                }
                if ("device_section_name" in data && data.device_section_name != undefined) {
                    this.device_section_name = data.device_section_name;
                }
                if ("inline_dimmer_activity" in data && data.inline_dimmer_activity != undefined) {
                    this.inline_dimmer_activity = data.inline_dimmer_activity;
                }
                if ("dc_fan_activity" in data && data.dc_fan_activity != undefined) {
                    this.dc_fan_activity = data.dc_fan_activity;
                }
                if ("ac_fan_activity" in data && data.ac_fan_activity != undefined) {
                    this.ac_fan_activity = data.ac_fan_activity;
                }
                if ("contact_sensor_activity" in data && data.contact_sensor_activity != undefined) {
                    this.contact_sensor_activity = data.contact_sensor_activity;
                }
                if ("curtain_activity" in data && data.curtain_activity != undefined) {
                    this.curtain_activity = data.curtain_activity;
                }
                if ("driver_common_activity" in data && data.driver_common_activity != undefined) {
                    this.driver_common_activity = data.driver_common_activity;
                }
                if ("rgbwwa_activity" in data && data.rgbwwa_activity != undefined) {
                    this.rgbwwa_activity = data.rgbwwa_activity;
                }
                if ("es_activity" in data && data.es_activity != undefined) {
                    this.es_activity = data.es_activity;
                }
                if ("sc_activty" in data && data.sc_activty != undefined) {
                    this.sc_activty = data.sc_activty;
                }
                if ("IRremote_activity" in data && data.IRremote_activity != undefined) {
                    this.IRremote_activity = data.IRremote_activity;
                }
                if ("dali_ct_activity" in data && data.dali_ct_activity != undefined) {
                    this.dali_ct_activity = data.dali_ct_activity;
                }
                if ("dali_dimmable_driver_activity" in data && data.dali_dimmable_driver_activity != undefined) {
                    this.dali_dimmable_driver_activity = data.dali_dimmable_driver_activity;
                }
                if ("dali_nondimmable_driver_activity" in data && data.dali_nondimmable_driver_activity != undefined) {
                    this.dali_nondimmable_driver_activity = data.dali_nondimmable_driver_activity;
                }
                if ("ZB_dimmable_driver_activity" in data && data.ZB_dimmable_driver_activity != undefined) {
                    this.ZB_dimmable_driver_activity = data.ZB_dimmable_driver_activity;
                }
                if ("ZB_nondimmable_driver_activity" in data && data.ZB_nondimmable_driver_activity != undefined) {
                    this.ZB_nondimmable_driver_activity = data.ZB_nondimmable_driver_activity;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_category() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_category(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get device_room_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_room_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get device_area() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set device_area(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get device_section_name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set device_section_name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get inline_dimmer_activity() {
            return pb_1.Message.getWrapperField(this, InlineDimmerActivityAction, 21) as InlineDimmerActivityAction;
        }
        set inline_dimmer_activity(value: InlineDimmerActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_inline_dimmer_activity() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get dc_fan_activity() {
            return pb_1.Message.getWrapperField(this, DcFancontrollerActivityAction, 22) as DcFancontrollerActivityAction;
        }
        set dc_fan_activity(value: DcFancontrollerActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_dc_fan_activity() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get ac_fan_activity() {
            return pb_1.Message.getWrapperField(this, AcFancontrollerActivityAction, 23) as AcFancontrollerActivityAction;
        }
        set ac_fan_activity(value: AcFancontrollerActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_ac_fan_activity() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get contact_sensor_activity() {
            return pb_1.Message.getWrapperField(this, ContactSensorActivityAction, 24) as ContactSensorActivityAction;
        }
        set contact_sensor_activity(value: ContactSensorActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
        }
        get has_contact_sensor_activity() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get curtain_activity() {
            return pb_1.Message.getWrapperField(this, CurtainActivityAction, 25) as CurtainActivityAction;
        }
        set curtain_activity(value: CurtainActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_curtain_activity() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get driver_common_activity() {
            return pb_1.Message.getWrapperField(this, DriverActivityAction, 26) as DriverActivityAction;
        }
        set driver_common_activity(value: DriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_driver_common_activity() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get rgbwwa_activity() {
            return pb_1.Message.getWrapperField(this, RgbwwaActivityAction, 27) as RgbwwaActivityAction;
        }
        set rgbwwa_activity(value: RgbwwaActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_rgbwwa_activity() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get es_activity() {
            return pb_1.Message.getWrapperField(this, EmbeddedSwitchActivityAction, 28) as EmbeddedSwitchActivityAction;
        }
        set es_activity(value: EmbeddedSwitchActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_es_activity() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get sc_activty() {
            return pb_1.Message.getWrapperField(this, SmartConsoleActivityAction, 29) as SmartConsoleActivityAction;
        }
        set sc_activty(value: SmartConsoleActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
        }
        get has_sc_activty() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get IRremote_activity() {
            return pb_1.Message.getWrapperField(this, IRRemoteActivityAction, 30) as IRRemoteActivityAction;
        }
        set IRremote_activity(value: IRRemoteActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
        }
        get has_IRremote_activity() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get dali_ct_activity() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableActivityAction, 31) as DaliColorTunableActivityAction;
        }
        set dali_ct_activity(value: DaliColorTunableActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 31, this.#one_of_decls[0], value);
        }
        get has_dali_ct_activity() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get dali_dimmable_driver_activity() {
            return pb_1.Message.getWrapperField(this, DaliDimmableDriverActivityAction, 32) as DaliDimmableDriverActivityAction;
        }
        set dali_dimmable_driver_activity(value: DaliDimmableDriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 32, this.#one_of_decls[0], value);
        }
        get has_dali_dimmable_driver_activity() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get dali_nondimmable_driver_activity() {
            return pb_1.Message.getWrapperField(this, DaliNonDimmableDriverActivityAction, 33) as DaliNonDimmableDriverActivityAction;
        }
        set dali_nondimmable_driver_activity(value: DaliNonDimmableDriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 33, this.#one_of_decls[0], value);
        }
        get has_dali_nondimmable_driver_activity() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get ZB_dimmable_driver_activity() {
            return pb_1.Message.getWrapperField(this, ZigbeeDimmableDriverActivityAction, 34) as ZigbeeDimmableDriverActivityAction;
        }
        set ZB_dimmable_driver_activity(value: ZigbeeDimmableDriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 34, this.#one_of_decls[0], value);
        }
        get has_ZB_dimmable_driver_activity() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get ZB_nondimmable_driver_activity() {
            return pb_1.Message.getWrapperField(this, ZigbeeNonDimmableDriverActivityAction, 35) as ZigbeeNonDimmableDriverActivityAction;
        }
        set ZB_nondimmable_driver_activity(value: ZigbeeNonDimmableDriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 35, this.#one_of_decls[0], value);
        }
        get has_ZB_nondimmable_driver_activity() {
            return pb_1.Message.getField(this, 35) != null;
        }
        get device_action() {
            const cases: {
                [index: number]: "none" | "inline_dimmer_activity" | "dc_fan_activity" | "ac_fan_activity" | "contact_sensor_activity" | "curtain_activity" | "driver_common_activity" | "rgbwwa_activity" | "es_activity" | "sc_activty" | "IRremote_activity" | "dali_ct_activity" | "dali_dimmable_driver_activity" | "dali_nondimmable_driver_activity" | "ZB_dimmable_driver_activity" | "ZB_nondimmable_driver_activity";
            } = {
                0: "none",
                21: "inline_dimmer_activity",
                22: "dc_fan_activity",
                23: "ac_fan_activity",
                24: "contact_sensor_activity",
                25: "curtain_activity",
                26: "driver_common_activity",
                27: "rgbwwa_activity",
                28: "es_activity",
                29: "sc_activty",
                30: "IRremote_activity",
                31: "dali_ct_activity",
                32: "dali_dimmable_driver_activity",
                33: "dali_nondimmable_driver_activity",
                34: "ZB_dimmable_driver_activity",
                35: "ZB_nondimmable_driver_activity"
            };
            return cases[pb_1.Message.computeOneofCase(this, [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])];
        }
        static fromObject(data: {
            device_id?: string;
            device_category?: string;
            device_name?: string;
            device_section?: string;
            device_room?: string;
            device_room_name?: string;
            device_area?: number;
            device_section_name?: string;
            inline_dimmer_activity?: ReturnType<typeof InlineDimmerActivityAction.prototype.toObject>;
            dc_fan_activity?: ReturnType<typeof DcFancontrollerActivityAction.prototype.toObject>;
            ac_fan_activity?: ReturnType<typeof AcFancontrollerActivityAction.prototype.toObject>;
            contact_sensor_activity?: ReturnType<typeof ContactSensorActivityAction.prototype.toObject>;
            curtain_activity?: ReturnType<typeof CurtainActivityAction.prototype.toObject>;
            driver_common_activity?: ReturnType<typeof DriverActivityAction.prototype.toObject>;
            rgbwwa_activity?: ReturnType<typeof RgbwwaActivityAction.prototype.toObject>;
            es_activity?: ReturnType<typeof EmbeddedSwitchActivityAction.prototype.toObject>;
            sc_activty?: ReturnType<typeof SmartConsoleActivityAction.prototype.toObject>;
            IRremote_activity?: ReturnType<typeof IRRemoteActivityAction.prototype.toObject>;
            dali_ct_activity?: ReturnType<typeof DaliColorTunableActivityAction.prototype.toObject>;
            dali_dimmable_driver_activity?: ReturnType<typeof DaliDimmableDriverActivityAction.prototype.toObject>;
            dali_nondimmable_driver_activity?: ReturnType<typeof DaliNonDimmableDriverActivityAction.prototype.toObject>;
            ZB_dimmable_driver_activity?: ReturnType<typeof ZigbeeDimmableDriverActivityAction.prototype.toObject>;
            ZB_nondimmable_driver_activity?: ReturnType<typeof ZigbeeNonDimmableDriverActivityAction.prototype.toObject>;
        }): DeviceActivityAction {
            const message = new DeviceActivityAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_category != null) {
                message.device_category = data.device_category;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_room_name != null) {
                message.device_room_name = data.device_room_name;
            }
            if (data.device_area != null) {
                message.device_area = data.device_area;
            }
            if (data.device_section_name != null) {
                message.device_section_name = data.device_section_name;
            }
            if (data.inline_dimmer_activity != null) {
                message.inline_dimmer_activity = InlineDimmerActivityAction.fromObject(data.inline_dimmer_activity);
            }
            if (data.dc_fan_activity != null) {
                message.dc_fan_activity = DcFancontrollerActivityAction.fromObject(data.dc_fan_activity);
            }
            if (data.ac_fan_activity != null) {
                message.ac_fan_activity = AcFancontrollerActivityAction.fromObject(data.ac_fan_activity);
            }
            if (data.contact_sensor_activity != null) {
                message.contact_sensor_activity = ContactSensorActivityAction.fromObject(data.contact_sensor_activity);
            }
            if (data.curtain_activity != null) {
                message.curtain_activity = CurtainActivityAction.fromObject(data.curtain_activity);
            }
            if (data.driver_common_activity != null) {
                message.driver_common_activity = DriverActivityAction.fromObject(data.driver_common_activity);
            }
            if (data.rgbwwa_activity != null) {
                message.rgbwwa_activity = RgbwwaActivityAction.fromObject(data.rgbwwa_activity);
            }
            if (data.es_activity != null) {
                message.es_activity = EmbeddedSwitchActivityAction.fromObject(data.es_activity);
            }
            if (data.sc_activty != null) {
                message.sc_activty = SmartConsoleActivityAction.fromObject(data.sc_activty);
            }
            if (data.IRremote_activity != null) {
                message.IRremote_activity = IRRemoteActivityAction.fromObject(data.IRremote_activity);
            }
            if (data.dali_ct_activity != null) {
                message.dali_ct_activity = DaliColorTunableActivityAction.fromObject(data.dali_ct_activity);
            }
            if (data.dali_dimmable_driver_activity != null) {
                message.dali_dimmable_driver_activity = DaliDimmableDriverActivityAction.fromObject(data.dali_dimmable_driver_activity);
            }
            if (data.dali_nondimmable_driver_activity != null) {
                message.dali_nondimmable_driver_activity = DaliNonDimmableDriverActivityAction.fromObject(data.dali_nondimmable_driver_activity);
            }
            if (data.ZB_dimmable_driver_activity != null) {
                message.ZB_dimmable_driver_activity = ZigbeeDimmableDriverActivityAction.fromObject(data.ZB_dimmable_driver_activity);
            }
            if (data.ZB_nondimmable_driver_activity != null) {
                message.ZB_nondimmable_driver_activity = ZigbeeNonDimmableDriverActivityAction.fromObject(data.ZB_nondimmable_driver_activity);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_category?: string;
                device_name?: string;
                device_section?: string;
                device_room?: string;
                device_room_name?: string;
                device_area?: number;
                device_section_name?: string;
                inline_dimmer_activity?: ReturnType<typeof InlineDimmerActivityAction.prototype.toObject>;
                dc_fan_activity?: ReturnType<typeof DcFancontrollerActivityAction.prototype.toObject>;
                ac_fan_activity?: ReturnType<typeof AcFancontrollerActivityAction.prototype.toObject>;
                contact_sensor_activity?: ReturnType<typeof ContactSensorActivityAction.prototype.toObject>;
                curtain_activity?: ReturnType<typeof CurtainActivityAction.prototype.toObject>;
                driver_common_activity?: ReturnType<typeof DriverActivityAction.prototype.toObject>;
                rgbwwa_activity?: ReturnType<typeof RgbwwaActivityAction.prototype.toObject>;
                es_activity?: ReturnType<typeof EmbeddedSwitchActivityAction.prototype.toObject>;
                sc_activty?: ReturnType<typeof SmartConsoleActivityAction.prototype.toObject>;
                IRremote_activity?: ReturnType<typeof IRRemoteActivityAction.prototype.toObject>;
                dali_ct_activity?: ReturnType<typeof DaliColorTunableActivityAction.prototype.toObject>;
                dali_dimmable_driver_activity?: ReturnType<typeof DaliDimmableDriverActivityAction.prototype.toObject>;
                dali_nondimmable_driver_activity?: ReturnType<typeof DaliNonDimmableDriverActivityAction.prototype.toObject>;
                ZB_dimmable_driver_activity?: ReturnType<typeof ZigbeeDimmableDriverActivityAction.prototype.toObject>;
                ZB_nondimmable_driver_activity?: ReturnType<typeof ZigbeeNonDimmableDriverActivityAction.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_category != null) {
                data.device_category = this.device_category;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_room_name != null) {
                data.device_room_name = this.device_room_name;
            }
            if (this.device_area != null) {
                data.device_area = this.device_area;
            }
            if (this.device_section_name != null) {
                data.device_section_name = this.device_section_name;
            }
            if (this.inline_dimmer_activity != null) {
                data.inline_dimmer_activity = this.inline_dimmer_activity.toObject();
            }
            if (this.dc_fan_activity != null) {
                data.dc_fan_activity = this.dc_fan_activity.toObject();
            }
            if (this.ac_fan_activity != null) {
                data.ac_fan_activity = this.ac_fan_activity.toObject();
            }
            if (this.contact_sensor_activity != null) {
                data.contact_sensor_activity = this.contact_sensor_activity.toObject();
            }
            if (this.curtain_activity != null) {
                data.curtain_activity = this.curtain_activity.toObject();
            }
            if (this.driver_common_activity != null) {
                data.driver_common_activity = this.driver_common_activity.toObject();
            }
            if (this.rgbwwa_activity != null) {
                data.rgbwwa_activity = this.rgbwwa_activity.toObject();
            }
            if (this.es_activity != null) {
                data.es_activity = this.es_activity.toObject();
            }
            if (this.sc_activty != null) {
                data.sc_activty = this.sc_activty.toObject();
            }
            if (this.IRremote_activity != null) {
                data.IRremote_activity = this.IRremote_activity.toObject();
            }
            if (this.dali_ct_activity != null) {
                data.dali_ct_activity = this.dali_ct_activity.toObject();
            }
            if (this.dali_dimmable_driver_activity != null) {
                data.dali_dimmable_driver_activity = this.dali_dimmable_driver_activity.toObject();
            }
            if (this.dali_nondimmable_driver_activity != null) {
                data.dali_nondimmable_driver_activity = this.dali_nondimmable_driver_activity.toObject();
            }
            if (this.ZB_dimmable_driver_activity != null) {
                data.ZB_dimmable_driver_activity = this.ZB_dimmable_driver_activity.toObject();
            }
            if (this.ZB_nondimmable_driver_activity != null) {
                data.ZB_nondimmable_driver_activity = this.ZB_nondimmable_driver_activity.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_category.length)
                writer.writeString(2, this.device_category);
            if (this.device_name.length)
                writer.writeString(3, this.device_name);
            if (this.device_section.length)
                writer.writeString(4, this.device_section);
            if (this.device_room.length)
                writer.writeString(5, this.device_room);
            if (this.device_room_name.length)
                writer.writeString(6, this.device_room_name);
            if (this.device_area != 0)
                writer.writeInt32(7, this.device_area);
            if (this.device_section_name.length)
                writer.writeString(8, this.device_section_name);
            if (this.has_inline_dimmer_activity)
                writer.writeMessage(21, this.inline_dimmer_activity, () => this.inline_dimmer_activity.serialize(writer));
            if (this.has_dc_fan_activity)
                writer.writeMessage(22, this.dc_fan_activity, () => this.dc_fan_activity.serialize(writer));
            if (this.has_ac_fan_activity)
                writer.writeMessage(23, this.ac_fan_activity, () => this.ac_fan_activity.serialize(writer));
            if (this.has_contact_sensor_activity)
                writer.writeMessage(24, this.contact_sensor_activity, () => this.contact_sensor_activity.serialize(writer));
            if (this.has_curtain_activity)
                writer.writeMessage(25, this.curtain_activity, () => this.curtain_activity.serialize(writer));
            if (this.has_driver_common_activity)
                writer.writeMessage(26, this.driver_common_activity, () => this.driver_common_activity.serialize(writer));
            if (this.has_rgbwwa_activity)
                writer.writeMessage(27, this.rgbwwa_activity, () => this.rgbwwa_activity.serialize(writer));
            if (this.has_es_activity)
                writer.writeMessage(28, this.es_activity, () => this.es_activity.serialize(writer));
            if (this.has_sc_activty)
                writer.writeMessage(29, this.sc_activty, () => this.sc_activty.serialize(writer));
            if (this.has_IRremote_activity)
                writer.writeMessage(30, this.IRremote_activity, () => this.IRremote_activity.serialize(writer));
            if (this.has_dali_ct_activity)
                writer.writeMessage(31, this.dali_ct_activity, () => this.dali_ct_activity.serialize(writer));
            if (this.has_dali_dimmable_driver_activity)
                writer.writeMessage(32, this.dali_dimmable_driver_activity, () => this.dali_dimmable_driver_activity.serialize(writer));
            if (this.has_dali_nondimmable_driver_activity)
                writer.writeMessage(33, this.dali_nondimmable_driver_activity, () => this.dali_nondimmable_driver_activity.serialize(writer));
            if (this.has_ZB_dimmable_driver_activity)
                writer.writeMessage(34, this.ZB_dimmable_driver_activity, () => this.ZB_dimmable_driver_activity.serialize(writer));
            if (this.has_ZB_nondimmable_driver_activity)
                writer.writeMessage(35, this.ZB_nondimmable_driver_activity, () => this.ZB_nondimmable_driver_activity.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_category = reader.readString();
                        break;
                    case 3:
                        message.device_name = reader.readString();
                        break;
                    case 4:
                        message.device_section = reader.readString();
                        break;
                    case 5:
                        message.device_room = reader.readString();
                        break;
                    case 6:
                        message.device_room_name = reader.readString();
                        break;
                    case 7:
                        message.device_area = reader.readInt32();
                        break;
                    case 8:
                        message.device_section_name = reader.readString();
                        break;
                    case 21:
                        reader.readMessage(message.inline_dimmer_activity, () => message.inline_dimmer_activity = InlineDimmerActivityAction.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.dc_fan_activity, () => message.dc_fan_activity = DcFancontrollerActivityAction.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.ac_fan_activity, () => message.ac_fan_activity = AcFancontrollerActivityAction.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.contact_sensor_activity, () => message.contact_sensor_activity = ContactSensorActivityAction.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.curtain_activity, () => message.curtain_activity = CurtainActivityAction.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.driver_common_activity, () => message.driver_common_activity = DriverActivityAction.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.rgbwwa_activity, () => message.rgbwwa_activity = RgbwwaActivityAction.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.es_activity, () => message.es_activity = EmbeddedSwitchActivityAction.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.sc_activty, () => message.sc_activty = SmartConsoleActivityAction.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.IRremote_activity, () => message.IRremote_activity = IRRemoteActivityAction.deserialize(reader));
                        break;
                    case 31:
                        reader.readMessage(message.dali_ct_activity, () => message.dali_ct_activity = DaliColorTunableActivityAction.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.dali_dimmable_driver_activity, () => message.dali_dimmable_driver_activity = DaliDimmableDriverActivityAction.deserialize(reader));
                        break;
                    case 33:
                        reader.readMessage(message.dali_nondimmable_driver_activity, () => message.dali_nondimmable_driver_activity = DaliNonDimmableDriverActivityAction.deserialize(reader));
                        break;
                    case 34:
                        reader.readMessage(message.ZB_dimmable_driver_activity, () => message.ZB_dimmable_driver_activity = ZigbeeDimmableDriverActivityAction.deserialize(reader));
                        break;
                    case 35:
                        reader.readMessage(message.ZB_nondimmable_driver_activity, () => message.ZB_nondimmable_driver_activity = ZigbeeNonDimmableDriverActivityAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceActivityAction {
            return DeviceActivityAction.deserialize(bytes);
        }
    }
    export class SceneActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_name?: string;
            scene_type?: number;
            scene_section?: string;
            scene_room?: string;
            scene_room_name?: string;
            scene_area?: number;
            scene_section_name?: string;
            scene_preset_type?: dependency_21.com.keus.hub.SCENE_PRESET_TYPE;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_name" in data && data.scene_name != undefined) {
                    this.scene_name = data.scene_name;
                }
                if ("scene_type" in data && data.scene_type != undefined) {
                    this.scene_type = data.scene_type;
                }
                if ("scene_section" in data && data.scene_section != undefined) {
                    this.scene_section = data.scene_section;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("scene_room_name" in data && data.scene_room_name != undefined) {
                    this.scene_room_name = data.scene_room_name;
                }
                if ("scene_area" in data && data.scene_area != undefined) {
                    this.scene_area = data.scene_area;
                }
                if ("scene_section_name" in data && data.scene_section_name != undefined) {
                    this.scene_section_name = data.scene_section_name;
                }
                if ("scene_preset_type" in data && data.scene_preset_type != undefined) {
                    this.scene_preset_type = data.scene_preset_type;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scene_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set scene_type(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get scene_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set scene_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get scene_room_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set scene_room_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get scene_area() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set scene_area(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get scene_section_name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set scene_section_name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get scene_preset_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, dependency_21.com.keus.hub.SCENE_PRESET_TYPE.DEFAULT) as dependency_21.com.keus.hub.SCENE_PRESET_TYPE;
        }
        set scene_preset_type(value: dependency_21.com.keus.hub.SCENE_PRESET_TYPE) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_name?: string;
            scene_type?: number;
            scene_section?: string;
            scene_room?: string;
            scene_room_name?: string;
            scene_area?: number;
            scene_section_name?: string;
            scene_preset_type?: dependency_21.com.keus.hub.SCENE_PRESET_TYPE;
        }): SceneActivityAction {
            const message = new SceneActivityAction({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_name != null) {
                message.scene_name = data.scene_name;
            }
            if (data.scene_type != null) {
                message.scene_type = data.scene_type;
            }
            if (data.scene_section != null) {
                message.scene_section = data.scene_section;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.scene_room_name != null) {
                message.scene_room_name = data.scene_room_name;
            }
            if (data.scene_area != null) {
                message.scene_area = data.scene_area;
            }
            if (data.scene_section_name != null) {
                message.scene_section_name = data.scene_section_name;
            }
            if (data.scene_preset_type != null) {
                message.scene_preset_type = data.scene_preset_type;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_name?: string;
                scene_type?: number;
                scene_section?: string;
                scene_room?: string;
                scene_room_name?: string;
                scene_area?: number;
                scene_section_name?: string;
                scene_preset_type?: dependency_21.com.keus.hub.SCENE_PRESET_TYPE;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_name != null) {
                data.scene_name = this.scene_name;
            }
            if (this.scene_type != null) {
                data.scene_type = this.scene_type;
            }
            if (this.scene_section != null) {
                data.scene_section = this.scene_section;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.scene_room_name != null) {
                data.scene_room_name = this.scene_room_name;
            }
            if (this.scene_area != null) {
                data.scene_area = this.scene_area;
            }
            if (this.scene_section_name != null) {
                data.scene_section_name = this.scene_section_name;
            }
            if (this.scene_preset_type != null) {
                data.scene_preset_type = this.scene_preset_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.scene_name.length)
                writer.writeString(2, this.scene_name);
            if (this.scene_type != 0)
                writer.writeUint32(3, this.scene_type);
            if (this.scene_section.length)
                writer.writeString(4, this.scene_section);
            if (this.scene_room.length)
                writer.writeString(5, this.scene_room);
            if (this.scene_room_name.length)
                writer.writeString(6, this.scene_room_name);
            if (this.scene_area != 0)
                writer.writeUint32(7, this.scene_area);
            if (this.scene_section_name.length)
                writer.writeString(8, this.scene_section_name);
            if (this.scene_preset_type != dependency_21.com.keus.hub.SCENE_PRESET_TYPE.DEFAULT)
                writer.writeEnum(9, this.scene_preset_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.scene_name = reader.readString();
                        break;
                    case 3:
                        message.scene_type = reader.readUint32();
                        break;
                    case 4:
                        message.scene_section = reader.readString();
                        break;
                    case 5:
                        message.scene_room = reader.readString();
                        break;
                    case 6:
                        message.scene_room_name = reader.readString();
                        break;
                    case 7:
                        message.scene_area = reader.readUint32();
                        break;
                    case 8:
                        message.scene_section_name = reader.readString();
                        break;
                    case 9:
                        message.scene_preset_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SceneActivityAction {
            return SceneActivityAction.deserialize(bytes);
        }
    }
    export class GroupStateActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driver_state?: number;
            red?: number;
            green?: number;
            blue?: number;
            warm_white?: number;
            cool_white?: number;
            amber?: number;
            pattern?: number;
            color_temperature?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
                if ("red" in data && data.red != undefined) {
                    this.red = data.red;
                }
                if ("green" in data && data.green != undefined) {
                    this.green = data.green;
                }
                if ("blue" in data && data.blue != undefined) {
                    this.blue = data.blue;
                }
                if ("warm_white" in data && data.warm_white != undefined) {
                    this.warm_white = data.warm_white;
                }
                if ("cool_white" in data && data.cool_white != undefined) {
                    this.cool_white = data.cool_white;
                }
                if ("amber" in data && data.amber != undefined) {
                    this.amber = data.amber;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
                if ("color_temperature" in data && data.color_temperature != undefined) {
                    this.color_temperature = data.color_temperature;
                }
            }
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get red() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set red(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get green() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set green(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get blue() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set blue(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get warm_white() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set warm_white(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get cool_white() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set cool_white(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get amber() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set amber(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set pattern(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get color_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set color_temperature(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            driver_state?: number;
            red?: number;
            green?: number;
            blue?: number;
            warm_white?: number;
            cool_white?: number;
            amber?: number;
            pattern?: number;
            color_temperature?: number;
        }): GroupStateActivity {
            const message = new GroupStateActivity({});
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            if (data.red != null) {
                message.red = data.red;
            }
            if (data.green != null) {
                message.green = data.green;
            }
            if (data.blue != null) {
                message.blue = data.blue;
            }
            if (data.warm_white != null) {
                message.warm_white = data.warm_white;
            }
            if (data.cool_white != null) {
                message.cool_white = data.cool_white;
            }
            if (data.amber != null) {
                message.amber = data.amber;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            if (data.color_temperature != null) {
                message.color_temperature = data.color_temperature;
            }
            return message;
        }
        toObject() {
            const data: {
                driver_state?: number;
                red?: number;
                green?: number;
                blue?: number;
                warm_white?: number;
                cool_white?: number;
                amber?: number;
                pattern?: number;
                color_temperature?: number;
            } = {};
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            if (this.red != null) {
                data.red = this.red;
            }
            if (this.green != null) {
                data.green = this.green;
            }
            if (this.blue != null) {
                data.blue = this.blue;
            }
            if (this.warm_white != null) {
                data.warm_white = this.warm_white;
            }
            if (this.cool_white != null) {
                data.cool_white = this.cool_white;
            }
            if (this.amber != null) {
                data.amber = this.amber;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            if (this.color_temperature != null) {
                data.color_temperature = this.color_temperature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.driver_state != 0)
                writer.writeInt32(1, this.driver_state);
            if (this.red != 0)
                writer.writeInt32(2, this.red);
            if (this.green != 0)
                writer.writeInt32(3, this.green);
            if (this.blue != 0)
                writer.writeInt32(4, this.blue);
            if (this.warm_white != 0)
                writer.writeInt32(5, this.warm_white);
            if (this.cool_white != 0)
                writer.writeInt32(6, this.cool_white);
            if (this.amber != 0)
                writer.writeInt32(7, this.amber);
            if (this.pattern != 0)
                writer.writeInt32(8, this.pattern);
            if (this.color_temperature != 0)
                writer.writeInt32(9, this.color_temperature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupStateActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupStateActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.driver_state = reader.readInt32();
                        break;
                    case 2:
                        message.red = reader.readInt32();
                        break;
                    case 3:
                        message.green = reader.readInt32();
                        break;
                    case 4:
                        message.blue = reader.readInt32();
                        break;
                    case 5:
                        message.warm_white = reader.readInt32();
                        break;
                    case 6:
                        message.cool_white = reader.readInt32();
                        break;
                    case 7:
                        message.amber = reader.readInt32();
                        break;
                    case 8:
                        message.pattern = reader.readInt32();
                        break;
                    case 9:
                        message.color_temperature = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupStateActivity {
            return GroupStateActivity.deserialize(bytes);
        }
    }
    export class GroupActivityAction extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]];
        constructor(data?: any[] | ({
            group_id?: number;
            group_name?: string;
            group_room?: string;
            group_section?: string;
            group_type?: dependency_17.com.keus.hub.GROUP_TYPES;
            group_room_name?: string;
            group_area?: number;
            group_section_name?: string;
        } & (({
            dali_ct_state?: DaliColorTunableActivityAction;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: DaliDimmableDriverActivityAction;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: DaliNonDimmableDriverActivityAction;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: ZigbeeDimmableDriverActivityAction;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: ZigbeeNonDimmableDriverActivityAction;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: RgbwwaActivityAction;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: dependency_8.com.keus.hub.OnOffApplianceState;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: dependency_8.com.keus.hub.SingleDimmerApplianceState;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: dependency_8.com.keus.hub.FanApplianceState;
            color_tunable_state?: never;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: dependency_8.com.keus.hub.ColorTunableApplianceState;
            inline_dimmer_state?: never;
        } | {
            dali_ct_state?: never;
            dali_dimmable_state?: never;
            dali_nondimmable_state?: never;
            ZB_dimmable_driver_state?: never;
            ZB_nondimmable_state?: never;
            rgbwwa_state?: never;
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
            inline_dimmer_state?: InlineDimmerActivityAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("group_section" in data && data.group_section != undefined) {
                    this.group_section = data.group_section;
                }
                if ("group_type" in data && data.group_type != undefined) {
                    this.group_type = data.group_type;
                }
                if ("group_room_name" in data && data.group_room_name != undefined) {
                    this.group_room_name = data.group_room_name;
                }
                if ("group_area" in data && data.group_area != undefined) {
                    this.group_area = data.group_area;
                }
                if ("group_section_name" in data && data.group_section_name != undefined) {
                    this.group_section_name = data.group_section_name;
                }
                if ("dali_ct_state" in data && data.dali_ct_state != undefined) {
                    this.dali_ct_state = data.dali_ct_state;
                }
                if ("dali_dimmable_state" in data && data.dali_dimmable_state != undefined) {
                    this.dali_dimmable_state = data.dali_dimmable_state;
                }
                if ("dali_nondimmable_state" in data && data.dali_nondimmable_state != undefined) {
                    this.dali_nondimmable_state = data.dali_nondimmable_state;
                }
                if ("ZB_dimmable_driver_state" in data && data.ZB_dimmable_driver_state != undefined) {
                    this.ZB_dimmable_driver_state = data.ZB_dimmable_driver_state;
                }
                if ("ZB_nondimmable_state" in data && data.ZB_nondimmable_state != undefined) {
                    this.ZB_nondimmable_state = data.ZB_nondimmable_state;
                }
                if ("rgbwwa_state" in data && data.rgbwwa_state != undefined) {
                    this.rgbwwa_state = data.rgbwwa_state;
                }
                if ("on_off_state" in data && data.on_off_state != undefined) {
                    this.on_off_state = data.on_off_state;
                }
                if ("single_dimmer_state" in data && data.single_dimmer_state != undefined) {
                    this.single_dimmer_state = data.single_dimmer_state;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("color_tunable_state" in data && data.color_tunable_state != undefined) {
                    this.color_tunable_state = data.color_tunable_state;
                }
                if ("inline_dimmer_state" in data && data.inline_dimmer_state != undefined) {
                    this.inline_dimmer_state = data.inline_dimmer_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get group_section() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set group_section(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get group_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_17.com.keus.hub.GROUP_TYPES.ZIGBEE_DIMMABLE) as dependency_17.com.keus.hub.GROUP_TYPES;
        }
        set group_type(value: dependency_17.com.keus.hub.GROUP_TYPES) {
            pb_1.Message.setField(this, 6, value);
        }
        get group_room_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set group_room_name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get group_area() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set group_area(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get group_section_name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set group_section_name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get dali_ct_state() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableActivityAction, 10) as DaliColorTunableActivityAction;
        }
        set dali_ct_state(value: DaliColorTunableActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_dali_ct_state() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get dali_dimmable_state() {
            return pb_1.Message.getWrapperField(this, DaliDimmableDriverActivityAction, 11) as DaliDimmableDriverActivityAction;
        }
        set dali_dimmable_state(value: DaliDimmableDriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_dali_dimmable_state() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get dali_nondimmable_state() {
            return pb_1.Message.getWrapperField(this, DaliNonDimmableDriverActivityAction, 12) as DaliNonDimmableDriverActivityAction;
        }
        set dali_nondimmable_state(value: DaliNonDimmableDriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_dali_nondimmable_state() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get ZB_dimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, ZigbeeDimmableDriverActivityAction, 13) as ZigbeeDimmableDriverActivityAction;
        }
        set ZB_dimmable_driver_state(value: ZigbeeDimmableDriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_ZB_dimmable_driver_state() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get ZB_nondimmable_state() {
            return pb_1.Message.getWrapperField(this, ZigbeeNonDimmableDriverActivityAction, 14) as ZigbeeNonDimmableDriverActivityAction;
        }
        set ZB_nondimmable_state(value: ZigbeeNonDimmableDriverActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_ZB_nondimmable_state() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get rgbwwa_state() {
            return pb_1.Message.getWrapperField(this, RgbwwaActivityAction, 15) as RgbwwaActivityAction;
        }
        set rgbwwa_state(value: RgbwwaActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_rgbwwa_state() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get on_off_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.OnOffApplianceState, 16) as dependency_8.com.keus.hub.OnOffApplianceState;
        }
        set on_off_state(value: dependency_8.com.keus.hub.OnOffApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_on_off_state() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get single_dimmer_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.SingleDimmerApplianceState, 17) as dependency_8.com.keus.hub.SingleDimmerApplianceState;
        }
        set single_dimmer_state(value: dependency_8.com.keus.hub.SingleDimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_single_dimmer_state() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get fan_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.FanApplianceState, 18) as dependency_8.com.keus.hub.FanApplianceState;
        }
        set fan_state(value: dependency_8.com.keus.hub.FanApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_fan_state() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get color_tunable_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ColorTunableApplianceState, 19) as dependency_8.com.keus.hub.ColorTunableApplianceState;
        }
        set color_tunable_state(value: dependency_8.com.keus.hub.ColorTunableApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_color_tunable_state() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get inline_dimmer_state() {
            return pb_1.Message.getWrapperField(this, InlineDimmerActivityAction, 20) as InlineDimmerActivityAction;
        }
        set inline_dimmer_state(value: InlineDimmerActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_inline_dimmer_state() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get group_state() {
            const cases: {
                [index: number]: "none" | "dali_ct_state" | "dali_dimmable_state" | "dali_nondimmable_state" | "ZB_dimmable_driver_state" | "ZB_nondimmable_state" | "rgbwwa_state" | "on_off_state" | "single_dimmer_state" | "fan_state" | "color_tunable_state" | "inline_dimmer_state";
            } = {
                0: "none",
                10: "dali_ct_state",
                11: "dali_dimmable_state",
                12: "dali_nondimmable_state",
                13: "ZB_dimmable_driver_state",
                14: "ZB_nondimmable_state",
                15: "rgbwwa_state",
                16: "on_off_state",
                17: "single_dimmer_state",
                18: "fan_state",
                19: "color_tunable_state",
                20: "inline_dimmer_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])];
        }
        static fromObject(data: {
            group_id?: number;
            group_name?: string;
            group_room?: string;
            group_section?: string;
            group_type?: dependency_17.com.keus.hub.GROUP_TYPES;
            group_room_name?: string;
            group_area?: number;
            group_section_name?: string;
            dali_ct_state?: ReturnType<typeof DaliColorTunableActivityAction.prototype.toObject>;
            dali_dimmable_state?: ReturnType<typeof DaliDimmableDriverActivityAction.prototype.toObject>;
            dali_nondimmable_state?: ReturnType<typeof DaliNonDimmableDriverActivityAction.prototype.toObject>;
            ZB_dimmable_driver_state?: ReturnType<typeof ZigbeeDimmableDriverActivityAction.prototype.toObject>;
            ZB_nondimmable_state?: ReturnType<typeof ZigbeeNonDimmableDriverActivityAction.prototype.toObject>;
            rgbwwa_state?: ReturnType<typeof RgbwwaActivityAction.prototype.toObject>;
            on_off_state?: ReturnType<typeof dependency_8.com.keus.hub.OnOffApplianceState.prototype.toObject>;
            single_dimmer_state?: ReturnType<typeof dependency_8.com.keus.hub.SingleDimmerApplianceState.prototype.toObject>;
            fan_state?: ReturnType<typeof dependency_8.com.keus.hub.FanApplianceState.prototype.toObject>;
            color_tunable_state?: ReturnType<typeof dependency_8.com.keus.hub.ColorTunableApplianceState.prototype.toObject>;
            inline_dimmer_state?: ReturnType<typeof InlineDimmerActivityAction.prototype.toObject>;
        }): GroupActivityAction {
            const message = new GroupActivityAction({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.group_section != null) {
                message.group_section = data.group_section;
            }
            if (data.group_type != null) {
                message.group_type = data.group_type;
            }
            if (data.group_room_name != null) {
                message.group_room_name = data.group_room_name;
            }
            if (data.group_area != null) {
                message.group_area = data.group_area;
            }
            if (data.group_section_name != null) {
                message.group_section_name = data.group_section_name;
            }
            if (data.dali_ct_state != null) {
                message.dali_ct_state = DaliColorTunableActivityAction.fromObject(data.dali_ct_state);
            }
            if (data.dali_dimmable_state != null) {
                message.dali_dimmable_state = DaliDimmableDriverActivityAction.fromObject(data.dali_dimmable_state);
            }
            if (data.dali_nondimmable_state != null) {
                message.dali_nondimmable_state = DaliNonDimmableDriverActivityAction.fromObject(data.dali_nondimmable_state);
            }
            if (data.ZB_dimmable_driver_state != null) {
                message.ZB_dimmable_driver_state = ZigbeeDimmableDriverActivityAction.fromObject(data.ZB_dimmable_driver_state);
            }
            if (data.ZB_nondimmable_state != null) {
                message.ZB_nondimmable_state = ZigbeeNonDimmableDriverActivityAction.fromObject(data.ZB_nondimmable_state);
            }
            if (data.rgbwwa_state != null) {
                message.rgbwwa_state = RgbwwaActivityAction.fromObject(data.rgbwwa_state);
            }
            if (data.on_off_state != null) {
                message.on_off_state = dependency_8.com.keus.hub.OnOffApplianceState.fromObject(data.on_off_state);
            }
            if (data.single_dimmer_state != null) {
                message.single_dimmer_state = dependency_8.com.keus.hub.SingleDimmerApplianceState.fromObject(data.single_dimmer_state);
            }
            if (data.fan_state != null) {
                message.fan_state = dependency_8.com.keus.hub.FanApplianceState.fromObject(data.fan_state);
            }
            if (data.color_tunable_state != null) {
                message.color_tunable_state = dependency_8.com.keus.hub.ColorTunableApplianceState.fromObject(data.color_tunable_state);
            }
            if (data.inline_dimmer_state != null) {
                message.inline_dimmer_state = InlineDimmerActivityAction.fromObject(data.inline_dimmer_state);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_name?: string;
                group_room?: string;
                group_section?: string;
                group_type?: dependency_17.com.keus.hub.GROUP_TYPES;
                group_room_name?: string;
                group_area?: number;
                group_section_name?: string;
                dali_ct_state?: ReturnType<typeof DaliColorTunableActivityAction.prototype.toObject>;
                dali_dimmable_state?: ReturnType<typeof DaliDimmableDriverActivityAction.prototype.toObject>;
                dali_nondimmable_state?: ReturnType<typeof DaliNonDimmableDriverActivityAction.prototype.toObject>;
                ZB_dimmable_driver_state?: ReturnType<typeof ZigbeeDimmableDriverActivityAction.prototype.toObject>;
                ZB_nondimmable_state?: ReturnType<typeof ZigbeeNonDimmableDriverActivityAction.prototype.toObject>;
                rgbwwa_state?: ReturnType<typeof RgbwwaActivityAction.prototype.toObject>;
                on_off_state?: ReturnType<typeof dependency_8.com.keus.hub.OnOffApplianceState.prototype.toObject>;
                single_dimmer_state?: ReturnType<typeof dependency_8.com.keus.hub.SingleDimmerApplianceState.prototype.toObject>;
                fan_state?: ReturnType<typeof dependency_8.com.keus.hub.FanApplianceState.prototype.toObject>;
                color_tunable_state?: ReturnType<typeof dependency_8.com.keus.hub.ColorTunableApplianceState.prototype.toObject>;
                inline_dimmer_state?: ReturnType<typeof InlineDimmerActivityAction.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.group_section != null) {
                data.group_section = this.group_section;
            }
            if (this.group_type != null) {
                data.group_type = this.group_type;
            }
            if (this.group_room_name != null) {
                data.group_room_name = this.group_room_name;
            }
            if (this.group_area != null) {
                data.group_area = this.group_area;
            }
            if (this.group_section_name != null) {
                data.group_section_name = this.group_section_name;
            }
            if (this.dali_ct_state != null) {
                data.dali_ct_state = this.dali_ct_state.toObject();
            }
            if (this.dali_dimmable_state != null) {
                data.dali_dimmable_state = this.dali_dimmable_state.toObject();
            }
            if (this.dali_nondimmable_state != null) {
                data.dali_nondimmable_state = this.dali_nondimmable_state.toObject();
            }
            if (this.ZB_dimmable_driver_state != null) {
                data.ZB_dimmable_driver_state = this.ZB_dimmable_driver_state.toObject();
            }
            if (this.ZB_nondimmable_state != null) {
                data.ZB_nondimmable_state = this.ZB_nondimmable_state.toObject();
            }
            if (this.rgbwwa_state != null) {
                data.rgbwwa_state = this.rgbwwa_state.toObject();
            }
            if (this.on_off_state != null) {
                data.on_off_state = this.on_off_state.toObject();
            }
            if (this.single_dimmer_state != null) {
                data.single_dimmer_state = this.single_dimmer_state.toObject();
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state.toObject();
            }
            if (this.color_tunable_state != null) {
                data.color_tunable_state = this.color_tunable_state.toObject();
            }
            if (this.inline_dimmer_state != null) {
                data.inline_dimmer_state = this.inline_dimmer_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_name.length)
                writer.writeString(3, this.group_name);
            if (this.group_room.length)
                writer.writeString(4, this.group_room);
            if (this.group_section.length)
                writer.writeString(5, this.group_section);
            if (this.group_type != dependency_17.com.keus.hub.GROUP_TYPES.ZIGBEE_DIMMABLE)
                writer.writeEnum(6, this.group_type);
            if (this.group_room_name.length)
                writer.writeString(7, this.group_room_name);
            if (this.group_area != 0)
                writer.writeUint32(8, this.group_area);
            if (this.group_section_name.length)
                writer.writeString(9, this.group_section_name);
            if (this.has_dali_ct_state)
                writer.writeMessage(10, this.dali_ct_state, () => this.dali_ct_state.serialize(writer));
            if (this.has_dali_dimmable_state)
                writer.writeMessage(11, this.dali_dimmable_state, () => this.dali_dimmable_state.serialize(writer));
            if (this.has_dali_nondimmable_state)
                writer.writeMessage(12, this.dali_nondimmable_state, () => this.dali_nondimmable_state.serialize(writer));
            if (this.has_ZB_dimmable_driver_state)
                writer.writeMessage(13, this.ZB_dimmable_driver_state, () => this.ZB_dimmable_driver_state.serialize(writer));
            if (this.has_ZB_nondimmable_state)
                writer.writeMessage(14, this.ZB_nondimmable_state, () => this.ZB_nondimmable_state.serialize(writer));
            if (this.has_rgbwwa_state)
                writer.writeMessage(15, this.rgbwwa_state, () => this.rgbwwa_state.serialize(writer));
            if (this.has_on_off_state)
                writer.writeMessage(16, this.on_off_state, () => this.on_off_state.serialize(writer));
            if (this.has_single_dimmer_state)
                writer.writeMessage(17, this.single_dimmer_state, () => this.single_dimmer_state.serialize(writer));
            if (this.has_fan_state)
                writer.writeMessage(18, this.fan_state, () => this.fan_state.serialize(writer));
            if (this.has_color_tunable_state)
                writer.writeMessage(19, this.color_tunable_state, () => this.color_tunable_state.serialize(writer));
            if (this.has_inline_dimmer_state)
                writer.writeMessage(20, this.inline_dimmer_state, () => this.inline_dimmer_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupActivityAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupActivityAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 3:
                        message.group_name = reader.readString();
                        break;
                    case 4:
                        message.group_room = reader.readString();
                        break;
                    case 5:
                        message.group_section = reader.readString();
                        break;
                    case 6:
                        message.group_type = reader.readEnum();
                        break;
                    case 7:
                        message.group_room_name = reader.readString();
                        break;
                    case 8:
                        message.group_area = reader.readUint32();
                        break;
                    case 9:
                        message.group_section_name = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.dali_ct_state, () => message.dali_ct_state = DaliColorTunableActivityAction.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.dali_dimmable_state, () => message.dali_dimmable_state = DaliDimmableDriverActivityAction.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.dali_nondimmable_state, () => message.dali_nondimmable_state = DaliNonDimmableDriverActivityAction.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.ZB_dimmable_driver_state, () => message.ZB_dimmable_driver_state = ZigbeeDimmableDriverActivityAction.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.ZB_nondimmable_state, () => message.ZB_nondimmable_state = ZigbeeNonDimmableDriverActivityAction.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.rgbwwa_state, () => message.rgbwwa_state = RgbwwaActivityAction.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.on_off_state, () => message.on_off_state = dependency_8.com.keus.hub.OnOffApplianceState.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.single_dimmer_state, () => message.single_dimmer_state = dependency_8.com.keus.hub.SingleDimmerApplianceState.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.fan_state, () => message.fan_state = dependency_8.com.keus.hub.FanApplianceState.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.color_tunable_state, () => message.color_tunable_state = dependency_8.com.keus.hub.ColorTunableApplianceState.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.inline_dimmer_state, () => message.inline_dimmer_state = InlineDimmerActivityAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupActivityAction {
            return GroupActivityAction.deserialize(bytes);
        }
    }
    export class Activity extends pb_1.Message {
        #one_of_decls: number[][] = [[7, 8, 9]];
        constructor(data?: any[] | ({
            activity_id?: string;
            activity_source?: string;
            activity_by?: string;
            activity_username?: string;
            activity_time?: number;
            activity_type?: ACTIVITY_TYPES;
            activity_gmtype?: string;
            activity_identifier_info?: dependency_19.com.keus.gateway.ActivityIdentifierInfo;
            activity_state_info?: dependency_20.com.keus.gateway.GMApplianceStateInfo;
            activity_source_info?: dependency_19.com.keus.gateway.ActivitySourceInfo;
            activity_properties_info?: dependency_20.com.keus.gateway.GMAppliancePropertiesInfo;
        } & (({
            device_action?: DeviceActivityAction;
            scene_action?: never;
            group_action?: never;
        } | {
            device_action?: never;
            scene_action?: SceneActivityAction;
            group_action?: never;
        } | {
            device_action?: never;
            scene_action?: never;
            group_action?: GroupActivityAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("activity_id" in data && data.activity_id != undefined) {
                    this.activity_id = data.activity_id;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_by" in data && data.activity_by != undefined) {
                    this.activity_by = data.activity_by;
                }
                if ("activity_username" in data && data.activity_username != undefined) {
                    this.activity_username = data.activity_username;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
                if ("activity_type" in data && data.activity_type != undefined) {
                    this.activity_type = data.activity_type;
                }
                if ("device_action" in data && data.device_action != undefined) {
                    this.device_action = data.device_action;
                }
                if ("scene_action" in data && data.scene_action != undefined) {
                    this.scene_action = data.scene_action;
                }
                if ("group_action" in data && data.group_action != undefined) {
                    this.group_action = data.group_action;
                }
                if ("activity_gmtype" in data && data.activity_gmtype != undefined) {
                    this.activity_gmtype = data.activity_gmtype;
                }
                if ("activity_identifier_info" in data && data.activity_identifier_info != undefined) {
                    this.activity_identifier_info = data.activity_identifier_info;
                }
                if ("activity_state_info" in data && data.activity_state_info != undefined) {
                    this.activity_state_info = data.activity_state_info;
                }
                if ("activity_source_info" in data && data.activity_source_info != undefined) {
                    this.activity_source_info = data.activity_source_info;
                }
                if ("activity_properties_info" in data && data.activity_properties_info != undefined) {
                    this.activity_properties_info = data.activity_properties_info;
                }
            }
        }
        get activity_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set activity_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get activity_by() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_by(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_username() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_username(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get activity_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, ACTIVITY_TYPES.DEVICE) as ACTIVITY_TYPES;
        }
        set activity_type(value: ACTIVITY_TYPES) {
            pb_1.Message.setField(this, 6, value);
        }
        get device_action() {
            return pb_1.Message.getWrapperField(this, DeviceActivityAction, 7) as DeviceActivityAction;
        }
        set device_action(value: DeviceActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_device_action() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get scene_action() {
            return pb_1.Message.getWrapperField(this, SceneActivityAction, 8) as SceneActivityAction;
        }
        set scene_action(value: SceneActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_scene_action() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get group_action() {
            return pb_1.Message.getWrapperField(this, GroupActivityAction, 9) as GroupActivityAction;
        }
        set group_action(value: GroupActivityAction) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_group_action() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get activity_gmtype() {
            return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
        }
        set activity_gmtype(value: string) {
            pb_1.Message.setField(this, 30, value);
        }
        get activity_identifier_info() {
            return pb_1.Message.getWrapperField(this, dependency_19.com.keus.gateway.ActivityIdentifierInfo, 31) as dependency_19.com.keus.gateway.ActivityIdentifierInfo;
        }
        set activity_identifier_info(value: dependency_19.com.keus.gateway.ActivityIdentifierInfo) {
            pb_1.Message.setWrapperField(this, 31, value);
        }
        get has_activity_identifier_info() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get activity_state_info() {
            return pb_1.Message.getWrapperField(this, dependency_20.com.keus.gateway.GMApplianceStateInfo, 32) as dependency_20.com.keus.gateway.GMApplianceStateInfo;
        }
        set activity_state_info(value: dependency_20.com.keus.gateway.GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 32, value);
        }
        get has_activity_state_info() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get activity_source_info() {
            return pb_1.Message.getWrapperField(this, dependency_19.com.keus.gateway.ActivitySourceInfo, 33) as dependency_19.com.keus.gateway.ActivitySourceInfo;
        }
        set activity_source_info(value: dependency_19.com.keus.gateway.ActivitySourceInfo) {
            pb_1.Message.setWrapperField(this, 33, value);
        }
        get has_activity_source_info() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get activity_properties_info() {
            return pb_1.Message.getWrapperField(this, dependency_20.com.keus.gateway.GMAppliancePropertiesInfo, 34) as dependency_20.com.keus.gateway.GMAppliancePropertiesInfo;
        }
        set activity_properties_info(value: dependency_20.com.keus.gateway.GMAppliancePropertiesInfo) {
            pb_1.Message.setWrapperField(this, 34, value);
        }
        get has_activity_properties_info() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get activity_action() {
            const cases: {
                [index: number]: "none" | "device_action" | "scene_action" | "group_action";
            } = {
                0: "none",
                7: "device_action",
                8: "scene_action",
                9: "group_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7, 8, 9])];
        }
        static fromObject(data: {
            activity_id?: string;
            activity_source?: string;
            activity_by?: string;
            activity_username?: string;
            activity_time?: number;
            activity_type?: ACTIVITY_TYPES;
            device_action?: ReturnType<typeof DeviceActivityAction.prototype.toObject>;
            scene_action?: ReturnType<typeof SceneActivityAction.prototype.toObject>;
            group_action?: ReturnType<typeof GroupActivityAction.prototype.toObject>;
            activity_gmtype?: string;
            activity_identifier_info?: ReturnType<typeof dependency_19.com.keus.gateway.ActivityIdentifierInfo.prototype.toObject>;
            activity_state_info?: ReturnType<typeof dependency_20.com.keus.gateway.GMApplianceStateInfo.prototype.toObject>;
            activity_source_info?: ReturnType<typeof dependency_19.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
            activity_properties_info?: ReturnType<typeof dependency_20.com.keus.gateway.GMAppliancePropertiesInfo.prototype.toObject>;
        }): Activity {
            const message = new Activity({});
            if (data.activity_id != null) {
                message.activity_id = data.activity_id;
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_by != null) {
                message.activity_by = data.activity_by;
            }
            if (data.activity_username != null) {
                message.activity_username = data.activity_username;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            if (data.activity_type != null) {
                message.activity_type = data.activity_type;
            }
            if (data.device_action != null) {
                message.device_action = DeviceActivityAction.fromObject(data.device_action);
            }
            if (data.scene_action != null) {
                message.scene_action = SceneActivityAction.fromObject(data.scene_action);
            }
            if (data.group_action != null) {
                message.group_action = GroupActivityAction.fromObject(data.group_action);
            }
            if (data.activity_gmtype != null) {
                message.activity_gmtype = data.activity_gmtype;
            }
            if (data.activity_identifier_info != null) {
                message.activity_identifier_info = dependency_19.com.keus.gateway.ActivityIdentifierInfo.fromObject(data.activity_identifier_info);
            }
            if (data.activity_state_info != null) {
                message.activity_state_info = dependency_20.com.keus.gateway.GMApplianceStateInfo.fromObject(data.activity_state_info);
            }
            if (data.activity_source_info != null) {
                message.activity_source_info = dependency_19.com.keus.gateway.ActivitySourceInfo.fromObject(data.activity_source_info);
            }
            if (data.activity_properties_info != null) {
                message.activity_properties_info = dependency_20.com.keus.gateway.GMAppliancePropertiesInfo.fromObject(data.activity_properties_info);
            }
            return message;
        }
        toObject() {
            const data: {
                activity_id?: string;
                activity_source?: string;
                activity_by?: string;
                activity_username?: string;
                activity_time?: number;
                activity_type?: ACTIVITY_TYPES;
                device_action?: ReturnType<typeof DeviceActivityAction.prototype.toObject>;
                scene_action?: ReturnType<typeof SceneActivityAction.prototype.toObject>;
                group_action?: ReturnType<typeof GroupActivityAction.prototype.toObject>;
                activity_gmtype?: string;
                activity_identifier_info?: ReturnType<typeof dependency_19.com.keus.gateway.ActivityIdentifierInfo.prototype.toObject>;
                activity_state_info?: ReturnType<typeof dependency_20.com.keus.gateway.GMApplianceStateInfo.prototype.toObject>;
                activity_source_info?: ReturnType<typeof dependency_19.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
                activity_properties_info?: ReturnType<typeof dependency_20.com.keus.gateway.GMAppliancePropertiesInfo.prototype.toObject>;
            } = {};
            if (this.activity_id != null) {
                data.activity_id = this.activity_id;
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_by != null) {
                data.activity_by = this.activity_by;
            }
            if (this.activity_username != null) {
                data.activity_username = this.activity_username;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            if (this.activity_type != null) {
                data.activity_type = this.activity_type;
            }
            if (this.device_action != null) {
                data.device_action = this.device_action.toObject();
            }
            if (this.scene_action != null) {
                data.scene_action = this.scene_action.toObject();
            }
            if (this.group_action != null) {
                data.group_action = this.group_action.toObject();
            }
            if (this.activity_gmtype != null) {
                data.activity_gmtype = this.activity_gmtype;
            }
            if (this.activity_identifier_info != null) {
                data.activity_identifier_info = this.activity_identifier_info.toObject();
            }
            if (this.activity_state_info != null) {
                data.activity_state_info = this.activity_state_info.toObject();
            }
            if (this.activity_source_info != null) {
                data.activity_source_info = this.activity_source_info.toObject();
            }
            if (this.activity_properties_info != null) {
                data.activity_properties_info = this.activity_properties_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.activity_id.length)
                writer.writeString(1, this.activity_id);
            if (this.activity_source.length)
                writer.writeString(2, this.activity_source);
            if (this.activity_by.length)
                writer.writeString(3, this.activity_by);
            if (this.activity_username.length)
                writer.writeString(4, this.activity_username);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (this.activity_type != ACTIVITY_TYPES.DEVICE)
                writer.writeEnum(6, this.activity_type);
            if (this.has_device_action)
                writer.writeMessage(7, this.device_action, () => this.device_action.serialize(writer));
            if (this.has_scene_action)
                writer.writeMessage(8, this.scene_action, () => this.scene_action.serialize(writer));
            if (this.has_group_action)
                writer.writeMessage(9, this.group_action, () => this.group_action.serialize(writer));
            if (this.activity_gmtype.length)
                writer.writeString(30, this.activity_gmtype);
            if (this.has_activity_identifier_info)
                writer.writeMessage(31, this.activity_identifier_info, () => this.activity_identifier_info.serialize(writer));
            if (this.has_activity_state_info)
                writer.writeMessage(32, this.activity_state_info, () => this.activity_state_info.serialize(writer));
            if (this.has_activity_source_info)
                writer.writeMessage(33, this.activity_source_info, () => this.activity_source_info.serialize(writer));
            if (this.has_activity_properties_info)
                writer.writeMessage(34, this.activity_properties_info, () => this.activity_properties_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Activity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Activity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.activity_id = reader.readString();
                        break;
                    case 2:
                        message.activity_source = reader.readString();
                        break;
                    case 3:
                        message.activity_by = reader.readString();
                        break;
                    case 4:
                        message.activity_username = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    case 6:
                        message.activity_type = reader.readEnum();
                        break;
                    case 7:
                        reader.readMessage(message.device_action, () => message.device_action = DeviceActivityAction.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.scene_action, () => message.scene_action = SceneActivityAction.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.group_action, () => message.group_action = GroupActivityAction.deserialize(reader));
                        break;
                    case 30:
                        message.activity_gmtype = reader.readString();
                        break;
                    case 31:
                        reader.readMessage(message.activity_identifier_info, () => message.activity_identifier_info = dependency_19.com.keus.gateway.ActivityIdentifierInfo.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.activity_state_info, () => message.activity_state_info = dependency_20.com.keus.gateway.GMApplianceStateInfo.deserialize(reader));
                        break;
                    case 33:
                        reader.readMessage(message.activity_source_info, () => message.activity_source_info = dependency_19.com.keus.gateway.ActivitySourceInfo.deserialize(reader));
                        break;
                    case 34:
                        reader.readMessage(message.activity_properties_info, () => message.activity_properties_info = dependency_20.com.keus.gateway.GMAppliancePropertiesInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Activity {
            return Activity.deserialize(bytes);
        }
    }
    export class GetActivityLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            activity_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("activity_count" in data && data.activity_count != undefined) {
                    this.activity_count = data.activity_count;
                }
            }
        }
        get activity_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set activity_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            activity_count?: number;
        }): GetActivityLog {
            const message = new GetActivityLog({});
            if (data.activity_count != null) {
                message.activity_count = data.activity_count;
            }
            return message;
        }
        toObject() {
            const data: {
                activity_count?: number;
            } = {};
            if (this.activity_count != null) {
                data.activity_count = this.activity_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.activity_count != 0)
                writer.writeInt32(1, this.activity_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetActivityLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetActivityLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.activity_count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetActivityLog {
            return GetActivityLog.deserialize(bytes);
        }
    }
    export class GetActivityLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            activity?: Activity[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("activity" in data && data.activity != undefined) {
                    this.activity = data.activity;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get activity() {
            return pb_1.Message.getRepeatedWrapperField(this, Activity, 4) as Activity[];
        }
        set activity(value: Activity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            activity?: ReturnType<typeof Activity.prototype.toObject>[];
        }): GetActivityLogResponse {
            const message = new GetActivityLogResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.activity != null) {
                message.activity = data.activity.map(item => Activity.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                activity?: ReturnType<typeof Activity.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.activity != null) {
                data.activity = this.activity.map((item: Activity) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (this.activity.length)
                writer.writeRepeatedMessage(4, this.activity, (item: Activity) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetActivityLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetActivityLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.activity, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Activity.deserialize(reader), Activity));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetActivityLogResponse {
            return GetActivityLogResponse.deserialize(bytes);
        }
    }
    export class SystemActivity extends pb_1.Message {
        #one_of_decls: number[][] = [[20, 21, 22, 23, 24, 25, 26, 27, 28]];
        constructor(data?: any[] | ({
            activity_source_device?: string;
            activity_type?: dependency_18.com.keus.hub.REPORT_ACTIVITY_TYPES;
        } & (({
            curtain_activity?: dependency_1.com.keus.hub.ReportZigbeeCurtainControllerActivity;
            ac_fan_activity?: never;
            dc_fan_activity?: never;
            relay_activity?: never;
            es_appliance_activity?: never;
            group_activity?: never;
            scene_activity?: never;
            gm_appliance_system_activity?: never;
            gm_group_system_activity?: never;
        } | {
            curtain_activity?: never;
            ac_fan_activity?: dependency_9.com.keus.hub.ReportZigbeeACFanControllerActivity;
            dc_fan_activity?: never;
            relay_activity?: never;
            es_appliance_activity?: never;
            group_activity?: never;
            scene_activity?: never;
            gm_appliance_system_activity?: never;
            gm_group_system_activity?: never;
        } | {
            curtain_activity?: never;
            ac_fan_activity?: never;
            dc_fan_activity?: dependency_10.com.keus.hub.ReportZigbeeDCFanControllerActivity;
            relay_activity?: never;
            es_appliance_activity?: never;
            group_activity?: never;
            scene_activity?: never;
            gm_appliance_system_activity?: never;
            gm_group_system_activity?: never;
        } | {
            curtain_activity?: never;
            ac_fan_activity?: never;
            dc_fan_activity?: never;
            relay_activity?: dependency_6.com.keus.hub.ReportConsoleRelayActivity;
            es_appliance_activity?: never;
            group_activity?: never;
            scene_activity?: never;
            gm_appliance_system_activity?: never;
            gm_group_system_activity?: never;
        } | {
            curtain_activity?: never;
            ac_fan_activity?: never;
            dc_fan_activity?: never;
            relay_activity?: never;
            es_appliance_activity?: dependency_8.com.keus.hub.ReportZigbeeEmbeddedApplianceActivity;
            group_activity?: never;
            scene_activity?: never;
            gm_appliance_system_activity?: never;
            gm_group_system_activity?: never;
        } | {
            curtain_activity?: never;
            ac_fan_activity?: never;
            dc_fan_activity?: never;
            relay_activity?: never;
            es_appliance_activity?: never;
            group_activity?: dependency_17.com.keus.hub.ReportUpdateGroupActivity;
            scene_activity?: never;
            gm_appliance_system_activity?: never;
            gm_group_system_activity?: never;
        } | {
            curtain_activity?: never;
            ac_fan_activity?: never;
            dc_fan_activity?: never;
            relay_activity?: never;
            es_appliance_activity?: never;
            group_activity?: never;
            scene_activity?: dependency_16.com.keus.hub.ReportSceneExecutionActivity;
            gm_appliance_system_activity?: never;
            gm_group_system_activity?: never;
        } | {
            curtain_activity?: never;
            ac_fan_activity?: never;
            dc_fan_activity?: never;
            relay_activity?: never;
            es_appliance_activity?: never;
            group_activity?: never;
            scene_activity?: never;
            gm_appliance_system_activity?: dependency_20.com.keus.gateway.ReportGmApplianceSystemActivity;
            gm_group_system_activity?: never;
        } | {
            curtain_activity?: never;
            ac_fan_activity?: never;
            dc_fan_activity?: never;
            relay_activity?: never;
            es_appliance_activity?: never;
            group_activity?: never;
            scene_activity?: never;
            gm_appliance_system_activity?: never;
            gm_group_system_activity?: dependency_23.com.keus.gateway.ReportGmGroupSystemActivity;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("activity_source_device" in data && data.activity_source_device != undefined) {
                    this.activity_source_device = data.activity_source_device;
                }
                if ("activity_type" in data && data.activity_type != undefined) {
                    this.activity_type = data.activity_type;
                }
                if ("curtain_activity" in data && data.curtain_activity != undefined) {
                    this.curtain_activity = data.curtain_activity;
                }
                if ("ac_fan_activity" in data && data.ac_fan_activity != undefined) {
                    this.ac_fan_activity = data.ac_fan_activity;
                }
                if ("dc_fan_activity" in data && data.dc_fan_activity != undefined) {
                    this.dc_fan_activity = data.dc_fan_activity;
                }
                if ("relay_activity" in data && data.relay_activity != undefined) {
                    this.relay_activity = data.relay_activity;
                }
                if ("es_appliance_activity" in data && data.es_appliance_activity != undefined) {
                    this.es_appliance_activity = data.es_appliance_activity;
                }
                if ("group_activity" in data && data.group_activity != undefined) {
                    this.group_activity = data.group_activity;
                }
                if ("scene_activity" in data && data.scene_activity != undefined) {
                    this.scene_activity = data.scene_activity;
                }
                if ("gm_appliance_system_activity" in data && data.gm_appliance_system_activity != undefined) {
                    this.gm_appliance_system_activity = data.gm_appliance_system_activity;
                }
                if ("gm_group_system_activity" in data && data.gm_group_system_activity != undefined) {
                    this.gm_group_system_activity = data.gm_group_system_activity;
                }
            }
        }
        get activity_source_device() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set activity_source_device(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get activity_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_18.com.keus.hub.REPORT_ACTIVITY_TYPES.CURTAIN_DEVICE) as dependency_18.com.keus.hub.REPORT_ACTIVITY_TYPES;
        }
        set activity_type(value: dependency_18.com.keus.hub.REPORT_ACTIVITY_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get curtain_activity() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ReportZigbeeCurtainControllerActivity, 20) as dependency_1.com.keus.hub.ReportZigbeeCurtainControllerActivity;
        }
        set curtain_activity(value: dependency_1.com.keus.hub.ReportZigbeeCurtainControllerActivity) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_curtain_activity() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get ac_fan_activity() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.ReportZigbeeACFanControllerActivity, 21) as dependency_9.com.keus.hub.ReportZigbeeACFanControllerActivity;
        }
        set ac_fan_activity(value: dependency_9.com.keus.hub.ReportZigbeeACFanControllerActivity) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_ac_fan_activity() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get dc_fan_activity() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ReportZigbeeDCFanControllerActivity, 22) as dependency_10.com.keus.hub.ReportZigbeeDCFanControllerActivity;
        }
        set dc_fan_activity(value: dependency_10.com.keus.hub.ReportZigbeeDCFanControllerActivity) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_dc_fan_activity() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get relay_activity() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.ReportConsoleRelayActivity, 23) as dependency_6.com.keus.hub.ReportConsoleRelayActivity;
        }
        set relay_activity(value: dependency_6.com.keus.hub.ReportConsoleRelayActivity) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_relay_activity() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get es_appliance_activity() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ReportZigbeeEmbeddedApplianceActivity, 24) as dependency_8.com.keus.hub.ReportZigbeeEmbeddedApplianceActivity;
        }
        set es_appliance_activity(value: dependency_8.com.keus.hub.ReportZigbeeEmbeddedApplianceActivity) {
            pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
        }
        get has_es_appliance_activity() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get group_activity() {
            return pb_1.Message.getWrapperField(this, dependency_17.com.keus.hub.ReportUpdateGroupActivity, 25) as dependency_17.com.keus.hub.ReportUpdateGroupActivity;
        }
        set group_activity(value: dependency_17.com.keus.hub.ReportUpdateGroupActivity) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_group_activity() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get scene_activity() {
            return pb_1.Message.getWrapperField(this, dependency_16.com.keus.hub.ReportSceneExecutionActivity, 26) as dependency_16.com.keus.hub.ReportSceneExecutionActivity;
        }
        set scene_activity(value: dependency_16.com.keus.hub.ReportSceneExecutionActivity) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_scene_activity() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get gm_appliance_system_activity() {
            return pb_1.Message.getWrapperField(this, dependency_20.com.keus.gateway.ReportGmApplianceSystemActivity, 27) as dependency_20.com.keus.gateway.ReportGmApplianceSystemActivity;
        }
        set gm_appliance_system_activity(value: dependency_20.com.keus.gateway.ReportGmApplianceSystemActivity) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_gm_appliance_system_activity() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get gm_group_system_activity() {
            return pb_1.Message.getWrapperField(this, dependency_23.com.keus.gateway.ReportGmGroupSystemActivity, 28) as dependency_23.com.keus.gateway.ReportGmGroupSystemActivity;
        }
        set gm_group_system_activity(value: dependency_23.com.keus.gateway.ReportGmGroupSystemActivity) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_gm_group_system_activity() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get system_activity() {
            const cases: {
                [index: number]: "none" | "curtain_activity" | "ac_fan_activity" | "dc_fan_activity" | "relay_activity" | "es_appliance_activity" | "group_activity" | "scene_activity" | "gm_appliance_system_activity" | "gm_group_system_activity";
            } = {
                0: "none",
                20: "curtain_activity",
                21: "ac_fan_activity",
                22: "dc_fan_activity",
                23: "relay_activity",
                24: "es_appliance_activity",
                25: "group_activity",
                26: "scene_activity",
                27: "gm_appliance_system_activity",
                28: "gm_group_system_activity"
            };
            return cases[pb_1.Message.computeOneofCase(this, [20, 21, 22, 23, 24, 25, 26, 27, 28])];
        }
        static fromObject(data: {
            activity_source_device?: string;
            activity_type?: dependency_18.com.keus.hub.REPORT_ACTIVITY_TYPES;
            curtain_activity?: ReturnType<typeof dependency_1.com.keus.hub.ReportZigbeeCurtainControllerActivity.prototype.toObject>;
            ac_fan_activity?: ReturnType<typeof dependency_9.com.keus.hub.ReportZigbeeACFanControllerActivity.prototype.toObject>;
            dc_fan_activity?: ReturnType<typeof dependency_10.com.keus.hub.ReportZigbeeDCFanControllerActivity.prototype.toObject>;
            relay_activity?: ReturnType<typeof dependency_6.com.keus.hub.ReportConsoleRelayActivity.prototype.toObject>;
            es_appliance_activity?: ReturnType<typeof dependency_8.com.keus.hub.ReportZigbeeEmbeddedApplianceActivity.prototype.toObject>;
            group_activity?: ReturnType<typeof dependency_17.com.keus.hub.ReportUpdateGroupActivity.prototype.toObject>;
            scene_activity?: ReturnType<typeof dependency_16.com.keus.hub.ReportSceneExecutionActivity.prototype.toObject>;
            gm_appliance_system_activity?: ReturnType<typeof dependency_20.com.keus.gateway.ReportGmApplianceSystemActivity.prototype.toObject>;
            gm_group_system_activity?: ReturnType<typeof dependency_23.com.keus.gateway.ReportGmGroupSystemActivity.prototype.toObject>;
        }): SystemActivity {
            const message = new SystemActivity({});
            if (data.activity_source_device != null) {
                message.activity_source_device = data.activity_source_device;
            }
            if (data.activity_type != null) {
                message.activity_type = data.activity_type;
            }
            if (data.curtain_activity != null) {
                message.curtain_activity = dependency_1.com.keus.hub.ReportZigbeeCurtainControllerActivity.fromObject(data.curtain_activity);
            }
            if (data.ac_fan_activity != null) {
                message.ac_fan_activity = dependency_9.com.keus.hub.ReportZigbeeACFanControllerActivity.fromObject(data.ac_fan_activity);
            }
            if (data.dc_fan_activity != null) {
                message.dc_fan_activity = dependency_10.com.keus.hub.ReportZigbeeDCFanControllerActivity.fromObject(data.dc_fan_activity);
            }
            if (data.relay_activity != null) {
                message.relay_activity = dependency_6.com.keus.hub.ReportConsoleRelayActivity.fromObject(data.relay_activity);
            }
            if (data.es_appliance_activity != null) {
                message.es_appliance_activity = dependency_8.com.keus.hub.ReportZigbeeEmbeddedApplianceActivity.fromObject(data.es_appliance_activity);
            }
            if (data.group_activity != null) {
                message.group_activity = dependency_17.com.keus.hub.ReportUpdateGroupActivity.fromObject(data.group_activity);
            }
            if (data.scene_activity != null) {
                message.scene_activity = dependency_16.com.keus.hub.ReportSceneExecutionActivity.fromObject(data.scene_activity);
            }
            if (data.gm_appliance_system_activity != null) {
                message.gm_appliance_system_activity = dependency_20.com.keus.gateway.ReportGmApplianceSystemActivity.fromObject(data.gm_appliance_system_activity);
            }
            if (data.gm_group_system_activity != null) {
                message.gm_group_system_activity = dependency_23.com.keus.gateway.ReportGmGroupSystemActivity.fromObject(data.gm_group_system_activity);
            }
            return message;
        }
        toObject() {
            const data: {
                activity_source_device?: string;
                activity_type?: dependency_18.com.keus.hub.REPORT_ACTIVITY_TYPES;
                curtain_activity?: ReturnType<typeof dependency_1.com.keus.hub.ReportZigbeeCurtainControllerActivity.prototype.toObject>;
                ac_fan_activity?: ReturnType<typeof dependency_9.com.keus.hub.ReportZigbeeACFanControllerActivity.prototype.toObject>;
                dc_fan_activity?: ReturnType<typeof dependency_10.com.keus.hub.ReportZigbeeDCFanControllerActivity.prototype.toObject>;
                relay_activity?: ReturnType<typeof dependency_6.com.keus.hub.ReportConsoleRelayActivity.prototype.toObject>;
                es_appliance_activity?: ReturnType<typeof dependency_8.com.keus.hub.ReportZigbeeEmbeddedApplianceActivity.prototype.toObject>;
                group_activity?: ReturnType<typeof dependency_17.com.keus.hub.ReportUpdateGroupActivity.prototype.toObject>;
                scene_activity?: ReturnType<typeof dependency_16.com.keus.hub.ReportSceneExecutionActivity.prototype.toObject>;
                gm_appliance_system_activity?: ReturnType<typeof dependency_20.com.keus.gateway.ReportGmApplianceSystemActivity.prototype.toObject>;
                gm_group_system_activity?: ReturnType<typeof dependency_23.com.keus.gateway.ReportGmGroupSystemActivity.prototype.toObject>;
            } = {};
            if (this.activity_source_device != null) {
                data.activity_source_device = this.activity_source_device;
            }
            if (this.activity_type != null) {
                data.activity_type = this.activity_type;
            }
            if (this.curtain_activity != null) {
                data.curtain_activity = this.curtain_activity.toObject();
            }
            if (this.ac_fan_activity != null) {
                data.ac_fan_activity = this.ac_fan_activity.toObject();
            }
            if (this.dc_fan_activity != null) {
                data.dc_fan_activity = this.dc_fan_activity.toObject();
            }
            if (this.relay_activity != null) {
                data.relay_activity = this.relay_activity.toObject();
            }
            if (this.es_appliance_activity != null) {
                data.es_appliance_activity = this.es_appliance_activity.toObject();
            }
            if (this.group_activity != null) {
                data.group_activity = this.group_activity.toObject();
            }
            if (this.scene_activity != null) {
                data.scene_activity = this.scene_activity.toObject();
            }
            if (this.gm_appliance_system_activity != null) {
                data.gm_appliance_system_activity = this.gm_appliance_system_activity.toObject();
            }
            if (this.gm_group_system_activity != null) {
                data.gm_group_system_activity = this.gm_group_system_activity.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.activity_source_device.length)
                writer.writeString(1, this.activity_source_device);
            if (this.activity_type != dependency_18.com.keus.hub.REPORT_ACTIVITY_TYPES.CURTAIN_DEVICE)
                writer.writeEnum(2, this.activity_type);
            if (this.has_curtain_activity)
                writer.writeMessage(20, this.curtain_activity, () => this.curtain_activity.serialize(writer));
            if (this.has_ac_fan_activity)
                writer.writeMessage(21, this.ac_fan_activity, () => this.ac_fan_activity.serialize(writer));
            if (this.has_dc_fan_activity)
                writer.writeMessage(22, this.dc_fan_activity, () => this.dc_fan_activity.serialize(writer));
            if (this.has_relay_activity)
                writer.writeMessage(23, this.relay_activity, () => this.relay_activity.serialize(writer));
            if (this.has_es_appliance_activity)
                writer.writeMessage(24, this.es_appliance_activity, () => this.es_appliance_activity.serialize(writer));
            if (this.has_group_activity)
                writer.writeMessage(25, this.group_activity, () => this.group_activity.serialize(writer));
            if (this.has_scene_activity)
                writer.writeMessage(26, this.scene_activity, () => this.scene_activity.serialize(writer));
            if (this.has_gm_appliance_system_activity)
                writer.writeMessage(27, this.gm_appliance_system_activity, () => this.gm_appliance_system_activity.serialize(writer));
            if (this.has_gm_group_system_activity)
                writer.writeMessage(28, this.gm_group_system_activity, () => this.gm_group_system_activity.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SystemActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SystemActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.activity_source_device = reader.readString();
                        break;
                    case 2:
                        message.activity_type = reader.readEnum();
                        break;
                    case 20:
                        reader.readMessage(message.curtain_activity, () => message.curtain_activity = dependency_1.com.keus.hub.ReportZigbeeCurtainControllerActivity.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.ac_fan_activity, () => message.ac_fan_activity = dependency_9.com.keus.hub.ReportZigbeeACFanControllerActivity.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.dc_fan_activity, () => message.dc_fan_activity = dependency_10.com.keus.hub.ReportZigbeeDCFanControllerActivity.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.relay_activity, () => message.relay_activity = dependency_6.com.keus.hub.ReportConsoleRelayActivity.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.es_appliance_activity, () => message.es_appliance_activity = dependency_8.com.keus.hub.ReportZigbeeEmbeddedApplianceActivity.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.group_activity, () => message.group_activity = dependency_17.com.keus.hub.ReportUpdateGroupActivity.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.scene_activity, () => message.scene_activity = dependency_16.com.keus.hub.ReportSceneExecutionActivity.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.gm_appliance_system_activity, () => message.gm_appliance_system_activity = dependency_20.com.keus.gateway.ReportGmApplianceSystemActivity.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.gm_group_system_activity, () => message.gm_group_system_activity = dependency_23.com.keus.gateway.ReportGmGroupSystemActivity.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SystemActivity {
            return SystemActivity.deserialize(bytes);
        }
    }
    export class ReportSystemActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            system_activity?: SystemActivity[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("system_activity" in data && data.system_activity != undefined) {
                    this.system_activity = data.system_activity;
                }
            }
        }
        get system_activity() {
            return pb_1.Message.getRepeatedWrapperField(this, SystemActivity, 3) as SystemActivity[];
        }
        set system_activity(value: SystemActivity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            system_activity?: ReturnType<typeof SystemActivity.prototype.toObject>[];
        }): ReportSystemActivity {
            const message = new ReportSystemActivity({});
            if (data.system_activity != null) {
                message.system_activity = data.system_activity.map(item => SystemActivity.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                system_activity?: ReturnType<typeof SystemActivity.prototype.toObject>[];
            } = {};
            if (this.system_activity != null) {
                data.system_activity = this.system_activity.map((item: SystemActivity) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.system_activity.length)
                writer.writeRepeatedMessage(3, this.system_activity, (item: SystemActivity) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportSystemActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportSystemActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.system_activity, () => pb_1.Message.addToRepeatedWrapperField(message, 3, SystemActivity.deserialize(reader), SystemActivity));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportSystemActivity {
            return ReportSystemActivity.deserialize(bytes);
        }
    }
    export class ReportSystemActivityResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): ReportSystemActivityResponse {
            const message = new ReportSystemActivityResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportSystemActivityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportSystemActivityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportSystemActivityResponse {
            return ReportSystemActivityResponse.deserialize(bytes);
        }
    }
}
