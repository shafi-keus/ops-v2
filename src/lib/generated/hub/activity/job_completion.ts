/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/activity/job_completion.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum JOB_TYPES {
        GROUP_CONF = 0,
        GROUP_DEL = 1,
        SCENE_ADGRP_ACTION = 2,
        SCENE_DLGRP_ACTION = 3,
        SCENE_ADTS = 4,
        SCENE_DLTS = 5,
        SCENE_DEL = 6,
        SYNC_DEVICE_SCENE_UI = 7,
        SYNC_AREA_SCENE_UI = 8,
        REPLACE_DEVICE = 9
    }
    export class ReportJobCompletion extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]];
        constructor(data?: any[] | ({
            job_type?: JOB_TYPES;
        } & (({
            group_configure_update?: GroupConfigureComplete;
            group_delete_update?: never;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: never;
            delete_scene_update?: never;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: GroupDeleteComplete;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: never;
            delete_scene_update?: never;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: never;
            add_group_to_scene_update?: AddGroupToSceneComplete;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: never;
            delete_scene_update?: never;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: never;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: RemoveGroupFromSceneComplete;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: never;
            delete_scene_update?: never;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: never;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: AdjustTimeslotDelayComplete;
            delete_timeslot_update?: never;
            delete_scene_update?: never;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: never;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: DeleteTimeslotComplete;
            delete_scene_update?: never;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: never;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: never;
            delete_scene_update?: DeleteSceneComplete;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: never;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: never;
            delete_scene_update?: never;
            sync_scene_uidata_update?: SyncSceneUIDataComplete;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: never;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: never;
            delete_scene_update?: never;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: SyncAreaSceneUIDataComplete;
            replace_device_job_data?: never;
        } | {
            group_configure_update?: never;
            group_delete_update?: never;
            add_group_to_scene_update?: never;
            remove_group_from_scene_update?: never;
            adjust_timeslot_delay_update?: never;
            delete_timeslot_update?: never;
            delete_scene_update?: never;
            sync_scene_uidata_update?: never;
            sync_area_scene_uidata_update?: never;
            replace_device_job_data?: ReplaceDeviceComplete;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_type" in data && data.job_type != undefined) {
                    this.job_type = data.job_type;
                }
                if ("group_configure_update" in data && data.group_configure_update != undefined) {
                    this.group_configure_update = data.group_configure_update;
                }
                if ("group_delete_update" in data && data.group_delete_update != undefined) {
                    this.group_delete_update = data.group_delete_update;
                }
                if ("add_group_to_scene_update" in data && data.add_group_to_scene_update != undefined) {
                    this.add_group_to_scene_update = data.add_group_to_scene_update;
                }
                if ("remove_group_from_scene_update" in data && data.remove_group_from_scene_update != undefined) {
                    this.remove_group_from_scene_update = data.remove_group_from_scene_update;
                }
                if ("adjust_timeslot_delay_update" in data && data.adjust_timeslot_delay_update != undefined) {
                    this.adjust_timeslot_delay_update = data.adjust_timeslot_delay_update;
                }
                if ("delete_timeslot_update" in data && data.delete_timeslot_update != undefined) {
                    this.delete_timeslot_update = data.delete_timeslot_update;
                }
                if ("delete_scene_update" in data && data.delete_scene_update != undefined) {
                    this.delete_scene_update = data.delete_scene_update;
                }
                if ("sync_scene_uidata_update" in data && data.sync_scene_uidata_update != undefined) {
                    this.sync_scene_uidata_update = data.sync_scene_uidata_update;
                }
                if ("sync_area_scene_uidata_update" in data && data.sync_area_scene_uidata_update != undefined) {
                    this.sync_area_scene_uidata_update = data.sync_area_scene_uidata_update;
                }
                if ("replace_device_job_data" in data && data.replace_device_job_data != undefined) {
                    this.replace_device_job_data = data.replace_device_job_data;
                }
            }
        }
        get job_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, JOB_TYPES.GROUP_CONF) as JOB_TYPES;
        }
        set job_type(value: JOB_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_configure_update() {
            return pb_1.Message.getWrapperField(this, GroupConfigureComplete, 11) as GroupConfigureComplete;
        }
        set group_configure_update(value: GroupConfigureComplete) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_group_configure_update() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get group_delete_update() {
            return pb_1.Message.getWrapperField(this, GroupDeleteComplete, 12) as GroupDeleteComplete;
        }
        set group_delete_update(value: GroupDeleteComplete) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_group_delete_update() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get add_group_to_scene_update() {
            return pb_1.Message.getWrapperField(this, AddGroupToSceneComplete, 13) as AddGroupToSceneComplete;
        }
        set add_group_to_scene_update(value: AddGroupToSceneComplete) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_add_group_to_scene_update() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get remove_group_from_scene_update() {
            return pb_1.Message.getWrapperField(this, RemoveGroupFromSceneComplete, 14) as RemoveGroupFromSceneComplete;
        }
        set remove_group_from_scene_update(value: RemoveGroupFromSceneComplete) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_remove_group_from_scene_update() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get adjust_timeslot_delay_update() {
            return pb_1.Message.getWrapperField(this, AdjustTimeslotDelayComplete, 15) as AdjustTimeslotDelayComplete;
        }
        set adjust_timeslot_delay_update(value: AdjustTimeslotDelayComplete) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_adjust_timeslot_delay_update() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get delete_timeslot_update() {
            return pb_1.Message.getWrapperField(this, DeleteTimeslotComplete, 16) as DeleteTimeslotComplete;
        }
        set delete_timeslot_update(value: DeleteTimeslotComplete) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_delete_timeslot_update() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get delete_scene_update() {
            return pb_1.Message.getWrapperField(this, DeleteSceneComplete, 17) as DeleteSceneComplete;
        }
        set delete_scene_update(value: DeleteSceneComplete) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_delete_scene_update() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get sync_scene_uidata_update() {
            return pb_1.Message.getWrapperField(this, SyncSceneUIDataComplete, 18) as SyncSceneUIDataComplete;
        }
        set sync_scene_uidata_update(value: SyncSceneUIDataComplete) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_sync_scene_uidata_update() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get sync_area_scene_uidata_update() {
            return pb_1.Message.getWrapperField(this, SyncAreaSceneUIDataComplete, 19) as SyncAreaSceneUIDataComplete;
        }
        set sync_area_scene_uidata_update(value: SyncAreaSceneUIDataComplete) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_sync_area_scene_uidata_update() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get replace_device_job_data() {
            return pb_1.Message.getWrapperField(this, ReplaceDeviceComplete, 20) as ReplaceDeviceComplete;
        }
        set replace_device_job_data(value: ReplaceDeviceComplete) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_replace_device_job_data() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get job_updates() {
            const cases: {
                [index: number]: "none" | "group_configure_update" | "group_delete_update" | "add_group_to_scene_update" | "remove_group_from_scene_update" | "adjust_timeslot_delay_update" | "delete_timeslot_update" | "delete_scene_update" | "sync_scene_uidata_update" | "sync_area_scene_uidata_update" | "replace_device_job_data";
            } = {
                0: "none",
                11: "group_configure_update",
                12: "group_delete_update",
                13: "add_group_to_scene_update",
                14: "remove_group_from_scene_update",
                15: "adjust_timeslot_delay_update",
                16: "delete_timeslot_update",
                17: "delete_scene_update",
                18: "sync_scene_uidata_update",
                19: "sync_area_scene_uidata_update",
                20: "replace_device_job_data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12, 13, 14, 15, 16, 17, 18, 19, 20])];
        }
        static fromObject(data: {
            job_type?: JOB_TYPES;
            group_configure_update?: ReturnType<typeof GroupConfigureComplete.prototype.toObject>;
            group_delete_update?: ReturnType<typeof GroupDeleteComplete.prototype.toObject>;
            add_group_to_scene_update?: ReturnType<typeof AddGroupToSceneComplete.prototype.toObject>;
            remove_group_from_scene_update?: ReturnType<typeof RemoveGroupFromSceneComplete.prototype.toObject>;
            adjust_timeslot_delay_update?: ReturnType<typeof AdjustTimeslotDelayComplete.prototype.toObject>;
            delete_timeslot_update?: ReturnType<typeof DeleteTimeslotComplete.prototype.toObject>;
            delete_scene_update?: ReturnType<typeof DeleteSceneComplete.prototype.toObject>;
            sync_scene_uidata_update?: ReturnType<typeof SyncSceneUIDataComplete.prototype.toObject>;
            sync_area_scene_uidata_update?: ReturnType<typeof SyncAreaSceneUIDataComplete.prototype.toObject>;
            replace_device_job_data?: ReturnType<typeof ReplaceDeviceComplete.prototype.toObject>;
        }): ReportJobCompletion {
            const message = new ReportJobCompletion({});
            if (data.job_type != null) {
                message.job_type = data.job_type;
            }
            if (data.group_configure_update != null) {
                message.group_configure_update = GroupConfigureComplete.fromObject(data.group_configure_update);
            }
            if (data.group_delete_update != null) {
                message.group_delete_update = GroupDeleteComplete.fromObject(data.group_delete_update);
            }
            if (data.add_group_to_scene_update != null) {
                message.add_group_to_scene_update = AddGroupToSceneComplete.fromObject(data.add_group_to_scene_update);
            }
            if (data.remove_group_from_scene_update != null) {
                message.remove_group_from_scene_update = RemoveGroupFromSceneComplete.fromObject(data.remove_group_from_scene_update);
            }
            if (data.adjust_timeslot_delay_update != null) {
                message.adjust_timeslot_delay_update = AdjustTimeslotDelayComplete.fromObject(data.adjust_timeslot_delay_update);
            }
            if (data.delete_timeslot_update != null) {
                message.delete_timeslot_update = DeleteTimeslotComplete.fromObject(data.delete_timeslot_update);
            }
            if (data.delete_scene_update != null) {
                message.delete_scene_update = DeleteSceneComplete.fromObject(data.delete_scene_update);
            }
            if (data.sync_scene_uidata_update != null) {
                message.sync_scene_uidata_update = SyncSceneUIDataComplete.fromObject(data.sync_scene_uidata_update);
            }
            if (data.sync_area_scene_uidata_update != null) {
                message.sync_area_scene_uidata_update = SyncAreaSceneUIDataComplete.fromObject(data.sync_area_scene_uidata_update);
            }
            if (data.replace_device_job_data != null) {
                message.replace_device_job_data = ReplaceDeviceComplete.fromObject(data.replace_device_job_data);
            }
            return message;
        }
        toObject() {
            const data: {
                job_type?: JOB_TYPES;
                group_configure_update?: ReturnType<typeof GroupConfigureComplete.prototype.toObject>;
                group_delete_update?: ReturnType<typeof GroupDeleteComplete.prototype.toObject>;
                add_group_to_scene_update?: ReturnType<typeof AddGroupToSceneComplete.prototype.toObject>;
                remove_group_from_scene_update?: ReturnType<typeof RemoveGroupFromSceneComplete.prototype.toObject>;
                adjust_timeslot_delay_update?: ReturnType<typeof AdjustTimeslotDelayComplete.prototype.toObject>;
                delete_timeslot_update?: ReturnType<typeof DeleteTimeslotComplete.prototype.toObject>;
                delete_scene_update?: ReturnType<typeof DeleteSceneComplete.prototype.toObject>;
                sync_scene_uidata_update?: ReturnType<typeof SyncSceneUIDataComplete.prototype.toObject>;
                sync_area_scene_uidata_update?: ReturnType<typeof SyncAreaSceneUIDataComplete.prototype.toObject>;
                replace_device_job_data?: ReturnType<typeof ReplaceDeviceComplete.prototype.toObject>;
            } = {};
            if (this.job_type != null) {
                data.job_type = this.job_type;
            }
            if (this.group_configure_update != null) {
                data.group_configure_update = this.group_configure_update.toObject();
            }
            if (this.group_delete_update != null) {
                data.group_delete_update = this.group_delete_update.toObject();
            }
            if (this.add_group_to_scene_update != null) {
                data.add_group_to_scene_update = this.add_group_to_scene_update.toObject();
            }
            if (this.remove_group_from_scene_update != null) {
                data.remove_group_from_scene_update = this.remove_group_from_scene_update.toObject();
            }
            if (this.adjust_timeslot_delay_update != null) {
                data.adjust_timeslot_delay_update = this.adjust_timeslot_delay_update.toObject();
            }
            if (this.delete_timeslot_update != null) {
                data.delete_timeslot_update = this.delete_timeslot_update.toObject();
            }
            if (this.delete_scene_update != null) {
                data.delete_scene_update = this.delete_scene_update.toObject();
            }
            if (this.sync_scene_uidata_update != null) {
                data.sync_scene_uidata_update = this.sync_scene_uidata_update.toObject();
            }
            if (this.sync_area_scene_uidata_update != null) {
                data.sync_area_scene_uidata_update = this.sync_area_scene_uidata_update.toObject();
            }
            if (this.replace_device_job_data != null) {
                data.replace_device_job_data = this.replace_device_job_data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_type != JOB_TYPES.GROUP_CONF)
                writer.writeEnum(1, this.job_type);
            if (this.has_group_configure_update)
                writer.writeMessage(11, this.group_configure_update, () => this.group_configure_update.serialize(writer));
            if (this.has_group_delete_update)
                writer.writeMessage(12, this.group_delete_update, () => this.group_delete_update.serialize(writer));
            if (this.has_add_group_to_scene_update)
                writer.writeMessage(13, this.add_group_to_scene_update, () => this.add_group_to_scene_update.serialize(writer));
            if (this.has_remove_group_from_scene_update)
                writer.writeMessage(14, this.remove_group_from_scene_update, () => this.remove_group_from_scene_update.serialize(writer));
            if (this.has_adjust_timeslot_delay_update)
                writer.writeMessage(15, this.adjust_timeslot_delay_update, () => this.adjust_timeslot_delay_update.serialize(writer));
            if (this.has_delete_timeslot_update)
                writer.writeMessage(16, this.delete_timeslot_update, () => this.delete_timeslot_update.serialize(writer));
            if (this.has_delete_scene_update)
                writer.writeMessage(17, this.delete_scene_update, () => this.delete_scene_update.serialize(writer));
            if (this.has_sync_scene_uidata_update)
                writer.writeMessage(18, this.sync_scene_uidata_update, () => this.sync_scene_uidata_update.serialize(writer));
            if (this.has_sync_area_scene_uidata_update)
                writer.writeMessage(19, this.sync_area_scene_uidata_update, () => this.sync_area_scene_uidata_update.serialize(writer));
            if (this.has_replace_device_job_data)
                writer.writeMessage(20, this.replace_device_job_data, () => this.replace_device_job_data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportJobCompletion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportJobCompletion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_type = reader.readEnum();
                        break;
                    case 11:
                        reader.readMessage(message.group_configure_update, () => message.group_configure_update = GroupConfigureComplete.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.group_delete_update, () => message.group_delete_update = GroupDeleteComplete.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.add_group_to_scene_update, () => message.add_group_to_scene_update = AddGroupToSceneComplete.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.remove_group_from_scene_update, () => message.remove_group_from_scene_update = RemoveGroupFromSceneComplete.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.adjust_timeslot_delay_update, () => message.adjust_timeslot_delay_update = AdjustTimeslotDelayComplete.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.delete_timeslot_update, () => message.delete_timeslot_update = DeleteTimeslotComplete.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.delete_scene_update, () => message.delete_scene_update = DeleteSceneComplete.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.sync_scene_uidata_update, () => message.sync_scene_uidata_update = SyncSceneUIDataComplete.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.sync_area_scene_uidata_update, () => message.sync_area_scene_uidata_update = SyncAreaSceneUIDataComplete.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.replace_device_job_data, () => message.replace_device_job_data = ReplaceDeviceComplete.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportJobCompletion {
            return ReportJobCompletion.deserialize(bytes);
        }
    }
    export class ReportJobCompletionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): ReportJobCompletionResponse {
            const message = new ReportJobCompletionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportJobCompletionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportJobCompletionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportJobCompletionResponse {
            return ReportJobCompletionResponse.deserialize(bytes);
        }
    }
    export class GroupConfigureComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
            configured_devices?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("configured_devices" in data && data.configured_devices != undefined) {
                    this.configured_devices = data.configured_devices;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get configured_devices() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set configured_devices(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            group_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
            configured_devices?: string[];
        }): GroupConfigureComplete {
            const message = new GroupConfigureComplete({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.configured_devices != null) {
                message.configured_devices = data.configured_devices;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                area_id?: number;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
                configured_devices?: string[];
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.configured_devices != null) {
                data.configured_devices = this.configured_devices;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (this.request_id.length)
                writer.writeString(3, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (this.configured_devices.length)
                writer.writeRepeatedString(7, this.configured_devices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupConfigureComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupConfigureComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    case 3:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupConfigureComplete {
            return GroupConfigureComplete.deserialize(bytes);
        }
    }
    export class GroupDeleteComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
            deleted_devices?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("deleted_devices" in data && data.deleted_devices != undefined) {
                    this.deleted_devices = data.deleted_devices;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get deleted_devices() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set deleted_devices(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            group_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
            deleted_devices?: string[];
        }): GroupDeleteComplete {
            const message = new GroupDeleteComplete({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.deleted_devices != null) {
                message.deleted_devices = data.deleted_devices;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                area_id?: number;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
                deleted_devices?: string[];
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.deleted_devices != null) {
                data.deleted_devices = this.deleted_devices;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (this.request_id.length)
                writer.writeString(3, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (this.deleted_devices.length)
                writer.writeRepeatedString(7, this.deleted_devices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupDeleteComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupDeleteComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    case 3:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupDeleteComplete {
            return GroupDeleteComplete.deserialize(bytes);
        }
    }
    export class AddGroupToSceneComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }): AddGroupToSceneComplete {
            const message = new AddGroupToSceneComplete({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                area_id?: number;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (this.request_id.length)
                writer.writeString(3, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddGroupToSceneComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddGroupToSceneComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    case 3:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddGroupToSceneComplete {
            return AddGroupToSceneComplete.deserialize(bytes);
        }
    }
    export class UpdateSmartConsoleSceneUIComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            updated_scene_ids?: number[];
            smart_console_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("updated_scene_ids" in data && data.updated_scene_ids != undefined) {
                    this.updated_scene_ids = data.updated_scene_ids;
                }
                if ("smart_console_id" in data && data.smart_console_id != undefined) {
                    this.smart_console_id = data.smart_console_id;
                }
            }
        }
        get updated_scene_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set updated_scene_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get smart_console_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set smart_console_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            updated_scene_ids?: number[];
            smart_console_id?: string;
        }): UpdateSmartConsoleSceneUIComplete {
            const message = new UpdateSmartConsoleSceneUIComplete({});
            if (data.updated_scene_ids != null) {
                message.updated_scene_ids = data.updated_scene_ids;
            }
            if (data.smart_console_id != null) {
                message.smart_console_id = data.smart_console_id;
            }
            return message;
        }
        toObject() {
            const data: {
                updated_scene_ids?: number[];
                smart_console_id?: string;
            } = {};
            if (this.updated_scene_ids != null) {
                data.updated_scene_ids = this.updated_scene_ids;
            }
            if (this.smart_console_id != null) {
                data.smart_console_id = this.smart_console_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.updated_scene_ids.length)
                writer.writePackedUint32(1, this.updated_scene_ids);
            if (this.smart_console_id.length)
                writer.writeString(2, this.smart_console_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateSmartConsoleSceneUIComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateSmartConsoleSceneUIComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.updated_scene_ids = reader.readPackedUint32();
                        break;
                    case 2:
                        message.smart_console_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateSmartConsoleSceneUIComplete {
            return UpdateSmartConsoleSceneUIComplete.deserialize(bytes);
        }
    }
    export class RemoveGroupFromSceneComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }): RemoveGroupFromSceneComplete {
            const message = new RemoveGroupFromSceneComplete({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                area_id?: number;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (this.request_id.length)
                writer.writeString(3, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveGroupFromSceneComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveGroupFromSceneComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    case 3:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveGroupFromSceneComplete {
            return RemoveGroupFromSceneComplete.deserialize(bytes);
        }
    }
    export class AdjustTimeslotDelayComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }): AdjustTimeslotDelayComplete {
            const message = new AdjustTimeslotDelayComplete({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                area_id?: number;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (this.request_id.length)
                writer.writeString(3, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdjustTimeslotDelayComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdjustTimeslotDelayComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    case 3:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdjustTimeslotDelayComplete {
            return AdjustTimeslotDelayComplete.deserialize(bytes);
        }
    }
    export class DeleteTimeslotComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }): DeleteTimeslotComplete {
            const message = new DeleteTimeslotComplete({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                area_id?: number;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (this.request_id.length)
                writer.writeString(3, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTimeslotComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTimeslotComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    case 3:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTimeslotComplete {
            return DeleteTimeslotComplete.deserialize(bytes);
        }
    }
    export class DeleteSceneComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
            deleted_devices?: string[];
            deleted_groups?: number[];
            force_delete?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("deleted_devices" in data && data.deleted_devices != undefined) {
                    this.deleted_devices = data.deleted_devices;
                }
                if ("deleted_groups" in data && data.deleted_groups != undefined) {
                    this.deleted_groups = data.deleted_groups;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get deleted_devices() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set deleted_devices(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get deleted_groups() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
        }
        set deleted_groups(value: number[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            scene_id?: number;
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
            deleted_devices?: string[];
            deleted_groups?: number[];
            force_delete?: boolean;
        }): DeleteSceneComplete {
            const message = new DeleteSceneComplete({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.deleted_devices != null) {
                message.deleted_devices = data.deleted_devices;
            }
            if (data.deleted_groups != null) {
                message.deleted_groups = data.deleted_groups;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                area_id?: number;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
                deleted_devices?: string[];
                deleted_groups?: number[];
                force_delete?: boolean;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.deleted_devices != null) {
                data.deleted_devices = this.deleted_devices;
            }
            if (this.deleted_groups != null) {
                data.deleted_groups = this.deleted_groups;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (this.request_id.length)
                writer.writeString(3, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (this.deleted_devices.length)
                writer.writeRepeatedString(7, this.deleted_devices);
            if (this.deleted_groups.length)
                writer.writePackedUint32(8, this.deleted_groups);
            if (this.force_delete != false)
                writer.writeBool(9, this.force_delete);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSceneComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSceneComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    case 3:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        message.deleted_groups = reader.readPackedUint32();
                        break;
                    case 9:
                        message.force_delete = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSceneComplete {
            return DeleteSceneComplete.deserialize(bytes);
        }
    }
    export class SyncSceneUIDataComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            device_id?: string;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }): SyncSceneUIDataComplete {
            const message = new SyncSceneUIDataComplete({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.request_id.length)
                writer.writeString(2, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncSceneUIDataComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncSceneUIDataComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SyncSceneUIDataComplete {
            return SyncSceneUIDataComplete.deserialize(bytes);
        }
    }
    export class SyncAreaSceneUIDataComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            area_id?: number;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
        }): SyncAreaSceneUIDataComplete {
            const message = new SyncAreaSceneUIDataComplete({});
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                area_id?: number;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
            } = {};
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_id != 0)
                writer.writeUint32(1, this.area_id);
            if (this.request_id.length)
                writer.writeString(2, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncAreaSceneUIDataComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncAreaSceneUIDataComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.area_id = reader.readUint32();
                        break;
                    case 2:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SyncAreaSceneUIDataComplete {
            return SyncAreaSceneUIDataComplete.deserialize(bytes);
        }
    }
    export class ReplaceDeviceComplete extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
            device_category?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("device_category" in data && data.device_category != undefined) {
                    this.device_category = data.device_category;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get device_category() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set device_category(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
            request_id?: string;
            success?: boolean;
            code?: number;
            reason?: string;
            device_category?: string;
        }): ReplaceDeviceComplete {
            const message = new ReplaceDeviceComplete({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.device_category != null) {
                message.device_category = data.device_category;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
                request_id?: string;
                success?: boolean;
                code?: number;
                reason?: string;
                device_category?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.device_category != null) {
                data.device_category = this.device_category;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (this.request_id.length)
                writer.writeString(3, this.request_id);
            if (this.success != false)
                writer.writeBool(4, this.success);
            if (this.code != 0)
                writer.writeUint32(5, this.code);
            if (this.reason.length)
                writer.writeString(6, this.reason);
            if (this.device_category.length)
                writer.writeString(7, this.device_category);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDeviceComplete {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDeviceComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    case 3:
                        message.request_id = reader.readString();
                        break;
                    case 4:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        message.code = reader.readUint32();
                        break;
                    case 6:
                        message.reason = reader.readString();
                        break;
                    case 7:
                        message.device_category = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDeviceComplete {
            return ReplaceDeviceComplete.deserialize(bytes);
        }
    }
    export class GroupConfigureCompleteEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_data?: GroupConfigureComplete;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_data" in data && data.event_data != undefined) {
                    this.event_data = data.event_data;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get event_data() {
            return pb_1.Message.getWrapperField(this, GroupConfigureComplete, 1) as GroupConfigureComplete;
        }
        set event_data(value: GroupConfigureComplete) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            event_data?: ReturnType<typeof GroupConfigureComplete.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): GroupConfigureCompleteEvent {
            const message = new GroupConfigureCompleteEvent({});
            if (data.event_data != null) {
                message.event_data = GroupConfigureComplete.fromObject(data.event_data);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                event_data?: ReturnType<typeof GroupConfigureComplete.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.event_data != null) {
                data.event_data = this.event_data.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event_data)
                writer.writeMessage(1, this.event_data, () => this.event_data.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupConfigureCompleteEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupConfigureCompleteEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event_data, () => message.event_data = GroupConfigureComplete.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupConfigureCompleteEvent {
            return GroupConfigureCompleteEvent.deserialize(bytes);
        }
    }
    export class GroupDeleteCompleteEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_data?: GroupDeleteComplete;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_data" in data && data.event_data != undefined) {
                    this.event_data = data.event_data;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get event_data() {
            return pb_1.Message.getWrapperField(this, GroupDeleteComplete, 1) as GroupDeleteComplete;
        }
        set event_data(value: GroupDeleteComplete) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            event_data?: ReturnType<typeof GroupDeleteComplete.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): GroupDeleteCompleteEvent {
            const message = new GroupDeleteCompleteEvent({});
            if (data.event_data != null) {
                message.event_data = GroupDeleteComplete.fromObject(data.event_data);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                event_data?: ReturnType<typeof GroupDeleteComplete.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.event_data != null) {
                data.event_data = this.event_data.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event_data)
                writer.writeMessage(1, this.event_data, () => this.event_data.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupDeleteCompleteEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupDeleteCompleteEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event_data, () => message.event_data = GroupDeleteComplete.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupDeleteCompleteEvent {
            return GroupDeleteCompleteEvent.deserialize(bytes);
        }
    }
    export class AddGroupToSceneCompleteEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_data?: AddGroupToSceneComplete;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_data" in data && data.event_data != undefined) {
                    this.event_data = data.event_data;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get event_data() {
            return pb_1.Message.getWrapperField(this, AddGroupToSceneComplete, 1) as AddGroupToSceneComplete;
        }
        set event_data(value: AddGroupToSceneComplete) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            event_data?: ReturnType<typeof AddGroupToSceneComplete.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): AddGroupToSceneCompleteEvent {
            const message = new AddGroupToSceneCompleteEvent({});
            if (data.event_data != null) {
                message.event_data = AddGroupToSceneComplete.fromObject(data.event_data);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                event_data?: ReturnType<typeof AddGroupToSceneComplete.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.event_data != null) {
                data.event_data = this.event_data.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event_data)
                writer.writeMessage(1, this.event_data, () => this.event_data.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddGroupToSceneCompleteEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddGroupToSceneCompleteEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event_data, () => message.event_data = AddGroupToSceneComplete.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddGroupToSceneCompleteEvent {
            return AddGroupToSceneCompleteEvent.deserialize(bytes);
        }
    }
    export class RemoveGroupFromSceneCompleteEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_data?: RemoveGroupFromSceneComplete;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_data" in data && data.event_data != undefined) {
                    this.event_data = data.event_data;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get event_data() {
            return pb_1.Message.getWrapperField(this, RemoveGroupFromSceneComplete, 1) as RemoveGroupFromSceneComplete;
        }
        set event_data(value: RemoveGroupFromSceneComplete) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            event_data?: ReturnType<typeof RemoveGroupFromSceneComplete.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): RemoveGroupFromSceneCompleteEvent {
            const message = new RemoveGroupFromSceneCompleteEvent({});
            if (data.event_data != null) {
                message.event_data = RemoveGroupFromSceneComplete.fromObject(data.event_data);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                event_data?: ReturnType<typeof RemoveGroupFromSceneComplete.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.event_data != null) {
                data.event_data = this.event_data.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event_data)
                writer.writeMessage(1, this.event_data, () => this.event_data.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveGroupFromSceneCompleteEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveGroupFromSceneCompleteEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event_data, () => message.event_data = RemoveGroupFromSceneComplete.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveGroupFromSceneCompleteEvent {
            return RemoveGroupFromSceneCompleteEvent.deserialize(bytes);
        }
    }
    export class SyncSceneUIDataCompleteEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_data?: SyncSceneUIDataComplete;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_data" in data && data.event_data != undefined) {
                    this.event_data = data.event_data;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get event_data() {
            return pb_1.Message.getWrapperField(this, SyncSceneUIDataComplete, 1) as SyncSceneUIDataComplete;
        }
        set event_data(value: SyncSceneUIDataComplete) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            event_data?: ReturnType<typeof SyncSceneUIDataComplete.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): SyncSceneUIDataCompleteEvent {
            const message = new SyncSceneUIDataCompleteEvent({});
            if (data.event_data != null) {
                message.event_data = SyncSceneUIDataComplete.fromObject(data.event_data);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                event_data?: ReturnType<typeof SyncSceneUIDataComplete.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.event_data != null) {
                data.event_data = this.event_data.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event_data)
                writer.writeMessage(1, this.event_data, () => this.event_data.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(2, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(3, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncSceneUIDataCompleteEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncSceneUIDataCompleteEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event_data, () => message.event_data = SyncSceneUIDataComplete.deserialize(reader));
                        break;
                    case 2:
                        message.activity_source = reader.readString();
                        break;
                    case 3:
                        message.activity_user = reader.readString();
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SyncSceneUIDataCompleteEvent {
            return SyncSceneUIDataCompleteEvent.deserialize(bytes);
        }
    }
    export class DeleteSceneCompleteEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_data?: DeleteSceneComplete;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_data" in data && data.event_data != undefined) {
                    this.event_data = data.event_data;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get event_data() {
            return pb_1.Message.getWrapperField(this, DeleteSceneComplete, 1) as DeleteSceneComplete;
        }
        set event_data(value: DeleteSceneComplete) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            event_data?: ReturnType<typeof DeleteSceneComplete.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): DeleteSceneCompleteEvent {
            const message = new DeleteSceneCompleteEvent({});
            if (data.event_data != null) {
                message.event_data = DeleteSceneComplete.fromObject(data.event_data);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                event_data?: ReturnType<typeof DeleteSceneComplete.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.event_data != null) {
                data.event_data = this.event_data.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event_data)
                writer.writeMessage(1, this.event_data, () => this.event_data.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSceneCompleteEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSceneCompleteEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event_data, () => message.event_data = DeleteSceneComplete.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSceneCompleteEvent {
            return DeleteSceneCompleteEvent.deserialize(bytes);
        }
    }
    export class ReplaceDeviceCompleteEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_data?: ReplaceDeviceComplete;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_data" in data && data.event_data != undefined) {
                    this.event_data = data.event_data;
                }
            }
        }
        get event_data() {
            return pb_1.Message.getWrapperField(this, ReplaceDeviceComplete, 1) as ReplaceDeviceComplete;
        }
        set event_data(value: ReplaceDeviceComplete) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            event_data?: ReturnType<typeof ReplaceDeviceComplete.prototype.toObject>;
        }): ReplaceDeviceCompleteEvent {
            const message = new ReplaceDeviceCompleteEvent({});
            if (data.event_data != null) {
                message.event_data = ReplaceDeviceComplete.fromObject(data.event_data);
            }
            return message;
        }
        toObject() {
            const data: {
                event_data?: ReturnType<typeof ReplaceDeviceComplete.prototype.toObject>;
            } = {};
            if (this.event_data != null) {
                data.event_data = this.event_data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event_data)
                writer.writeMessage(1, this.event_data, () => this.event_data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDeviceCompleteEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDeviceCompleteEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event_data, () => message.event_data = ReplaceDeviceComplete.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDeviceCompleteEvent {
            return ReplaceDeviceCompleteEvent.deserialize(bytes);
        }
    }
    export class MoveRoomEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            device_room?: string;
            device_section?: string;
            device_id?: string;
            device_category?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_category" in data && data.device_category != undefined) {
                    this.device_category = data.device_category;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get device_category() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set device_category(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            device_room?: string;
            device_section?: string;
            device_id?: string;
            device_category?: string;
        }): MoveRoomEvent {
            const message = new MoveRoomEvent({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_category != null) {
                message.device_category = data.device_category;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                device_room?: string;
                device_section?: string;
                device_id?: string;
                device_category?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_category != null) {
                data.device_category = this.device_category;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.device_room.length)
                writer.writeString(5, this.device_room);
            if (this.device_section.length)
                writer.writeString(6, this.device_section);
            if (this.device_id.length)
                writer.writeString(7, this.device_id);
            if (this.device_category.length)
                writer.writeString(8, this.device_category);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveRoomEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveRoomEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        message.device_room = reader.readString();
                        break;
                    case 6:
                        message.device_section = reader.readString();
                        break;
                    case 7:
                        message.device_id = reader.readString();
                        break;
                    case 8:
                        message.device_category = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveRoomEvent {
            return MoveRoomEvent.deserialize(bytes);
        }
    }
}
