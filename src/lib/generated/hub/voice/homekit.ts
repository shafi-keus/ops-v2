/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/voice/homekit.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum AHKCharacteristicType {
        On = 0,
        Brightness = 1,
        ColorTemperature = 3,
        Hue = 4,
        Saturation = 5,
        RotationSpeed = 6,
        CurrentDoorState = 7,
        TargetDoorState = 8,
        ObstructionDetected = 9,
        TargetHeatingCoolingState = 10,
        CurrentTemperature = 11,
        TargetTemperature = 12,
        CurrentPosition = 13,
        PositionState = 14,
        TargetPosition = 16
    }
    export enum AHKTags {
        scene = 0,
        group = 1,
        device = 2,
        Remote = 3,
        appliance = 4
    }
    export class AHKDiscoverDevices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AHKDiscoverDevices {
            const message = new AHKDiscoverDevices({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AHKDiscoverDevices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AHKDiscoverDevices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AHKDiscoverDevices {
            return AHKDiscoverDevices.deserialize(bytes);
        }
    }
    export class AHKDiscoverDevicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            device_list?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("device_list" in data && data.device_list != undefined) {
                    this.device_list = data.device_list;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_list() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_list(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            device_list?: string;
        }): AHKDiscoverDevicesResponse {
            const message = new AHKDiscoverDevicesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.device_list != null) {
                message.device_list = data.device_list;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                device_list?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.device_list != null) {
                data.device_list = this.device_list;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.device_list.length)
                writer.writeString(4, this.device_list);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AHKDiscoverDevicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AHKDiscoverDevicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.device_list = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AHKDiscoverDevicesResponse {
            return AHKDiscoverDevicesResponse.deserialize(bytes);
        }
    }
    export class AHKControlDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            action_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("action_id" in data && data.action_id != undefined) {
                    this.action_id = data.action_id;
                }
            }
        }
        get action_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set action_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            action_id?: string;
        }): AHKControlDevice {
            const message = new AHKControlDevice({});
            if (data.action_id != null) {
                message.action_id = data.action_id;
            }
            return message;
        }
        toObject() {
            const data: {
                action_id?: string;
            } = {};
            if (this.action_id != null) {
                data.action_id = this.action_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.action_id.length)
                writer.writeString(1, this.action_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AHKControlDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AHKControlDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.action_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AHKControlDevice {
            return AHKControlDevice.deserialize(bytes);
        }
    }
    export class AHKControlDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): AHKControlDeviceResponse {
            const message = new AHKControlDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AHKControlDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AHKControlDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AHKControlDeviceResponse {
            return AHKControlDeviceResponse.deserialize(bytes);
        }
    }
    export class AHKSyncDeviceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            action_id?: string;
            characteristic_type?: AHKCharacteristicType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("action_id" in data && data.action_id != undefined) {
                    this.action_id = data.action_id;
                }
                if ("characteristic_type" in data && data.characteristic_type != undefined) {
                    this.characteristic_type = data.characteristic_type;
                }
            }
        }
        get action_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set action_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get characteristic_type() {
            return pb_1.Message.getFieldWithDefault(this, 12, AHKCharacteristicType.On) as AHKCharacteristicType;
        }
        set characteristic_type(value: AHKCharacteristicType) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            action_id?: string;
            characteristic_type?: AHKCharacteristicType;
        }): AHKSyncDeviceState {
            const message = new AHKSyncDeviceState({});
            if (data.action_id != null) {
                message.action_id = data.action_id;
            }
            if (data.characteristic_type != null) {
                message.characteristic_type = data.characteristic_type;
            }
            return message;
        }
        toObject() {
            const data: {
                action_id?: string;
                characteristic_type?: AHKCharacteristicType;
            } = {};
            if (this.action_id != null) {
                data.action_id = this.action_id;
            }
            if (this.characteristic_type != null) {
                data.characteristic_type = this.characteristic_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.action_id.length)
                writer.writeString(1, this.action_id);
            if (this.characteristic_type != AHKCharacteristicType.On)
                writer.writeEnum(12, this.characteristic_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AHKSyncDeviceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AHKSyncDeviceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.action_id = reader.readString();
                        break;
                    case 12:
                        message.characteristic_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AHKSyncDeviceState {
            return AHKSyncDeviceState.deserialize(bytes);
        }
    }
    export class AHKSyncDeviceStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            characteristic_type?: AHKCharacteristicType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("characteristic_type" in data && data.characteristic_type != undefined) {
                    this.characteristic_type = data.characteristic_type;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get characteristic_type() {
            return pb_1.Message.getFieldWithDefault(this, 13, AHKCharacteristicType.On) as AHKCharacteristicType;
        }
        set characteristic_type(value: AHKCharacteristicType) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            characteristic_type?: AHKCharacteristicType;
        }): AHKSyncDeviceStateResponse {
            const message = new AHKSyncDeviceStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.characteristic_type != null) {
                message.characteristic_type = data.characteristic_type;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                characteristic_type?: AHKCharacteristicType;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.characteristic_type != null) {
                data.characteristic_type = this.characteristic_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.characteristic_type != AHKCharacteristicType.On)
                writer.writeEnum(13, this.characteristic_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AHKSyncDeviceStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AHKSyncDeviceStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 13:
                        message.characteristic_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AHKSyncDeviceStateResponse {
            return AHKSyncDeviceStateResponse.deserialize(bytes);
        }
    }
    export class GetHomebridgePin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetHomebridgePin {
            const message = new GetHomebridgePin({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHomebridgePin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHomebridgePin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHomebridgePin {
            return GetHomebridgePin.deserialize(bytes);
        }
    }
    export class GetHomebridgePinResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            opsMessage?: string;
            homeKitBridgePin?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("opsMessage" in data && data.opsMessage != undefined) {
                    this.opsMessage = data.opsMessage;
                }
                if ("homeKitBridgePin" in data && data.homeKitBridgePin != undefined) {
                    this.homeKitBridgePin = data.homeKitBridgePin;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get opsMessage() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set opsMessage(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get homeKitBridgePin() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set homeKitBridgePin(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            opsMessage?: string;
            homeKitBridgePin?: string;
        }): GetHomebridgePinResponse {
            const message = new GetHomebridgePinResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.opsMessage != null) {
                message.opsMessage = data.opsMessage;
            }
            if (data.homeKitBridgePin != null) {
                message.homeKitBridgePin = data.homeKitBridgePin;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                opsMessage?: string;
                homeKitBridgePin?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.opsMessage != null) {
                data.opsMessage = this.opsMessage;
            }
            if (this.homeKitBridgePin != null) {
                data.homeKitBridgePin = this.homeKitBridgePin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.opsMessage.length)
                writer.writeString(4, this.opsMessage);
            if (this.homeKitBridgePin.length)
                writer.writeString(5, this.homeKitBridgePin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHomebridgePinResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHomebridgePinResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.opsMessage = reader.readString();
                        break;
                    case 5:
                        message.homeKitBridgePin = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHomebridgePinResponse {
            return GetHomebridgePinResponse.deserialize(bytes);
        }
    }
}
