/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/favorites/favorites.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./favorite_constants";
import * as dependency_2 from "./gmfavorites";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class FavoriteHomeInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            favorite_room?: string;
            favorite_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("favorite_room" in data && data.favorite_room != undefined) {
                    this.favorite_room = data.favorite_room;
                }
                if ("favorite_section" in data && data.favorite_section != undefined) {
                    this.favorite_section = data.favorite_section;
                }
            }
        }
        get favorite_room() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set favorite_room(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get favorite_section() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set favorite_section(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            favorite_room?: string;
            favorite_section?: string;
        }): FavoriteHomeInfo {
            const message = new FavoriteHomeInfo({});
            if (data.favorite_room != null) {
                message.favorite_room = data.favorite_room;
            }
            if (data.favorite_section != null) {
                message.favorite_section = data.favorite_section;
            }
            return message;
        }
        toObject() {
            const data: {
                favorite_room?: string;
                favorite_section?: string;
            } = {};
            if (this.favorite_room != null) {
                data.favorite_room = this.favorite_room;
            }
            if (this.favorite_section != null) {
                data.favorite_section = this.favorite_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.favorite_room.length)
                writer.writeString(1, this.favorite_room);
            if (this.favorite_section.length)
                writer.writeString(2, this.favorite_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FavoriteHomeInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FavoriteHomeInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.favorite_room = reader.readString();
                        break;
                    case 2:
                        message.favorite_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FavoriteHomeInfo {
            return FavoriteHomeInfo.deserialize(bytes);
        }
    }
    export class FavoriteInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({} & (({
            favorite_group_info?: GroupFavorite;
            favorite_scene_info?: never;
            favorite_appliance_info?: never;
            favorite_device_info?: never;
            favorite_gm_appliance_info?: never;
            favorite_gm_group_info?: never;
        } | {
            favorite_group_info?: never;
            favorite_scene_info?: SceneFavorite;
            favorite_appliance_info?: never;
            favorite_device_info?: never;
            favorite_gm_appliance_info?: never;
            favorite_gm_group_info?: never;
        } | {
            favorite_group_info?: never;
            favorite_scene_info?: never;
            favorite_appliance_info?: ApplianceFavorite;
            favorite_device_info?: never;
            favorite_gm_appliance_info?: never;
            favorite_gm_group_info?: never;
        } | {
            favorite_group_info?: never;
            favorite_scene_info?: never;
            favorite_appliance_info?: never;
            favorite_device_info?: DeviceFavorite;
            favorite_gm_appliance_info?: never;
            favorite_gm_group_info?: never;
        } | {
            favorite_group_info?: never;
            favorite_scene_info?: never;
            favorite_appliance_info?: never;
            favorite_device_info?: never;
            favorite_gm_appliance_info?: dependency_2.com.keus.gateway.GMApplianceFavorite;
            favorite_gm_group_info?: never;
        } | {
            favorite_group_info?: never;
            favorite_scene_info?: never;
            favorite_appliance_info?: never;
            favorite_device_info?: never;
            favorite_gm_appliance_info?: never;
            favorite_gm_group_info?: dependency_2.com.keus.gateway.GMGroupFavorite;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("favorite_group_info" in data && data.favorite_group_info != undefined) {
                    this.favorite_group_info = data.favorite_group_info;
                }
                if ("favorite_scene_info" in data && data.favorite_scene_info != undefined) {
                    this.favorite_scene_info = data.favorite_scene_info;
                }
                if ("favorite_appliance_info" in data && data.favorite_appliance_info != undefined) {
                    this.favorite_appliance_info = data.favorite_appliance_info;
                }
                if ("favorite_device_info" in data && data.favorite_device_info != undefined) {
                    this.favorite_device_info = data.favorite_device_info;
                }
                if ("favorite_gm_appliance_info" in data && data.favorite_gm_appliance_info != undefined) {
                    this.favorite_gm_appliance_info = data.favorite_gm_appliance_info;
                }
                if ("favorite_gm_group_info" in data && data.favorite_gm_group_info != undefined) {
                    this.favorite_gm_group_info = data.favorite_gm_group_info;
                }
            }
        }
        get favorite_group_info() {
            return pb_1.Message.getWrapperField(this, GroupFavorite, 1) as GroupFavorite;
        }
        set favorite_group_info(value: GroupFavorite) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_favorite_group_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get favorite_scene_info() {
            return pb_1.Message.getWrapperField(this, SceneFavorite, 2) as SceneFavorite;
        }
        set favorite_scene_info(value: SceneFavorite) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_favorite_scene_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get favorite_appliance_info() {
            return pb_1.Message.getWrapperField(this, ApplianceFavorite, 3) as ApplianceFavorite;
        }
        set favorite_appliance_info(value: ApplianceFavorite) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_favorite_appliance_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get favorite_device_info() {
            return pb_1.Message.getWrapperField(this, DeviceFavorite, 4) as DeviceFavorite;
        }
        set favorite_device_info(value: DeviceFavorite) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_favorite_device_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get favorite_gm_appliance_info() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.GMApplianceFavorite, 5) as dependency_2.com.keus.gateway.GMApplianceFavorite;
        }
        set favorite_gm_appliance_info(value: dependency_2.com.keus.gateway.GMApplianceFavorite) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_favorite_gm_appliance_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get favorite_gm_group_info() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.GMGroupFavorite, 6) as dependency_2.com.keus.gateway.GMGroupFavorite;
        }
        set favorite_gm_group_info(value: dependency_2.com.keus.gateway.GMGroupFavorite) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_favorite_gm_group_info() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get favorite_info() {
            const cases: {
                [index: number]: "none" | "favorite_group_info" | "favorite_scene_info" | "favorite_appliance_info" | "favorite_device_info" | "favorite_gm_appliance_info" | "favorite_gm_group_info";
            } = {
                0: "none",
                1: "favorite_group_info",
                2: "favorite_scene_info",
                3: "favorite_appliance_info",
                4: "favorite_device_info",
                5: "favorite_gm_appliance_info",
                6: "favorite_gm_group_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            favorite_group_info?: ReturnType<typeof GroupFavorite.prototype.toObject>;
            favorite_scene_info?: ReturnType<typeof SceneFavorite.prototype.toObject>;
            favorite_appliance_info?: ReturnType<typeof ApplianceFavorite.prototype.toObject>;
            favorite_device_info?: ReturnType<typeof DeviceFavorite.prototype.toObject>;
            favorite_gm_appliance_info?: ReturnType<typeof dependency_2.com.keus.gateway.GMApplianceFavorite.prototype.toObject>;
            favorite_gm_group_info?: ReturnType<typeof dependency_2.com.keus.gateway.GMGroupFavorite.prototype.toObject>;
        }): FavoriteInfo {
            const message = new FavoriteInfo({});
            if (data.favorite_group_info != null) {
                message.favorite_group_info = GroupFavorite.fromObject(data.favorite_group_info);
            }
            if (data.favorite_scene_info != null) {
                message.favorite_scene_info = SceneFavorite.fromObject(data.favorite_scene_info);
            }
            if (data.favorite_appliance_info != null) {
                message.favorite_appliance_info = ApplianceFavorite.fromObject(data.favorite_appliance_info);
            }
            if (data.favorite_device_info != null) {
                message.favorite_device_info = DeviceFavorite.fromObject(data.favorite_device_info);
            }
            if (data.favorite_gm_appliance_info != null) {
                message.favorite_gm_appliance_info = dependency_2.com.keus.gateway.GMApplianceFavorite.fromObject(data.favorite_gm_appliance_info);
            }
            if (data.favorite_gm_group_info != null) {
                message.favorite_gm_group_info = dependency_2.com.keus.gateway.GMGroupFavorite.fromObject(data.favorite_gm_group_info);
            }
            return message;
        }
        toObject() {
            const data: {
                favorite_group_info?: ReturnType<typeof GroupFavorite.prototype.toObject>;
                favorite_scene_info?: ReturnType<typeof SceneFavorite.prototype.toObject>;
                favorite_appliance_info?: ReturnType<typeof ApplianceFavorite.prototype.toObject>;
                favorite_device_info?: ReturnType<typeof DeviceFavorite.prototype.toObject>;
                favorite_gm_appliance_info?: ReturnType<typeof dependency_2.com.keus.gateway.GMApplianceFavorite.prototype.toObject>;
                favorite_gm_group_info?: ReturnType<typeof dependency_2.com.keus.gateway.GMGroupFavorite.prototype.toObject>;
            } = {};
            if (this.favorite_group_info != null) {
                data.favorite_group_info = this.favorite_group_info.toObject();
            }
            if (this.favorite_scene_info != null) {
                data.favorite_scene_info = this.favorite_scene_info.toObject();
            }
            if (this.favorite_appliance_info != null) {
                data.favorite_appliance_info = this.favorite_appliance_info.toObject();
            }
            if (this.favorite_device_info != null) {
                data.favorite_device_info = this.favorite_device_info.toObject();
            }
            if (this.favorite_gm_appliance_info != null) {
                data.favorite_gm_appliance_info = this.favorite_gm_appliance_info.toObject();
            }
            if (this.favorite_gm_group_info != null) {
                data.favorite_gm_group_info = this.favorite_gm_group_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_favorite_group_info)
                writer.writeMessage(1, this.favorite_group_info, () => this.favorite_group_info.serialize(writer));
            if (this.has_favorite_scene_info)
                writer.writeMessage(2, this.favorite_scene_info, () => this.favorite_scene_info.serialize(writer));
            if (this.has_favorite_appliance_info)
                writer.writeMessage(3, this.favorite_appliance_info, () => this.favorite_appliance_info.serialize(writer));
            if (this.has_favorite_device_info)
                writer.writeMessage(4, this.favorite_device_info, () => this.favorite_device_info.serialize(writer));
            if (this.has_favorite_gm_appliance_info)
                writer.writeMessage(5, this.favorite_gm_appliance_info, () => this.favorite_gm_appliance_info.serialize(writer));
            if (this.has_favorite_gm_group_info)
                writer.writeMessage(6, this.favorite_gm_group_info, () => this.favorite_gm_group_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FavoriteInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FavoriteInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.favorite_group_info, () => message.favorite_group_info = GroupFavorite.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.favorite_scene_info, () => message.favorite_scene_info = SceneFavorite.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.favorite_appliance_info, () => message.favorite_appliance_info = ApplianceFavorite.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.favorite_device_info, () => message.favorite_device_info = DeviceFavorite.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.favorite_gm_appliance_info, () => message.favorite_gm_appliance_info = dependency_2.com.keus.gateway.GMApplianceFavorite.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.favorite_gm_group_info, () => message.favorite_gm_group_info = dependency_2.com.keus.gateway.GMGroupFavorite.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FavoriteInfo {
            return FavoriteInfo.deserialize(bytes);
        }
    }
    export class ApplianceFavorite extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            appliance_id?: string;
            appliance_room?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_room" in data && data.appliance_room != undefined) {
                    this.appliance_room = data.appliance_room;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appliance_room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set appliance_room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
            appliance_room?: string;
        }): ApplianceFavorite {
            const message = new ApplianceFavorite({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_room != null) {
                message.appliance_room = data.appliance_room;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
                appliance_room?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_room != null) {
                data.appliance_room = this.appliance_room;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (this.appliance_room.length)
                writer.writeString(3, this.appliance_room);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplianceFavorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplianceFavorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    case 3:
                        message.appliance_room = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApplianceFavorite {
            return ApplianceFavorite.deserialize(bytes);
        }
    }
    export class Favorite extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5, 6, 7]];
        constructor(data?: any[] | ({
            favorite_id?: string;
            user_id?: string;
            favorite_category?: dependency_1.com.keus.hub.FAVORITE_CATEGORY;
            favorite_type?: dependency_1.com.keus.hub.FAVORITE_TYPE;
            favorite_added_time?: number;
            favorite_home_info?: FavoriteHomeInfo;
            favorite_gminfo?: FavoriteInfo;
        } & (({
            favorite_group_info?: GroupFavorite;
            favorite_scene_info?: never;
            favorite_appliance_info?: never;
            favorite_device_info?: never;
        } | {
            favorite_group_info?: never;
            favorite_scene_info?: SceneFavorite;
            favorite_appliance_info?: never;
            favorite_device_info?: never;
        } | {
            favorite_group_info?: never;
            favorite_scene_info?: never;
            favorite_appliance_info?: ApplianceFavorite;
            favorite_device_info?: never;
        } | {
            favorite_group_info?: never;
            favorite_scene_info?: never;
            favorite_appliance_info?: never;
            favorite_device_info?: DeviceFavorite;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("favorite_id" in data && data.favorite_id != undefined) {
                    this.favorite_id = data.favorite_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("favorite_category" in data && data.favorite_category != undefined) {
                    this.favorite_category = data.favorite_category;
                }
                if ("favorite_type" in data && data.favorite_type != undefined) {
                    this.favorite_type = data.favorite_type;
                }
                if ("favorite_added_time" in data && data.favorite_added_time != undefined) {
                    this.favorite_added_time = data.favorite_added_time;
                }
                if ("favorite_group_info" in data && data.favorite_group_info != undefined) {
                    this.favorite_group_info = data.favorite_group_info;
                }
                if ("favorite_scene_info" in data && data.favorite_scene_info != undefined) {
                    this.favorite_scene_info = data.favorite_scene_info;
                }
                if ("favorite_appliance_info" in data && data.favorite_appliance_info != undefined) {
                    this.favorite_appliance_info = data.favorite_appliance_info;
                }
                if ("favorite_device_info" in data && data.favorite_device_info != undefined) {
                    this.favorite_device_info = data.favorite_device_info;
                }
                if ("favorite_home_info" in data && data.favorite_home_info != undefined) {
                    this.favorite_home_info = data.favorite_home_info;
                }
                if ("favorite_gminfo" in data && data.favorite_gminfo != undefined) {
                    this.favorite_gminfo = data.favorite_gminfo;
                }
            }
        }
        get favorite_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set favorite_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get favorite_category() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.com.keus.hub.FAVORITE_CATEGORY.FV_DEVICE) as dependency_1.com.keus.hub.FAVORITE_CATEGORY;
        }
        set favorite_category(value: dependency_1.com.keus.hub.FAVORITE_CATEGORY) {
            pb_1.Message.setField(this, 3, value);
        }
        get favorite_type() {
            return pb_1.Message.getFieldWithDefault(this, 11, dependency_1.com.keus.hub.FAVORITE_TYPE.FV_SCENE_TYPE) as dependency_1.com.keus.hub.FAVORITE_TYPE;
        }
        set favorite_type(value: dependency_1.com.keus.hub.FAVORITE_TYPE) {
            pb_1.Message.setField(this, 11, value);
        }
        get favorite_added_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set favorite_added_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get favorite_group_info() {
            return pb_1.Message.getWrapperField(this, GroupFavorite, 4) as GroupFavorite;
        }
        set favorite_group_info(value: GroupFavorite) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_favorite_group_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get favorite_scene_info() {
            return pb_1.Message.getWrapperField(this, SceneFavorite, 5) as SceneFavorite;
        }
        set favorite_scene_info(value: SceneFavorite) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_favorite_scene_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get favorite_appliance_info() {
            return pb_1.Message.getWrapperField(this, ApplianceFavorite, 6) as ApplianceFavorite;
        }
        set favorite_appliance_info(value: ApplianceFavorite) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_favorite_appliance_info() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get favorite_device_info() {
            return pb_1.Message.getWrapperField(this, DeviceFavorite, 7) as DeviceFavorite;
        }
        set favorite_device_info(value: DeviceFavorite) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_favorite_device_info() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get favorite_home_info() {
            return pb_1.Message.getWrapperField(this, FavoriteHomeInfo, 21) as FavoriteHomeInfo;
        }
        set favorite_home_info(value: FavoriteHomeInfo) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get has_favorite_home_info() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get favorite_gminfo() {
            return pb_1.Message.getWrapperField(this, FavoriteInfo, 22) as FavoriteInfo;
        }
        set favorite_gminfo(value: FavoriteInfo) {
            pb_1.Message.setWrapperField(this, 22, value);
        }
        get has_favorite_gminfo() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get favorite_info() {
            const cases: {
                [index: number]: "none" | "favorite_group_info" | "favorite_scene_info" | "favorite_appliance_info" | "favorite_device_info";
            } = {
                0: "none",
                4: "favorite_group_info",
                5: "favorite_scene_info",
                6: "favorite_appliance_info",
                7: "favorite_device_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7])];
        }
        static fromObject(data: {
            favorite_id?: string;
            user_id?: string;
            favorite_category?: dependency_1.com.keus.hub.FAVORITE_CATEGORY;
            favorite_type?: dependency_1.com.keus.hub.FAVORITE_TYPE;
            favorite_added_time?: number;
            favorite_group_info?: ReturnType<typeof GroupFavorite.prototype.toObject>;
            favorite_scene_info?: ReturnType<typeof SceneFavorite.prototype.toObject>;
            favorite_appliance_info?: ReturnType<typeof ApplianceFavorite.prototype.toObject>;
            favorite_device_info?: ReturnType<typeof DeviceFavorite.prototype.toObject>;
            favorite_home_info?: ReturnType<typeof FavoriteHomeInfo.prototype.toObject>;
            favorite_gminfo?: ReturnType<typeof FavoriteInfo.prototype.toObject>;
        }): Favorite {
            const message = new Favorite({});
            if (data.favorite_id != null) {
                message.favorite_id = data.favorite_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.favorite_category != null) {
                message.favorite_category = data.favorite_category;
            }
            if (data.favorite_type != null) {
                message.favorite_type = data.favorite_type;
            }
            if (data.favorite_added_time != null) {
                message.favorite_added_time = data.favorite_added_time;
            }
            if (data.favorite_group_info != null) {
                message.favorite_group_info = GroupFavorite.fromObject(data.favorite_group_info);
            }
            if (data.favorite_scene_info != null) {
                message.favorite_scene_info = SceneFavorite.fromObject(data.favorite_scene_info);
            }
            if (data.favorite_appliance_info != null) {
                message.favorite_appliance_info = ApplianceFavorite.fromObject(data.favorite_appliance_info);
            }
            if (data.favorite_device_info != null) {
                message.favorite_device_info = DeviceFavorite.fromObject(data.favorite_device_info);
            }
            if (data.favorite_home_info != null) {
                message.favorite_home_info = FavoriteHomeInfo.fromObject(data.favorite_home_info);
            }
            if (data.favorite_gminfo != null) {
                message.favorite_gminfo = FavoriteInfo.fromObject(data.favorite_gminfo);
            }
            return message;
        }
        toObject() {
            const data: {
                favorite_id?: string;
                user_id?: string;
                favorite_category?: dependency_1.com.keus.hub.FAVORITE_CATEGORY;
                favorite_type?: dependency_1.com.keus.hub.FAVORITE_TYPE;
                favorite_added_time?: number;
                favorite_group_info?: ReturnType<typeof GroupFavorite.prototype.toObject>;
                favorite_scene_info?: ReturnType<typeof SceneFavorite.prototype.toObject>;
                favorite_appliance_info?: ReturnType<typeof ApplianceFavorite.prototype.toObject>;
                favorite_device_info?: ReturnType<typeof DeviceFavorite.prototype.toObject>;
                favorite_home_info?: ReturnType<typeof FavoriteHomeInfo.prototype.toObject>;
                favorite_gminfo?: ReturnType<typeof FavoriteInfo.prototype.toObject>;
            } = {};
            if (this.favorite_id != null) {
                data.favorite_id = this.favorite_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.favorite_category != null) {
                data.favorite_category = this.favorite_category;
            }
            if (this.favorite_type != null) {
                data.favorite_type = this.favorite_type;
            }
            if (this.favorite_added_time != null) {
                data.favorite_added_time = this.favorite_added_time;
            }
            if (this.favorite_group_info != null) {
                data.favorite_group_info = this.favorite_group_info.toObject();
            }
            if (this.favorite_scene_info != null) {
                data.favorite_scene_info = this.favorite_scene_info.toObject();
            }
            if (this.favorite_appliance_info != null) {
                data.favorite_appliance_info = this.favorite_appliance_info.toObject();
            }
            if (this.favorite_device_info != null) {
                data.favorite_device_info = this.favorite_device_info.toObject();
            }
            if (this.favorite_home_info != null) {
                data.favorite_home_info = this.favorite_home_info.toObject();
            }
            if (this.favorite_gminfo != null) {
                data.favorite_gminfo = this.favorite_gminfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.favorite_id.length)
                writer.writeString(1, this.favorite_id);
            if (this.user_id.length)
                writer.writeString(2, this.user_id);
            if (this.favorite_category != dependency_1.com.keus.hub.FAVORITE_CATEGORY.FV_DEVICE)
                writer.writeEnum(3, this.favorite_category);
            if (this.favorite_type != dependency_1.com.keus.hub.FAVORITE_TYPE.FV_SCENE_TYPE)
                writer.writeEnum(11, this.favorite_type);
            if (this.favorite_added_time != 0)
                writer.writeInt64(8, this.favorite_added_time);
            if (this.has_favorite_group_info)
                writer.writeMessage(4, this.favorite_group_info, () => this.favorite_group_info.serialize(writer));
            if (this.has_favorite_scene_info)
                writer.writeMessage(5, this.favorite_scene_info, () => this.favorite_scene_info.serialize(writer));
            if (this.has_favorite_appliance_info)
                writer.writeMessage(6, this.favorite_appliance_info, () => this.favorite_appliance_info.serialize(writer));
            if (this.has_favorite_device_info)
                writer.writeMessage(7, this.favorite_device_info, () => this.favorite_device_info.serialize(writer));
            if (this.has_favorite_home_info)
                writer.writeMessage(21, this.favorite_home_info, () => this.favorite_home_info.serialize(writer));
            if (this.has_favorite_gminfo)
                writer.writeMessage(22, this.favorite_gminfo, () => this.favorite_gminfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Favorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Favorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.favorite_id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    case 3:
                        message.favorite_category = reader.readEnum();
                        break;
                    case 11:
                        message.favorite_type = reader.readEnum();
                        break;
                    case 8:
                        message.favorite_added_time = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.favorite_group_info, () => message.favorite_group_info = GroupFavorite.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.favorite_scene_info, () => message.favorite_scene_info = SceneFavorite.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.favorite_appliance_info, () => message.favorite_appliance_info = ApplianceFavorite.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.favorite_device_info, () => message.favorite_device_info = DeviceFavorite.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.favorite_home_info, () => message.favorite_home_info = FavoriteHomeInfo.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.favorite_gminfo, () => message.favorite_gminfo = FavoriteInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Favorite {
            return Favorite.deserialize(bytes);
        }
    }
    export class FavoriteNullRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): FavoriteNullRequest {
            const message = new FavoriteNullRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FavoriteNullRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FavoriteNullRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FavoriteNullRequest {
            return FavoriteNullRequest.deserialize(bytes);
        }
    }
    export class GroupFavorite extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
        }): GroupFavorite {
            const message = new GroupFavorite({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupFavorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupFavorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupFavorite {
            return GroupFavorite.deserialize(bytes);
        }
    }
    export class SceneFavorite extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
        }): SceneFavorite {
            const message = new SceneFavorite({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneFavorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneFavorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SceneFavorite {
            return SceneFavorite.deserialize(bytes);
        }
    }
    export class RelayFavorite extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            relay_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
            }
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            relay_id?: number;
        }): RelayFavorite {
            const message = new RelayFavorite({});
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            return message;
        }
        toObject() {
            const data: {
                relay_id?: number;
            } = {};
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.relay_id != 0)
                writer.writeInt32(1, this.relay_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RelayFavorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RelayFavorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.relay_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RelayFavorite {
            return RelayFavorite.deserialize(bytes);
        }
    }
    export class RemoteFavorite extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            remote_id?: string;
        }): RemoteFavorite {
            const message = new RemoteFavorite({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoteFavorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoteFavorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoteFavorite {
            return RemoteFavorite.deserialize(bytes);
        }
    }
    export class DeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            null_params?: FavoriteNullRequest;
            relay_params?: never;
            remote_params?: never;
        } | {
            null_params?: never;
            relay_params?: RelayFavorite;
            remote_params?: never;
        } | {
            null_params?: never;
            relay_params?: never;
            remote_params?: RemoteFavorite;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("null_params" in data && data.null_params != undefined) {
                    this.null_params = data.null_params;
                }
                if ("relay_params" in data && data.relay_params != undefined) {
                    this.relay_params = data.relay_params;
                }
                if ("remote_params" in data && data.remote_params != undefined) {
                    this.remote_params = data.remote_params;
                }
            }
        }
        get null_params() {
            return pb_1.Message.getWrapperField(this, FavoriteNullRequest, 3) as FavoriteNullRequest;
        }
        set null_params(value: FavoriteNullRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_null_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get relay_params() {
            return pb_1.Message.getWrapperField(this, RelayFavorite, 4) as RelayFavorite;
        }
        set relay_params(value: RelayFavorite) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_relay_params() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get remote_params() {
            return pb_1.Message.getWrapperField(this, RemoteFavorite, 5) as RemoteFavorite;
        }
        set remote_params(value: RemoteFavorite) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_remote_params() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get device_info() {
            const cases: {
                [index: number]: "none" | "null_params" | "relay_params" | "remote_params";
            } = {
                0: "none",
                3: "null_params",
                4: "relay_params",
                5: "remote_params"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
        }
        static fromObject(data: {
            null_params?: ReturnType<typeof FavoriteNullRequest.prototype.toObject>;
            relay_params?: ReturnType<typeof RelayFavorite.prototype.toObject>;
            remote_params?: ReturnType<typeof RemoteFavorite.prototype.toObject>;
        }): DeviceInfo {
            const message = new DeviceInfo({});
            if (data.null_params != null) {
                message.null_params = FavoriteNullRequest.fromObject(data.null_params);
            }
            if (data.relay_params != null) {
                message.relay_params = RelayFavorite.fromObject(data.relay_params);
            }
            if (data.remote_params != null) {
                message.remote_params = RemoteFavorite.fromObject(data.remote_params);
            }
            return message;
        }
        toObject() {
            const data: {
                null_params?: ReturnType<typeof FavoriteNullRequest.prototype.toObject>;
                relay_params?: ReturnType<typeof RelayFavorite.prototype.toObject>;
                remote_params?: ReturnType<typeof RemoteFavorite.prototype.toObject>;
            } = {};
            if (this.null_params != null) {
                data.null_params = this.null_params.toObject();
            }
            if (this.relay_params != null) {
                data.relay_params = this.relay_params.toObject();
            }
            if (this.remote_params != null) {
                data.remote_params = this.remote_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_null_params)
                writer.writeMessage(3, this.null_params, () => this.null_params.serialize(writer));
            if (this.has_relay_params)
                writer.writeMessage(4, this.relay_params, () => this.relay_params.serialize(writer));
            if (this.has_remote_params)
                writer.writeMessage(5, this.remote_params, () => this.remote_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.null_params, () => message.null_params = FavoriteNullRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.relay_params, () => message.relay_params = RelayFavorite.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.remote_params, () => message.remote_params = RemoteFavorite.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceInfo {
            return DeviceInfo.deserialize(bytes);
        }
    }
    export class DeviceFavorite extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5]];
        constructor(data?: any[] | ({
            device_id?: string;
            device_type?: string;
            device_room?: string;
            device_gminfo?: DeviceInfo;
        } & (({
            null_params?: FavoriteNullRequest;
            relay_params?: never;
            remote_params?: never;
        } | {
            null_params?: never;
            relay_params?: RelayFavorite;
            remote_params?: never;
        } | {
            null_params?: never;
            relay_params?: never;
            remote_params?: RemoteFavorite;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("null_params" in data && data.null_params != undefined) {
                    this.null_params = data.null_params;
                }
                if ("relay_params" in data && data.relay_params != undefined) {
                    this.relay_params = data.relay_params;
                }
                if ("remote_params" in data && data.remote_params != undefined) {
                    this.remote_params = data.remote_params;
                }
                if ("device_gminfo" in data && data.device_gminfo != undefined) {
                    this.device_gminfo = data.device_gminfo;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get null_params() {
            return pb_1.Message.getWrapperField(this, FavoriteNullRequest, 3) as FavoriteNullRequest;
        }
        set null_params(value: FavoriteNullRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_null_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get relay_params() {
            return pb_1.Message.getWrapperField(this, RelayFavorite, 4) as RelayFavorite;
        }
        set relay_params(value: RelayFavorite) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_relay_params() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get remote_params() {
            return pb_1.Message.getWrapperField(this, RemoteFavorite, 5) as RemoteFavorite;
        }
        set remote_params(value: RemoteFavorite) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_remote_params() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get device_gminfo() {
            return pb_1.Message.getWrapperField(this, DeviceInfo, 10) as DeviceInfo;
        }
        set device_gminfo(value: DeviceInfo) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_device_gminfo() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get device_info() {
            const cases: {
                [index: number]: "none" | "null_params" | "relay_params" | "remote_params";
            } = {
                0: "none",
                3: "null_params",
                4: "relay_params",
                5: "remote_params"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
        }
        static fromObject(data: {
            device_id?: string;
            device_type?: string;
            device_room?: string;
            null_params?: ReturnType<typeof FavoriteNullRequest.prototype.toObject>;
            relay_params?: ReturnType<typeof RelayFavorite.prototype.toObject>;
            remote_params?: ReturnType<typeof RemoteFavorite.prototype.toObject>;
            device_gminfo?: ReturnType<typeof DeviceInfo.prototype.toObject>;
        }): DeviceFavorite {
            const message = new DeviceFavorite({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.null_params != null) {
                message.null_params = FavoriteNullRequest.fromObject(data.null_params);
            }
            if (data.relay_params != null) {
                message.relay_params = RelayFavorite.fromObject(data.relay_params);
            }
            if (data.remote_params != null) {
                message.remote_params = RemoteFavorite.fromObject(data.remote_params);
            }
            if (data.device_gminfo != null) {
                message.device_gminfo = DeviceInfo.fromObject(data.device_gminfo);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_type?: string;
                device_room?: string;
                null_params?: ReturnType<typeof FavoriteNullRequest.prototype.toObject>;
                relay_params?: ReturnType<typeof RelayFavorite.prototype.toObject>;
                remote_params?: ReturnType<typeof RemoteFavorite.prototype.toObject>;
                device_gminfo?: ReturnType<typeof DeviceInfo.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.null_params != null) {
                data.null_params = this.null_params.toObject();
            }
            if (this.relay_params != null) {
                data.relay_params = this.relay_params.toObject();
            }
            if (this.remote_params != null) {
                data.remote_params = this.remote_params.toObject();
            }
            if (this.device_gminfo != null) {
                data.device_gminfo = this.device_gminfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_type.length)
                writer.writeString(2, this.device_type);
            if (this.device_room.length)
                writer.writeString(6, this.device_room);
            if (this.has_null_params)
                writer.writeMessage(3, this.null_params, () => this.null_params.serialize(writer));
            if (this.has_relay_params)
                writer.writeMessage(4, this.relay_params, () => this.relay_params.serialize(writer));
            if (this.has_remote_params)
                writer.writeMessage(5, this.remote_params, () => this.remote_params.serialize(writer));
            if (this.has_device_gminfo)
                writer.writeMessage(10, this.device_gminfo, () => this.device_gminfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceFavorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceFavorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_type = reader.readString();
                        break;
                    case 6:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.null_params, () => message.null_params = FavoriteNullRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.relay_params, () => message.relay_params = RelayFavorite.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.remote_params, () => message.remote_params = RemoteFavorite.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.device_gminfo, () => message.device_gminfo = DeviceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceFavorite {
            return DeviceFavorite.deserialize(bytes);
        }
    }
    export class AddFavorite extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5]];
        constructor(data?: any[] | ({
            favorite_category?: dependency_1.com.keus.hub.FAVORITE_CATEGORY;
            favorite_type?: dependency_1.com.keus.hub.FAVORITE_TYPE;
            favorite_info?: FavoriteInfo;
            favorite_home_info?: FavoriteHomeInfo;
        } & (({
            group_info?: GroupFavorite;
            scene_info?: never;
            appliance_info?: never;
            device_info?: never;
        } | {
            group_info?: never;
            scene_info?: SceneFavorite;
            appliance_info?: never;
            device_info?: never;
        } | {
            group_info?: never;
            scene_info?: never;
            appliance_info?: ApplianceFavorite;
            device_info?: never;
        } | {
            group_info?: never;
            scene_info?: never;
            appliance_info?: never;
            device_info?: DeviceFavorite;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("favorite_category" in data && data.favorite_category != undefined) {
                    this.favorite_category = data.favorite_category;
                }
                if ("favorite_type" in data && data.favorite_type != undefined) {
                    this.favorite_type = data.favorite_type;
                }
                if ("group_info" in data && data.group_info != undefined) {
                    this.group_info = data.group_info;
                }
                if ("scene_info" in data && data.scene_info != undefined) {
                    this.scene_info = data.scene_info;
                }
                if ("appliance_info" in data && data.appliance_info != undefined) {
                    this.appliance_info = data.appliance_info;
                }
                if ("device_info" in data && data.device_info != undefined) {
                    this.device_info = data.device_info;
                }
                if ("favorite_info" in data && data.favorite_info != undefined) {
                    this.favorite_info = data.favorite_info;
                }
                if ("favorite_home_info" in data && data.favorite_home_info != undefined) {
                    this.favorite_home_info = data.favorite_home_info;
                }
            }
        }
        get favorite_category() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.hub.FAVORITE_CATEGORY.FV_DEVICE) as dependency_1.com.keus.hub.FAVORITE_CATEGORY;
        }
        set favorite_category(value: dependency_1.com.keus.hub.FAVORITE_CATEGORY) {
            pb_1.Message.setField(this, 1, value);
        }
        get favorite_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_1.com.keus.hub.FAVORITE_TYPE.FV_SCENE_TYPE) as dependency_1.com.keus.hub.FAVORITE_TYPE;
        }
        set favorite_type(value: dependency_1.com.keus.hub.FAVORITE_TYPE) {
            pb_1.Message.setField(this, 6, value);
        }
        get group_info() {
            return pb_1.Message.getWrapperField(this, GroupFavorite, 2) as GroupFavorite;
        }
        set group_info(value: GroupFavorite) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_group_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get scene_info() {
            return pb_1.Message.getWrapperField(this, SceneFavorite, 3) as SceneFavorite;
        }
        set scene_info(value: SceneFavorite) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_scene_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get appliance_info() {
            return pb_1.Message.getWrapperField(this, ApplianceFavorite, 4) as ApplianceFavorite;
        }
        set appliance_info(value: ApplianceFavorite) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_appliance_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get device_info() {
            return pb_1.Message.getWrapperField(this, DeviceFavorite, 5) as DeviceFavorite;
        }
        set device_info(value: DeviceFavorite) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_device_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get favorite_info() {
            return pb_1.Message.getWrapperField(this, FavoriteInfo, 10) as FavoriteInfo;
        }
        set favorite_info(value: FavoriteInfo) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_favorite_info() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get favorite_home_info() {
            return pb_1.Message.getWrapperField(this, FavoriteHomeInfo, 11) as FavoriteHomeInfo;
        }
        set favorite_home_info(value: FavoriteHomeInfo) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_favorite_home_info() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get props() {
            const cases: {
                [index: number]: "none" | "group_info" | "scene_info" | "appliance_info" | "device_info";
            } = {
                0: "none",
                2: "group_info",
                3: "scene_info",
                4: "appliance_info",
                5: "device_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5])];
        }
        static fromObject(data: {
            favorite_category?: dependency_1.com.keus.hub.FAVORITE_CATEGORY;
            favorite_type?: dependency_1.com.keus.hub.FAVORITE_TYPE;
            group_info?: ReturnType<typeof GroupFavorite.prototype.toObject>;
            scene_info?: ReturnType<typeof SceneFavorite.prototype.toObject>;
            appliance_info?: ReturnType<typeof ApplianceFavorite.prototype.toObject>;
            device_info?: ReturnType<typeof DeviceFavorite.prototype.toObject>;
            favorite_info?: ReturnType<typeof FavoriteInfo.prototype.toObject>;
            favorite_home_info?: ReturnType<typeof FavoriteHomeInfo.prototype.toObject>;
        }): AddFavorite {
            const message = new AddFavorite({});
            if (data.favorite_category != null) {
                message.favorite_category = data.favorite_category;
            }
            if (data.favorite_type != null) {
                message.favorite_type = data.favorite_type;
            }
            if (data.group_info != null) {
                message.group_info = GroupFavorite.fromObject(data.group_info);
            }
            if (data.scene_info != null) {
                message.scene_info = SceneFavorite.fromObject(data.scene_info);
            }
            if (data.appliance_info != null) {
                message.appliance_info = ApplianceFavorite.fromObject(data.appliance_info);
            }
            if (data.device_info != null) {
                message.device_info = DeviceFavorite.fromObject(data.device_info);
            }
            if (data.favorite_info != null) {
                message.favorite_info = FavoriteInfo.fromObject(data.favorite_info);
            }
            if (data.favorite_home_info != null) {
                message.favorite_home_info = FavoriteHomeInfo.fromObject(data.favorite_home_info);
            }
            return message;
        }
        toObject() {
            const data: {
                favorite_category?: dependency_1.com.keus.hub.FAVORITE_CATEGORY;
                favorite_type?: dependency_1.com.keus.hub.FAVORITE_TYPE;
                group_info?: ReturnType<typeof GroupFavorite.prototype.toObject>;
                scene_info?: ReturnType<typeof SceneFavorite.prototype.toObject>;
                appliance_info?: ReturnType<typeof ApplianceFavorite.prototype.toObject>;
                device_info?: ReturnType<typeof DeviceFavorite.prototype.toObject>;
                favorite_info?: ReturnType<typeof FavoriteInfo.prototype.toObject>;
                favorite_home_info?: ReturnType<typeof FavoriteHomeInfo.prototype.toObject>;
            } = {};
            if (this.favorite_category != null) {
                data.favorite_category = this.favorite_category;
            }
            if (this.favorite_type != null) {
                data.favorite_type = this.favorite_type;
            }
            if (this.group_info != null) {
                data.group_info = this.group_info.toObject();
            }
            if (this.scene_info != null) {
                data.scene_info = this.scene_info.toObject();
            }
            if (this.appliance_info != null) {
                data.appliance_info = this.appliance_info.toObject();
            }
            if (this.device_info != null) {
                data.device_info = this.device_info.toObject();
            }
            if (this.favorite_info != null) {
                data.favorite_info = this.favorite_info.toObject();
            }
            if (this.favorite_home_info != null) {
                data.favorite_home_info = this.favorite_home_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.favorite_category != dependency_1.com.keus.hub.FAVORITE_CATEGORY.FV_DEVICE)
                writer.writeEnum(1, this.favorite_category);
            if (this.favorite_type != dependency_1.com.keus.hub.FAVORITE_TYPE.FV_SCENE_TYPE)
                writer.writeEnum(6, this.favorite_type);
            if (this.has_group_info)
                writer.writeMessage(2, this.group_info, () => this.group_info.serialize(writer));
            if (this.has_scene_info)
                writer.writeMessage(3, this.scene_info, () => this.scene_info.serialize(writer));
            if (this.has_appliance_info)
                writer.writeMessage(4, this.appliance_info, () => this.appliance_info.serialize(writer));
            if (this.has_device_info)
                writer.writeMessage(5, this.device_info, () => this.device_info.serialize(writer));
            if (this.has_favorite_info)
                writer.writeMessage(10, this.favorite_info, () => this.favorite_info.serialize(writer));
            if (this.has_favorite_home_info)
                writer.writeMessage(11, this.favorite_home_info, () => this.favorite_home_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddFavorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddFavorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.favorite_category = reader.readEnum();
                        break;
                    case 6:
                        message.favorite_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.group_info, () => message.group_info = GroupFavorite.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.scene_info, () => message.scene_info = SceneFavorite.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.appliance_info, () => message.appliance_info = ApplianceFavorite.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.device_info, () => message.device_info = DeviceFavorite.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.favorite_info, () => message.favorite_info = FavoriteInfo.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.favorite_home_info, () => message.favorite_home_info = FavoriteHomeInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddFavorite {
            return AddFavorite.deserialize(bytes);
        }
    }
    export class AddFavoriteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            favorite_id?: string;
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("favorite_id" in data && data.favorite_id != undefined) {
                    this.favorite_id = data.favorite_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get favorite_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set favorite_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            favorite_id?: string;
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): AddFavoriteResponse {
            const message = new AddFavoriteResponse({});
            if (data.favorite_id != null) {
                message.favorite_id = data.favorite_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                favorite_id?: string;
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.favorite_id != null) {
                data.favorite_id = this.favorite_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.favorite_id.length)
                writer.writeString(5, this.favorite_id);
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddFavoriteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddFavoriteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.favorite_id = reader.readString();
                        break;
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddFavoriteResponse {
            return AddFavoriteResponse.deserialize(bytes);
        }
    }
    export class DeleteFavorite extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            favorite_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("favorite_id" in data && data.favorite_id != undefined) {
                    this.favorite_id = data.favorite_id;
                }
            }
        }
        get favorite_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set favorite_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            favorite_id?: string;
        }): DeleteFavorite {
            const message = new DeleteFavorite({});
            if (data.favorite_id != null) {
                message.favorite_id = data.favorite_id;
            }
            return message;
        }
        toObject() {
            const data: {
                favorite_id?: string;
            } = {};
            if (this.favorite_id != null) {
                data.favorite_id = this.favorite_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.favorite_id.length)
                writer.writeString(1, this.favorite_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFavorite {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFavorite();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.favorite_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteFavorite {
            return DeleteFavorite.deserialize(bytes);
        }
    }
    export class DeleteFavoriteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): DeleteFavoriteResponse {
            const message = new DeleteFavoriteResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFavoriteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFavoriteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteFavoriteResponse {
            return DeleteFavoriteResponse.deserialize(bytes);
        }
    }
    export class FetchFavoriteByUser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): FetchFavoriteByUser {
            const message = new FetchFavoriteByUser({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchFavoriteByUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchFavoriteByUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchFavoriteByUser {
            return FetchFavoriteByUser.deserialize(bytes);
        }
    }
    export class FetchFavoriteByUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            favorite?: Favorite[];
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("favorite" in data && data.favorite != undefined) {
                    this.favorite = data.favorite;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get favorite() {
            return pb_1.Message.getRepeatedWrapperField(this, Favorite, 5) as Favorite[];
        }
        set favorite(value: Favorite[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            favorite?: ReturnType<typeof Favorite.prototype.toObject>[];
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): FetchFavoriteByUserResponse {
            const message = new FetchFavoriteByUserResponse({});
            if (data.favorite != null) {
                message.favorite = data.favorite.map(item => Favorite.fromObject(item));
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                favorite?: ReturnType<typeof Favorite.prototype.toObject>[];
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.favorite != null) {
                data.favorite = this.favorite.map((item: Favorite) => item.toObject());
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.favorite.length)
                writer.writeRepeatedMessage(5, this.favorite, (item: Favorite) => item.serialize(writer));
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchFavoriteByUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchFavoriteByUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        reader.readMessage(message.favorite, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Favorite.deserialize(reader), Favorite));
                        break;
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchFavoriteByUserResponse {
            return FetchFavoriteByUserResponse.deserialize(bytes);
        }
    }
    export class FetchFavoriteByRoomName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            room_id?: string;
        }): FetchFavoriteByRoomName {
            const message = new FetchFavoriteByRoomName({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchFavoriteByRoomName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchFavoriteByRoomName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchFavoriteByRoomName {
            return FetchFavoriteByRoomName.deserialize(bytes);
        }
    }
    export class FetchFavoriteByRoomNameResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            favorite?: Favorite[];
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("favorite" in data && data.favorite != undefined) {
                    this.favorite = data.favorite;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get favorite() {
            return pb_1.Message.getRepeatedWrapperField(this, Favorite, 5) as Favorite[];
        }
        set favorite(value: Favorite[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            favorite?: ReturnType<typeof Favorite.prototype.toObject>[];
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): FetchFavoriteByRoomNameResponse {
            const message = new FetchFavoriteByRoomNameResponse({});
            if (data.favorite != null) {
                message.favorite = data.favorite.map(item => Favorite.fromObject(item));
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                favorite?: ReturnType<typeof Favorite.prototype.toObject>[];
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.favorite != null) {
                data.favorite = this.favorite.map((item: Favorite) => item.toObject());
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.favorite.length)
                writer.writeRepeatedMessage(5, this.favorite, (item: Favorite) => item.serialize(writer));
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchFavoriteByRoomNameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchFavoriteByRoomNameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        reader.readMessage(message.favorite, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Favorite.deserialize(reader), Favorite));
                        break;
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchFavoriteByRoomNameResponse {
            return FetchFavoriteByRoomNameResponse.deserialize(bytes);
        }
    }
}
