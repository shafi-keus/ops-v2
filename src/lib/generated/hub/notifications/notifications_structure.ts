/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/notifications/notifications_structure.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./notifications_constants";
import * as dependency_2 from "./../devices/zigbee_contact_sensor";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class ScheduleNotificationData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scheduleId?: string;
            scheduleName?: string;
            scheduleType?: number;
            scheduleActionType?: number;
            scheduleSection?: string;
            scheduleRoom?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scheduleId" in data && data.scheduleId != undefined) {
                    this.scheduleId = data.scheduleId;
                }
                if ("scheduleName" in data && data.scheduleName != undefined) {
                    this.scheduleName = data.scheduleName;
                }
                if ("scheduleType" in data && data.scheduleType != undefined) {
                    this.scheduleType = data.scheduleType;
                }
                if ("scheduleActionType" in data && data.scheduleActionType != undefined) {
                    this.scheduleActionType = data.scheduleActionType;
                }
                if ("scheduleSection" in data && data.scheduleSection != undefined) {
                    this.scheduleSection = data.scheduleSection;
                }
                if ("scheduleRoom" in data && data.scheduleRoom != undefined) {
                    this.scheduleRoom = data.scheduleRoom;
                }
            }
        }
        get scheduleId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set scheduleId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get scheduleName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scheduleName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scheduleType() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set scheduleType(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get scheduleActionType() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set scheduleActionType(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get scheduleSection() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set scheduleSection(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get scheduleRoom() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set scheduleRoom(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            scheduleId?: string;
            scheduleName?: string;
            scheduleType?: number;
            scheduleActionType?: number;
            scheduleSection?: string;
            scheduleRoom?: string;
        }): ScheduleNotificationData {
            const message = new ScheduleNotificationData({});
            if (data.scheduleId != null) {
                message.scheduleId = data.scheduleId;
            }
            if (data.scheduleName != null) {
                message.scheduleName = data.scheduleName;
            }
            if (data.scheduleType != null) {
                message.scheduleType = data.scheduleType;
            }
            if (data.scheduleActionType != null) {
                message.scheduleActionType = data.scheduleActionType;
            }
            if (data.scheduleSection != null) {
                message.scheduleSection = data.scheduleSection;
            }
            if (data.scheduleRoom != null) {
                message.scheduleRoom = data.scheduleRoom;
            }
            return message;
        }
        toObject() {
            const data: {
                scheduleId?: string;
                scheduleName?: string;
                scheduleType?: number;
                scheduleActionType?: number;
                scheduleSection?: string;
                scheduleRoom?: string;
            } = {};
            if (this.scheduleId != null) {
                data.scheduleId = this.scheduleId;
            }
            if (this.scheduleName != null) {
                data.scheduleName = this.scheduleName;
            }
            if (this.scheduleType != null) {
                data.scheduleType = this.scheduleType;
            }
            if (this.scheduleActionType != null) {
                data.scheduleActionType = this.scheduleActionType;
            }
            if (this.scheduleSection != null) {
                data.scheduleSection = this.scheduleSection;
            }
            if (this.scheduleRoom != null) {
                data.scheduleRoom = this.scheduleRoom;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scheduleId.length)
                writer.writeString(1, this.scheduleId);
            if (this.scheduleName.length)
                writer.writeString(2, this.scheduleName);
            if (this.scheduleType != 0)
                writer.writeInt32(3, this.scheduleType);
            if (this.scheduleActionType != 0)
                writer.writeInt32(4, this.scheduleActionType);
            if (this.scheduleSection.length)
                writer.writeString(5, this.scheduleSection);
            if (this.scheduleRoom.length)
                writer.writeString(6, this.scheduleRoom);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScheduleNotificationData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScheduleNotificationData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scheduleId = reader.readString();
                        break;
                    case 2:
                        message.scheduleName = reader.readString();
                        break;
                    case 3:
                        message.scheduleType = reader.readInt32();
                        break;
                    case 4:
                        message.scheduleActionType = reader.readInt32();
                        break;
                    case 5:
                        message.scheduleSection = reader.readString();
                        break;
                    case 6:
                        message.scheduleRoom = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScheduleNotificationData {
            return ScheduleNotificationData.deserialize(bytes);
        }
    }
    export class GeyserNotificationData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            geyser_name?: string;
            device_room?: string;
            geyserId?: string;
            device_category?: string;
            timeToSend?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("geyser_name" in data && data.geyser_name != undefined) {
                    this.geyser_name = data.geyser_name;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("geyserId" in data && data.geyserId != undefined) {
                    this.geyserId = data.geyserId;
                }
                if ("device_category" in data && data.device_category != undefined) {
                    this.device_category = data.device_category;
                }
                if ("timeToSend" in data && data.timeToSend != undefined) {
                    this.timeToSend = data.timeToSend;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get geyser_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set geyser_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get geyserId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set geyserId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_category() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_category(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get timeToSend() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set timeToSend(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            device_id?: string;
            geyser_name?: string;
            device_room?: string;
            geyserId?: string;
            device_category?: string;
            timeToSend?: number;
        }): GeyserNotificationData {
            const message = new GeyserNotificationData({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.geyser_name != null) {
                message.geyser_name = data.geyser_name;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.geyserId != null) {
                message.geyserId = data.geyserId;
            }
            if (data.device_category != null) {
                message.device_category = data.device_category;
            }
            if (data.timeToSend != null) {
                message.timeToSend = data.timeToSend;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                geyser_name?: string;
                device_room?: string;
                geyserId?: string;
                device_category?: string;
                timeToSend?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.geyser_name != null) {
                data.geyser_name = this.geyser_name;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.geyserId != null) {
                data.geyserId = this.geyserId;
            }
            if (this.device_category != null) {
                data.device_category = this.device_category;
            }
            if (this.timeToSend != null) {
                data.timeToSend = this.timeToSend;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.geyser_name.length)
                writer.writeString(2, this.geyser_name);
            if (this.device_room.length)
                writer.writeString(3, this.device_room);
            if (this.geyserId.length)
                writer.writeString(4, this.geyserId);
            if (this.device_category.length)
                writer.writeString(5, this.device_category);
            if (this.timeToSend != 0)
                writer.writeUint64(6, this.timeToSend);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeyserNotificationData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeyserNotificationData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.geyser_name = reader.readString();
                        break;
                    case 3:
                        message.device_room = reader.readString();
                        break;
                    case 4:
                        message.geyserId = reader.readString();
                        break;
                    case 5:
                        message.device_category = reader.readString();
                        break;
                    case 6:
                        message.timeToSend = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GeyserNotificationData {
            return GeyserNotificationData.deserialize(bytes);
        }
    }
    export class GeyserGroupNotificationData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_name?: string;
            group_section?: string;
            group_room?: string;
            timeToSend?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("group_section" in data && data.group_section != undefined) {
                    this.group_section = data.group_section;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("timeToSend" in data && data.timeToSend != undefined) {
                    this.timeToSend = data.timeToSend;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set group_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get timeToSend() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timeToSend(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            group_id?: number;
            group_name?: string;
            group_section?: string;
            group_room?: string;
            timeToSend?: number;
        }): GeyserGroupNotificationData {
            const message = new GeyserGroupNotificationData({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.group_section != null) {
                message.group_section = data.group_section;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.timeToSend != null) {
                message.timeToSend = data.timeToSend;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_name?: string;
                group_section?: string;
                group_room?: string;
                timeToSend?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.group_section != null) {
                data.group_section = this.group_section;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.timeToSend != null) {
                data.timeToSend = this.timeToSend;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_name.length)
                writer.writeString(2, this.group_name);
            if (this.group_section.length)
                writer.writeString(3, this.group_section);
            if (this.group_room.length)
                writer.writeString(4, this.group_room);
            if (this.timeToSend != 0)
                writer.writeUint64(5, this.timeToSend);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeyserGroupNotificationData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeyserGroupNotificationData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_name = reader.readString();
                        break;
                    case 3:
                        message.group_section = reader.readString();
                        break;
                    case 4:
                        message.group_room = reader.readString();
                        break;
                    case 5:
                        message.timeToSend = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GeyserGroupNotificationData {
            return GeyserGroupNotificationData.deserialize(bytes);
        }
    }
    export class Notification extends pb_1.Message {
        #one_of_decls: number[][] = [[20, 21, 22, 23]];
        constructor(data?: any[] | ({
            notification_id?: string;
            notification_source?: string;
            notification_by?: string;
            notification_username?: string;
            notification_time?: number;
            notification_type?: dependency_1.com.keus.hub.NOTIFICATION_TYPE;
            notification_status?: dependency_1.com.keus.hub.NOTIFICATION_STATUS;
        } & (({
            cs_data?: dependency_2.com.keus.hub.ContactSensorNotificationData;
            schedule_data?: never;
            geyser_data?: never;
            geyser_group_data?: never;
        } | {
            cs_data?: never;
            schedule_data?: ScheduleNotificationData;
            geyser_data?: never;
            geyser_group_data?: never;
        } | {
            cs_data?: never;
            schedule_data?: never;
            geyser_data?: GeyserNotificationData;
            geyser_group_data?: never;
        } | {
            cs_data?: never;
            schedule_data?: never;
            geyser_data?: never;
            geyser_group_data?: GeyserGroupNotificationData;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("notification_id" in data && data.notification_id != undefined) {
                    this.notification_id = data.notification_id;
                }
                if ("notification_source" in data && data.notification_source != undefined) {
                    this.notification_source = data.notification_source;
                }
                if ("notification_by" in data && data.notification_by != undefined) {
                    this.notification_by = data.notification_by;
                }
                if ("notification_username" in data && data.notification_username != undefined) {
                    this.notification_username = data.notification_username;
                }
                if ("notification_time" in data && data.notification_time != undefined) {
                    this.notification_time = data.notification_time;
                }
                if ("notification_type" in data && data.notification_type != undefined) {
                    this.notification_type = data.notification_type;
                }
                if ("notification_status" in data && data.notification_status != undefined) {
                    this.notification_status = data.notification_status;
                }
                if ("cs_data" in data && data.cs_data != undefined) {
                    this.cs_data = data.cs_data;
                }
                if ("schedule_data" in data && data.schedule_data != undefined) {
                    this.schedule_data = data.schedule_data;
                }
                if ("geyser_data" in data && data.geyser_data != undefined) {
                    this.geyser_data = data.geyser_data;
                }
                if ("geyser_group_data" in data && data.geyser_group_data != undefined) {
                    this.geyser_group_data = data.geyser_group_data;
                }
            }
        }
        get notification_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set notification_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get notification_source() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set notification_source(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get notification_by() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set notification_by(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get notification_username() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set notification_username(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get notification_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set notification_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get notification_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_1.com.keus.hub.NOTIFICATION_TYPE.CONTACT_SENSOR) as dependency_1.com.keus.hub.NOTIFICATION_TYPE;
        }
        set notification_type(value: dependency_1.com.keus.hub.NOTIFICATION_TYPE) {
            pb_1.Message.setField(this, 6, value);
        }
        get notification_status() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_1.com.keus.hub.NOTIFICATION_STATUS.NS_NO_FLAG) as dependency_1.com.keus.hub.NOTIFICATION_STATUS;
        }
        set notification_status(value: dependency_1.com.keus.hub.NOTIFICATION_STATUS) {
            pb_1.Message.setField(this, 7, value);
        }
        get cs_data() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ContactSensorNotificationData, 20) as dependency_2.com.keus.hub.ContactSensorNotificationData;
        }
        set cs_data(value: dependency_2.com.keus.hub.ContactSensorNotificationData) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_cs_data() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get schedule_data() {
            return pb_1.Message.getWrapperField(this, ScheduleNotificationData, 21) as ScheduleNotificationData;
        }
        set schedule_data(value: ScheduleNotificationData) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_schedule_data() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get geyser_data() {
            return pb_1.Message.getWrapperField(this, GeyserNotificationData, 22) as GeyserNotificationData;
        }
        set geyser_data(value: GeyserNotificationData) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_geyser_data() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get geyser_group_data() {
            return pb_1.Message.getWrapperField(this, GeyserGroupNotificationData, 23) as GeyserGroupNotificationData;
        }
        set geyser_group_data(value: GeyserGroupNotificationData) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_geyser_group_data() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get notification_data() {
            const cases: {
                [index: number]: "none" | "cs_data" | "schedule_data" | "geyser_data" | "geyser_group_data";
            } = {
                0: "none",
                20: "cs_data",
                21: "schedule_data",
                22: "geyser_data",
                23: "geyser_group_data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [20, 21, 22, 23])];
        }
        static fromObject(data: {
            notification_id?: string;
            notification_source?: string;
            notification_by?: string;
            notification_username?: string;
            notification_time?: number;
            notification_type?: dependency_1.com.keus.hub.NOTIFICATION_TYPE;
            notification_status?: dependency_1.com.keus.hub.NOTIFICATION_STATUS;
            cs_data?: ReturnType<typeof dependency_2.com.keus.hub.ContactSensorNotificationData.prototype.toObject>;
            schedule_data?: ReturnType<typeof ScheduleNotificationData.prototype.toObject>;
            geyser_data?: ReturnType<typeof GeyserNotificationData.prototype.toObject>;
            geyser_group_data?: ReturnType<typeof GeyserGroupNotificationData.prototype.toObject>;
        }): Notification {
            const message = new Notification({});
            if (data.notification_id != null) {
                message.notification_id = data.notification_id;
            }
            if (data.notification_source != null) {
                message.notification_source = data.notification_source;
            }
            if (data.notification_by != null) {
                message.notification_by = data.notification_by;
            }
            if (data.notification_username != null) {
                message.notification_username = data.notification_username;
            }
            if (data.notification_time != null) {
                message.notification_time = data.notification_time;
            }
            if (data.notification_type != null) {
                message.notification_type = data.notification_type;
            }
            if (data.notification_status != null) {
                message.notification_status = data.notification_status;
            }
            if (data.cs_data != null) {
                message.cs_data = dependency_2.com.keus.hub.ContactSensorNotificationData.fromObject(data.cs_data);
            }
            if (data.schedule_data != null) {
                message.schedule_data = ScheduleNotificationData.fromObject(data.schedule_data);
            }
            if (data.geyser_data != null) {
                message.geyser_data = GeyserNotificationData.fromObject(data.geyser_data);
            }
            if (data.geyser_group_data != null) {
                message.geyser_group_data = GeyserGroupNotificationData.fromObject(data.geyser_group_data);
            }
            return message;
        }
        toObject() {
            const data: {
                notification_id?: string;
                notification_source?: string;
                notification_by?: string;
                notification_username?: string;
                notification_time?: number;
                notification_type?: dependency_1.com.keus.hub.NOTIFICATION_TYPE;
                notification_status?: dependency_1.com.keus.hub.NOTIFICATION_STATUS;
                cs_data?: ReturnType<typeof dependency_2.com.keus.hub.ContactSensorNotificationData.prototype.toObject>;
                schedule_data?: ReturnType<typeof ScheduleNotificationData.prototype.toObject>;
                geyser_data?: ReturnType<typeof GeyserNotificationData.prototype.toObject>;
                geyser_group_data?: ReturnType<typeof GeyserGroupNotificationData.prototype.toObject>;
            } = {};
            if (this.notification_id != null) {
                data.notification_id = this.notification_id;
            }
            if (this.notification_source != null) {
                data.notification_source = this.notification_source;
            }
            if (this.notification_by != null) {
                data.notification_by = this.notification_by;
            }
            if (this.notification_username != null) {
                data.notification_username = this.notification_username;
            }
            if (this.notification_time != null) {
                data.notification_time = this.notification_time;
            }
            if (this.notification_type != null) {
                data.notification_type = this.notification_type;
            }
            if (this.notification_status != null) {
                data.notification_status = this.notification_status;
            }
            if (this.cs_data != null) {
                data.cs_data = this.cs_data.toObject();
            }
            if (this.schedule_data != null) {
                data.schedule_data = this.schedule_data.toObject();
            }
            if (this.geyser_data != null) {
                data.geyser_data = this.geyser_data.toObject();
            }
            if (this.geyser_group_data != null) {
                data.geyser_group_data = this.geyser_group_data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.notification_id.length)
                writer.writeString(1, this.notification_id);
            if (this.notification_source.length)
                writer.writeString(2, this.notification_source);
            if (this.notification_by.length)
                writer.writeString(3, this.notification_by);
            if (this.notification_username.length)
                writer.writeString(4, this.notification_username);
            if (this.notification_time != 0)
                writer.writeUint64(5, this.notification_time);
            if (this.notification_type != dependency_1.com.keus.hub.NOTIFICATION_TYPE.CONTACT_SENSOR)
                writer.writeEnum(6, this.notification_type);
            if (this.notification_status != dependency_1.com.keus.hub.NOTIFICATION_STATUS.NS_NO_FLAG)
                writer.writeEnum(7, this.notification_status);
            if (this.has_cs_data)
                writer.writeMessage(20, this.cs_data, () => this.cs_data.serialize(writer));
            if (this.has_schedule_data)
                writer.writeMessage(21, this.schedule_data, () => this.schedule_data.serialize(writer));
            if (this.has_geyser_data)
                writer.writeMessage(22, this.geyser_data, () => this.geyser_data.serialize(writer));
            if (this.has_geyser_group_data)
                writer.writeMessage(23, this.geyser_group_data, () => this.geyser_group_data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Notification {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Notification();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.notification_id = reader.readString();
                        break;
                    case 2:
                        message.notification_source = reader.readString();
                        break;
                    case 3:
                        message.notification_by = reader.readString();
                        break;
                    case 4:
                        message.notification_username = reader.readString();
                        break;
                    case 5:
                        message.notification_time = reader.readUint64();
                        break;
                    case 6:
                        message.notification_type = reader.readEnum();
                        break;
                    case 7:
                        message.notification_status = reader.readEnum();
                        break;
                    case 20:
                        reader.readMessage(message.cs_data, () => message.cs_data = dependency_2.com.keus.hub.ContactSensorNotificationData.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.schedule_data, () => message.schedule_data = ScheduleNotificationData.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.geyser_data, () => message.geyser_data = GeyserNotificationData.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.geyser_group_data, () => message.geyser_group_data = GeyserGroupNotificationData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Notification {
            return Notification.deserialize(bytes);
        }
    }
    export class FetchContactSensorNotifications extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            notifications_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("notifications_count" in data && data.notifications_count != undefined) {
                    this.notifications_count = data.notifications_count;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get notifications_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set notifications_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            notifications_count?: number;
        }): FetchContactSensorNotifications {
            const message = new FetchContactSensorNotifications({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.notifications_count != null) {
                message.notifications_count = data.notifications_count;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                notifications_count?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.notifications_count != null) {
                data.notifications_count = this.notifications_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.notifications_count != 0)
                writer.writeUint32(2, this.notifications_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchContactSensorNotifications {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchContactSensorNotifications();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.notifications_count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchContactSensorNotifications {
            return FetchContactSensorNotifications.deserialize(bytes);
        }
    }
    export class FetchContactSensorNotificationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            notifications_list?: Notification[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("notifications_list" in data && data.notifications_list != undefined) {
                    this.notifications_list = data.notifications_list;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get notifications_list() {
            return pb_1.Message.getRepeatedWrapperField(this, Notification, 4) as Notification[];
        }
        set notifications_list(value: Notification[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            notifications_list?: ReturnType<typeof Notification.prototype.toObject>[];
            ops_message?: string;
        }): FetchContactSensorNotificationsResponse {
            const message = new FetchContactSensorNotificationsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.notifications_list != null) {
                message.notifications_list = data.notifications_list.map(item => Notification.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                notifications_list?: ReturnType<typeof Notification.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.notifications_list != null) {
                data.notifications_list = this.notifications_list.map((item: Notification) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.notifications_list.length)
                writer.writeRepeatedMessage(4, this.notifications_list, (item: Notification) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchContactSensorNotificationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchContactSensorNotificationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.notifications_list, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Notification.deserialize(reader), Notification));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchContactSensorNotificationsResponse {
            return FetchContactSensorNotificationsResponse.deserialize(bytes);
        }
    }
}
