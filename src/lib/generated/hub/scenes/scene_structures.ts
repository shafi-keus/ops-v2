/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/scenes/scene_structures.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../devices/zigbee_curtain_controller";
import * as dependency_2 from "./../devices/zigbee_dimmable_driver";
import * as dependency_3 from "./../devices/zigbee_nondimmable_driver";
import * as dependency_4 from "./../devices/dali_dimmable_driver";
import * as dependency_5 from "./../devices/dali_color_tunable_driver";
import * as dependency_6 from "./../devices/dali_nondimmable_driver";
import * as dependency_7 from "./../devices/zigbee_inline_dimmer";
import * as dependency_8 from "./../devices/zigbee_rgbwwa_driver";
import * as dependency_9 from "./../devices/zigbee_embedded_switch";
import * as dependency_10 from "./../devices/zigbee_ac_fan_controller";
import * as dependency_11 from "./../devices/zigbee_dc_fan_controller";
import * as dependency_12 from "./scene_constants";
import * as dependency_13 from "./../devices/smart_console";
import * as dependency_14 from "./../devices/zigbee_ir_blaster";
import * as dependency_15 from "./../activity/activity_constants";
import * as dependency_16 from "./../gateway-models/appliances/appliance";
import * as dependency_17 from "./../gateway-models/groups/gmgroups";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class NullRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): NullRequest {
            const message = new NullRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NullRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NullRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NullRequest {
            return NullRequest.deserialize(bytes);
        }
    }
    export class SceneIdentifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            area_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            scene_id?: number;
            area_id?: number;
        }): SceneIdentifier {
            const message = new SceneIdentifier({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                area_id?: number;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneIdentifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneIdentifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SceneIdentifier {
            return SceneIdentifier.deserialize(bytes);
        }
    }
    export class AreaSceneAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            scene_id?: number;
            room_id?: string;
        }): AreaSceneAction {
            const message = new AreaSceneAction({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                room_id?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AreaSceneAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AreaSceneAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AreaSceneAction {
            return AreaSceneAction.deserialize(bytes);
        }
    }
    export class GMSceneAction extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            gmappliance_action?: dependency_16.com.keus.gateway.GMApplianceSceneAction;
            gmgroup_action?: never;
        } | {
            gmappliance_action?: never;
            gmgroup_action?: dependency_17.com.keus.gateway.GMGroupSceneAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gmappliance_action" in data && data.gmappliance_action != undefined) {
                    this.gmappliance_action = data.gmappliance_action;
                }
                if ("gmgroup_action" in data && data.gmgroup_action != undefined) {
                    this.gmgroup_action = data.gmgroup_action;
                }
            }
        }
        get gmappliance_action() {
            return pb_1.Message.getWrapperField(this, dependency_16.com.keus.gateway.GMApplianceSceneAction, 1) as dependency_16.com.keus.gateway.GMApplianceSceneAction;
        }
        set gmappliance_action(value: dependency_16.com.keus.gateway.GMApplianceSceneAction) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_gmappliance_action() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get gmgroup_action() {
            return pb_1.Message.getWrapperField(this, dependency_17.com.keus.gateway.GMGroupSceneAction, 2) as dependency_17.com.keus.gateway.GMGroupSceneAction;
        }
        set gmgroup_action(value: dependency_17.com.keus.gateway.GMGroupSceneAction) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_gmgroup_action() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get gmaction_item() {
            const cases: {
                [index: number]: "none" | "gmappliance_action" | "gmgroup_action";
            } = {
                0: "none",
                1: "gmappliance_action",
                2: "gmgroup_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            gmappliance_action?: ReturnType<typeof dependency_16.com.keus.gateway.GMApplianceSceneAction.prototype.toObject>;
            gmgroup_action?: ReturnType<typeof dependency_17.com.keus.gateway.GMGroupSceneAction.prototype.toObject>;
        }): GMSceneAction {
            const message = new GMSceneAction({});
            if (data.gmappliance_action != null) {
                message.gmappliance_action = dependency_16.com.keus.gateway.GMApplianceSceneAction.fromObject(data.gmappliance_action);
            }
            if (data.gmgroup_action != null) {
                message.gmgroup_action = dependency_17.com.keus.gateway.GMGroupSceneAction.fromObject(data.gmgroup_action);
            }
            return message;
        }
        toObject() {
            const data: {
                gmappliance_action?: ReturnType<typeof dependency_16.com.keus.gateway.GMApplianceSceneAction.prototype.toObject>;
                gmgroup_action?: ReturnType<typeof dependency_17.com.keus.gateway.GMGroupSceneAction.prototype.toObject>;
            } = {};
            if (this.gmappliance_action != null) {
                data.gmappliance_action = this.gmappliance_action.toObject();
            }
            if (this.gmgroup_action != null) {
                data.gmgroup_action = this.gmgroup_action.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_gmappliance_action)
                writer.writeMessage(1, this.gmappliance_action, () => this.gmappliance_action.serialize(writer));
            if (this.has_gmgroup_action)
                writer.writeMessage(2, this.gmgroup_action, () => this.gmgroup_action.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMSceneAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMSceneAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.gmappliance_action, () => message.gmappliance_action = dependency_16.com.keus.gateway.GMApplianceSceneAction.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.gmgroup_action, () => message.gmgroup_action = dependency_17.com.keus.gateway.GMGroupSceneAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMSceneAction {
            return GMSceneAction.deserialize(bytes);
        }
    }
    export class SceneAction extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]];
        constructor(data?: any[] | ({
            action_id?: string;
            action_type?: string;
            timeslot_id?: number;
            sync_status?: dependency_12.com.keus.hub.ACTION_SYNC_STATES;
            sync_request_type?: dependency_12.com.keus.hub.ACTION_JOB_TYPES;
            sync_request_id?: string;
            job_type_name?: dependency_15.com.keus.hub.JOB_TYPES_NAME;
            job_message?: string;
            sync_request_time?: number;
        } & (({
            zdimmable_driver_action?: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: dependency_4.com.keus.hub.DaliDimmableDriverAction;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: dependency_9.com.keus.hub.EmbeddedApplianceAction;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: dependency_13.com.keus.hub.SmartConsoleRelayAction;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: dependency_14.com.keus.hub.ZigbeeIRBlasterAction;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: dependency_9.com.keus.hub.GroupOnOffApplianceAction;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: dependency_9.com.keus.hub.GroupFanApplianceAction;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: AreaSceneAction;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
            dcolortunable_driver_action?: never;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: dependency_5.com.keus.hub.DaliColorTunableDriverGroupSceneAction;
            gmscene_action?: never;
        } | {
            zdimmable_driver_action?: never;
            znondimmable_driver_action?: never;
            ddimmable_driver_action?: never;
            dnondimmable_driver_action?: never;
            zcurtain_controller_action?: never;
            embedded_appliance_action?: never;
            zACFan_controller_action?: never;
            zDCFan_controller_action?: never;
            zRgbwwwa_driver_action?: never;
            zsc_relay_action?: never;
            zir_blaster_action?: never;
            grp_onoff_action?: never;
            grp_singledimmer_action?: never;
            grp_fan_action?: never;
            grp_colortunable_action?: never;
            area_scene_action?: never;
            grp_zrgbwwa_action?: never;
            dcolortunable_driver_action?: never;
            gmscene_action?: GMSceneAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("action_id" in data && data.action_id != undefined) {
                    this.action_id = data.action_id;
                }
                if ("action_type" in data && data.action_type != undefined) {
                    this.action_type = data.action_type;
                }
                if ("timeslot_id" in data && data.timeslot_id != undefined) {
                    this.timeslot_id = data.timeslot_id;
                }
                if ("sync_status" in data && data.sync_status != undefined) {
                    this.sync_status = data.sync_status;
                }
                if ("sync_request_type" in data && data.sync_request_type != undefined) {
                    this.sync_request_type = data.sync_request_type;
                }
                if ("sync_request_id" in data && data.sync_request_id != undefined) {
                    this.sync_request_id = data.sync_request_id;
                }
                if ("zdimmable_driver_action" in data && data.zdimmable_driver_action != undefined) {
                    this.zdimmable_driver_action = data.zdimmable_driver_action;
                }
                if ("znondimmable_driver_action" in data && data.znondimmable_driver_action != undefined) {
                    this.znondimmable_driver_action = data.znondimmable_driver_action;
                }
                if ("ddimmable_driver_action" in data && data.ddimmable_driver_action != undefined) {
                    this.ddimmable_driver_action = data.ddimmable_driver_action;
                }
                if ("dnondimmable_driver_action" in data && data.dnondimmable_driver_action != undefined) {
                    this.dnondimmable_driver_action = data.dnondimmable_driver_action;
                }
                if ("zcurtain_controller_action" in data && data.zcurtain_controller_action != undefined) {
                    this.zcurtain_controller_action = data.zcurtain_controller_action;
                }
                if ("embedded_appliance_action" in data && data.embedded_appliance_action != undefined) {
                    this.embedded_appliance_action = data.embedded_appliance_action;
                }
                if ("zACFan_controller_action" in data && data.zACFan_controller_action != undefined) {
                    this.zACFan_controller_action = data.zACFan_controller_action;
                }
                if ("zDCFan_controller_action" in data && data.zDCFan_controller_action != undefined) {
                    this.zDCFan_controller_action = data.zDCFan_controller_action;
                }
                if ("zRgbwwwa_driver_action" in data && data.zRgbwwwa_driver_action != undefined) {
                    this.zRgbwwwa_driver_action = data.zRgbwwwa_driver_action;
                }
                if ("zsc_relay_action" in data && data.zsc_relay_action != undefined) {
                    this.zsc_relay_action = data.zsc_relay_action;
                }
                if ("zir_blaster_action" in data && data.zir_blaster_action != undefined) {
                    this.zir_blaster_action = data.zir_blaster_action;
                }
                if ("grp_onoff_action" in data && data.grp_onoff_action != undefined) {
                    this.grp_onoff_action = data.grp_onoff_action;
                }
                if ("grp_singledimmer_action" in data && data.grp_singledimmer_action != undefined) {
                    this.grp_singledimmer_action = data.grp_singledimmer_action;
                }
                if ("grp_fan_action" in data && data.grp_fan_action != undefined) {
                    this.grp_fan_action = data.grp_fan_action;
                }
                if ("grp_colortunable_action" in data && data.grp_colortunable_action != undefined) {
                    this.grp_colortunable_action = data.grp_colortunable_action;
                }
                if ("area_scene_action" in data && data.area_scene_action != undefined) {
                    this.area_scene_action = data.area_scene_action;
                }
                if ("grp_zrgbwwa_action" in data && data.grp_zrgbwwa_action != undefined) {
                    this.grp_zrgbwwa_action = data.grp_zrgbwwa_action;
                }
                if ("dcolortunable_driver_action" in data && data.dcolortunable_driver_action != undefined) {
                    this.dcolortunable_driver_action = data.dcolortunable_driver_action;
                }
                if ("gmscene_action" in data && data.gmscene_action != undefined) {
                    this.gmscene_action = data.gmscene_action;
                }
                if ("job_type_name" in data && data.job_type_name != undefined) {
                    this.job_type_name = data.job_type_name;
                }
                if ("job_message" in data && data.job_message != undefined) {
                    this.job_message = data.job_message;
                }
                if ("sync_request_time" in data && data.sync_request_time != undefined) {
                    this.sync_request_time = data.sync_request_time;
                }
            }
        }
        get action_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set action_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get action_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set action_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timeslot_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timeslot_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sync_status() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_12.com.keus.hub.ACTION_SYNC_STATES.ACTIONINSYNC) as dependency_12.com.keus.hub.ACTION_SYNC_STATES;
        }
        set sync_status(value: dependency_12.com.keus.hub.ACTION_SYNC_STATES) {
            pb_1.Message.setField(this, 3, value);
        }
        get sync_request_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_12.com.keus.hub.ACTION_JOB_TYPES.ACTION_ADD) as dependency_12.com.keus.hub.ACTION_JOB_TYPES;
        }
        set sync_request_type(value: dependency_12.com.keus.hub.ACTION_JOB_TYPES) {
            pb_1.Message.setField(this, 4, value);
        }
        get sync_request_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set sync_request_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get zdimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverAction, 10) as dependency_2.com.keus.hub.ZigbeeDimmableDriverAction;
        }
        set zdimmable_driver_action(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_action() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get znondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction, 11) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction;
        }
        set znondimmable_driver_action(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_action() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get ddimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverAction, 12) as dependency_4.com.keus.hub.DaliDimmableDriverAction;
        }
        set ddimmable_driver_action(value: dependency_4.com.keus.hub.DaliDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_action() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get dnondimmable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverAction, 13) as dependency_6.com.keus.hub.DaliNonDimmableDriverAction;
        }
        set dnondimmable_driver_action(value: dependency_6.com.keus.hub.DaliNonDimmableDriverAction) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_action() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zcurtain_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerAction, 14) as dependency_1.com.keus.hub.ZigbeeCurtainControllerAction;
        }
        set zcurtain_controller_action(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zcurtain_controller_action() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get embedded_appliance_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.EmbeddedApplianceAction, 15) as dependency_9.com.keus.hub.EmbeddedApplianceAction;
        }
        set embedded_appliance_action(value: dependency_9.com.keus.hub.EmbeddedApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_embedded_appliance_action() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get zACFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ZigbeeACFanControllerAction, 16) as dependency_10.com.keus.hub.ZigbeeACFanControllerAction;
        }
        set zACFan_controller_action(value: dependency_10.com.keus.hub.ZigbeeACFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_zACFan_controller_action() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get zDCFan_controller_action() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.hub.ZigbeeDCFanControllerAction, 17) as dependency_11.com.keus.hub.ZigbeeDCFanControllerAction;
        }
        set zDCFan_controller_action(value: dependency_11.com.keus.hub.ZigbeeDCFanControllerAction) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_zDCFan_controller_action() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get zRgbwwwa_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ZigbeeRgbwwaAction, 18) as dependency_8.com.keus.hub.ZigbeeRgbwwaAction;
        }
        set zRgbwwwa_driver_action(value: dependency_8.com.keus.hub.ZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_zRgbwwwa_driver_action() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get zsc_relay_action() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.hub.SmartConsoleRelayAction, 19) as dependency_13.com.keus.hub.SmartConsoleRelayAction;
        }
        set zsc_relay_action(value: dependency_13.com.keus.hub.SmartConsoleRelayAction) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_zsc_relay_action() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get zir_blaster_action() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.hub.ZigbeeIRBlasterAction, 20) as dependency_14.com.keus.hub.ZigbeeIRBlasterAction;
        }
        set zir_blaster_action(value: dependency_14.com.keus.hub.ZigbeeIRBlasterAction) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_zir_blaster_action() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get grp_onoff_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupOnOffApplianceAction, 21) as dependency_9.com.keus.hub.GroupOnOffApplianceAction;
        }
        set grp_onoff_action(value: dependency_9.com.keus.hub.GroupOnOffApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_grp_onoff_action() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get grp_singledimmer_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction, 22) as dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction;
        }
        set grp_singledimmer_action(value: dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_grp_singledimmer_action() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get grp_fan_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupFanApplianceAction, 23) as dependency_9.com.keus.hub.GroupFanApplianceAction;
        }
        set grp_fan_action(value: dependency_9.com.keus.hub.GroupFanApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_grp_fan_action() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get grp_colortunable_action() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.GroupColorTunableApplianceAction, 24) as dependency_9.com.keus.hub.GroupColorTunableApplianceAction;
        }
        set grp_colortunable_action(value: dependency_9.com.keus.hub.GroupColorTunableApplianceAction) {
            pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
        }
        get has_grp_colortunable_action() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get area_scene_action() {
            return pb_1.Message.getWrapperField(this, AreaSceneAction, 25) as AreaSceneAction;
        }
        set area_scene_action(value: AreaSceneAction) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_area_scene_action() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get grp_zrgbwwa_action() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction, 26) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction;
        }
        set grp_zrgbwwa_action(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_grp_zrgbwwa_action() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get dcolortunable_driver_action() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverGroupSceneAction, 27) as dependency_5.com.keus.hub.DaliColorTunableDriverGroupSceneAction;
        }
        set dcolortunable_driver_action(value: dependency_5.com.keus.hub.DaliColorTunableDriverGroupSceneAction) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_action() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get gmscene_action() {
            return pb_1.Message.getWrapperField(this, GMSceneAction, 28) as GMSceneAction;
        }
        set gmscene_action(value: GMSceneAction) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_gmscene_action() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get job_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_15.com.keus.hub.JOB_TYPES_NAME.NO_JOB_RUNNING) as dependency_15.com.keus.hub.JOB_TYPES_NAME;
        }
        set job_type_name(value: dependency_15.com.keus.hub.JOB_TYPES_NAME) {
            pb_1.Message.setField(this, 7, value);
        }
        get job_message() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set job_message(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get sync_request_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set sync_request_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get action_item() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_action" | "znondimmable_driver_action" | "ddimmable_driver_action" | "dnondimmable_driver_action" | "zcurtain_controller_action" | "embedded_appliance_action" | "zACFan_controller_action" | "zDCFan_controller_action" | "zRgbwwwa_driver_action" | "zsc_relay_action" | "zir_blaster_action" | "grp_onoff_action" | "grp_singledimmer_action" | "grp_fan_action" | "grp_colortunable_action" | "area_scene_action" | "grp_zrgbwwa_action" | "dcolortunable_driver_action" | "gmscene_action";
            } = {
                0: "none",
                10: "zdimmable_driver_action",
                11: "znondimmable_driver_action",
                12: "ddimmable_driver_action",
                13: "dnondimmable_driver_action",
                14: "zcurtain_controller_action",
                15: "embedded_appliance_action",
                16: "zACFan_controller_action",
                17: "zDCFan_controller_action",
                18: "zRgbwwwa_driver_action",
                19: "zsc_relay_action",
                20: "zir_blaster_action",
                21: "grp_onoff_action",
                22: "grp_singledimmer_action",
                23: "grp_fan_action",
                24: "grp_colortunable_action",
                25: "area_scene_action",
                26: "grp_zrgbwwa_action",
                27: "dcolortunable_driver_action",
                28: "gmscene_action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])];
        }
        static fromObject(data: {
            action_id?: string;
            action_type?: string;
            timeslot_id?: number;
            sync_status?: dependency_12.com.keus.hub.ACTION_SYNC_STATES;
            sync_request_type?: dependency_12.com.keus.hub.ACTION_JOB_TYPES;
            sync_request_id?: string;
            zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
            znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
            ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
            dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
            zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
            embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
            zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
            zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
            zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
            zsc_relay_action?: ReturnType<typeof dependency_13.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
            zir_blaster_action?: ReturnType<typeof dependency_14.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
            grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
            grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
            grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
            grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
            area_scene_action?: ReturnType<typeof AreaSceneAction.prototype.toObject>;
            grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
            dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupSceneAction.prototype.toObject>;
            gmscene_action?: ReturnType<typeof GMSceneAction.prototype.toObject>;
            job_type_name?: dependency_15.com.keus.hub.JOB_TYPES_NAME;
            job_message?: string;
            sync_request_time?: number;
        }): SceneAction {
            const message = new SceneAction({});
            if (data.action_id != null) {
                message.action_id = data.action_id;
            }
            if (data.action_type != null) {
                message.action_type = data.action_type;
            }
            if (data.timeslot_id != null) {
                message.timeslot_id = data.timeslot_id;
            }
            if (data.sync_status != null) {
                message.sync_status = data.sync_status;
            }
            if (data.sync_request_type != null) {
                message.sync_request_type = data.sync_request_type;
            }
            if (data.sync_request_id != null) {
                message.sync_request_id = data.sync_request_id;
            }
            if (data.zdimmable_driver_action != null) {
                message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.fromObject(data.zdimmable_driver_action);
            }
            if (data.znondimmable_driver_action != null) {
                message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.fromObject(data.znondimmable_driver_action);
            }
            if (data.ddimmable_driver_action != null) {
                message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.fromObject(data.ddimmable_driver_action);
            }
            if (data.dnondimmable_driver_action != null) {
                message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.fromObject(data.dnondimmable_driver_action);
            }
            if (data.zcurtain_controller_action != null) {
                message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.fromObject(data.zcurtain_controller_action);
            }
            if (data.embedded_appliance_action != null) {
                message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.fromObject(data.embedded_appliance_action);
            }
            if (data.zACFan_controller_action != null) {
                message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.fromObject(data.zACFan_controller_action);
            }
            if (data.zDCFan_controller_action != null) {
                message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.fromObject(data.zDCFan_controller_action);
            }
            if (data.zRgbwwwa_driver_action != null) {
                message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.fromObject(data.zRgbwwwa_driver_action);
            }
            if (data.zsc_relay_action != null) {
                message.zsc_relay_action = dependency_13.com.keus.hub.SmartConsoleRelayAction.fromObject(data.zsc_relay_action);
            }
            if (data.zir_blaster_action != null) {
                message.zir_blaster_action = dependency_14.com.keus.hub.ZigbeeIRBlasterAction.fromObject(data.zir_blaster_action);
            }
            if (data.grp_onoff_action != null) {
                message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.fromObject(data.grp_onoff_action);
            }
            if (data.grp_singledimmer_action != null) {
                message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.fromObject(data.grp_singledimmer_action);
            }
            if (data.grp_fan_action != null) {
                message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.fromObject(data.grp_fan_action);
            }
            if (data.grp_colortunable_action != null) {
                message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.fromObject(data.grp_colortunable_action);
            }
            if (data.area_scene_action != null) {
                message.area_scene_action = AreaSceneAction.fromObject(data.area_scene_action);
            }
            if (data.grp_zrgbwwa_action != null) {
                message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.fromObject(data.grp_zrgbwwa_action);
            }
            if (data.dcolortunable_driver_action != null) {
                message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupSceneAction.fromObject(data.dcolortunable_driver_action);
            }
            if (data.gmscene_action != null) {
                message.gmscene_action = GMSceneAction.fromObject(data.gmscene_action);
            }
            if (data.job_type_name != null) {
                message.job_type_name = data.job_type_name;
            }
            if (data.job_message != null) {
                message.job_message = data.job_message;
            }
            if (data.sync_request_time != null) {
                message.sync_request_time = data.sync_request_time;
            }
            return message;
        }
        toObject() {
            const data: {
                action_id?: string;
                action_type?: string;
                timeslot_id?: number;
                sync_status?: dependency_12.com.keus.hub.ACTION_SYNC_STATES;
                sync_request_type?: dependency_12.com.keus.hub.ACTION_JOB_TYPES;
                sync_request_id?: string;
                zdimmable_driver_action?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.prototype.toObject>;
                znondimmable_driver_action?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.prototype.toObject>;
                ddimmable_driver_action?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverAction.prototype.toObject>;
                dnondimmable_driver_action?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverAction.prototype.toObject>;
                zcurtain_controller_action?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.prototype.toObject>;
                embedded_appliance_action?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedApplianceAction.prototype.toObject>;
                zACFan_controller_action?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerAction.prototype.toObject>;
                zDCFan_controller_action?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.prototype.toObject>;
                zRgbwwwa_driver_action?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaAction.prototype.toObject>;
                zsc_relay_action?: ReturnType<typeof dependency_13.com.keus.hub.SmartConsoleRelayAction.prototype.toObject>;
                zir_blaster_action?: ReturnType<typeof dependency_14.com.keus.hub.ZigbeeIRBlasterAction.prototype.toObject>;
                grp_onoff_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupOnOffApplianceAction.prototype.toObject>;
                grp_singledimmer_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.prototype.toObject>;
                grp_fan_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupFanApplianceAction.prototype.toObject>;
                grp_colortunable_action?: ReturnType<typeof dependency_9.com.keus.hub.GroupColorTunableApplianceAction.prototype.toObject>;
                area_scene_action?: ReturnType<typeof AreaSceneAction.prototype.toObject>;
                grp_zrgbwwa_action?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.prototype.toObject>;
                dcolortunable_driver_action?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupSceneAction.prototype.toObject>;
                gmscene_action?: ReturnType<typeof GMSceneAction.prototype.toObject>;
                job_type_name?: dependency_15.com.keus.hub.JOB_TYPES_NAME;
                job_message?: string;
                sync_request_time?: number;
            } = {};
            if (this.action_id != null) {
                data.action_id = this.action_id;
            }
            if (this.action_type != null) {
                data.action_type = this.action_type;
            }
            if (this.timeslot_id != null) {
                data.timeslot_id = this.timeslot_id;
            }
            if (this.sync_status != null) {
                data.sync_status = this.sync_status;
            }
            if (this.sync_request_type != null) {
                data.sync_request_type = this.sync_request_type;
            }
            if (this.sync_request_id != null) {
                data.sync_request_id = this.sync_request_id;
            }
            if (this.zdimmable_driver_action != null) {
                data.zdimmable_driver_action = this.zdimmable_driver_action.toObject();
            }
            if (this.znondimmable_driver_action != null) {
                data.znondimmable_driver_action = this.znondimmable_driver_action.toObject();
            }
            if (this.ddimmable_driver_action != null) {
                data.ddimmable_driver_action = this.ddimmable_driver_action.toObject();
            }
            if (this.dnondimmable_driver_action != null) {
                data.dnondimmable_driver_action = this.dnondimmable_driver_action.toObject();
            }
            if (this.zcurtain_controller_action != null) {
                data.zcurtain_controller_action = this.zcurtain_controller_action.toObject();
            }
            if (this.embedded_appliance_action != null) {
                data.embedded_appliance_action = this.embedded_appliance_action.toObject();
            }
            if (this.zACFan_controller_action != null) {
                data.zACFan_controller_action = this.zACFan_controller_action.toObject();
            }
            if (this.zDCFan_controller_action != null) {
                data.zDCFan_controller_action = this.zDCFan_controller_action.toObject();
            }
            if (this.zRgbwwwa_driver_action != null) {
                data.zRgbwwwa_driver_action = this.zRgbwwwa_driver_action.toObject();
            }
            if (this.zsc_relay_action != null) {
                data.zsc_relay_action = this.zsc_relay_action.toObject();
            }
            if (this.zir_blaster_action != null) {
                data.zir_blaster_action = this.zir_blaster_action.toObject();
            }
            if (this.grp_onoff_action != null) {
                data.grp_onoff_action = this.grp_onoff_action.toObject();
            }
            if (this.grp_singledimmer_action != null) {
                data.grp_singledimmer_action = this.grp_singledimmer_action.toObject();
            }
            if (this.grp_fan_action != null) {
                data.grp_fan_action = this.grp_fan_action.toObject();
            }
            if (this.grp_colortunable_action != null) {
                data.grp_colortunable_action = this.grp_colortunable_action.toObject();
            }
            if (this.area_scene_action != null) {
                data.area_scene_action = this.area_scene_action.toObject();
            }
            if (this.grp_zrgbwwa_action != null) {
                data.grp_zrgbwwa_action = this.grp_zrgbwwa_action.toObject();
            }
            if (this.dcolortunable_driver_action != null) {
                data.dcolortunable_driver_action = this.dcolortunable_driver_action.toObject();
            }
            if (this.gmscene_action != null) {
                data.gmscene_action = this.gmscene_action.toObject();
            }
            if (this.job_type_name != null) {
                data.job_type_name = this.job_type_name;
            }
            if (this.job_message != null) {
                data.job_message = this.job_message;
            }
            if (this.sync_request_time != null) {
                data.sync_request_time = this.sync_request_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.action_id.length)
                writer.writeString(5, this.action_id);
            if (this.action_type.length)
                writer.writeString(1, this.action_type);
            if (this.timeslot_id != 0)
                writer.writeInt32(2, this.timeslot_id);
            if (this.sync_status != dependency_12.com.keus.hub.ACTION_SYNC_STATES.ACTIONINSYNC)
                writer.writeEnum(3, this.sync_status);
            if (this.sync_request_type != dependency_12.com.keus.hub.ACTION_JOB_TYPES.ACTION_ADD)
                writer.writeEnum(4, this.sync_request_type);
            if (this.sync_request_id.length)
                writer.writeString(6, this.sync_request_id);
            if (this.has_zdimmable_driver_action)
                writer.writeMessage(10, this.zdimmable_driver_action, () => this.zdimmable_driver_action.serialize(writer));
            if (this.has_znondimmable_driver_action)
                writer.writeMessage(11, this.znondimmable_driver_action, () => this.znondimmable_driver_action.serialize(writer));
            if (this.has_ddimmable_driver_action)
                writer.writeMessage(12, this.ddimmable_driver_action, () => this.ddimmable_driver_action.serialize(writer));
            if (this.has_dnondimmable_driver_action)
                writer.writeMessage(13, this.dnondimmable_driver_action, () => this.dnondimmable_driver_action.serialize(writer));
            if (this.has_zcurtain_controller_action)
                writer.writeMessage(14, this.zcurtain_controller_action, () => this.zcurtain_controller_action.serialize(writer));
            if (this.has_embedded_appliance_action)
                writer.writeMessage(15, this.embedded_appliance_action, () => this.embedded_appliance_action.serialize(writer));
            if (this.has_zACFan_controller_action)
                writer.writeMessage(16, this.zACFan_controller_action, () => this.zACFan_controller_action.serialize(writer));
            if (this.has_zDCFan_controller_action)
                writer.writeMessage(17, this.zDCFan_controller_action, () => this.zDCFan_controller_action.serialize(writer));
            if (this.has_zRgbwwwa_driver_action)
                writer.writeMessage(18, this.zRgbwwwa_driver_action, () => this.zRgbwwwa_driver_action.serialize(writer));
            if (this.has_zsc_relay_action)
                writer.writeMessage(19, this.zsc_relay_action, () => this.zsc_relay_action.serialize(writer));
            if (this.has_zir_blaster_action)
                writer.writeMessage(20, this.zir_blaster_action, () => this.zir_blaster_action.serialize(writer));
            if (this.has_grp_onoff_action)
                writer.writeMessage(21, this.grp_onoff_action, () => this.grp_onoff_action.serialize(writer));
            if (this.has_grp_singledimmer_action)
                writer.writeMessage(22, this.grp_singledimmer_action, () => this.grp_singledimmer_action.serialize(writer));
            if (this.has_grp_fan_action)
                writer.writeMessage(23, this.grp_fan_action, () => this.grp_fan_action.serialize(writer));
            if (this.has_grp_colortunable_action)
                writer.writeMessage(24, this.grp_colortunable_action, () => this.grp_colortunable_action.serialize(writer));
            if (this.has_area_scene_action)
                writer.writeMessage(25, this.area_scene_action, () => this.area_scene_action.serialize(writer));
            if (this.has_grp_zrgbwwa_action)
                writer.writeMessage(26, this.grp_zrgbwwa_action, () => this.grp_zrgbwwa_action.serialize(writer));
            if (this.has_dcolortunable_driver_action)
                writer.writeMessage(27, this.dcolortunable_driver_action, () => this.dcolortunable_driver_action.serialize(writer));
            if (this.has_gmscene_action)
                writer.writeMessage(28, this.gmscene_action, () => this.gmscene_action.serialize(writer));
            if (this.job_type_name != dependency_15.com.keus.hub.JOB_TYPES_NAME.NO_JOB_RUNNING)
                writer.writeEnum(7, this.job_type_name);
            if (this.job_message.length)
                writer.writeString(8, this.job_message);
            if (this.sync_request_time != 0)
                writer.writeInt64(9, this.sync_request_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.action_id = reader.readString();
                        break;
                    case 1:
                        message.action_type = reader.readString();
                        break;
                    case 2:
                        message.timeslot_id = reader.readInt32();
                        break;
                    case 3:
                        message.sync_status = reader.readEnum();
                        break;
                    case 4:
                        message.sync_request_type = reader.readEnum();
                        break;
                    case 6:
                        message.sync_request_id = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.zdimmable_driver_action, () => message.zdimmable_driver_action = dependency_2.com.keus.hub.ZigbeeDimmableDriverAction.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.znondimmable_driver_action, () => message.znondimmable_driver_action = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.ddimmable_driver_action, () => message.ddimmable_driver_action = dependency_4.com.keus.hub.DaliDimmableDriverAction.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.dnondimmable_driver_action, () => message.dnondimmable_driver_action = dependency_6.com.keus.hub.DaliNonDimmableDriverAction.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zcurtain_controller_action, () => message.zcurtain_controller_action = dependency_1.com.keus.hub.ZigbeeCurtainControllerAction.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.embedded_appliance_action, () => message.embedded_appliance_action = dependency_9.com.keus.hub.EmbeddedApplianceAction.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.zACFan_controller_action, () => message.zACFan_controller_action = dependency_10.com.keus.hub.ZigbeeACFanControllerAction.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.zDCFan_controller_action, () => message.zDCFan_controller_action = dependency_11.com.keus.hub.ZigbeeDCFanControllerAction.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.zRgbwwwa_driver_action, () => message.zRgbwwwa_driver_action = dependency_8.com.keus.hub.ZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.zsc_relay_action, () => message.zsc_relay_action = dependency_13.com.keus.hub.SmartConsoleRelayAction.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.zir_blaster_action, () => message.zir_blaster_action = dependency_14.com.keus.hub.ZigbeeIRBlasterAction.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.grp_onoff_action, () => message.grp_onoff_action = dependency_9.com.keus.hub.GroupOnOffApplianceAction.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.grp_singledimmer_action, () => message.grp_singledimmer_action = dependency_9.com.keus.hub.GroupSingleDimmerApplianceAction.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.grp_fan_action, () => message.grp_fan_action = dependency_9.com.keus.hub.GroupFanApplianceAction.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.grp_colortunable_action, () => message.grp_colortunable_action = dependency_9.com.keus.hub.GroupColorTunableApplianceAction.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.area_scene_action, () => message.area_scene_action = AreaSceneAction.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.grp_zrgbwwa_action, () => message.grp_zrgbwwa_action = dependency_8.com.keus.hub.GroupZigbeeRgbwwaAction.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.dcolortunable_driver_action, () => message.dcolortunable_driver_action = dependency_5.com.keus.hub.DaliColorTunableDriverGroupSceneAction.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.gmscene_action, () => message.gmscene_action = GMSceneAction.deserialize(reader));
                        break;
                    case 7:
                        message.job_type_name = reader.readEnum();
                        break;
                    case 8:
                        message.job_message = reader.readString();
                        break;
                    case 9:
                        message.sync_request_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SceneAction {
            return SceneAction.deserialize(bytes);
        }
    }
    export class SceneSyncInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12]];
        constructor(data?: any[] | ({
            sync_status?: dependency_12.com.keus.hub.SCENE_SYNC_STATES;
            sync_request_type?: dependency_12.com.keus.hub.SCENE_JOB_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            job_type_name?: dependency_15.com.keus.hub.JOB_TYPES_NAME;
            job_message?: string;
        } & (({
            null_request_params?: NullRequest;
            adjust_timeslot_delay_params?: never;
            remove_timeslot_params?: never;
        } | {
            null_request_params?: never;
            adjust_timeslot_delay_params?: AdjustTimeslotDelay;
            remove_timeslot_params?: never;
        } | {
            null_request_params?: never;
            adjust_timeslot_delay_params?: never;
            remove_timeslot_params?: RemoveTimeslotFromScene;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sync_status" in data && data.sync_status != undefined) {
                    this.sync_status = data.sync_status;
                }
                if ("sync_request_type" in data && data.sync_request_type != undefined) {
                    this.sync_request_type = data.sync_request_type;
                }
                if ("sync_request_id" in data && data.sync_request_id != undefined) {
                    this.sync_request_id = data.sync_request_id;
                }
                if ("sync_request_time" in data && data.sync_request_time != undefined) {
                    this.sync_request_time = data.sync_request_time;
                }
                if ("null_request_params" in data && data.null_request_params != undefined) {
                    this.null_request_params = data.null_request_params;
                }
                if ("adjust_timeslot_delay_params" in data && data.adjust_timeslot_delay_params != undefined) {
                    this.adjust_timeslot_delay_params = data.adjust_timeslot_delay_params;
                }
                if ("remove_timeslot_params" in data && data.remove_timeslot_params != undefined) {
                    this.remove_timeslot_params = data.remove_timeslot_params;
                }
                if ("job_type_name" in data && data.job_type_name != undefined) {
                    this.job_type_name = data.job_type_name;
                }
                if ("job_message" in data && data.job_message != undefined) {
                    this.job_message = data.job_message;
                }
            }
        }
        get sync_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_12.com.keus.hub.SCENE_SYNC_STATES.SCENEINSYNC) as dependency_12.com.keus.hub.SCENE_SYNC_STATES;
        }
        set sync_status(value: dependency_12.com.keus.hub.SCENE_SYNC_STATES) {
            pb_1.Message.setField(this, 1, value);
        }
        get sync_request_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_12.com.keus.hub.SCENE_JOB_TYPES.SCENE_NONE) as dependency_12.com.keus.hub.SCENE_JOB_TYPES;
        }
        set sync_request_type(value: dependency_12.com.keus.hub.SCENE_JOB_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get sync_request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sync_request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sync_request_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sync_request_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get null_request_params() {
            return pb_1.Message.getWrapperField(this, NullRequest, 10) as NullRequest;
        }
        set null_request_params(value: NullRequest) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_null_request_params() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get adjust_timeslot_delay_params() {
            return pb_1.Message.getWrapperField(this, AdjustTimeslotDelay, 11) as AdjustTimeslotDelay;
        }
        set adjust_timeslot_delay_params(value: AdjustTimeslotDelay) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_adjust_timeslot_delay_params() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get remove_timeslot_params() {
            return pb_1.Message.getWrapperField(this, RemoveTimeslotFromScene, 12) as RemoveTimeslotFromScene;
        }
        set remove_timeslot_params(value: RemoveTimeslotFromScene) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_remove_timeslot_params() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get job_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_15.com.keus.hub.JOB_TYPES_NAME.NO_JOB_RUNNING) as dependency_15.com.keus.hub.JOB_TYPES_NAME;
        }
        set job_type_name(value: dependency_15.com.keus.hub.JOB_TYPES_NAME) {
            pb_1.Message.setField(this, 6, value);
        }
        get job_message() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set job_message(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get sync_request_params() {
            const cases: {
                [index: number]: "none" | "null_request_params" | "adjust_timeslot_delay_params" | "remove_timeslot_params";
            } = {
                0: "none",
                10: "null_request_params",
                11: "adjust_timeslot_delay_params",
                12: "remove_timeslot_params"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12])];
        }
        static fromObject(data: {
            sync_status?: dependency_12.com.keus.hub.SCENE_SYNC_STATES;
            sync_request_type?: dependency_12.com.keus.hub.SCENE_JOB_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            null_request_params?: ReturnType<typeof NullRequest.prototype.toObject>;
            adjust_timeslot_delay_params?: ReturnType<typeof AdjustTimeslotDelay.prototype.toObject>;
            remove_timeslot_params?: ReturnType<typeof RemoveTimeslotFromScene.prototype.toObject>;
            job_type_name?: dependency_15.com.keus.hub.JOB_TYPES_NAME;
            job_message?: string;
        }): SceneSyncInfo {
            const message = new SceneSyncInfo({});
            if (data.sync_status != null) {
                message.sync_status = data.sync_status;
            }
            if (data.sync_request_type != null) {
                message.sync_request_type = data.sync_request_type;
            }
            if (data.sync_request_id != null) {
                message.sync_request_id = data.sync_request_id;
            }
            if (data.sync_request_time != null) {
                message.sync_request_time = data.sync_request_time;
            }
            if (data.null_request_params != null) {
                message.null_request_params = NullRequest.fromObject(data.null_request_params);
            }
            if (data.adjust_timeslot_delay_params != null) {
                message.adjust_timeslot_delay_params = AdjustTimeslotDelay.fromObject(data.adjust_timeslot_delay_params);
            }
            if (data.remove_timeslot_params != null) {
                message.remove_timeslot_params = RemoveTimeslotFromScene.fromObject(data.remove_timeslot_params);
            }
            if (data.job_type_name != null) {
                message.job_type_name = data.job_type_name;
            }
            if (data.job_message != null) {
                message.job_message = data.job_message;
            }
            return message;
        }
        toObject() {
            const data: {
                sync_status?: dependency_12.com.keus.hub.SCENE_SYNC_STATES;
                sync_request_type?: dependency_12.com.keus.hub.SCENE_JOB_TYPES;
                sync_request_id?: string;
                sync_request_time?: number;
                null_request_params?: ReturnType<typeof NullRequest.prototype.toObject>;
                adjust_timeslot_delay_params?: ReturnType<typeof AdjustTimeslotDelay.prototype.toObject>;
                remove_timeslot_params?: ReturnType<typeof RemoveTimeslotFromScene.prototype.toObject>;
                job_type_name?: dependency_15.com.keus.hub.JOB_TYPES_NAME;
                job_message?: string;
            } = {};
            if (this.sync_status != null) {
                data.sync_status = this.sync_status;
            }
            if (this.sync_request_type != null) {
                data.sync_request_type = this.sync_request_type;
            }
            if (this.sync_request_id != null) {
                data.sync_request_id = this.sync_request_id;
            }
            if (this.sync_request_time != null) {
                data.sync_request_time = this.sync_request_time;
            }
            if (this.null_request_params != null) {
                data.null_request_params = this.null_request_params.toObject();
            }
            if (this.adjust_timeslot_delay_params != null) {
                data.adjust_timeslot_delay_params = this.adjust_timeslot_delay_params.toObject();
            }
            if (this.remove_timeslot_params != null) {
                data.remove_timeslot_params = this.remove_timeslot_params.toObject();
            }
            if (this.job_type_name != null) {
                data.job_type_name = this.job_type_name;
            }
            if (this.job_message != null) {
                data.job_message = this.job_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sync_status != dependency_12.com.keus.hub.SCENE_SYNC_STATES.SCENEINSYNC)
                writer.writeEnum(1, this.sync_status);
            if (this.sync_request_type != dependency_12.com.keus.hub.SCENE_JOB_TYPES.SCENE_NONE)
                writer.writeEnum(2, this.sync_request_type);
            if (this.sync_request_id.length)
                writer.writeString(3, this.sync_request_id);
            if (this.sync_request_time != 0)
                writer.writeInt64(4, this.sync_request_time);
            if (this.has_null_request_params)
                writer.writeMessage(10, this.null_request_params, () => this.null_request_params.serialize(writer));
            if (this.has_adjust_timeslot_delay_params)
                writer.writeMessage(11, this.adjust_timeslot_delay_params, () => this.adjust_timeslot_delay_params.serialize(writer));
            if (this.has_remove_timeslot_params)
                writer.writeMessage(12, this.remove_timeslot_params, () => this.remove_timeslot_params.serialize(writer));
            if (this.job_type_name != dependency_15.com.keus.hub.JOB_TYPES_NAME.NO_JOB_RUNNING)
                writer.writeEnum(6, this.job_type_name);
            if (this.job_message.length)
                writer.writeString(7, this.job_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneSyncInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneSyncInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sync_status = reader.readEnum();
                        break;
                    case 2:
                        message.sync_request_type = reader.readEnum();
                        break;
                    case 3:
                        message.sync_request_id = reader.readString();
                        break;
                    case 4:
                        message.sync_request_time = reader.readInt64();
                        break;
                    case 10:
                        reader.readMessage(message.null_request_params, () => message.null_request_params = NullRequest.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.adjust_timeslot_delay_params, () => message.adjust_timeslot_delay_params = AdjustTimeslotDelay.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.remove_timeslot_params, () => message.remove_timeslot_params = RemoveTimeslotFromScene.deserialize(reader));
                        break;
                    case 6:
                        message.job_type_name = reader.readEnum();
                        break;
                    case 7:
                        message.job_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SceneSyncInfo {
            return SceneSyncInfo.deserialize(bytes);
        }
    }
    export class Timeslot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timeslot_id?: number;
            timeslot_delay?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timeslot_id" in data && data.timeslot_id != undefined) {
                    this.timeslot_id = data.timeslot_id;
                }
                if ("timeslot_delay" in data && data.timeslot_delay != undefined) {
                    this.timeslot_delay = data.timeslot_delay;
                }
            }
        }
        get timeslot_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timeslot_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get timeslot_delay() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timeslot_delay(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            timeslot_id?: number;
            timeslot_delay?: number;
        }): Timeslot {
            const message = new Timeslot({});
            if (data.timeslot_id != null) {
                message.timeslot_id = data.timeslot_id;
            }
            if (data.timeslot_delay != null) {
                message.timeslot_delay = data.timeslot_delay;
            }
            return message;
        }
        toObject() {
            const data: {
                timeslot_id?: number;
                timeslot_delay?: number;
            } = {};
            if (this.timeslot_id != null) {
                data.timeslot_id = this.timeslot_id;
            }
            if (this.timeslot_delay != null) {
                data.timeslot_delay = this.timeslot_delay;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timeslot_id != 0)
                writer.writeInt32(1, this.timeslot_id);
            if (this.timeslot_delay != 0)
                writer.writeInt32(2, this.timeslot_delay);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Timeslot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Timeslot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timeslot_id = reader.readInt32();
                        break;
                    case 2:
                        message.timeslot_delay = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Timeslot {
            return Timeslot.deserialize(bytes);
        }
    }
    export class Scene extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_name?: string;
            scene_type?: dependency_12.com.keus.hub.SCENE_TYPE;
            scene_section?: string;
            scene_room?: string;
            scene_scope?: dependency_12.com.keus.hub.SCENE_SCOPE;
            scene_execution_type?: dependency_12.com.keus.hub.SCENE_EXECTYPE;
            action?: SceneAction[];
            timeslot?: Timeslot[];
            scene_preset_type?: dependency_12.com.keus.hub.SCENE_PRESET_TYPE;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
            scene_sync_info?: SceneSyncInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_name" in data && data.scene_name != undefined) {
                    this.scene_name = data.scene_name;
                }
                if ("scene_type" in data && data.scene_type != undefined) {
                    this.scene_type = data.scene_type;
                }
                if ("scene_section" in data && data.scene_section != undefined) {
                    this.scene_section = data.scene_section;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("scene_scope" in data && data.scene_scope != undefined) {
                    this.scene_scope = data.scene_scope;
                }
                if ("scene_execution_type" in data && data.scene_execution_type != undefined) {
                    this.scene_execution_type = data.scene_execution_type;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("timeslot" in data && data.timeslot != undefined) {
                    this.timeslot = data.timeslot;
                }
                if ("scene_preset_type" in data && data.scene_preset_type != undefined) {
                    this.scene_preset_type = data.scene_preset_type;
                }
                if ("last_update_time" in data && data.last_update_time != undefined) {
                    this.last_update_time = data.last_update_time;
                }
                if ("last_update_by" in data && data.last_update_by != undefined) {
                    this.last_update_by = data.last_update_by;
                }
                if ("last_update_user" in data && data.last_update_user != undefined) {
                    this.last_update_user = data.last_update_user;
                }
                if ("last_update_source" in data && data.last_update_source != undefined) {
                    this.last_update_source = data.last_update_source;
                }
                if ("scene_sync_info" in data && data.scene_sync_info != undefined) {
                    this.scene_sync_info = data.scene_sync_info;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scene_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_12.com.keus.hub.SCENE_TYPE.MORNING) as dependency_12.com.keus.hub.SCENE_TYPE;
        }
        set scene_type(value: dependency_12.com.keus.hub.SCENE_TYPE) {
            pb_1.Message.setField(this, 3, value);
        }
        get scene_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set scene_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get scene_scope() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_12.com.keus.hub.SCENE_SCOPE.LOCAL) as dependency_12.com.keus.hub.SCENE_SCOPE;
        }
        set scene_scope(value: dependency_12.com.keus.hub.SCENE_SCOPE) {
            pb_1.Message.setField(this, 6, value);
        }
        get scene_execution_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_12.com.keus.hub.SCENE_EXECTYPE.STANDARD) as dependency_12.com.keus.hub.SCENE_EXECTYPE;
        }
        set scene_execution_type(value: dependency_12.com.keus.hub.SCENE_EXECTYPE) {
            pb_1.Message.setField(this, 7, value);
        }
        get action() {
            return pb_1.Message.getRepeatedWrapperField(this, SceneAction, 8) as SceneAction[];
        }
        set action(value: SceneAction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get timeslot() {
            return pb_1.Message.getRepeatedWrapperField(this, Timeslot, 9) as Timeslot[];
        }
        set timeslot(value: Timeslot[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get scene_preset_type() {
            return pb_1.Message.getFieldWithDefault(this, 10, dependency_12.com.keus.hub.SCENE_PRESET_TYPE.DEFAULT) as dependency_12.com.keus.hub.SCENE_PRESET_TYPE;
        }
        set scene_preset_type(value: dependency_12.com.keus.hub.SCENE_PRESET_TYPE) {
            pb_1.Message.setField(this, 10, value);
        }
        get last_update_time() {
            return pb_1.Message.getFieldWithDefault(this, 50, 0) as number;
        }
        set last_update_time(value: number) {
            pb_1.Message.setField(this, 50, value);
        }
        get last_update_by() {
            return pb_1.Message.getFieldWithDefault(this, 51, "") as string;
        }
        set last_update_by(value: string) {
            pb_1.Message.setField(this, 51, value);
        }
        get last_update_user() {
            return pb_1.Message.getFieldWithDefault(this, 52, "") as string;
        }
        set last_update_user(value: string) {
            pb_1.Message.setField(this, 52, value);
        }
        get last_update_source() {
            return pb_1.Message.getFieldWithDefault(this, 53, "") as string;
        }
        set last_update_source(value: string) {
            pb_1.Message.setField(this, 53, value);
        }
        get scene_sync_info() {
            return pb_1.Message.getWrapperField(this, SceneSyncInfo, 54) as SceneSyncInfo;
        }
        set scene_sync_info(value: SceneSyncInfo) {
            pb_1.Message.setWrapperField(this, 54, value);
        }
        get has_scene_sync_info() {
            return pb_1.Message.getField(this, 54) != null;
        }
        static fromObject(data: {
            scene_id?: number;
            scene_name?: string;
            scene_type?: dependency_12.com.keus.hub.SCENE_TYPE;
            scene_section?: string;
            scene_room?: string;
            scene_scope?: dependency_12.com.keus.hub.SCENE_SCOPE;
            scene_execution_type?: dependency_12.com.keus.hub.SCENE_EXECTYPE;
            action?: ReturnType<typeof SceneAction.prototype.toObject>[];
            timeslot?: ReturnType<typeof Timeslot.prototype.toObject>[];
            scene_preset_type?: dependency_12.com.keus.hub.SCENE_PRESET_TYPE;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
            scene_sync_info?: ReturnType<typeof SceneSyncInfo.prototype.toObject>;
        }): Scene {
            const message = new Scene({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_name != null) {
                message.scene_name = data.scene_name;
            }
            if (data.scene_type != null) {
                message.scene_type = data.scene_type;
            }
            if (data.scene_section != null) {
                message.scene_section = data.scene_section;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.scene_scope != null) {
                message.scene_scope = data.scene_scope;
            }
            if (data.scene_execution_type != null) {
                message.scene_execution_type = data.scene_execution_type;
            }
            if (data.action != null) {
                message.action = data.action.map(item => SceneAction.fromObject(item));
            }
            if (data.timeslot != null) {
                message.timeslot = data.timeslot.map(item => Timeslot.fromObject(item));
            }
            if (data.scene_preset_type != null) {
                message.scene_preset_type = data.scene_preset_type;
            }
            if (data.last_update_time != null) {
                message.last_update_time = data.last_update_time;
            }
            if (data.last_update_by != null) {
                message.last_update_by = data.last_update_by;
            }
            if (data.last_update_user != null) {
                message.last_update_user = data.last_update_user;
            }
            if (data.last_update_source != null) {
                message.last_update_source = data.last_update_source;
            }
            if (data.scene_sync_info != null) {
                message.scene_sync_info = SceneSyncInfo.fromObject(data.scene_sync_info);
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_name?: string;
                scene_type?: dependency_12.com.keus.hub.SCENE_TYPE;
                scene_section?: string;
                scene_room?: string;
                scene_scope?: dependency_12.com.keus.hub.SCENE_SCOPE;
                scene_execution_type?: dependency_12.com.keus.hub.SCENE_EXECTYPE;
                action?: ReturnType<typeof SceneAction.prototype.toObject>[];
                timeslot?: ReturnType<typeof Timeslot.prototype.toObject>[];
                scene_preset_type?: dependency_12.com.keus.hub.SCENE_PRESET_TYPE;
                last_update_time?: number;
                last_update_by?: string;
                last_update_user?: string;
                last_update_source?: string;
                scene_sync_info?: ReturnType<typeof SceneSyncInfo.prototype.toObject>;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_name != null) {
                data.scene_name = this.scene_name;
            }
            if (this.scene_type != null) {
                data.scene_type = this.scene_type;
            }
            if (this.scene_section != null) {
                data.scene_section = this.scene_section;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.scene_scope != null) {
                data.scene_scope = this.scene_scope;
            }
            if (this.scene_execution_type != null) {
                data.scene_execution_type = this.scene_execution_type;
            }
            if (this.action != null) {
                data.action = this.action.map((item: SceneAction) => item.toObject());
            }
            if (this.timeslot != null) {
                data.timeslot = this.timeslot.map((item: Timeslot) => item.toObject());
            }
            if (this.scene_preset_type != null) {
                data.scene_preset_type = this.scene_preset_type;
            }
            if (this.last_update_time != null) {
                data.last_update_time = this.last_update_time;
            }
            if (this.last_update_by != null) {
                data.last_update_by = this.last_update_by;
            }
            if (this.last_update_user != null) {
                data.last_update_user = this.last_update_user;
            }
            if (this.last_update_source != null) {
                data.last_update_source = this.last_update_source;
            }
            if (this.scene_sync_info != null) {
                data.scene_sync_info = this.scene_sync_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_name.length)
                writer.writeString(2, this.scene_name);
            if (this.scene_type != dependency_12.com.keus.hub.SCENE_TYPE.MORNING)
                writer.writeEnum(3, this.scene_type);
            if (this.scene_section.length)
                writer.writeString(4, this.scene_section);
            if (this.scene_room.length)
                writer.writeString(5, this.scene_room);
            if (this.scene_scope != dependency_12.com.keus.hub.SCENE_SCOPE.LOCAL)
                writer.writeEnum(6, this.scene_scope);
            if (this.scene_execution_type != dependency_12.com.keus.hub.SCENE_EXECTYPE.STANDARD)
                writer.writeEnum(7, this.scene_execution_type);
            if (this.action.length)
                writer.writeRepeatedMessage(8, this.action, (item: SceneAction) => item.serialize(writer));
            if (this.timeslot.length)
                writer.writeRepeatedMessage(9, this.timeslot, (item: Timeslot) => item.serialize(writer));
            if (this.scene_preset_type != dependency_12.com.keus.hub.SCENE_PRESET_TYPE.DEFAULT)
                writer.writeEnum(10, this.scene_preset_type);
            if (this.last_update_time != 0)
                writer.writeInt64(50, this.last_update_time);
            if (this.last_update_by.length)
                writer.writeString(51, this.last_update_by);
            if (this.last_update_user.length)
                writer.writeString(52, this.last_update_user);
            if (this.last_update_source.length)
                writer.writeString(53, this.last_update_source);
            if (this.has_scene_sync_info)
                writer.writeMessage(54, this.scene_sync_info, () => this.scene_sync_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Scene {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Scene();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_name = reader.readString();
                        break;
                    case 3:
                        message.scene_type = reader.readEnum();
                        break;
                    case 4:
                        message.scene_section = reader.readString();
                        break;
                    case 5:
                        message.scene_room = reader.readString();
                        break;
                    case 6:
                        message.scene_scope = reader.readEnum();
                        break;
                    case 7:
                        message.scene_execution_type = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message.action, () => pb_1.Message.addToRepeatedWrapperField(message, 8, SceneAction.deserialize(reader), SceneAction));
                        break;
                    case 9:
                        reader.readMessage(message.timeslot, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Timeslot.deserialize(reader), Timeslot));
                        break;
                    case 10:
                        message.scene_preset_type = reader.readEnum();
                        break;
                    case 50:
                        message.last_update_time = reader.readInt64();
                        break;
                    case 51:
                        message.last_update_by = reader.readString();
                        break;
                    case 52:
                        message.last_update_user = reader.readString();
                        break;
                    case 53:
                        message.last_update_source = reader.readString();
                        break;
                    case 54:
                        reader.readMessage(message.scene_sync_info, () => message.scene_sync_info = SceneSyncInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Scene {
            return Scene.deserialize(bytes);
        }
    }
    export class CreateScene extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_name?: string;
            scene_type?: dependency_12.com.keus.hub.SCENE_TYPE;
            scene_section?: string;
            scene_room?: string;
            scene_execution_type?: dependency_12.com.keus.hub.SCENE_EXECTYPE;
            scene_scope?: dependency_12.com.keus.hub.SCENE_SCOPE;
            scene_preset_type?: dependency_12.com.keus.hub.SCENE_PRESET_TYPE;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_name" in data && data.scene_name != undefined) {
                    this.scene_name = data.scene_name;
                }
                if ("scene_type" in data && data.scene_type != undefined) {
                    this.scene_type = data.scene_type;
                }
                if ("scene_section" in data && data.scene_section != undefined) {
                    this.scene_section = data.scene_section;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("scene_execution_type" in data && data.scene_execution_type != undefined) {
                    this.scene_execution_type = data.scene_execution_type;
                }
                if ("scene_scope" in data && data.scene_scope != undefined) {
                    this.scene_scope = data.scene_scope;
                }
                if ("scene_preset_type" in data && data.scene_preset_type != undefined) {
                    this.scene_preset_type = data.scene_preset_type;
                }
            }
        }
        get scene_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set scene_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_12.com.keus.hub.SCENE_TYPE.MORNING) as dependency_12.com.keus.hub.SCENE_TYPE;
        }
        set scene_type(value: dependency_12.com.keus.hub.SCENE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get scene_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set scene_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get scene_execution_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_12.com.keus.hub.SCENE_EXECTYPE.STANDARD) as dependency_12.com.keus.hub.SCENE_EXECTYPE;
        }
        set scene_execution_type(value: dependency_12.com.keus.hub.SCENE_EXECTYPE) {
            pb_1.Message.setField(this, 6, value);
        }
        get scene_scope() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_12.com.keus.hub.SCENE_SCOPE.LOCAL) as dependency_12.com.keus.hub.SCENE_SCOPE;
        }
        set scene_scope(value: dependency_12.com.keus.hub.SCENE_SCOPE) {
            pb_1.Message.setField(this, 7, value);
        }
        get scene_preset_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, dependency_12.com.keus.hub.SCENE_PRESET_TYPE.DEFAULT) as dependency_12.com.keus.hub.SCENE_PRESET_TYPE;
        }
        set scene_preset_type(value: dependency_12.com.keus.hub.SCENE_PRESET_TYPE) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            scene_name?: string;
            scene_type?: dependency_12.com.keus.hub.SCENE_TYPE;
            scene_section?: string;
            scene_room?: string;
            scene_execution_type?: dependency_12.com.keus.hub.SCENE_EXECTYPE;
            scene_scope?: dependency_12.com.keus.hub.SCENE_SCOPE;
            scene_preset_type?: dependency_12.com.keus.hub.SCENE_PRESET_TYPE;
        }): CreateScene {
            const message = new CreateScene({});
            if (data.scene_name != null) {
                message.scene_name = data.scene_name;
            }
            if (data.scene_type != null) {
                message.scene_type = data.scene_type;
            }
            if (data.scene_section != null) {
                message.scene_section = data.scene_section;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.scene_execution_type != null) {
                message.scene_execution_type = data.scene_execution_type;
            }
            if (data.scene_scope != null) {
                message.scene_scope = data.scene_scope;
            }
            if (data.scene_preset_type != null) {
                message.scene_preset_type = data.scene_preset_type;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_name?: string;
                scene_type?: dependency_12.com.keus.hub.SCENE_TYPE;
                scene_section?: string;
                scene_room?: string;
                scene_execution_type?: dependency_12.com.keus.hub.SCENE_EXECTYPE;
                scene_scope?: dependency_12.com.keus.hub.SCENE_SCOPE;
                scene_preset_type?: dependency_12.com.keus.hub.SCENE_PRESET_TYPE;
            } = {};
            if (this.scene_name != null) {
                data.scene_name = this.scene_name;
            }
            if (this.scene_type != null) {
                data.scene_type = this.scene_type;
            }
            if (this.scene_section != null) {
                data.scene_section = this.scene_section;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.scene_execution_type != null) {
                data.scene_execution_type = this.scene_execution_type;
            }
            if (this.scene_scope != null) {
                data.scene_scope = this.scene_scope;
            }
            if (this.scene_preset_type != null) {
                data.scene_preset_type = this.scene_preset_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_name.length)
                writer.writeString(1, this.scene_name);
            if (this.scene_type != dependency_12.com.keus.hub.SCENE_TYPE.MORNING)
                writer.writeEnum(2, this.scene_type);
            if (this.scene_section.length)
                writer.writeString(4, this.scene_section);
            if (this.scene_room.length)
                writer.writeString(5, this.scene_room);
            if (this.scene_execution_type != dependency_12.com.keus.hub.SCENE_EXECTYPE.STANDARD)
                writer.writeEnum(6, this.scene_execution_type);
            if (this.scene_scope != dependency_12.com.keus.hub.SCENE_SCOPE.LOCAL)
                writer.writeEnum(7, this.scene_scope);
            if (this.scene_preset_type != dependency_12.com.keus.hub.SCENE_PRESET_TYPE.DEFAULT)
                writer.writeEnum(8, this.scene_preset_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateScene {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateScene();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_name = reader.readString();
                        break;
                    case 2:
                        message.scene_type = reader.readEnum();
                        break;
                    case 4:
                        message.scene_section = reader.readString();
                        break;
                    case 5:
                        message.scene_room = reader.readString();
                        break;
                    case 6:
                        message.scene_execution_type = reader.readEnum();
                        break;
                    case 7:
                        message.scene_scope = reader.readEnum();
                        break;
                    case 8:
                        message.scene_preset_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateScene {
            return CreateScene.deserialize(bytes);
        }
    }
    export class CreateSceneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            scene?: Scene;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("scene" in data && data.scene != undefined) {
                    this.scene = data.scene;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get scene() {
            return pb_1.Message.getWrapperField(this, Scene, 4) as Scene;
        }
        set scene(value: Scene) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_scene() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            scene?: ReturnType<typeof Scene.prototype.toObject>;
            ops_message?: string;
        }): CreateSceneResponse {
            const message = new CreateSceneResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.scene != null) {
                message.scene = Scene.fromObject(data.scene);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                scene?: ReturnType<typeof Scene.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.scene != null) {
                data.scene = this.scene.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_scene)
                writer.writeMessage(4, this.scene, () => this.scene.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSceneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSceneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.scene, () => message.scene = Scene.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSceneResponse {
            return CreateSceneResponse.deserialize(bytes);
        }
    }
    export class EditSceneName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            scene_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("scene_name" in data && data.scene_name != undefined) {
                    this.scene_name = data.scene_name;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get scene_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set scene_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            scene_name?: string;
        }): EditSceneName {
            const message = new EditSceneName({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.scene_name != null) {
                message.scene_name = data.scene_name;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                scene_name?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.scene_name != null) {
                data.scene_name = this.scene_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(5, this.scene_room);
            if (this.scene_name.length)
                writer.writeString(6, this.scene_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditSceneName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditSceneName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 5:
                        message.scene_room = reader.readString();
                        break;
                    case 6:
                        message.scene_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditSceneName {
            return EditSceneName.deserialize(bytes);
        }
    }
    export class EditSceneNameResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EditSceneNameResponse {
            const message = new EditSceneNameResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditSceneNameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditSceneNameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditSceneNameResponse {
            return EditSceneNameResponse.deserialize(bytes);
        }
    }
    export class AddTimeslotToScene extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            timeslot_delay?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("timeslot_delay" in data && data.timeslot_delay != undefined) {
                    this.timeslot_delay = data.timeslot_delay;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timeslot_delay() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timeslot_delay(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            timeslot_delay?: number;
        }): AddTimeslotToScene {
            const message = new AddTimeslotToScene({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.timeslot_delay != null) {
                message.timeslot_delay = data.timeslot_delay;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                timeslot_delay?: number;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.timeslot_delay != null) {
                data.timeslot_delay = this.timeslot_delay;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (this.timeslot_delay != 0)
                writer.writeInt32(3, this.timeslot_delay);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTimeslotToScene {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTimeslotToScene();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    case 3:
                        message.timeslot_delay = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddTimeslotToScene {
            return AddTimeslotToScene.deserialize(bytes);
        }
    }
    export class AddTimeslotToSceneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            timeslot?: Timeslot;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("timeslot" in data && data.timeslot != undefined) {
                    this.timeslot = data.timeslot;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get timeslot() {
            return pb_1.Message.getWrapperField(this, Timeslot, 4) as Timeslot;
        }
        set timeslot(value: Timeslot) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_timeslot() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            timeslot?: ReturnType<typeof Timeslot.prototype.toObject>;
            ops_message?: string;
        }): AddTimeslotToSceneResponse {
            const message = new AddTimeslotToSceneResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.timeslot != null) {
                message.timeslot = Timeslot.fromObject(data.timeslot);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                timeslot?: ReturnType<typeof Timeslot.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.timeslot != null) {
                data.timeslot = this.timeslot.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_timeslot)
                writer.writeMessage(4, this.timeslot, () => this.timeslot.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTimeslotToSceneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTimeslotToSceneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.timeslot, () => message.timeslot = Timeslot.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddTimeslotToSceneResponse {
            return AddTimeslotToSceneResponse.deserialize(bytes);
        }
    }
    export class RemoveTimeslotFromScene extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            timeslot_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("timeslot_id" in data && data.timeslot_id != undefined) {
                    this.timeslot_id = data.timeslot_id;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timeslot_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timeslot_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            timeslot_id?: number;
        }): RemoveTimeslotFromScene {
            const message = new RemoveTimeslotFromScene({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.timeslot_id != null) {
                message.timeslot_id = data.timeslot_id;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                timeslot_id?: number;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.timeslot_id != null) {
                data.timeslot_id = this.timeslot_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (this.timeslot_id != 0)
                writer.writeInt32(3, this.timeslot_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveTimeslotFromScene {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveTimeslotFromScene();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    case 3:
                        message.timeslot_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveTimeslotFromScene {
            return RemoveTimeslotFromScene.deserialize(bytes);
        }
    }
    export class RemoveTimeslotFromSceneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RemoveTimeslotFromSceneResponse {
            const message = new RemoveTimeslotFromSceneResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveTimeslotFromSceneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveTimeslotFromSceneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveTimeslotFromSceneResponse {
            return RemoveTimeslotFromSceneResponse.deserialize(bytes);
        }
    }
    export class AdjustTimeslotDelay extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            timeslot_id?: number;
            timeslot_delay?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("timeslot_id" in data && data.timeslot_id != undefined) {
                    this.timeslot_id = data.timeslot_id;
                }
                if ("timeslot_delay" in data && data.timeslot_delay != undefined) {
                    this.timeslot_delay = data.timeslot_delay;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timeslot_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timeslot_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get timeslot_delay() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timeslot_delay(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            timeslot_id?: number;
            timeslot_delay?: number;
        }): AdjustTimeslotDelay {
            const message = new AdjustTimeslotDelay({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.timeslot_id != null) {
                message.timeslot_id = data.timeslot_id;
            }
            if (data.timeslot_delay != null) {
                message.timeslot_delay = data.timeslot_delay;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                timeslot_id?: number;
                timeslot_delay?: number;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.timeslot_id != null) {
                data.timeslot_id = this.timeslot_id;
            }
            if (this.timeslot_delay != null) {
                data.timeslot_delay = this.timeslot_delay;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (this.timeslot_id != 0)
                writer.writeInt32(3, this.timeslot_id);
            if (this.timeslot_delay != 0)
                writer.writeInt32(4, this.timeslot_delay);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdjustTimeslotDelay {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdjustTimeslotDelay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    case 3:
                        message.timeslot_id = reader.readInt32();
                        break;
                    case 4:
                        message.timeslot_delay = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdjustTimeslotDelay {
            return AdjustTimeslotDelay.deserialize(bytes);
        }
    }
    export class AdjustTimeslotDelayResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            timeslot?: Timeslot;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("timeslot" in data && data.timeslot != undefined) {
                    this.timeslot = data.timeslot;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get timeslot() {
            return pb_1.Message.getWrapperField(this, Timeslot, 4) as Timeslot;
        }
        set timeslot(value: Timeslot) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_timeslot() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            timeslot?: ReturnType<typeof Timeslot.prototype.toObject>;
            ops_message?: string;
        }): AdjustTimeslotDelayResponse {
            const message = new AdjustTimeslotDelayResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.timeslot != null) {
                message.timeslot = Timeslot.fromObject(data.timeslot);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                timeslot?: ReturnType<typeof Timeslot.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.timeslot != null) {
                data.timeslot = this.timeslot.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_timeslot)
                writer.writeMessage(4, this.timeslot, () => this.timeslot.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdjustTimeslotDelayResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdjustTimeslotDelayResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.timeslot, () => message.timeslot = Timeslot.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdjustTimeslotDelayResponse {
            return AdjustTimeslotDelayResponse.deserialize(bytes);
        }
    }
    export class AddActionToScene extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            action_item?: SceneAction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("action_item" in data && data.action_item != undefined) {
                    this.action_item = data.action_item;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get action_item() {
            return pb_1.Message.getWrapperField(this, SceneAction, 4) as SceneAction;
        }
        set action_item(value: SceneAction) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_action_item() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            action_item?: ReturnType<typeof SceneAction.prototype.toObject>;
        }): AddActionToScene {
            const message = new AddActionToScene({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.action_item != null) {
                message.action_item = SceneAction.fromObject(data.action_item);
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                action_item?: ReturnType<typeof SceneAction.prototype.toObject>;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.action_item != null) {
                data.action_item = this.action_item.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (this.has_action_item)
                writer.writeMessage(4, this.action_item, () => this.action_item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddActionToScene {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddActionToScene();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.action_item, () => message.action_item = SceneAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddActionToScene {
            return AddActionToScene.deserialize(bytes);
        }
    }
    export class AddActionToSceneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            action_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("action_id" in data && data.action_id != undefined) {
                    this.action_id = data.action_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get action_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set action_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            action_id?: string;
            ops_message?: string;
        }): AddActionToSceneResponse {
            const message = new AddActionToSceneResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.action_id != null) {
                message.action_id = data.action_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                action_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.action_id != null) {
                data.action_id = this.action_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.action_id.length)
                writer.writeString(4, this.action_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddActionToSceneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddActionToSceneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.action_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddActionToSceneResponse {
            return AddActionToSceneResponse.deserialize(bytes);
        }
    }
    export class RemoveActionFromScene extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            action_id?: string;
            force_delete?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("action_id" in data && data.action_id != undefined) {
                    this.action_id = data.action_id;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get action_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set action_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            action_id?: string;
            force_delete?: boolean;
        }): RemoveActionFromScene {
            const message = new RemoveActionFromScene({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.action_id != null) {
                message.action_id = data.action_id;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                action_id?: string;
                force_delete?: boolean;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.action_id != null) {
                data.action_id = this.action_id;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (this.action_id.length)
                writer.writeString(3, this.action_id);
            if (this.force_delete != false)
                writer.writeBool(4, this.force_delete);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveActionFromScene {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveActionFromScene();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    case 3:
                        message.action_id = reader.readString();
                        break;
                    case 4:
                        message.force_delete = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveActionFromScene {
            return RemoveActionFromScene.deserialize(bytes);
        }
    }
    export class RemoveActionFromSceneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RemoveActionFromSceneResponse {
            const message = new RemoveActionFromSceneResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveActionFromSceneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveActionFromSceneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveActionFromSceneResponse {
            return RemoveActionFromSceneResponse.deserialize(bytes);
        }
    }
    export class ExecuteScene extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
        }): ExecuteScene {
            const message = new ExecuteScene({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScene {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScene();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScene {
            return ExecuteScene.deserialize(bytes);
        }
    }
    export class ExecuteSceneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ExecuteSceneResponse {
            const message = new ExecuteSceneResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteSceneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteSceneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteSceneResponse {
            return ExecuteSceneResponse.deserialize(bytes);
        }
    }
    export class MoveSceneToRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            new_scene_room?: string;
            new_scene_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("new_scene_room" in data && data.new_scene_room != undefined) {
                    this.new_scene_room = data.new_scene_room;
                }
                if ("new_scene_section" in data && data.new_scene_section != undefined) {
                    this.new_scene_section = data.new_scene_section;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_scene_room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get new_scene_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set new_scene_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            new_scene_room?: string;
            new_scene_section?: string;
        }): MoveSceneToRoom {
            const message = new MoveSceneToRoom({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.new_scene_room != null) {
                message.new_scene_room = data.new_scene_room;
            }
            if (data.new_scene_section != null) {
                message.new_scene_section = data.new_scene_section;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                new_scene_room?: string;
                new_scene_section?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.new_scene_room != null) {
                data.new_scene_room = this.new_scene_room;
            }
            if (this.new_scene_section != null) {
                data.new_scene_section = this.new_scene_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (this.new_scene_room.length)
                writer.writeString(3, this.new_scene_room);
            if (this.new_scene_section.length)
                writer.writeString(4, this.new_scene_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveSceneToRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveSceneToRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    case 3:
                        message.new_scene_room = reader.readString();
                        break;
                    case 4:
                        message.new_scene_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveSceneToRoom {
            return MoveSceneToRoom.deserialize(bytes);
        }
    }
    export class MoveSceneToRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveSceneToRoomResponse {
            const message = new MoveSceneToRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveSceneToRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveSceneToRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveSceneToRoomResponse {
            return MoveSceneToRoomResponse.deserialize(bytes);
        }
    }
    export class DeleteScene extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            force_delete?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            force_delete?: boolean;
        }): DeleteScene {
            const message = new DeleteScene({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                force_delete?: boolean;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (this.force_delete != false)
                writer.writeBool(3, this.force_delete);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteScene {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteScene();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    case 3:
                        message.force_delete = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteScene {
            return DeleteScene.deserialize(bytes);
        }
    }
    export class DeleteSceneResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }): DeleteSceneResponse {
            const message = new DeleteSceneResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                request_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.request_id.length)
                writer.writeString(4, this.request_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSceneResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSceneResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.request_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSceneResponse {
            return DeleteSceneResponse.deserialize(bytes);
        }
    }
    export class SyncAreaSceneUIData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
            }
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            area_id?: number;
        }): SyncAreaSceneUIData {
            const message = new SyncAreaSceneUIData({});
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            return message;
        }
        toObject() {
            const data: {
                area_id?: number;
            } = {};
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_id != 0)
                writer.writeUint32(1, this.area_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncAreaSceneUIData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncAreaSceneUIData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.area_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SyncAreaSceneUIData {
            return SyncAreaSceneUIData.deserialize(bytes);
        }
    }
    export class SyncAreaSceneUIDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }): SyncAreaSceneUIDataResponse {
            const message = new SyncAreaSceneUIDataResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                request_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.request_id.length)
                writer.writeString(4, this.request_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncAreaSceneUIDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncAreaSceneUIDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.request_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SyncAreaSceneUIDataResponse {
            return SyncAreaSceneUIDataResponse.deserialize(bytes);
        }
    }
    export class ReportSceneExecutionActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_identifier?: SceneIdentifier;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_identifier" in data && data.scene_identifier != undefined) {
                    this.scene_identifier = data.scene_identifier;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get scene_identifier() {
            return pb_1.Message.getWrapperField(this, SceneIdentifier, 1) as SceneIdentifier;
        }
        set scene_identifier(value: SceneIdentifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_scene_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            scene_identifier?: ReturnType<typeof SceneIdentifier.prototype.toObject>;
            activity_time?: number;
        }): ReportSceneExecutionActivity {
            const message = new ReportSceneExecutionActivity({});
            if (data.scene_identifier != null) {
                message.scene_identifier = SceneIdentifier.fromObject(data.scene_identifier);
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_identifier?: ReturnType<typeof SceneIdentifier.prototype.toObject>;
                activity_time?: number;
            } = {};
            if (this.scene_identifier != null) {
                data.scene_identifier = this.scene_identifier.toObject();
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_scene_identifier)
                writer.writeMessage(1, this.scene_identifier, () => this.scene_identifier.serialize(writer));
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportSceneExecutionActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportSceneExecutionActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.scene_identifier, () => message.scene_identifier = SceneIdentifier.deserialize(reader));
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportSceneExecutionActivity {
            return ReportSceneExecutionActivity.deserialize(bytes);
        }
    }
    export class SceneExecutionEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            scene_room?: string;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("scene_room" in data && data.scene_room != undefined) {
                    this.scene_room = data.scene_room;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scene_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            scene_id?: number;
            scene_room?: string;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): SceneExecutionEvent {
            const message = new SceneExecutionEvent({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.scene_room != null) {
                message.scene_room = data.scene_room;
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                scene_room?: string;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.scene_room != null) {
                data.scene_room = this.scene_room;
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeUint32(1, this.scene_id);
            if (this.scene_room.length)
                writer.writeString(2, this.scene_room);
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneExecutionEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneExecutionEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readUint32();
                        break;
                    case 2:
                        message.scene_room = reader.readString();
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SceneExecutionEvent {
            return SceneExecutionEvent.deserialize(bytes);
        }
    }
    export class ControlSceneBrightness extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            scene_id?: number;
            step_value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("step_value" in data && data.step_value != undefined) {
                    this.step_value = data.step_value;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get step_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set step_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            room_id?: string;
            scene_id?: number;
            step_value?: number;
        }): ControlSceneBrightness {
            const message = new ControlSceneBrightness({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.step_value != null) {
                message.step_value = data.step_value;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                scene_id?: number;
                step_value?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.step_value != null) {
                data.step_value = this.step_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.scene_id != 0)
                writer.writeInt32(2, this.scene_id);
            if (this.step_value != 0)
                writer.writeInt32(3, this.step_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControlSceneBrightness {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControlSceneBrightness();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.scene_id = reader.readInt32();
                        break;
                    case 3:
                        message.step_value = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ControlSceneBrightness {
            return ControlSceneBrightness.deserialize(bytes);
        }
    }
    export class ControlSceneBrightnessResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ControlSceneBrightnessResponse {
            const message = new ControlSceneBrightnessResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControlSceneBrightnessResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControlSceneBrightnessResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ControlSceneBrightnessResponse {
            return ControlSceneBrightnessResponse.deserialize(bytes);
        }
    }
}
