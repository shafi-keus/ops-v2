/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/home/permissions.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum USER_ROLES {
        GUEST = 0,
        ADMIN = 1,
        SUPER_ADMIN = 2
    }
    export class AssignSuperUser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            otp?: number;
            target_phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("otp" in data && data.otp != undefined) {
                    this.otp = data.otp;
                }
                if ("target_phone" in data && data.target_phone != undefined) {
                    this.target_phone = data.target_phone;
                }
            }
        }
        get otp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set otp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get target_phone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set target_phone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            otp?: number;
            target_phone?: string;
        }): AssignSuperUser {
            const message = new AssignSuperUser({});
            if (data.otp != null) {
                message.otp = data.otp;
            }
            if (data.target_phone != null) {
                message.target_phone = data.target_phone;
            }
            return message;
        }
        toObject() {
            const data: {
                otp?: number;
                target_phone?: string;
            } = {};
            if (this.otp != null) {
                data.otp = this.otp;
            }
            if (this.target_phone != null) {
                data.target_phone = this.target_phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.otp != 0)
                writer.writeInt32(1, this.otp);
            if (this.target_phone.length)
                writer.writeString(2, this.target_phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignSuperUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignSuperUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.otp = reader.readInt32();
                        break;
                    case 2:
                        message.target_phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignSuperUser {
            return AssignSuperUser.deserialize(bytes);
        }
    }
    export class AssignSuperUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): AssignSuperUserResponse {
            const message = new AssignSuperUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignSuperUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignSuperUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignSuperUserResponse {
            return AssignSuperUserResponse.deserialize(bytes);
        }
    }
    export class GrantUserPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            target_phone?: string;
            access_level?: USER_ROLES;
            rooms_list?: string[];
            start_time?: number;
            end_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target_phone" in data && data.target_phone != undefined) {
                    this.target_phone = data.target_phone;
                }
                if ("access_level" in data && data.access_level != undefined) {
                    this.access_level = data.access_level;
                }
                if ("rooms_list" in data && data.rooms_list != undefined) {
                    this.rooms_list = data.rooms_list;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
        }
        get target_phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set target_phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_level() {
            return pb_1.Message.getFieldWithDefault(this, 2, USER_ROLES.GUEST) as USER_ROLES;
        }
        set access_level(value: USER_ROLES) {
            pb_1.Message.setField(this, 2, value);
        }
        get rooms_list() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set rooms_list(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            target_phone?: string;
            access_level?: USER_ROLES;
            rooms_list?: string[];
            start_time?: number;
            end_time?: number;
        }): GrantUserPermission {
            const message = new GrantUserPermission({});
            if (data.target_phone != null) {
                message.target_phone = data.target_phone;
            }
            if (data.access_level != null) {
                message.access_level = data.access_level;
            }
            if (data.rooms_list != null) {
                message.rooms_list = data.rooms_list;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            return message;
        }
        toObject() {
            const data: {
                target_phone?: string;
                access_level?: USER_ROLES;
                rooms_list?: string[];
                start_time?: number;
                end_time?: number;
            } = {};
            if (this.target_phone != null) {
                data.target_phone = this.target_phone;
            }
            if (this.access_level != null) {
                data.access_level = this.access_level;
            }
            if (this.rooms_list != null) {
                data.rooms_list = this.rooms_list;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target_phone.length)
                writer.writeString(1, this.target_phone);
            if (this.access_level != USER_ROLES.GUEST)
                writer.writeEnum(2, this.access_level);
            if (this.rooms_list.length)
                writer.writeRepeatedString(3, this.rooms_list);
            if (this.start_time != 0)
                writer.writeUint64(4, this.start_time);
            if (this.end_time != 0)
                writer.writeUint64(5, this.end_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GrantUserPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GrantUserPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target_phone = reader.readString();
                        break;
                    case 2:
                        message.access_level = reader.readEnum();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.start_time = reader.readUint64();
                        break;
                    case 5:
                        message.end_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GrantUserPermission {
            return GrantUserPermission.deserialize(bytes);
        }
    }
    export class GrantUserPermissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: UserData;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user_data" in data && data.user_data != undefined) {
                    this.user_data = data.user_data;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_data() {
            return pb_1.Message.getWrapperField(this, UserData, 4) as UserData;
        }
        set user_data(value: UserData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_user_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: ReturnType<typeof UserData.prototype.toObject>;
            ops_message?: string;
        }): GrantUserPermissionResponse {
            const message = new GrantUserPermissionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user_data != null) {
                message.user_data = UserData.fromObject(data.user_data);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                user_data?: ReturnType<typeof UserData.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user_data != null) {
                data.user_data = this.user_data.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_user_data)
                writer.writeMessage(4, this.user_data, () => this.user_data.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GrantUserPermissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GrantUserPermissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.user_data, () => message.user_data = UserData.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GrantUserPermissionResponse {
            return GrantUserPermissionResponse.deserialize(bytes);
        }
    }
    export class RemoveUserPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            target_phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target_phone" in data && data.target_phone != undefined) {
                    this.target_phone = data.target_phone;
                }
            }
        }
        get target_phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set target_phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            target_phone?: string;
        }): RemoveUserPermission {
            const message = new RemoveUserPermission({});
            if (data.target_phone != null) {
                message.target_phone = data.target_phone;
            }
            return message;
        }
        toObject() {
            const data: {
                target_phone?: string;
            } = {};
            if (this.target_phone != null) {
                data.target_phone = this.target_phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target_phone.length)
                writer.writeString(1, this.target_phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveUserPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveUserPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target_phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveUserPermission {
            return RemoveUserPermission.deserialize(bytes);
        }
    }
    export class RemoveUserPermissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RemoveUserPermissionResponse {
            const message = new RemoveUserPermissionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveUserPermissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveUserPermissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveUserPermissionResponse {
            return RemoveUserPermissionResponse.deserialize(bytes);
        }
    }
    export class GetUserPermissionList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetUserPermissionList {
            const message = new GetUserPermissionList({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserPermissionList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserPermissionList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserPermissionList {
            return GetUserPermissionList.deserialize(bytes);
        }
    }
    export class UserData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            user_name?: string;
            gender?: string;
            date_of_birth?: number;
            location?: string;
            phone?: string;
            access_level?: USER_ROLES;
            rooms_list?: string[];
            start_time?: number;
            end_time?: number;
            imageUrl?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("date_of_birth" in data && data.date_of_birth != undefined) {
                    this.date_of_birth = data.date_of_birth;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("access_level" in data && data.access_level != undefined) {
                    this.access_level = data.access_level;
                }
                if ("rooms_list" in data && data.rooms_list != undefined) {
                    this.rooms_list = data.rooms_list;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("imageUrl" in data && data.imageUrl != undefined) {
                    this.imageUrl = data.imageUrl;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get date_of_birth() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set date_of_birth(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get access_level() {
            return pb_1.Message.getFieldWithDefault(this, 7, USER_ROLES.GUEST) as USER_ROLES;
        }
        set access_level(value: USER_ROLES) {
            pb_1.Message.setField(this, 7, value);
        }
        get rooms_list() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set rooms_list(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get imageUrl() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set imageUrl(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            email?: string;
            user_name?: string;
            gender?: string;
            date_of_birth?: number;
            location?: string;
            phone?: string;
            access_level?: USER_ROLES;
            rooms_list?: string[];
            start_time?: number;
            end_time?: number;
            imageUrl?: string;
        }): UserData {
            const message = new UserData({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.date_of_birth != null) {
                message.date_of_birth = data.date_of_birth;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.access_level != null) {
                message.access_level = data.access_level;
            }
            if (data.rooms_list != null) {
                message.rooms_list = data.rooms_list;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.imageUrl != null) {
                message.imageUrl = data.imageUrl;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                user_name?: string;
                gender?: string;
                date_of_birth?: number;
                location?: string;
                phone?: string;
                access_level?: USER_ROLES;
                rooms_list?: string[];
                start_time?: number;
                end_time?: number;
                imageUrl?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.date_of_birth != null) {
                data.date_of_birth = this.date_of_birth;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.access_level != null) {
                data.access_level = this.access_level;
            }
            if (this.rooms_list != null) {
                data.rooms_list = this.rooms_list;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.imageUrl != null) {
                data.imageUrl = this.imageUrl;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.user_name.length)
                writer.writeString(2, this.user_name);
            if (this.gender.length)
                writer.writeString(3, this.gender);
            if (this.date_of_birth != 0)
                writer.writeInt64(4, this.date_of_birth);
            if (this.location.length)
                writer.writeString(5, this.location);
            if (this.phone.length)
                writer.writeString(6, this.phone);
            if (this.access_level != USER_ROLES.GUEST)
                writer.writeEnum(7, this.access_level);
            if (this.rooms_list.length)
                writer.writeRepeatedString(8, this.rooms_list);
            if (this.start_time != 0)
                writer.writeUint64(9, this.start_time);
            if (this.end_time != 0)
                writer.writeUint64(10, this.end_time);
            if (this.imageUrl.length)
                writer.writeString(11, this.imageUrl);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.user_name = reader.readString();
                        break;
                    case 3:
                        message.gender = reader.readString();
                        break;
                    case 4:
                        message.date_of_birth = reader.readInt64();
                        break;
                    case 5:
                        message.location = reader.readString();
                        break;
                    case 6:
                        message.phone = reader.readString();
                        break;
                    case 7:
                        message.access_level = reader.readEnum();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.start_time = reader.readUint64();
                        break;
                    case 10:
                        message.end_time = reader.readUint64();
                        break;
                    case 11:
                        message.imageUrl = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserData {
            return UserData.deserialize(bytes);
        }
    }
    export class GetUserPermissionListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            user_permissions?: UserData[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user_permissions" in data && data.user_permissions != undefined) {
                    this.user_permissions = data.user_permissions;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, UserData, 4) as UserData[];
        }
        set user_permissions(value: UserData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            user_permissions?: ReturnType<typeof UserData.prototype.toObject>[];
            ops_message?: string;
        }): GetUserPermissionListResponse {
            const message = new GetUserPermissionListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user_permissions != null) {
                message.user_permissions = data.user_permissions.map(item => UserData.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                user_permissions?: ReturnType<typeof UserData.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user_permissions != null) {
                data.user_permissions = this.user_permissions.map((item: UserData) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.user_permissions.length)
                writer.writeRepeatedMessage(4, this.user_permissions, (item: UserData) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserPermissionListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserPermissionListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.user_permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, UserData.deserialize(reader), UserData));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserPermissionListResponse {
            return GetUserPermissionListResponse.deserialize(bytes);
        }
    }
}
