/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/home/home_structures.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../devices/device";
import * as dependency_2 from "./../groups/group_structures";
import * as dependency_3 from "./../scenes/scene_structures";
import * as dependency_4 from "./../devices/zigbee_ir_blaster";
import * as dependency_5 from "./../schedules/schedule_structure";
import * as dependency_6 from "./../gatewaysetup/mini-gateway_setup";
import * as dependency_7 from "./../favorites/favorites";
import * as dependency_8 from "./../gateway-models/devices/gmdevice";
import * as dependency_9 from "./../gateway-models/appliances/appliance";
import * as dependency_10 from "./../gateway-models/groups/gmgroups";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum AREA_SYNC_STATES {
        AREAINSYNC = 0,
        AREASYNCPENDING = 1,
        AREASYNCFAILED = 2
    }
    export enum AREA_JOB_TYPES {
        AREA_NONE = 0,
        AREA_SYNCSCENEUI = 1
    }
    export enum BRIGHTNESS_UPDATE_TYPE {
        AREA_UPDATE = 0,
        SCENE_UPDATE = 1
    }
    export enum ZIGBEE_EXECUTION_TYPES {
        ZIGBEE_GROUP_EXEC = 0,
        ZIGBEE_SCENE_EXEC = 1
    }
    export class Area extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_id?: number;
            area_name?: string;
            area_sync_info?: AreaSyncInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("area_name" in data && data.area_name != undefined) {
                    this.area_name = data.area_name;
                }
                if ("area_sync_info" in data && data.area_sync_info != undefined) {
                    this.area_sync_info = data.area_sync_info;
                }
            }
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set area_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get area_sync_info() {
            return pb_1.Message.getWrapperField(this, AreaSyncInfo, 3) as AreaSyncInfo;
        }
        set area_sync_info(value: AreaSyncInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_area_sync_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            area_id?: number;
            area_name?: string;
            area_sync_info?: ReturnType<typeof AreaSyncInfo.prototype.toObject>;
        }): Area {
            const message = new Area({});
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.area_name != null) {
                message.area_name = data.area_name;
            }
            if (data.area_sync_info != null) {
                message.area_sync_info = AreaSyncInfo.fromObject(data.area_sync_info);
            }
            return message;
        }
        toObject() {
            const data: {
                area_id?: number;
                area_name?: string;
                area_sync_info?: ReturnType<typeof AreaSyncInfo.prototype.toObject>;
            } = {};
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.area_name != null) {
                data.area_name = this.area_name;
            }
            if (this.area_sync_info != null) {
                data.area_sync_info = this.area_sync_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_id != 0)
                writer.writeInt32(1, this.area_id);
            if (this.area_name.length)
                writer.writeString(2, this.area_name);
            if (this.has_area_sync_info)
                writer.writeMessage(3, this.area_sync_info, () => this.area_sync_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Area {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Area();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.area_id = reader.readInt32();
                        break;
                    case 2:
                        message.area_name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.area_sync_info, () => message.area_sync_info = AreaSyncInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Area {
            return Area.deserialize(bytes);
        }
    }
    export class AreaSyncInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11]];
        constructor(data?: any[] | ({
            sync_status?: AREA_SYNC_STATES;
            sync_request_type?: AREA_JOB_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
        } & (({
            null_request_params?: dependency_3.com.keus.hub.NullRequest;
            sync_area_scene_uidata_params?: never;
        } | {
            null_request_params?: never;
            sync_area_scene_uidata_params?: dependency_3.com.keus.hub.SyncAreaSceneUIData;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sync_status" in data && data.sync_status != undefined) {
                    this.sync_status = data.sync_status;
                }
                if ("sync_request_type" in data && data.sync_request_type != undefined) {
                    this.sync_request_type = data.sync_request_type;
                }
                if ("sync_request_id" in data && data.sync_request_id != undefined) {
                    this.sync_request_id = data.sync_request_id;
                }
                if ("sync_request_time" in data && data.sync_request_time != undefined) {
                    this.sync_request_time = data.sync_request_time;
                }
                if ("null_request_params" in data && data.null_request_params != undefined) {
                    this.null_request_params = data.null_request_params;
                }
                if ("sync_area_scene_uidata_params" in data && data.sync_area_scene_uidata_params != undefined) {
                    this.sync_area_scene_uidata_params = data.sync_area_scene_uidata_params;
                }
            }
        }
        get sync_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, AREA_SYNC_STATES.AREAINSYNC) as AREA_SYNC_STATES;
        }
        set sync_status(value: AREA_SYNC_STATES) {
            pb_1.Message.setField(this, 1, value);
        }
        get sync_request_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, AREA_JOB_TYPES.AREA_NONE) as AREA_JOB_TYPES;
        }
        set sync_request_type(value: AREA_JOB_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get sync_request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sync_request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sync_request_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sync_request_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get null_request_params() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.NullRequest, 10) as dependency_3.com.keus.hub.NullRequest;
        }
        set null_request_params(value: dependency_3.com.keus.hub.NullRequest) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_null_request_params() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get sync_area_scene_uidata_params() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.SyncAreaSceneUIData, 11) as dependency_3.com.keus.hub.SyncAreaSceneUIData;
        }
        set sync_area_scene_uidata_params(value: dependency_3.com.keus.hub.SyncAreaSceneUIData) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_sync_area_scene_uidata_params() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get sync_request_params() {
            const cases: {
                [index: number]: "none" | "null_request_params" | "sync_area_scene_uidata_params";
            } = {
                0: "none",
                10: "null_request_params",
                11: "sync_area_scene_uidata_params"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11])];
        }
        static fromObject(data: {
            sync_status?: AREA_SYNC_STATES;
            sync_request_type?: AREA_JOB_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            null_request_params?: ReturnType<typeof dependency_3.com.keus.hub.NullRequest.prototype.toObject>;
            sync_area_scene_uidata_params?: ReturnType<typeof dependency_3.com.keus.hub.SyncAreaSceneUIData.prototype.toObject>;
        }): AreaSyncInfo {
            const message = new AreaSyncInfo({});
            if (data.sync_status != null) {
                message.sync_status = data.sync_status;
            }
            if (data.sync_request_type != null) {
                message.sync_request_type = data.sync_request_type;
            }
            if (data.sync_request_id != null) {
                message.sync_request_id = data.sync_request_id;
            }
            if (data.sync_request_time != null) {
                message.sync_request_time = data.sync_request_time;
            }
            if (data.null_request_params != null) {
                message.null_request_params = dependency_3.com.keus.hub.NullRequest.fromObject(data.null_request_params);
            }
            if (data.sync_area_scene_uidata_params != null) {
                message.sync_area_scene_uidata_params = dependency_3.com.keus.hub.SyncAreaSceneUIData.fromObject(data.sync_area_scene_uidata_params);
            }
            return message;
        }
        toObject() {
            const data: {
                sync_status?: AREA_SYNC_STATES;
                sync_request_type?: AREA_JOB_TYPES;
                sync_request_id?: string;
                sync_request_time?: number;
                null_request_params?: ReturnType<typeof dependency_3.com.keus.hub.NullRequest.prototype.toObject>;
                sync_area_scene_uidata_params?: ReturnType<typeof dependency_3.com.keus.hub.SyncAreaSceneUIData.prototype.toObject>;
            } = {};
            if (this.sync_status != null) {
                data.sync_status = this.sync_status;
            }
            if (this.sync_request_type != null) {
                data.sync_request_type = this.sync_request_type;
            }
            if (this.sync_request_id != null) {
                data.sync_request_id = this.sync_request_id;
            }
            if (this.sync_request_time != null) {
                data.sync_request_time = this.sync_request_time;
            }
            if (this.null_request_params != null) {
                data.null_request_params = this.null_request_params.toObject();
            }
            if (this.sync_area_scene_uidata_params != null) {
                data.sync_area_scene_uidata_params = this.sync_area_scene_uidata_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sync_status != AREA_SYNC_STATES.AREAINSYNC)
                writer.writeEnum(1, this.sync_status);
            if (this.sync_request_type != AREA_JOB_TYPES.AREA_NONE)
                writer.writeEnum(2, this.sync_request_type);
            if (this.sync_request_id.length)
                writer.writeString(3, this.sync_request_id);
            if (this.sync_request_time != 0)
                writer.writeInt64(4, this.sync_request_time);
            if (this.has_null_request_params)
                writer.writeMessage(10, this.null_request_params, () => this.null_request_params.serialize(writer));
            if (this.has_sync_area_scene_uidata_params)
                writer.writeMessage(11, this.sync_area_scene_uidata_params, () => this.sync_area_scene_uidata_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AreaSyncInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AreaSyncInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sync_status = reader.readEnum();
                        break;
                    case 2:
                        message.sync_request_type = reader.readEnum();
                        break;
                    case 3:
                        message.sync_request_id = reader.readString();
                        break;
                    case 4:
                        message.sync_request_time = reader.readInt64();
                        break;
                    case 10:
                        reader.readMessage(message.null_request_params, () => message.null_request_params = dependency_3.com.keus.hub.NullRequest.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.sync_area_scene_uidata_params, () => message.sync_area_scene_uidata_params = dependency_3.com.keus.hub.SyncAreaSceneUIData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AreaSyncInfo {
            return AreaSyncInfo.deserialize(bytes);
        }
    }
    export class Floor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            floor_id?: string;
            floor_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("floor_id" in data && data.floor_id != undefined) {
                    this.floor_id = data.floor_id;
                }
                if ("floor_name" in data && data.floor_name != undefined) {
                    this.floor_name = data.floor_name;
                }
            }
        }
        get floor_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set floor_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get floor_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set floor_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            floor_id?: string;
            floor_name?: string;
        }): Floor {
            const message = new Floor({});
            if (data.floor_id != null) {
                message.floor_id = data.floor_id;
            }
            if (data.floor_name != null) {
                message.floor_name = data.floor_name;
            }
            return message;
        }
        toObject() {
            const data: {
                floor_id?: string;
                floor_name?: string;
            } = {};
            if (this.floor_id != null) {
                data.floor_id = this.floor_id;
            }
            if (this.floor_name != null) {
                data.floor_name = this.floor_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.floor_id.length)
                writer.writeString(1, this.floor_id);
            if (this.floor_name.length)
                writer.writeString(2, this.floor_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Floor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Floor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.floor_id = reader.readString();
                        break;
                    case 2:
                        message.floor_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Floor {
            return Floor.deserialize(bytes);
        }
    }
    export class Section extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            section_id?: string;
            section_name?: string;
            zigbee_section_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("section_id" in data && data.section_id != undefined) {
                    this.section_id = data.section_id;
                }
                if ("section_name" in data && data.section_name != undefined) {
                    this.section_name = data.section_name;
                }
                if ("zigbee_section_id" in data && data.zigbee_section_id != undefined) {
                    this.zigbee_section_id = data.zigbee_section_id;
                }
            }
        }
        get section_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set section_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get section_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set section_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get zigbee_section_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set zigbee_section_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            section_id?: string;
            section_name?: string;
            zigbee_section_id?: number;
        }): Section {
            const message = new Section({});
            if (data.section_id != null) {
                message.section_id = data.section_id;
            }
            if (data.section_name != null) {
                message.section_name = data.section_name;
            }
            if (data.zigbee_section_id != null) {
                message.zigbee_section_id = data.zigbee_section_id;
            }
            return message;
        }
        toObject() {
            const data: {
                section_id?: string;
                section_name?: string;
                zigbee_section_id?: number;
            } = {};
            if (this.section_id != null) {
                data.section_id = this.section_id;
            }
            if (this.section_name != null) {
                data.section_name = this.section_name;
            }
            if (this.zigbee_section_id != null) {
                data.zigbee_section_id = this.zigbee_section_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.section_id.length)
                writer.writeString(1, this.section_id);
            if (this.section_name.length)
                writer.writeString(2, this.section_name);
            if (this.zigbee_section_id != 0)
                writer.writeInt32(3, this.zigbee_section_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Section {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Section();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.section_id = reader.readString();
                        break;
                    case 2:
                        message.section_name = reader.readString();
                        break;
                    case 3:
                        message.zigbee_section_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Section {
            return Section.deserialize(bytes);
        }
    }
    export class Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            floor_id?: string;
            room_name?: string;
            room_type?: string;
            room_image_type?: number;
            area_id?: number;
            room_color?: number;
            room_rank?: number;
            sections?: Section[];
            gateway_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("floor_id" in data && data.floor_id != undefined) {
                    this.floor_id = data.floor_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
                if ("room_type" in data && data.room_type != undefined) {
                    this.room_type = data.room_type;
                }
                if ("room_image_type" in data && data.room_image_type != undefined) {
                    this.room_image_type = data.room_image_type;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("room_color" in data && data.room_color != undefined) {
                    this.room_color = data.room_color;
                }
                if ("room_rank" in data && data.room_rank != undefined) {
                    this.room_rank = data.room_rank;
                }
                if ("sections" in data && data.sections != undefined) {
                    this.sections = data.sections;
                }
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get floor_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set floor_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set room_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get room_image_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set room_image_type(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get room_color() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set room_color(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get room_rank() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set room_rank(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get sections() {
            return pb_1.Message.getRepeatedWrapperField(this, Section, 7) as Section[];
        }
        set sections(value: Section[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            room_id?: string;
            floor_id?: string;
            room_name?: string;
            room_type?: string;
            room_image_type?: number;
            area_id?: number;
            room_color?: number;
            room_rank?: number;
            sections?: ReturnType<typeof Section.prototype.toObject>[];
            gateway_id?: string;
        }): Room {
            const message = new Room({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.floor_id != null) {
                message.floor_id = data.floor_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            if (data.room_type != null) {
                message.room_type = data.room_type;
            }
            if (data.room_image_type != null) {
                message.room_image_type = data.room_image_type;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.room_color != null) {
                message.room_color = data.room_color;
            }
            if (data.room_rank != null) {
                message.room_rank = data.room_rank;
            }
            if (data.sections != null) {
                message.sections = data.sections.map(item => Section.fromObject(item));
            }
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                floor_id?: string;
                room_name?: string;
                room_type?: string;
                room_image_type?: number;
                area_id?: number;
                room_color?: number;
                room_rank?: number;
                sections?: ReturnType<typeof Section.prototype.toObject>[];
                gateway_id?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.floor_id != null) {
                data.floor_id = this.floor_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            if (this.room_type != null) {
                data.room_type = this.room_type;
            }
            if (this.room_image_type != null) {
                data.room_image_type = this.room_image_type;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.room_color != null) {
                data.room_color = this.room_color;
            }
            if (this.room_rank != null) {
                data.room_rank = this.room_rank;
            }
            if (this.sections != null) {
                data.sections = this.sections.map((item: Section) => item.toObject());
            }
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.floor_id.length)
                writer.writeString(2, this.floor_id);
            if (this.room_name.length)
                writer.writeString(3, this.room_name);
            if (this.room_type.length)
                writer.writeString(4, this.room_type);
            if (this.room_image_type != 0)
                writer.writeInt32(5, this.room_image_type);
            if (this.area_id != 0)
                writer.writeInt32(6, this.area_id);
            if (this.room_color != 0)
                writer.writeInt32(8, this.room_color);
            if (this.room_rank != 0)
                writer.writeInt32(9, this.room_rank);
            if (this.sections.length)
                writer.writeRepeatedMessage(7, this.sections, (item: Section) => item.serialize(writer));
            if (this.gateway_id.length)
                writer.writeString(10, this.gateway_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.floor_id = reader.readString();
                        break;
                    case 3:
                        message.room_name = reader.readString();
                        break;
                    case 4:
                        message.room_type = reader.readString();
                        break;
                    case 5:
                        message.room_image_type = reader.readInt32();
                        break;
                    case 6:
                        message.area_id = reader.readInt32();
                        break;
                    case 8:
                        message.room_color = reader.readInt32();
                        break;
                    case 9:
                        message.room_rank = reader.readInt32();
                        break;
                    case 7:
                        reader.readMessage(message.sections, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Section.deserialize(reader), Section));
                        break;
                    case 10:
                        message.gateway_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Room {
            return Room.deserialize(bytes);
        }
    }
    export class GetHomeStructure extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetHomeStructure {
            const message = new GetHomeStructure({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHomeStructure {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHomeStructure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHomeStructure {
            return GetHomeStructure.deserialize(bytes);
        }
    }
    export class GetHomeStructureResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            floors?: Floor[];
            rooms?: Room[];
            areas?: Area[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("floors" in data && data.floors != undefined) {
                    this.floors = data.floors;
                }
                if ("rooms" in data && data.rooms != undefined) {
                    this.rooms = data.rooms;
                }
                if ("areas" in data && data.areas != undefined) {
                    this.areas = data.areas;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get floors() {
            return pb_1.Message.getRepeatedWrapperField(this, Floor, 4) as Floor[];
        }
        set floors(value: Floor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get rooms() {
            return pb_1.Message.getRepeatedWrapperField(this, Room, 5) as Room[];
        }
        set rooms(value: Room[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get areas() {
            return pb_1.Message.getRepeatedWrapperField(this, Area, 6) as Area[];
        }
        set areas(value: Area[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            floors?: ReturnType<typeof Floor.prototype.toObject>[];
            rooms?: ReturnType<typeof Room.prototype.toObject>[];
            areas?: ReturnType<typeof Area.prototype.toObject>[];
            ops_message?: string;
        }): GetHomeStructureResponse {
            const message = new GetHomeStructureResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.floors != null) {
                message.floors = data.floors.map(item => Floor.fromObject(item));
            }
            if (data.rooms != null) {
                message.rooms = data.rooms.map(item => Room.fromObject(item));
            }
            if (data.areas != null) {
                message.areas = data.areas.map(item => Area.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                floors?: ReturnType<typeof Floor.prototype.toObject>[];
                rooms?: ReturnType<typeof Room.prototype.toObject>[];
                areas?: ReturnType<typeof Area.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.floors != null) {
                data.floors = this.floors.map((item: Floor) => item.toObject());
            }
            if (this.rooms != null) {
                data.rooms = this.rooms.map((item: Room) => item.toObject());
            }
            if (this.areas != null) {
                data.areas = this.areas.map((item: Area) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.floors.length)
                writer.writeRepeatedMessage(4, this.floors, (item: Floor) => item.serialize(writer));
            if (this.rooms.length)
                writer.writeRepeatedMessage(5, this.rooms, (item: Room) => item.serialize(writer));
            if (this.areas.length)
                writer.writeRepeatedMessage(6, this.areas, (item: Area) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(7, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHomeStructureResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHomeStructureResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.floors, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Floor.deserialize(reader), Floor));
                        break;
                    case 5:
                        reader.readMessage(message.rooms, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Room.deserialize(reader), Room));
                        break;
                    case 6:
                        reader.readMessage(message.areas, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Area.deserialize(reader), Area));
                        break;
                    case 7:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHomeStructureResponse {
            return GetHomeStructureResponse.deserialize(bytes);
        }
    }
    export class CreateFloor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            floor_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("floor_name" in data && data.floor_name != undefined) {
                    this.floor_name = data.floor_name;
                }
            }
        }
        get floor_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set floor_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            floor_name?: string;
        }): CreateFloor {
            const message = new CreateFloor({});
            if (data.floor_name != null) {
                message.floor_name = data.floor_name;
            }
            return message;
        }
        toObject() {
            const data: {
                floor_name?: string;
            } = {};
            if (this.floor_name != null) {
                data.floor_name = this.floor_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.floor_name.length)
                writer.writeString(1, this.floor_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFloor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFloor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.floor_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateFloor {
            return CreateFloor.deserialize(bytes);
        }
    }
    export class CreateFloorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            floor?: Floor;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("floor" in data && data.floor != undefined) {
                    this.floor = data.floor;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get floor() {
            return pb_1.Message.getWrapperField(this, Floor, 4) as Floor;
        }
        set floor(value: Floor) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_floor() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            floor?: ReturnType<typeof Floor.prototype.toObject>;
            ops_message?: string;
        }): CreateFloorResponse {
            const message = new CreateFloorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.floor != null) {
                message.floor = Floor.fromObject(data.floor);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                floor?: ReturnType<typeof Floor.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.floor != null) {
                data.floor = this.floor.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_floor)
                writer.writeMessage(4, this.floor, () => this.floor.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFloorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFloorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.floor, () => message.floor = Floor.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateFloorResponse {
            return CreateFloorResponse.deserialize(bytes);
        }
    }
    export class DeleteFloor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            floor_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("floor_id" in data && data.floor_id != undefined) {
                    this.floor_id = data.floor_id;
                }
            }
        }
        get floor_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set floor_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            floor_id?: string;
        }): DeleteFloor {
            const message = new DeleteFloor({});
            if (data.floor_id != null) {
                message.floor_id = data.floor_id;
            }
            return message;
        }
        toObject() {
            const data: {
                floor_id?: string;
            } = {};
            if (this.floor_id != null) {
                data.floor_id = this.floor_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.floor_id.length)
                writer.writeString(1, this.floor_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFloor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFloor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.floor_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteFloor {
            return DeleteFloor.deserialize(bytes);
        }
    }
    export class DeleteFloorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            rooms?: Room[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("rooms" in data && data.rooms != undefined) {
                    this.rooms = data.rooms;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rooms() {
            return pb_1.Message.getRepeatedWrapperField(this, Room, 4) as Room[];
        }
        set rooms(value: Room[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            rooms?: ReturnType<typeof Room.prototype.toObject>[];
            ops_message?: string;
        }): DeleteFloorResponse {
            const message = new DeleteFloorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.rooms != null) {
                message.rooms = data.rooms.map(item => Room.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                rooms?: ReturnType<typeof Room.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.rooms != null) {
                data.rooms = this.rooms.map((item: Room) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.rooms.length)
                writer.writeRepeatedMessage(4, this.rooms, (item: Room) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteFloorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteFloorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.rooms, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Room.deserialize(reader), Room));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteFloorResponse {
            return DeleteFloorResponse.deserialize(bytes);
        }
    }
    export class EditFloor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            floor_id?: string;
            floor_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("floor_id" in data && data.floor_id != undefined) {
                    this.floor_id = data.floor_id;
                }
                if ("floor_name" in data && data.floor_name != undefined) {
                    this.floor_name = data.floor_name;
                }
            }
        }
        get floor_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set floor_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get floor_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set floor_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            floor_id?: string;
            floor_name?: string;
        }): EditFloor {
            const message = new EditFloor({});
            if (data.floor_id != null) {
                message.floor_id = data.floor_id;
            }
            if (data.floor_name != null) {
                message.floor_name = data.floor_name;
            }
            return message;
        }
        toObject() {
            const data: {
                floor_id?: string;
                floor_name?: string;
            } = {};
            if (this.floor_id != null) {
                data.floor_id = this.floor_id;
            }
            if (this.floor_name != null) {
                data.floor_name = this.floor_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.floor_id.length)
                writer.writeString(1, this.floor_id);
            if (this.floor_name.length)
                writer.writeString(2, this.floor_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditFloor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditFloor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.floor_id = reader.readString();
                        break;
                    case 2:
                        message.floor_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditFloor {
            return EditFloor.deserialize(bytes);
        }
    }
    export class EditFloorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            floor?: Floor;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("floor" in data && data.floor != undefined) {
                    this.floor = data.floor;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get floor() {
            return pb_1.Message.getWrapperField(this, Floor, 4) as Floor;
        }
        set floor(value: Floor) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_floor() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            floor?: ReturnType<typeof Floor.prototype.toObject>;
            ops_message?: string;
        }): EditFloorResponse {
            const message = new EditFloorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.floor != null) {
                message.floor = Floor.fromObject(data.floor);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                floor?: ReturnType<typeof Floor.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.floor != null) {
                data.floor = this.floor.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_floor)
                writer.writeMessage(4, this.floor, () => this.floor.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditFloorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditFloorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.floor, () => message.floor = Floor.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditFloorResponse {
            return EditFloorResponse.deserialize(bytes);
        }
    }
    export class GetFloors extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetFloors {
            const message = new GetFloors({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetFloors {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetFloors();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetFloors {
            return GetFloors.deserialize(bytes);
        }
    }
    export class GetFloorsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            floors?: Floor[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("floors" in data && data.floors != undefined) {
                    this.floors = data.floors;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get floors() {
            return pb_1.Message.getRepeatedWrapperField(this, Floor, 4) as Floor[];
        }
        set floors(value: Floor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            floors?: ReturnType<typeof Floor.prototype.toObject>[];
            ops_message?: string;
        }): GetFloorsResponse {
            const message = new GetFloorsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.floors != null) {
                message.floors = data.floors.map(item => Floor.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                floors?: ReturnType<typeof Floor.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.floors != null) {
                data.floors = this.floors.map((item: Floor) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.floors.length)
                writer.writeRepeatedMessage(4, this.floors, (item: Floor) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetFloorsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetFloorsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.floors, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Floor.deserialize(reader), Floor));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetFloorsResponse {
            return GetFloorsResponse.deserialize(bytes);
        }
    }
    export class CreateArea extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_name" in data && data.area_name != undefined) {
                    this.area_name = data.area_name;
                }
            }
        }
        get area_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set area_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            area_name?: string;
        }): CreateArea {
            const message = new CreateArea({});
            if (data.area_name != null) {
                message.area_name = data.area_name;
            }
            return message;
        }
        toObject() {
            const data: {
                area_name?: string;
            } = {};
            if (this.area_name != null) {
                data.area_name = this.area_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_name.length)
                writer.writeString(1, this.area_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateArea {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateArea();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.area_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateArea {
            return CreateArea.deserialize(bytes);
        }
    }
    export class CreateAreaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            area?: Area;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("area" in data && data.area != undefined) {
                    this.area = data.area;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get area() {
            return pb_1.Message.getWrapperField(this, Area, 4) as Area;
        }
        set area(value: Area) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_area() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            area?: ReturnType<typeof Area.prototype.toObject>;
            ops_message?: string;
        }): CreateAreaResponse {
            const message = new CreateAreaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.area != null) {
                message.area = Area.fromObject(data.area);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                area?: ReturnType<typeof Area.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.area != null) {
                data.area = this.area.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_area)
                writer.writeMessage(4, this.area, () => this.area.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAreaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAreaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.area, () => message.area = Area.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAreaResponse {
            return CreateAreaResponse.deserialize(bytes);
        }
    }
    export class DeleteArea extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
            }
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            area_id?: number;
        }): DeleteArea {
            const message = new DeleteArea({});
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            return message;
        }
        toObject() {
            const data: {
                area_id?: number;
            } = {};
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_id != 0)
                writer.writeInt32(1, this.area_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteArea {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteArea();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.area_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteArea {
            return DeleteArea.deserialize(bytes);
        }
    }
    export class DeleteAreaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            area_id?: number;
            rooms?: Room[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("rooms" in data && data.rooms != undefined) {
                    this.rooms = data.rooms;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get rooms() {
            return pb_1.Message.getRepeatedWrapperField(this, Room, 5) as Room[];
        }
        set rooms(value: Room[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            area_id?: number;
            rooms?: ReturnType<typeof Room.prototype.toObject>[];
            ops_message?: string;
        }): DeleteAreaResponse {
            const message = new DeleteAreaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.rooms != null) {
                message.rooms = data.rooms.map(item => Room.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                area_id?: number;
                rooms?: ReturnType<typeof Room.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.rooms != null) {
                data.rooms = this.rooms.map((item: Room) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.area_id != 0)
                writer.writeInt32(4, this.area_id);
            if (this.rooms.length)
                writer.writeRepeatedMessage(5, this.rooms, (item: Room) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(6, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAreaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAreaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.area_id = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.rooms, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Room.deserialize(reader), Room));
                        break;
                    case 6:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAreaResponse {
            return DeleteAreaResponse.deserialize(bytes);
        }
    }
    export class EditArea extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_id?: number;
            area_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("area_name" in data && data.area_name != undefined) {
                    this.area_name = data.area_name;
                }
            }
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set area_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            area_id?: number;
            area_name?: string;
        }): EditArea {
            const message = new EditArea({});
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.area_name != null) {
                message.area_name = data.area_name;
            }
            return message;
        }
        toObject() {
            const data: {
                area_id?: number;
                area_name?: string;
            } = {};
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.area_name != null) {
                data.area_name = this.area_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_id != 0)
                writer.writeInt32(1, this.area_id);
            if (this.area_name.length)
                writer.writeString(2, this.area_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditArea {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditArea();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.area_id = reader.readInt32();
                        break;
                    case 2:
                        message.area_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditArea {
            return EditArea.deserialize(bytes);
        }
    }
    export class EditAreaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            area?: Area;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("area" in data && data.area != undefined) {
                    this.area = data.area;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get area() {
            return pb_1.Message.getWrapperField(this, Area, 4) as Area;
        }
        set area(value: Area) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_area() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            area?: ReturnType<typeof Area.prototype.toObject>;
            ops_message?: string;
        }): EditAreaResponse {
            const message = new EditAreaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.area != null) {
                message.area = Area.fromObject(data.area);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                area?: ReturnType<typeof Area.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.area != null) {
                data.area = this.area.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_area)
                writer.writeMessage(4, this.area, () => this.area.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditAreaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditAreaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.area, () => message.area = Area.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditAreaResponse {
            return EditAreaResponse.deserialize(bytes);
        }
    }
    export class GetAreas extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetAreas {
            const message = new GetAreas({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAreas {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAreas();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAreas {
            return GetAreas.deserialize(bytes);
        }
    }
    export class GetAreasResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            areas?: Area[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("areas" in data && data.areas != undefined) {
                    this.areas = data.areas;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get areas() {
            return pb_1.Message.getRepeatedWrapperField(this, Area, 4) as Area[];
        }
        set areas(value: Area[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            areas?: ReturnType<typeof Area.prototype.toObject>[];
            ops_message?: string;
        }): GetAreasResponse {
            const message = new GetAreasResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.areas != null) {
                message.areas = data.areas.map(item => Area.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                areas?: ReturnType<typeof Area.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.areas != null) {
                data.areas = this.areas.map((item: Area) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.areas.length)
                writer.writeRepeatedMessage(4, this.areas, (item: Area) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAreasResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAreasResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.areas, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Area.deserialize(reader), Area));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAreasResponse {
            return GetAreasResponse.deserialize(bytes);
        }
    }
    export class CreateRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_name?: string;
            floor_id?: string;
            area_id?: number;
            room_type?: string;
            room_image_type?: number;
            gateway_id?: string;
            sections?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
                if ("floor_id" in data && data.floor_id != undefined) {
                    this.floor_id = data.floor_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("room_type" in data && data.room_type != undefined) {
                    this.room_type = data.room_type;
                }
                if ("room_image_type" in data && data.room_image_type != undefined) {
                    this.room_image_type = data.room_image_type;
                }
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("sections" in data && data.sections != undefined) {
                    this.sections = data.sections;
                }
            }
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get floor_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set floor_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set room_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get room_image_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set room_image_type(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get sections() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set sections(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            room_name?: string;
            floor_id?: string;
            area_id?: number;
            room_type?: string;
            room_image_type?: number;
            gateway_id?: string;
            sections?: string[];
        }): CreateRoom {
            const message = new CreateRoom({});
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            if (data.floor_id != null) {
                message.floor_id = data.floor_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.room_type != null) {
                message.room_type = data.room_type;
            }
            if (data.room_image_type != null) {
                message.room_image_type = data.room_image_type;
            }
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.sections != null) {
                message.sections = data.sections;
            }
            return message;
        }
        toObject() {
            const data: {
                room_name?: string;
                floor_id?: string;
                area_id?: number;
                room_type?: string;
                room_image_type?: number;
                gateway_id?: string;
                sections?: string[];
            } = {};
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            if (this.floor_id != null) {
                data.floor_id = this.floor_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.room_type != null) {
                data.room_type = this.room_type;
            }
            if (this.room_image_type != null) {
                data.room_image_type = this.room_image_type;
            }
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.sections != null) {
                data.sections = this.sections;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_name.length)
                writer.writeString(1, this.room_name);
            if (this.floor_id.length)
                writer.writeString(2, this.floor_id);
            if (this.area_id != 0)
                writer.writeInt32(3, this.area_id);
            if (this.room_type.length)
                writer.writeString(4, this.room_type);
            if (this.room_image_type != 0)
                writer.writeInt32(5, this.room_image_type);
            if (this.gateway_id.length)
                writer.writeString(6, this.gateway_id);
            if (this.sections.length)
                writer.writeRepeatedString(7, this.sections);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_name = reader.readString();
                        break;
                    case 2:
                        message.floor_id = reader.readString();
                        break;
                    case 3:
                        message.area_id = reader.readInt32();
                        break;
                    case 4:
                        message.room_type = reader.readString();
                        break;
                    case 5:
                        message.room_image_type = reader.readInt32();
                        break;
                    case 6:
                        message.gateway_id = reader.readString();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoom {
            return CreateRoom.deserialize(bytes);
        }
    }
    export class CreateRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            room?: Room;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get room() {
            return pb_1.Message.getWrapperField(this, Room, 4) as Room;
        }
        set room(value: Room) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_room() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            room?: ReturnType<typeof Room.prototype.toObject>;
            ops_message?: string;
        }): CreateRoomResponse {
            const message = new CreateRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.room != null) {
                message.room = Room.fromObject(data.room);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                room?: ReturnType<typeof Room.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.room != null) {
                data.room = this.room.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_room)
                writer.writeMessage(4, this.room, () => this.room.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.room, () => message.room = Room.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoomResponse {
            return CreateRoomResponse.deserialize(bytes);
        }
    }
    export class DeleteRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            room_id?: string;
        }): DeleteRoom {
            const message = new DeleteRoom({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRoom {
            return DeleteRoom.deserialize(bytes);
        }
    }
    export class DeleteRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            room_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            room_id?: string;
            ops_message?: string;
        }): DeleteRoomResponse {
            const message = new DeleteRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                room_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.room_id.length)
                writer.writeString(4, this.room_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.room_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRoomResponse {
            return DeleteRoomResponse.deserialize(bytes);
        }
    }
    export class EditRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            floor_id?: string;
            room_name?: string;
            room_type?: string;
            room_image_type?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("floor_id" in data && data.floor_id != undefined) {
                    this.floor_id = data.floor_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
                if ("room_type" in data && data.room_type != undefined) {
                    this.room_type = data.room_type;
                }
                if ("room_image_type" in data && data.room_image_type != undefined) {
                    this.room_image_type = data.room_image_type;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get floor_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set floor_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set room_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get room_image_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set room_image_type(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            room_id?: string;
            floor_id?: string;
            room_name?: string;
            room_type?: string;
            room_image_type?: number;
        }): EditRoom {
            const message = new EditRoom({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.floor_id != null) {
                message.floor_id = data.floor_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            if (data.room_type != null) {
                message.room_type = data.room_type;
            }
            if (data.room_image_type != null) {
                message.room_image_type = data.room_image_type;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                floor_id?: string;
                room_name?: string;
                room_type?: string;
                room_image_type?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.floor_id != null) {
                data.floor_id = this.floor_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            if (this.room_type != null) {
                data.room_type = this.room_type;
            }
            if (this.room_image_type != null) {
                data.room_image_type = this.room_image_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.floor_id.length)
                writer.writeString(2, this.floor_id);
            if (this.room_name.length)
                writer.writeString(3, this.room_name);
            if (this.room_type.length)
                writer.writeString(4, this.room_type);
            if (this.room_image_type != 0)
                writer.writeInt32(5, this.room_image_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.floor_id = reader.readString();
                        break;
                    case 3:
                        message.room_name = reader.readString();
                        break;
                    case 4:
                        message.room_type = reader.readString();
                        break;
                    case 5:
                        message.room_image_type = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditRoom {
            return EditRoom.deserialize(bytes);
        }
    }
    export class EditRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            room?: Room;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get room() {
            return pb_1.Message.getWrapperField(this, Room, 4) as Room;
        }
        set room(value: Room) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_room() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            room?: ReturnType<typeof Room.prototype.toObject>;
            ops_message?: string;
        }): EditRoomResponse {
            const message = new EditRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.room != null) {
                message.room = Room.fromObject(data.room);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                room?: ReturnType<typeof Room.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.room != null) {
                data.room = this.room.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_room)
                writer.writeMessage(4, this.room, () => this.room.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.room, () => message.room = Room.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditRoomResponse {
            return EditRoomResponse.deserialize(bytes);
        }
    }
    export class GetRooms extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetRooms {
            const message = new GetRooms({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRooms {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRooms();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRooms {
            return GetRooms.deserialize(bytes);
        }
    }
    export class GetRoomsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            rooms?: Room[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("rooms" in data && data.rooms != undefined) {
                    this.rooms = data.rooms;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rooms() {
            return pb_1.Message.getRepeatedWrapperField(this, Room, 4) as Room[];
        }
        set rooms(value: Room[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            rooms?: ReturnType<typeof Room.prototype.toObject>[];
            ops_message?: string;
        }): GetRoomsResponse {
            const message = new GetRoomsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.rooms != null) {
                message.rooms = data.rooms.map(item => Room.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                rooms?: ReturnType<typeof Room.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.rooms != null) {
                data.rooms = this.rooms.map((item: Room) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.rooms.length)
                writer.writeRepeatedMessage(4, this.rooms, (item: Room) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRoomsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRoomsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.rooms, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Room.deserialize(reader), Room));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRoomsResponse {
            return GetRoomsResponse.deserialize(bytes);
        }
    }
    export class MoveRoomToArea extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            area_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room_id?: string;
            area_id?: number;
        }): MoveRoomToArea {
            const message = new MoveRoomToArea({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                area_id?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.area_id != 0)
                writer.writeInt32(2, this.area_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveRoomToArea {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveRoomToArea();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.area_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveRoomToArea {
            return MoveRoomToArea.deserialize(bytes);
        }
    }
    export class MoveRoomToAreaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveRoomToAreaResponse {
            const message = new MoveRoomToAreaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveRoomToAreaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveRoomToAreaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveRoomToAreaResponse {
            return MoveRoomToAreaResponse.deserialize(bytes);
        }
    }
    export class EditRoomName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            room_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room_id?: string;
            room_name?: string;
        }): EditRoomName {
            const message = new EditRoomName({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                room_name?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.room_name.length)
                writer.writeString(2, this.room_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditRoomName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditRoomName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.room_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditRoomName {
            return EditRoomName.deserialize(bytes);
        }
    }
    export class EditRoomNameResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EditRoomNameResponse {
            const message = new EditRoomNameResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditRoomNameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditRoomNameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditRoomNameResponse {
            return EditRoomNameResponse.deserialize(bytes);
        }
    }
    export class SetRoomColor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            color?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("color" in data && data.color != undefined) {
                    this.color = data.color;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get color() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set color(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room_id?: string;
            color?: number;
        }): SetRoomColor {
            const message = new SetRoomColor({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.color != null) {
                message.color = data.color;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                color?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.color != null) {
                data.color = this.color;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.color != 0)
                writer.writeInt32(2, this.color);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetRoomColor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetRoomColor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.color = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetRoomColor {
            return SetRoomColor.deserialize(bytes);
        }
    }
    export class SetRoomColorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetRoomColorResponse {
            const message = new SetRoomColorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetRoomColorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetRoomColorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetRoomColorResponse {
            return SetRoomColorResponse.deserialize(bytes);
        }
    }
    export class RoomRank extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            room_rank?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("room_rank" in data && data.room_rank != undefined) {
                    this.room_rank = data.room_rank;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_rank() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set room_rank(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room_id?: string;
            room_rank?: number;
        }): RoomRank {
            const message = new RoomRank({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.room_rank != null) {
                message.room_rank = data.room_rank;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                room_rank?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.room_rank != null) {
                data.room_rank = this.room_rank;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.room_rank != 0)
                writer.writeUint32(2, this.room_rank);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomRank {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomRank();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.room_rank = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomRank {
            return RoomRank.deserialize(bytes);
        }
    }
    export class RoomReorder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_rank?: RoomRank[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_rank" in data && data.room_rank != undefined) {
                    this.room_rank = data.room_rank;
                }
            }
        }
        get room_rank() {
            return pb_1.Message.getRepeatedWrapperField(this, RoomRank, 1) as RoomRank[];
        }
        set room_rank(value: RoomRank[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            room_rank?: ReturnType<typeof RoomRank.prototype.toObject>[];
        }): RoomReorder {
            const message = new RoomReorder({});
            if (data.room_rank != null) {
                message.room_rank = data.room_rank.map(item => RoomRank.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                room_rank?: ReturnType<typeof RoomRank.prototype.toObject>[];
            } = {};
            if (this.room_rank != null) {
                data.room_rank = this.room_rank.map((item: RoomRank) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_rank.length)
                writer.writeRepeatedMessage(1, this.room_rank, (item: RoomRank) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomReorder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomReorder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.room_rank, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RoomRank.deserialize(reader), RoomRank));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomReorder {
            return RoomReorder.deserialize(bytes);
        }
    }
    export class RoomReorderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RoomReorderResponse {
            const message = new RoomReorderResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomReorderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomReorderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomReorderResponse {
            return RoomReorderResponse.deserialize(bytes);
        }
    }
    export class AddSection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            section_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("section_name" in data && data.section_name != undefined) {
                    this.section_name = data.section_name;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get section_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set section_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room_id?: string;
            section_name?: string;
        }): AddSection {
            const message = new AddSection({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.section_name != null) {
                message.section_name = data.section_name;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                section_name?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.section_name != null) {
                data.section_name = this.section_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.section_name.length)
                writer.writeString(2, this.section_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddSection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddSection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.section_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddSection {
            return AddSection.deserialize(bytes);
        }
    }
    export class AddSectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            section?: Section;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("section" in data && data.section != undefined) {
                    this.section = data.section;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get section() {
            return pb_1.Message.getWrapperField(this, Section, 4) as Section;
        }
        set section(value: Section) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_section() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            section?: ReturnType<typeof Section.prototype.toObject>;
            ops_message?: string;
        }): AddSectionResponse {
            const message = new AddSectionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.section != null) {
                message.section = Section.fromObject(data.section);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                section?: ReturnType<typeof Section.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.section != null) {
                data.section = this.section.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_section)
                writer.writeMessage(4, this.section, () => this.section.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddSectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddSectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.section, () => message.section = Section.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddSectionResponse {
            return AddSectionResponse.deserialize(bytes);
        }
    }
    export class DeleteSection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            section_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("section_id" in data && data.section_id != undefined) {
                    this.section_id = data.section_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get section_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set section_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room_id?: string;
            section_id?: string;
        }): DeleteSection {
            const message = new DeleteSection({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.section_id != null) {
                message.section_id = data.section_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                section_id?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.section_id != null) {
                data.section_id = this.section_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.section_id.length)
                writer.writeString(2, this.section_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.section_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSection {
            return DeleteSection.deserialize(bytes);
        }
    }
    export class DeleteSectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            section_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("section_id" in data && data.section_id != undefined) {
                    this.section_id = data.section_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get section_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set section_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            section_id?: string;
            ops_message?: string;
        }): DeleteSectionResponse {
            const message = new DeleteSectionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.section_id != null) {
                message.section_id = data.section_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                section_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.section_id != null) {
                data.section_id = this.section_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.section_id.length)
                writer.writeString(4, this.section_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.section_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSectionResponse {
            return DeleteSectionResponse.deserialize(bytes);
        }
    }
    export class EditSection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
            section_id?: string;
            section_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("section_id" in data && data.section_id != undefined) {
                    this.section_id = data.section_id;
                }
                if ("section_name" in data && data.section_name != undefined) {
                    this.section_name = data.section_name;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get section_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set section_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get section_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set section_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            room_id?: string;
            section_id?: string;
            section_name?: string;
        }): EditSection {
            const message = new EditSection({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.section_id != null) {
                message.section_id = data.section_id;
            }
            if (data.section_name != null) {
                message.section_name = data.section_name;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                section_id?: string;
                section_name?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.section_id != null) {
                data.section_id = this.section_id;
            }
            if (this.section_name != null) {
                data.section_name = this.section_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.section_id.length)
                writer.writeString(2, this.section_id);
            if (this.section_name.length)
                writer.writeString(3, this.section_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditSection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditSection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.section_id = reader.readString();
                        break;
                    case 3:
                        message.section_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditSection {
            return EditSection.deserialize(bytes);
        }
    }
    export class EditSectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            section?: Section;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("section" in data && data.section != undefined) {
                    this.section = data.section;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get section() {
            return pb_1.Message.getWrapperField(this, Section, 4) as Section;
        }
        set section(value: Section) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_section() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            section?: ReturnType<typeof Section.prototype.toObject>;
            ops_message?: string;
        }): EditSectionResponse {
            const message = new EditSectionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.section != null) {
                message.section = Section.fromObject(data.section);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                section?: ReturnType<typeof Section.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.section != null) {
                data.section = this.section.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_section)
                writer.writeMessage(4, this.section, () => this.section.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditSectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditSectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.section, () => message.section = Section.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditSectionResponse {
            return EditSectionResponse.deserialize(bytes);
        }
    }
    export class GetHubData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetHubData {
            const message = new GetHubData({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHubData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHubData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHubData {
            return GetHubData.deserialize(bytes);
        }
    }
    export class GetHubDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            areas?: Area[];
            floors?: Floor[];
            rooms?: Room[];
            devices?: dependency_1.com.keus.hub.Device[];
            groups?: dependency_2.com.keus.hub.Group[];
            scenes?: dependency_3.com.keus.hub.Scene[];
            irremotes?: dependency_4.com.keus.hub.IRRemote[];
            schedules?: dependency_5.com.keus.hub.Schedule[];
            mini_gateway?: dependency_6.com.keus.hub.MiniGateway[];
            favorite?: dependency_7.com.keus.hub.Favorite[];
            gmdevices?: dependency_8.com.keus.gateway.GMDevice[];
            gmappliances?: dependency_9.com.keus.gateway.GMAppliance[];
            gmgroups?: dependency_10.com.keus.gateway.GMGroup[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("areas" in data && data.areas != undefined) {
                    this.areas = data.areas;
                }
                if ("floors" in data && data.floors != undefined) {
                    this.floors = data.floors;
                }
                if ("rooms" in data && data.rooms != undefined) {
                    this.rooms = data.rooms;
                }
                if ("devices" in data && data.devices != undefined) {
                    this.devices = data.devices;
                }
                if ("groups" in data && data.groups != undefined) {
                    this.groups = data.groups;
                }
                if ("scenes" in data && data.scenes != undefined) {
                    this.scenes = data.scenes;
                }
                if ("irremotes" in data && data.irremotes != undefined) {
                    this.irremotes = data.irremotes;
                }
                if ("schedules" in data && data.schedules != undefined) {
                    this.schedules = data.schedules;
                }
                if ("mini_gateway" in data && data.mini_gateway != undefined) {
                    this.mini_gateway = data.mini_gateway;
                }
                if ("favorite" in data && data.favorite != undefined) {
                    this.favorite = data.favorite;
                }
                if ("gmdevices" in data && data.gmdevices != undefined) {
                    this.gmdevices = data.gmdevices;
                }
                if ("gmappliances" in data && data.gmappliances != undefined) {
                    this.gmappliances = data.gmappliances;
                }
                if ("gmgroups" in data && data.gmgroups != undefined) {
                    this.gmgroups = data.gmgroups;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get areas() {
            return pb_1.Message.getRepeatedWrapperField(this, Area, 4) as Area[];
        }
        set areas(value: Area[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get floors() {
            return pb_1.Message.getRepeatedWrapperField(this, Floor, 5) as Floor[];
        }
        set floors(value: Floor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get rooms() {
            return pb_1.Message.getRepeatedWrapperField(this, Room, 6) as Room[];
        }
        set rooms(value: Room[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get devices() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.com.keus.hub.Device, 7) as dependency_1.com.keus.hub.Device[];
        }
        set devices(value: dependency_1.com.keus.hub.Device[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get groups() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.com.keus.hub.Group, 9) as dependency_2.com.keus.hub.Group[];
        }
        set groups(value: dependency_2.com.keus.hub.Group[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get scenes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.com.keus.hub.Scene, 10) as dependency_3.com.keus.hub.Scene[];
        }
        set scenes(value: dependency_3.com.keus.hub.Scene[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get irremotes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.com.keus.hub.IRRemote, 11) as dependency_4.com.keus.hub.IRRemote[];
        }
        set irremotes(value: dependency_4.com.keus.hub.IRRemote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get schedules() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.com.keus.hub.Schedule, 12) as dependency_5.com.keus.hub.Schedule[];
        }
        set schedules(value: dependency_5.com.keus.hub.Schedule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get mini_gateway() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.com.keus.hub.MiniGateway, 13) as dependency_6.com.keus.hub.MiniGateway[];
        }
        set mini_gateway(value: dependency_6.com.keus.hub.MiniGateway[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get favorite() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.com.keus.hub.Favorite, 15) as dependency_7.com.keus.hub.Favorite[];
        }
        set favorite(value: dependency_7.com.keus.hub.Favorite[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        get gmdevices() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.com.keus.gateway.GMDevice, 16) as dependency_8.com.keus.gateway.GMDevice[];
        }
        set gmdevices(value: dependency_8.com.keus.gateway.GMDevice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 16, value);
        }
        get gmappliances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_9.com.keus.gateway.GMAppliance, 17) as dependency_9.com.keus.gateway.GMAppliance[];
        }
        set gmappliances(value: dependency_9.com.keus.gateway.GMAppliance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 17, value);
        }
        get gmgroups() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_10.com.keus.gateway.GMGroup, 18) as dependency_10.com.keus.gateway.GMGroup[];
        }
        set gmgroups(value: dependency_10.com.keus.gateway.GMGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 18, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            areas?: ReturnType<typeof Area.prototype.toObject>[];
            floors?: ReturnType<typeof Floor.prototype.toObject>[];
            rooms?: ReturnType<typeof Room.prototype.toObject>[];
            devices?: ReturnType<typeof dependency_1.com.keus.hub.Device.prototype.toObject>[];
            groups?: ReturnType<typeof dependency_2.com.keus.hub.Group.prototype.toObject>[];
            scenes?: ReturnType<typeof dependency_3.com.keus.hub.Scene.prototype.toObject>[];
            irremotes?: ReturnType<typeof dependency_4.com.keus.hub.IRRemote.prototype.toObject>[];
            schedules?: ReturnType<typeof dependency_5.com.keus.hub.Schedule.prototype.toObject>[];
            mini_gateway?: ReturnType<typeof dependency_6.com.keus.hub.MiniGateway.prototype.toObject>[];
            favorite?: ReturnType<typeof dependency_7.com.keus.hub.Favorite.prototype.toObject>[];
            gmdevices?: ReturnType<typeof dependency_8.com.keus.gateway.GMDevice.prototype.toObject>[];
            gmappliances?: ReturnType<typeof dependency_9.com.keus.gateway.GMAppliance.prototype.toObject>[];
            gmgroups?: ReturnType<typeof dependency_10.com.keus.gateway.GMGroup.prototype.toObject>[];
            ops_message?: string;
        }): GetHubDataResponse {
            const message = new GetHubDataResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.areas != null) {
                message.areas = data.areas.map(item => Area.fromObject(item));
            }
            if (data.floors != null) {
                message.floors = data.floors.map(item => Floor.fromObject(item));
            }
            if (data.rooms != null) {
                message.rooms = data.rooms.map(item => Room.fromObject(item));
            }
            if (data.devices != null) {
                message.devices = data.devices.map(item => dependency_1.com.keus.hub.Device.fromObject(item));
            }
            if (data.groups != null) {
                message.groups = data.groups.map(item => dependency_2.com.keus.hub.Group.fromObject(item));
            }
            if (data.scenes != null) {
                message.scenes = data.scenes.map(item => dependency_3.com.keus.hub.Scene.fromObject(item));
            }
            if (data.irremotes != null) {
                message.irremotes = data.irremotes.map(item => dependency_4.com.keus.hub.IRRemote.fromObject(item));
            }
            if (data.schedules != null) {
                message.schedules = data.schedules.map(item => dependency_5.com.keus.hub.Schedule.fromObject(item));
            }
            if (data.mini_gateway != null) {
                message.mini_gateway = data.mini_gateway.map(item => dependency_6.com.keus.hub.MiniGateway.fromObject(item));
            }
            if (data.favorite != null) {
                message.favorite = data.favorite.map(item => dependency_7.com.keus.hub.Favorite.fromObject(item));
            }
            if (data.gmdevices != null) {
                message.gmdevices = data.gmdevices.map(item => dependency_8.com.keus.gateway.GMDevice.fromObject(item));
            }
            if (data.gmappliances != null) {
                message.gmappliances = data.gmappliances.map(item => dependency_9.com.keus.gateway.GMAppliance.fromObject(item));
            }
            if (data.gmgroups != null) {
                message.gmgroups = data.gmgroups.map(item => dependency_10.com.keus.gateway.GMGroup.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                areas?: ReturnType<typeof Area.prototype.toObject>[];
                floors?: ReturnType<typeof Floor.prototype.toObject>[];
                rooms?: ReturnType<typeof Room.prototype.toObject>[];
                devices?: ReturnType<typeof dependency_1.com.keus.hub.Device.prototype.toObject>[];
                groups?: ReturnType<typeof dependency_2.com.keus.hub.Group.prototype.toObject>[];
                scenes?: ReturnType<typeof dependency_3.com.keus.hub.Scene.prototype.toObject>[];
                irremotes?: ReturnType<typeof dependency_4.com.keus.hub.IRRemote.prototype.toObject>[];
                schedules?: ReturnType<typeof dependency_5.com.keus.hub.Schedule.prototype.toObject>[];
                mini_gateway?: ReturnType<typeof dependency_6.com.keus.hub.MiniGateway.prototype.toObject>[];
                favorite?: ReturnType<typeof dependency_7.com.keus.hub.Favorite.prototype.toObject>[];
                gmdevices?: ReturnType<typeof dependency_8.com.keus.gateway.GMDevice.prototype.toObject>[];
                gmappliances?: ReturnType<typeof dependency_9.com.keus.gateway.GMAppliance.prototype.toObject>[];
                gmgroups?: ReturnType<typeof dependency_10.com.keus.gateway.GMGroup.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.areas != null) {
                data.areas = this.areas.map((item: Area) => item.toObject());
            }
            if (this.floors != null) {
                data.floors = this.floors.map((item: Floor) => item.toObject());
            }
            if (this.rooms != null) {
                data.rooms = this.rooms.map((item: Room) => item.toObject());
            }
            if (this.devices != null) {
                data.devices = this.devices.map((item: dependency_1.com.keus.hub.Device) => item.toObject());
            }
            if (this.groups != null) {
                data.groups = this.groups.map((item: dependency_2.com.keus.hub.Group) => item.toObject());
            }
            if (this.scenes != null) {
                data.scenes = this.scenes.map((item: dependency_3.com.keus.hub.Scene) => item.toObject());
            }
            if (this.irremotes != null) {
                data.irremotes = this.irremotes.map((item: dependency_4.com.keus.hub.IRRemote) => item.toObject());
            }
            if (this.schedules != null) {
                data.schedules = this.schedules.map((item: dependency_5.com.keus.hub.Schedule) => item.toObject());
            }
            if (this.mini_gateway != null) {
                data.mini_gateway = this.mini_gateway.map((item: dependency_6.com.keus.hub.MiniGateway) => item.toObject());
            }
            if (this.favorite != null) {
                data.favorite = this.favorite.map((item: dependency_7.com.keus.hub.Favorite) => item.toObject());
            }
            if (this.gmdevices != null) {
                data.gmdevices = this.gmdevices.map((item: dependency_8.com.keus.gateway.GMDevice) => item.toObject());
            }
            if (this.gmappliances != null) {
                data.gmappliances = this.gmappliances.map((item: dependency_9.com.keus.gateway.GMAppliance) => item.toObject());
            }
            if (this.gmgroups != null) {
                data.gmgroups = this.gmgroups.map((item: dependency_10.com.keus.gateway.GMGroup) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.areas.length)
                writer.writeRepeatedMessage(4, this.areas, (item: Area) => item.serialize(writer));
            if (this.floors.length)
                writer.writeRepeatedMessage(5, this.floors, (item: Floor) => item.serialize(writer));
            if (this.rooms.length)
                writer.writeRepeatedMessage(6, this.rooms, (item: Room) => item.serialize(writer));
            if (this.devices.length)
                writer.writeRepeatedMessage(7, this.devices, (item: dependency_1.com.keus.hub.Device) => item.serialize(writer));
            if (this.groups.length)
                writer.writeRepeatedMessage(9, this.groups, (item: dependency_2.com.keus.hub.Group) => item.serialize(writer));
            if (this.scenes.length)
                writer.writeRepeatedMessage(10, this.scenes, (item: dependency_3.com.keus.hub.Scene) => item.serialize(writer));
            if (this.irremotes.length)
                writer.writeRepeatedMessage(11, this.irremotes, (item: dependency_4.com.keus.hub.IRRemote) => item.serialize(writer));
            if (this.schedules.length)
                writer.writeRepeatedMessage(12, this.schedules, (item: dependency_5.com.keus.hub.Schedule) => item.serialize(writer));
            if (this.mini_gateway.length)
                writer.writeRepeatedMessage(13, this.mini_gateway, (item: dependency_6.com.keus.hub.MiniGateway) => item.serialize(writer));
            if (this.favorite.length)
                writer.writeRepeatedMessage(15, this.favorite, (item: dependency_7.com.keus.hub.Favorite) => item.serialize(writer));
            if (this.gmdevices.length)
                writer.writeRepeatedMessage(16, this.gmdevices, (item: dependency_8.com.keus.gateway.GMDevice) => item.serialize(writer));
            if (this.gmappliances.length)
                writer.writeRepeatedMessage(17, this.gmappliances, (item: dependency_9.com.keus.gateway.GMAppliance) => item.serialize(writer));
            if (this.gmgroups.length)
                writer.writeRepeatedMessage(18, this.gmgroups, (item: dependency_10.com.keus.gateway.GMGroup) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(14, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHubDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHubDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.areas, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Area.deserialize(reader), Area));
                        break;
                    case 5:
                        reader.readMessage(message.floors, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Floor.deserialize(reader), Floor));
                        break;
                    case 6:
                        reader.readMessage(message.rooms, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Room.deserialize(reader), Room));
                        break;
                    case 7:
                        reader.readMessage(message.devices, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_1.com.keus.hub.Device.deserialize(reader), dependency_1.com.keus.hub.Device));
                        break;
                    case 9:
                        reader.readMessage(message.groups, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_2.com.keus.hub.Group.deserialize(reader), dependency_2.com.keus.hub.Group));
                        break;
                    case 10:
                        reader.readMessage(message.scenes, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_3.com.keus.hub.Scene.deserialize(reader), dependency_3.com.keus.hub.Scene));
                        break;
                    case 11:
                        reader.readMessage(message.irremotes, () => pb_1.Message.addToRepeatedWrapperField(message, 11, dependency_4.com.keus.hub.IRRemote.deserialize(reader), dependency_4.com.keus.hub.IRRemote));
                        break;
                    case 12:
                        reader.readMessage(message.schedules, () => pb_1.Message.addToRepeatedWrapperField(message, 12, dependency_5.com.keus.hub.Schedule.deserialize(reader), dependency_5.com.keus.hub.Schedule));
                        break;
                    case 13:
                        reader.readMessage(message.mini_gateway, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_6.com.keus.hub.MiniGateway.deserialize(reader), dependency_6.com.keus.hub.MiniGateway));
                        break;
                    case 15:
                        reader.readMessage(message.favorite, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_7.com.keus.hub.Favorite.deserialize(reader), dependency_7.com.keus.hub.Favorite));
                        break;
                    case 16:
                        reader.readMessage(message.gmdevices, () => pb_1.Message.addToRepeatedWrapperField(message, 16, dependency_8.com.keus.gateway.GMDevice.deserialize(reader), dependency_8.com.keus.gateway.GMDevice));
                        break;
                    case 17:
                        reader.readMessage(message.gmappliances, () => pb_1.Message.addToRepeatedWrapperField(message, 17, dependency_9.com.keus.gateway.GMAppliance.deserialize(reader), dependency_9.com.keus.gateway.GMAppliance));
                        break;
                    case 18:
                        reader.readMessage(message.gmgroups, () => pb_1.Message.addToRepeatedWrapperField(message, 18, dependency_10.com.keus.gateway.GMGroup.deserialize(reader), dependency_10.com.keus.gateway.GMGroup));
                        break;
                    case 14:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHubDataResponse {
            return GetHubDataResponse.deserialize(bytes);
        }
    }
    export class UpdateGatewayColor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            red?: number;
            green?: number;
            blue?: number;
            brightness?: number;
            gateway_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("red" in data && data.red != undefined) {
                    this.red = data.red;
                }
                if ("green" in data && data.green != undefined) {
                    this.green = data.green;
                }
                if ("blue" in data && data.blue != undefined) {
                    this.blue = data.blue;
                }
                if ("brightness" in data && data.brightness != undefined) {
                    this.brightness = data.brightness;
                }
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
            }
        }
        get red() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set red(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get green() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set green(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get blue() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set blue(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get brightness() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set brightness(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            red?: number;
            green?: number;
            blue?: number;
            brightness?: number;
            gateway_id?: string;
        }): UpdateGatewayColor {
            const message = new UpdateGatewayColor({});
            if (data.red != null) {
                message.red = data.red;
            }
            if (data.green != null) {
                message.green = data.green;
            }
            if (data.blue != null) {
                message.blue = data.blue;
            }
            if (data.brightness != null) {
                message.brightness = data.brightness;
            }
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            return message;
        }
        toObject() {
            const data: {
                red?: number;
                green?: number;
                blue?: number;
                brightness?: number;
                gateway_id?: string;
            } = {};
            if (this.red != null) {
                data.red = this.red;
            }
            if (this.green != null) {
                data.green = this.green;
            }
            if (this.blue != null) {
                data.blue = this.blue;
            }
            if (this.brightness != null) {
                data.brightness = this.brightness;
            }
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.red != 0)
                writer.writeUint32(1, this.red);
            if (this.green != 0)
                writer.writeUint32(2, this.green);
            if (this.blue != 0)
                writer.writeUint32(3, this.blue);
            if (this.brightness != 0)
                writer.writeUint32(4, this.brightness);
            if (this.gateway_id.length)
                writer.writeString(5, this.gateway_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGatewayColor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGatewayColor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.red = reader.readUint32();
                        break;
                    case 2:
                        message.green = reader.readUint32();
                        break;
                    case 3:
                        message.blue = reader.readUint32();
                        break;
                    case 4:
                        message.brightness = reader.readUint32();
                        break;
                    case 5:
                        message.gateway_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGatewayColor {
            return UpdateGatewayColor.deserialize(bytes);
        }
    }
    export class UpdateGatewayColorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateGatewayColorResponse {
            const message = new UpdateGatewayColorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGatewayColorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGatewayColorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGatewayColorResponse {
            return UpdateGatewayColorResponse.deserialize(bytes);
        }
    }
    export class ZigbeeExecution extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11]];
        constructor(data?: any[] | ({
            execution_type?: ZIGBEE_EXECUTION_TYPES;
            execution_timestamp?: number;
        } & (({
            scene_execution?: dependency_3.com.keus.hub.SceneIdentifier;
            group_execution?: never;
        } | {
            scene_execution?: never;
            group_execution?: dependency_2.com.keus.hub.GroupState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("execution_type" in data && data.execution_type != undefined) {
                    this.execution_type = data.execution_type;
                }
                if ("scene_execution" in data && data.scene_execution != undefined) {
                    this.scene_execution = data.scene_execution;
                }
                if ("group_execution" in data && data.group_execution != undefined) {
                    this.group_execution = data.group_execution;
                }
                if ("execution_timestamp" in data && data.execution_timestamp != undefined) {
                    this.execution_timestamp = data.execution_timestamp;
                }
            }
        }
        get execution_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, ZIGBEE_EXECUTION_TYPES.ZIGBEE_GROUP_EXEC) as ZIGBEE_EXECUTION_TYPES;
        }
        set execution_type(value: ZIGBEE_EXECUTION_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get scene_execution() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.SceneIdentifier, 10) as dependency_3.com.keus.hub.SceneIdentifier;
        }
        set scene_execution(value: dependency_3.com.keus.hub.SceneIdentifier) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_scene_execution() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get group_execution() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.GroupState, 11) as dependency_2.com.keus.hub.GroupState;
        }
        set group_execution(value: dependency_2.com.keus.hub.GroupState) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_group_execution() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get execution_timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set execution_timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get execution() {
            const cases: {
                [index: number]: "none" | "scene_execution" | "group_execution";
            } = {
                0: "none",
                10: "scene_execution",
                11: "group_execution"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11])];
        }
        static fromObject(data: {
            execution_type?: ZIGBEE_EXECUTION_TYPES;
            scene_execution?: ReturnType<typeof dependency_3.com.keus.hub.SceneIdentifier.prototype.toObject>;
            group_execution?: ReturnType<typeof dependency_2.com.keus.hub.GroupState.prototype.toObject>;
            execution_timestamp?: number;
        }): ZigbeeExecution {
            const message = new ZigbeeExecution({});
            if (data.execution_type != null) {
                message.execution_type = data.execution_type;
            }
            if (data.scene_execution != null) {
                message.scene_execution = dependency_3.com.keus.hub.SceneIdentifier.fromObject(data.scene_execution);
            }
            if (data.group_execution != null) {
                message.group_execution = dependency_2.com.keus.hub.GroupState.fromObject(data.group_execution);
            }
            if (data.execution_timestamp != null) {
                message.execution_timestamp = data.execution_timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                execution_type?: ZIGBEE_EXECUTION_TYPES;
                scene_execution?: ReturnType<typeof dependency_3.com.keus.hub.SceneIdentifier.prototype.toObject>;
                group_execution?: ReturnType<typeof dependency_2.com.keus.hub.GroupState.prototype.toObject>;
                execution_timestamp?: number;
            } = {};
            if (this.execution_type != null) {
                data.execution_type = this.execution_type;
            }
            if (this.scene_execution != null) {
                data.scene_execution = this.scene_execution.toObject();
            }
            if (this.group_execution != null) {
                data.group_execution = this.group_execution.toObject();
            }
            if (this.execution_timestamp != null) {
                data.execution_timestamp = this.execution_timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.execution_type != ZIGBEE_EXECUTION_TYPES.ZIGBEE_GROUP_EXEC)
                writer.writeEnum(1, this.execution_type);
            if (this.has_scene_execution)
                writer.writeMessage(10, this.scene_execution, () => this.scene_execution.serialize(writer));
            if (this.has_group_execution)
                writer.writeMessage(11, this.group_execution, () => this.group_execution.serialize(writer));
            if (this.execution_timestamp != 0)
                writer.writeUint64(2, this.execution_timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeExecution {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeExecution();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.execution_type = reader.readEnum();
                        break;
                    case 10:
                        reader.readMessage(message.scene_execution, () => message.scene_execution = dependency_3.com.keus.hub.SceneIdentifier.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.group_execution, () => message.group_execution = dependency_2.com.keus.hub.GroupState.deserialize(reader));
                        break;
                    case 2:
                        message.execution_timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeExecution {
            return ZigbeeExecution.deserialize(bytes);
        }
    }
    export class ReportZigbeeExecution extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_id?: number;
            zigbee_execution?: ZigbeeExecution[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("zigbee_execution" in data && data.zigbee_execution != undefined) {
                    this.zigbee_execution = data.zigbee_execution;
                }
            }
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get zigbee_execution() {
            return pb_1.Message.getRepeatedWrapperField(this, ZigbeeExecution, 2) as ZigbeeExecution[];
        }
        set zigbee_execution(value: ZigbeeExecution[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            area_id?: number;
            zigbee_execution?: ReturnType<typeof ZigbeeExecution.prototype.toObject>[];
        }): ReportZigbeeExecution {
            const message = new ReportZigbeeExecution({});
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.zigbee_execution != null) {
                message.zigbee_execution = data.zigbee_execution.map(item => ZigbeeExecution.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                area_id?: number;
                zigbee_execution?: ReturnType<typeof ZigbeeExecution.prototype.toObject>[];
            } = {};
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.zigbee_execution != null) {
                data.zigbee_execution = this.zigbee_execution.map((item: ZigbeeExecution) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_id != 0)
                writer.writeUint32(1, this.area_id);
            if (this.zigbee_execution.length)
                writer.writeRepeatedMessage(2, this.zigbee_execution, (item: ZigbeeExecution) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportZigbeeExecution {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportZigbeeExecution();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.area_id = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.zigbee_execution, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ZigbeeExecution.deserialize(reader), ZigbeeExecution));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportZigbeeExecution {
            return ReportZigbeeExecution.deserialize(bytes);
        }
    }
    export class ReportZigbeeExecutionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReportZigbeeExecutionResponse {
            const message = new ReportZigbeeExecutionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportZigbeeExecutionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportZigbeeExecutionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportZigbeeExecutionResponse {
            return ReportZigbeeExecutionResponse.deserialize(bytes);
        }
    }
    export class ControlBrightness extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: BRIGHTNESS_UPDATE_TYPE;
            room_id?: string;
            scene_id?: number;
            step_value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("step_value" in data && data.step_value != undefined) {
                    this.step_value = data.step_value;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, BRIGHTNESS_UPDATE_TYPE.AREA_UPDATE) as BRIGHTNESS_UPDATE_TYPE;
        }
        set update_type(value: BRIGHTNESS_UPDATE_TYPE) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get step_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set step_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            update_type?: BRIGHTNESS_UPDATE_TYPE;
            room_id?: string;
            scene_id?: number;
            step_value?: number;
        }): ControlBrightness {
            const message = new ControlBrightness({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.step_value != null) {
                message.step_value = data.step_value;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: BRIGHTNESS_UPDATE_TYPE;
                room_id?: string;
                scene_id?: number;
                step_value?: number;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.step_value != null) {
                data.step_value = this.step_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != BRIGHTNESS_UPDATE_TYPE.AREA_UPDATE)
                writer.writeEnum(1, this.update_type);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (this.scene_id != 0)
                writer.writeInt32(3, this.scene_id);
            if (this.step_value != 0)
                writer.writeInt32(4, this.step_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControlBrightness {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControlBrightness();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    case 3:
                        message.scene_id = reader.readInt32();
                        break;
                    case 4:
                        message.step_value = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ControlBrightness {
            return ControlBrightness.deserialize(bytes);
        }
    }
    export class ControlBrightnessResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ControlBrightnessResponse {
            const message = new ControlBrightnessResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControlBrightnessResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControlBrightnessResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ControlBrightnessResponse {
            return ControlBrightnessResponse.deserialize(bytes);
        }
    }
    export class ControlAreaBrightness extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_id?: number;
            step_value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("step_value" in data && data.step_value != undefined) {
                    this.step_value = data.step_value;
                }
            }
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get step_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set step_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            area_id?: number;
            step_value?: number;
        }): ControlAreaBrightness {
            const message = new ControlAreaBrightness({});
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.step_value != null) {
                message.step_value = data.step_value;
            }
            return message;
        }
        toObject() {
            const data: {
                area_id?: number;
                step_value?: number;
            } = {};
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.step_value != null) {
                data.step_value = this.step_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_id != 0)
                writer.writeInt32(1, this.area_id);
            if (this.step_value != 0)
                writer.writeInt32(4, this.step_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControlAreaBrightness {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControlAreaBrightness();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.area_id = reader.readInt32();
                        break;
                    case 4:
                        message.step_value = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ControlAreaBrightness {
            return ControlAreaBrightness.deserialize(bytes);
        }
    }
    export class ControlAreaBrightnessResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ControlAreaBrightnessResponse {
            const message = new ControlAreaBrightnessResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControlAreaBrightnessResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControlAreaBrightnessResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ControlAreaBrightnessResponse {
            return ControlAreaBrightnessResponse.deserialize(bytes);
        }
    }
    export class ControlBrightnessEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_data?: ControlBrightness;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_data" in data && data.event_data != undefined) {
                    this.event_data = data.event_data;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get event_data() {
            return pb_1.Message.getWrapperField(this, ControlBrightness, 1) as ControlBrightness;
        }
        set event_data(value: ControlBrightness) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_event_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            event_data?: ReturnType<typeof ControlBrightness.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): ControlBrightnessEvent {
            const message = new ControlBrightnessEvent({});
            if (data.event_data != null) {
                message.event_data = ControlBrightness.fromObject(data.event_data);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                event_data?: ReturnType<typeof ControlBrightness.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.event_data != null) {
                data.event_data = this.event_data.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_event_data)
                writer.writeMessage(1, this.event_data, () => this.event_data.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(2, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(3, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControlBrightnessEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControlBrightnessEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.event_data, () => message.event_data = ControlBrightness.deserialize(reader));
                        break;
                    case 2:
                        message.activity_source = reader.readString();
                        break;
                    case 3:
                        message.activity_user = reader.readString();
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ControlBrightnessEvent {
            return ControlBrightnessEvent.deserialize(bytes);
        }
    }
    export class GetContactSensorList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetContactSensorList {
            const message = new GetContactSensorList({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetContactSensorList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetContactSensorList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetContactSensorList {
            return GetContactSensorList.deserialize(bytes);
        }
    }
    export class GetContactSensorListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            devices?: dependency_1.com.keus.hub.Device[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("devices" in data && data.devices != undefined) {
                    this.devices = data.devices;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get devices() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.com.keus.hub.Device, 4) as dependency_1.com.keus.hub.Device[];
        }
        set devices(value: dependency_1.com.keus.hub.Device[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            devices?: ReturnType<typeof dependency_1.com.keus.hub.Device.prototype.toObject>[];
            ops_message?: string;
        }): GetContactSensorListResponse {
            const message = new GetContactSensorListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.devices != null) {
                message.devices = data.devices.map(item => dependency_1.com.keus.hub.Device.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                devices?: ReturnType<typeof dependency_1.com.keus.hub.Device.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.devices != null) {
                data.devices = this.devices.map((item: dependency_1.com.keus.hub.Device) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.devices.length)
                writer.writeRepeatedMessage(4, this.devices, (item: dependency_1.com.keus.hub.Device) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetContactSensorListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetContactSensorListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.devices, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.com.keus.hub.Device.deserialize(reader), dependency_1.com.keus.hub.Device));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetContactSensorListResponse {
            return GetContactSensorListResponse.deserialize(bytes);
        }
    }
}
