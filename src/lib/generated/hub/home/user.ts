/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/home/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class GetUserInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            phone?: string;
        }): GetUserInfo {
            const message = new GetUserInfo({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserInfo {
            return GetUserInfo.deserialize(bytes);
        }
    }
    export class UserInfoResponseObj extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
            email?: string;
            phone_verified?: boolean;
            emial_verified?: boolean;
            user_name?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("phone_verified" in data && data.phone_verified != undefined) {
                    this.phone_verified = data.phone_verified;
                }
                if ("emial_verified" in data && data.emial_verified != undefined) {
                    this.emial_verified = data.emial_verified;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get phone_verified() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set phone_verified(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get emial_verified() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set emial_verified(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            phone?: string;
            email?: string;
            phone_verified?: boolean;
            emial_verified?: boolean;
            user_name?: string;
            ops_message?: string;
        }): UserInfoResponseObj {
            const message = new UserInfoResponseObj({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.phone_verified != null) {
                message.phone_verified = data.phone_verified;
            }
            if (data.emial_verified != null) {
                message.emial_verified = data.emial_verified;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                email?: string;
                phone_verified?: boolean;
                emial_verified?: boolean;
                user_name?: string;
                ops_message?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.phone_verified != null) {
                data.phone_verified = this.phone_verified;
            }
            if (this.emial_verified != null) {
                data.emial_verified = this.emial_verified;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.phone_verified != false)
                writer.writeBool(3, this.phone_verified);
            if (this.emial_verified != false)
                writer.writeBool(4, this.emial_verified);
            if (this.user_name.length)
                writer.writeString(5, this.user_name);
            if (this.ops_message.length)
                writer.writeString(6, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfoResponseObj {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfoResponseObj();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.phone_verified = reader.readBool();
                        break;
                    case 4:
                        message.emial_verified = reader.readBool();
                        break;
                    case 5:
                        message.user_name = reader.readString();
                        break;
                    case 6:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfoResponseObj {
            return UserInfoResponseObj.deserialize(bytes);
        }
    }
    export class GetUserInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: UserInfoResponseObj;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user_data" in data && data.user_data != undefined) {
                    this.user_data = data.user_data;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_data() {
            return pb_1.Message.getWrapperField(this, UserInfoResponseObj, 4) as UserInfoResponseObj;
        }
        set user_data(value: UserInfoResponseObj) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_user_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: ReturnType<typeof UserInfoResponseObj.prototype.toObject>;
            ops_message?: string;
        }): GetUserInfoResponse {
            const message = new GetUserInfoResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user_data != null) {
                message.user_data = UserInfoResponseObj.fromObject(data.user_data);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                user_data?: ReturnType<typeof UserInfoResponseObj.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user_data != null) {
                data.user_data = this.user_data.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_user_data)
                writer.writeMessage(4, this.user_data, () => this.user_data.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(6, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.user_data, () => message.user_data = UserInfoResponseObj.deserialize(reader));
                        break;
                    case 6:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserInfoResponse {
            return GetUserInfoResponse.deserialize(bytes);
        }
    }
    export class RequestOtp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            phone?: string;
        }): RequestOtp {
            const message = new RequestOtp({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestOtp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestOtp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestOtp {
            return RequestOtp.deserialize(bytes);
        }
    }
    export class RequestOtpResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RequestOtpResponse {
            const message = new RequestOtpResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestOtpResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestOtpResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestOtpResponse {
            return RequestOtpResponse.deserialize(bytes);
        }
    }
    export class TotpLogin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
            otp?: number;
            device_id?: string;
            device_type?: string;
            device_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("otp" in data && data.otp != undefined) {
                    this.otp = data.otp;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get otp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set otp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            phone?: string;
            otp?: number;
            device_id?: string;
            device_type?: string;
            device_name?: string;
        }): TotpLogin {
            const message = new TotpLogin({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.otp != null) {
                message.otp = data.otp;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                otp?: number;
                device_id?: string;
                device_type?: string;
                device_name?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.otp != null) {
                data.otp = this.otp;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (this.otp != 0)
                writer.writeUint64(2, this.otp);
            if (this.device_id.length)
                writer.writeString(3, this.device_id);
            if (this.device_type.length)
                writer.writeString(4, this.device_type);
            if (this.device_name.length)
                writer.writeString(5, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TotpLogin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TotpLogin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.otp = reader.readUint64();
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.device_type = reader.readString();
                        break;
                    case 5:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TotpLogin {
            return TotpLogin.deserialize(bytes);
        }
    }
    export class TotpLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            device_key?: string;
            secret_key?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("device_key" in data && data.device_key != undefined) {
                    this.device_key = data.device_key;
                }
                if ("secret_key" in data && data.secret_key != undefined) {
                    this.secret_key = data.secret_key;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get secret_key() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set secret_key(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            device_key?: string;
            secret_key?: string;
            ops_message?: string;
        }): TotpLoginResponse {
            const message = new TotpLoginResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.device_key != null) {
                message.device_key = data.device_key;
            }
            if (data.secret_key != null) {
                message.secret_key = data.secret_key;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                device_key?: string;
                secret_key?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.device_key != null) {
                data.device_key = this.device_key;
            }
            if (this.secret_key != null) {
                data.secret_key = this.secret_key;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.device_key.length)
                writer.writeString(4, this.device_key);
            if (this.secret_key.length)
                writer.writeString(5, this.secret_key);
            if (this.ops_message.length)
                writer.writeString(6, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TotpLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TotpLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.device_key = reader.readString();
                        break;
                    case 5:
                        message.secret_key = reader.readString();
                        break;
                    case 6:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TotpLoginResponse {
            return TotpLoginResponse.deserialize(bytes);
        }
    }
}
