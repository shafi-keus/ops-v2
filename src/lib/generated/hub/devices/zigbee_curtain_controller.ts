/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/zigbee_curtain_controller.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./device_constants";
import * as dependency_2 from "./../activity/activity_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class ZigbeeCurtainControllerState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("curtain_state" in data && data.curtain_state != undefined) {
                    this.curtain_state = data.curtain_state;
                }
            }
        }
        get curtain_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION.CC_NONE) as dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }
        set curtain_state(value: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }): ZigbeeCurtainControllerState {
            const message = new ZigbeeCurtainControllerState({});
            if (data.curtain_state != null) {
                message.curtain_state = data.curtain_state;
            }
            return message;
        }
        toObject() {
            const data: {
                curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
            } = {};
            if (this.curtain_state != null) {
                data.curtain_state = this.curtain_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.curtain_state != dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION.CC_NONE)
                writer.writeEnum(1, this.curtain_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeCurtainControllerState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeCurtainControllerState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.curtain_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeCurtainControllerState {
            return ZigbeeCurtainControllerState.deserialize(bytes);
        }
    }
    export class ZigbeeCurtainControllerAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("curtain_state" in data && data.curtain_state != undefined) {
                    this.curtain_state = data.curtain_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get curtain_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION.CC_NONE) as dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }
        set curtain_state(value: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }): ZigbeeCurtainControllerAction {
            const message = new ZigbeeCurtainControllerAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.curtain_state != null) {
                message.curtain_state = data.curtain_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.curtain_state != null) {
                data.curtain_state = this.curtain_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.curtain_state != dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION.CC_NONE)
                writer.writeEnum(2, this.curtain_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeCurtainControllerAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeCurtainControllerAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.curtain_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeCurtainControllerAction {
            return ZigbeeCurtainControllerAction.deserialize(bytes);
        }
    }
    export class ZigbeeCurtainControllerProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invert_signal?: boolean;
            action_trigger_time?: number;
            motor_calibration_time?: number;
            rfremote_enabled?: boolean;
            curtain_type?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invert_signal" in data && data.invert_signal != undefined) {
                    this.invert_signal = data.invert_signal;
                }
                if ("action_trigger_time" in data && data.action_trigger_time != undefined) {
                    this.action_trigger_time = data.action_trigger_time;
                }
                if ("motor_calibration_time" in data && data.motor_calibration_time != undefined) {
                    this.motor_calibration_time = data.motor_calibration_time;
                }
                if ("rfremote_enabled" in data && data.rfremote_enabled != undefined) {
                    this.rfremote_enabled = data.rfremote_enabled;
                }
                if ("curtain_type" in data && data.curtain_type != undefined) {
                    this.curtain_type = data.curtain_type;
                }
            }
        }
        get invert_signal() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set invert_signal(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get action_trigger_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set action_trigger_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get motor_calibration_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set motor_calibration_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rfremote_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set rfremote_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get curtain_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON.CC_SLIDER) as dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON;
        }
        set curtain_type(value: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            invert_signal?: boolean;
            action_trigger_time?: number;
            motor_calibration_time?: number;
            rfremote_enabled?: boolean;
            curtain_type?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON;
        }): ZigbeeCurtainControllerProperties {
            const message = new ZigbeeCurtainControllerProperties({});
            if (data.invert_signal != null) {
                message.invert_signal = data.invert_signal;
            }
            if (data.action_trigger_time != null) {
                message.action_trigger_time = data.action_trigger_time;
            }
            if (data.motor_calibration_time != null) {
                message.motor_calibration_time = data.motor_calibration_time;
            }
            if (data.rfremote_enabled != null) {
                message.rfremote_enabled = data.rfremote_enabled;
            }
            if (data.curtain_type != null) {
                message.curtain_type = data.curtain_type;
            }
            return message;
        }
        toObject() {
            const data: {
                invert_signal?: boolean;
                action_trigger_time?: number;
                motor_calibration_time?: number;
                rfremote_enabled?: boolean;
                curtain_type?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON;
            } = {};
            if (this.invert_signal != null) {
                data.invert_signal = this.invert_signal;
            }
            if (this.action_trigger_time != null) {
                data.action_trigger_time = this.action_trigger_time;
            }
            if (this.motor_calibration_time != null) {
                data.motor_calibration_time = this.motor_calibration_time;
            }
            if (this.rfremote_enabled != null) {
                data.rfremote_enabled = this.rfremote_enabled;
            }
            if (this.curtain_type != null) {
                data.curtain_type = this.curtain_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invert_signal != false)
                writer.writeBool(1, this.invert_signal);
            if (this.action_trigger_time != 0)
                writer.writeInt32(2, this.action_trigger_time);
            if (this.motor_calibration_time != 0)
                writer.writeInt32(3, this.motor_calibration_time);
            if (this.rfremote_enabled != false)
                writer.writeBool(4, this.rfremote_enabled);
            if (this.curtain_type != dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON.CC_SLIDER)
                writer.writeEnum(5, this.curtain_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeCurtainControllerProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeCurtainControllerProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invert_signal = reader.readBool();
                        break;
                    case 2:
                        message.action_trigger_time = reader.readInt32();
                        break;
                    case 3:
                        message.motor_calibration_time = reader.readInt32();
                        break;
                    case 4:
                        message.rfremote_enabled = reader.readBool();
                        break;
                    case 5:
                        message.curtain_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeCurtainControllerProperties {
            return ZigbeeCurtainControllerProperties.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeCurtainController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            invert_signal?: boolean;
            rfremote_enabled?: boolean;
            is_hidden?: boolean;
            action_trigger_time?: number;
            motor_calibration_time?: number;
            curtain_type?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("invert_signal" in data && data.invert_signal != undefined) {
                    this.invert_signal = data.invert_signal;
                }
                if ("rfremote_enabled" in data && data.rfremote_enabled != undefined) {
                    this.rfremote_enabled = data.rfremote_enabled;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
                if ("action_trigger_time" in data && data.action_trigger_time != undefined) {
                    this.action_trigger_time = data.action_trigger_time;
                }
                if ("motor_calibration_time" in data && data.motor_calibration_time != undefined) {
                    this.motor_calibration_time = data.motor_calibration_time;
                }
                if ("curtain_type" in data && data.curtain_type != undefined) {
                    this.curtain_type = data.curtain_type;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get invert_signal() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set invert_signal(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get rfremote_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set rfremote_enabled(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get action_trigger_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set action_trigger_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get motor_calibration_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set motor_calibration_time(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get curtain_type() {
            return pb_1.Message.getFieldWithDefault(this, 11, dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON.CC_SLIDER) as dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON;
        }
        set curtain_type(value: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            invert_signal?: boolean;
            rfremote_enabled?: boolean;
            is_hidden?: boolean;
            action_trigger_time?: number;
            motor_calibration_time?: number;
            curtain_type?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON;
        }): ConfigureZigbeeCurtainController {
            const message = new ConfigureZigbeeCurtainController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.invert_signal != null) {
                message.invert_signal = data.invert_signal;
            }
            if (data.rfremote_enabled != null) {
                message.rfremote_enabled = data.rfremote_enabled;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            if (data.action_trigger_time != null) {
                message.action_trigger_time = data.action_trigger_time;
            }
            if (data.motor_calibration_time != null) {
                message.motor_calibration_time = data.motor_calibration_time;
            }
            if (data.curtain_type != null) {
                message.curtain_type = data.curtain_type;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
                invert_signal?: boolean;
                rfremote_enabled?: boolean;
                is_hidden?: boolean;
                action_trigger_time?: number;
                motor_calibration_time?: number;
                curtain_type?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.invert_signal != null) {
                data.invert_signal = this.invert_signal;
            }
            if (this.rfremote_enabled != null) {
                data.rfremote_enabled = this.rfremote_enabled;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            if (this.action_trigger_time != null) {
                data.action_trigger_time = this.action_trigger_time;
            }
            if (this.motor_calibration_time != null) {
                data.motor_calibration_time = this.motor_calibration_time;
            }
            if (this.curtain_type != null) {
                data.curtain_type = this.curtain_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_location.length)
                writer.writeString(3, this.device_location);
            if (this.invert_signal != false)
                writer.writeBool(6, this.invert_signal);
            if (this.rfremote_enabled != false)
                writer.writeBool(7, this.rfremote_enabled);
            if (this.is_hidden != false)
                writer.writeBool(8, this.is_hidden);
            if (this.action_trigger_time != 0)
                writer.writeInt32(9, this.action_trigger_time);
            if (this.motor_calibration_time != 0)
                writer.writeInt32(10, this.motor_calibration_time);
            if (this.curtain_type != dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ICON.CC_SLIDER)
                writer.writeEnum(11, this.curtain_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeCurtainController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeCurtainController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_location = reader.readString();
                        break;
                    case 6:
                        message.invert_signal = reader.readBool();
                        break;
                    case 7:
                        message.rfremote_enabled = reader.readBool();
                        break;
                    case 8:
                        message.is_hidden = reader.readBool();
                        break;
                    case 9:
                        message.action_trigger_time = reader.readInt32();
                        break;
                    case 10:
                        message.motor_calibration_time = reader.readInt32();
                        break;
                    case 11:
                        message.curtain_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeCurtainController {
            return ConfigureZigbeeCurtainController.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeCurtainControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureZigbeeCurtainControllerResponse {
            const message = new ConfigureZigbeeCurtainControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeCurtainControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeCurtainControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeCurtainControllerResponse {
            return ConfigureZigbeeCurtainControllerResponse.deserialize(bytes);
        }
    }
    export class UpdateZigbeeCurtainControllerState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("curtain_state" in data && data.curtain_state != undefined) {
                    this.curtain_state = data.curtain_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get curtain_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION.CC_NONE) as dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }
        set curtain_state(value: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }): UpdateZigbeeCurtainControllerState {
            const message = new UpdateZigbeeCurtainControllerState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.curtain_state != null) {
                message.curtain_state = data.curtain_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.curtain_state != null) {
                data.curtain_state = this.curtain_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.curtain_state != dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION.CC_NONE)
                writer.writeEnum(2, this.curtain_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeCurtainControllerState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeCurtainControllerState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.curtain_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeCurtainControllerState {
            return UpdateZigbeeCurtainControllerState.deserialize(bytes);
        }
    }
    export class UpdateZigbeeCurtainControllerStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateZigbeeCurtainControllerStateResponse {
            const message = new UpdateZigbeeCurtainControllerStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeCurtainControllerStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeCurtainControllerStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeCurtainControllerStateResponse {
            return UpdateZigbeeCurtainControllerStateResponse.deserialize(bytes);
        }
    }
    export class MoveZigbeeCurtainControllerRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveZigbeeCurtainControllerRoom {
            const message = new MoveZigbeeCurtainControllerRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeCurtainControllerRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeCurtainControllerRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeCurtainControllerRoom {
            return MoveZigbeeCurtainControllerRoom.deserialize(bytes);
        }
    }
    export class MoveZigbeeCurtainControllerRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveZigbeeCurtainControllerRoomResponse {
            const message = new MoveZigbeeCurtainControllerRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeCurtainControllerRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeCurtainControllerRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeCurtainControllerRoomResponse {
            return MoveZigbeeCurtainControllerRoomResponse.deserialize(bytes);
        }
    }
    export class ResetZigbeeCurtainController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): ResetZigbeeCurtainController {
            const message = new ResetZigbeeCurtainController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeCurtainController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeCurtainController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeCurtainController {
            return ResetZigbeeCurtainController.deserialize(bytes);
        }
    }
    export class ResetZigbeeCurtainControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetZigbeeCurtainControllerResponse {
            const message = new ResetZigbeeCurtainControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeCurtainControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeCurtainControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeCurtainControllerResponse {
            return ResetZigbeeCurtainControllerResponse.deserialize(bytes);
        }
    }
    export class ReportZigbeeCurtainControllerActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("curtain_state" in data && data.curtain_state != undefined) {
                    this.curtain_state = data.curtain_state;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get curtain_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION.CC_NONE) as dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
        }
        set curtain_state(value: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION) {
            pb_1.Message.setField(this, 2, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            device_id?: string;
            curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
            activity_time?: number;
        }): ReportZigbeeCurtainControllerActivity {
            const message = new ReportZigbeeCurtainControllerActivity({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.curtain_state != null) {
                message.curtain_state = data.curtain_state;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                curtain_state?: dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION;
                activity_time?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.curtain_state != null) {
                data.curtain_state = this.curtain_state;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.curtain_state != dependency_1.com.keus.hub.CURTAIN_CONTROLLER_ACTION.CC_NONE)
                writer.writeEnum(2, this.curtain_state);
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportZigbeeCurtainControllerActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportZigbeeCurtainControllerActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.curtain_state = reader.readEnum();
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportZigbeeCurtainControllerActivity {
            return ReportZigbeeCurtainControllerActivity.deserialize(bytes);
        }
    }
    export class ZigbeeCurtainControllerEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_state?: UpdateZigbeeCurtainControllerState;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_state" in data && data.update_state != undefined) {
                    this.update_state = data.update_state;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get update_state() {
            return pb_1.Message.getWrapperField(this, UpdateZigbeeCurtainControllerState, 1) as UpdateZigbeeCurtainControllerState;
        }
        set update_state(value: UpdateZigbeeCurtainControllerState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_update_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_state?: ReturnType<typeof UpdateZigbeeCurtainControllerState.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): ZigbeeCurtainControllerEvent {
            const message = new ZigbeeCurtainControllerEvent({});
            if (data.update_state != null) {
                message.update_state = UpdateZigbeeCurtainControllerState.fromObject(data.update_state);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                update_state?: ReturnType<typeof UpdateZigbeeCurtainControllerState.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.update_state != null) {
                data.update_state = this.update_state.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_update_state)
                writer.writeMessage(1, this.update_state, () => this.update_state.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeCurtainControllerEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeCurtainControllerEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.update_state, () => message.update_state = UpdateZigbeeCurtainControllerState.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeCurtainControllerEvent {
            return ZigbeeCurtainControllerEvent.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeCurtainController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceZigbeeCurtainController {
            const message = new ReplaceZigbeeCurtainController({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeCurtainController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeCurtainController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeCurtainController {
            return ReplaceZigbeeCurtainController.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeCurtainControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceZigbeeCurtainControllerResponse {
            const message = new ReplaceZigbeeCurtainControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeCurtainControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeCurtainControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeCurtainControllerResponse {
            return ReplaceZigbeeCurtainControllerResponse.deserialize(bytes);
        }
    }
    export class RenameZigbeeCurtainController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
        }): RenameZigbeeCurtainController {
            const message = new RenameZigbeeCurtainController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeCurtainController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeCurtainController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeCurtainController {
            return RenameZigbeeCurtainController.deserialize(bytes);
        }
    }
    export class RenameZigbeeCurtainControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameZigbeeCurtainControllerResponse {
            const message = new RenameZigbeeCurtainControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeCurtainControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeCurtainControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeCurtainControllerResponse {
            return RenameZigbeeCurtainControllerResponse.deserialize(bytes);
        }
    }
}
