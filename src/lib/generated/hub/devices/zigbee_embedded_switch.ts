/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/zigbee_embedded_switch.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./device_constants";
import * as dependency_2 from "./../activity/activity_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class EmbeddedApplianceAction extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6]];
        constructor(data?: any[] | ({
            device_id?: string;
            appliance_id?: string;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
        } & (({
            on_off_state?: OnOffApplianceState;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: SingleDimmerApplianceState;
            fan_state?: never;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: FanApplianceState;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: ColorTunableApplianceState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("on_off_state" in data && data.on_off_state != undefined) {
                    this.on_off_state = data.on_off_state;
                }
                if ("single_dimmer_state" in data && data.single_dimmer_state != undefined) {
                    this.single_dimmer_state = data.single_dimmer_state;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("color_tunable_state" in data && data.color_tunable_state != undefined) {
                    this.color_tunable_state = data.color_tunable_state;
                }
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get on_off_state() {
            return pb_1.Message.getWrapperField(this, OnOffApplianceState, 3) as OnOffApplianceState;
        }
        set on_off_state(value: OnOffApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_on_off_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get single_dimmer_state() {
            return pb_1.Message.getWrapperField(this, SingleDimmerApplianceState, 4) as SingleDimmerApplianceState;
        }
        set single_dimmer_state(value: SingleDimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_single_dimmer_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get fan_state() {
            return pb_1.Message.getWrapperField(this, FanApplianceState, 5) as FanApplianceState;
        }
        set fan_state(value: FanApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_fan_state() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get color_tunable_state() {
            return pb_1.Message.getWrapperField(this, ColorTunableApplianceState, 6) as ColorTunableApplianceState;
        }
        set color_tunable_state(value: ColorTunableApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_color_tunable_state() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES.ON_OFF) as dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
        }
        set appliance_type(value: dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES) {
            pb_1.Message.setField(this, 7, value);
        }
        get appliance_state() {
            const cases: {
                [index: number]: "none" | "on_off_state" | "single_dimmer_state" | "fan_state" | "color_tunable_state";
            } = {
                0: "none",
                3: "on_off_state",
                4: "single_dimmer_state",
                5: "fan_state",
                6: "color_tunable_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6])];
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
            on_off_state?: ReturnType<typeof OnOffApplianceState.prototype.toObject>;
            single_dimmer_state?: ReturnType<typeof SingleDimmerApplianceState.prototype.toObject>;
            fan_state?: ReturnType<typeof FanApplianceState.prototype.toObject>;
            color_tunable_state?: ReturnType<typeof ColorTunableApplianceState.prototype.toObject>;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
        }): EmbeddedApplianceAction {
            const message = new EmbeddedApplianceAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.on_off_state != null) {
                message.on_off_state = OnOffApplianceState.fromObject(data.on_off_state);
            }
            if (data.single_dimmer_state != null) {
                message.single_dimmer_state = SingleDimmerApplianceState.fromObject(data.single_dimmer_state);
            }
            if (data.fan_state != null) {
                message.fan_state = FanApplianceState.fromObject(data.fan_state);
            }
            if (data.color_tunable_state != null) {
                message.color_tunable_state = ColorTunableApplianceState.fromObject(data.color_tunable_state);
            }
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
                on_off_state?: ReturnType<typeof OnOffApplianceState.prototype.toObject>;
                single_dimmer_state?: ReturnType<typeof SingleDimmerApplianceState.prototype.toObject>;
                fan_state?: ReturnType<typeof FanApplianceState.prototype.toObject>;
                color_tunable_state?: ReturnType<typeof ColorTunableApplianceState.prototype.toObject>;
                appliance_type?: dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.on_off_state != null) {
                data.on_off_state = this.on_off_state.toObject();
            }
            if (this.single_dimmer_state != null) {
                data.single_dimmer_state = this.single_dimmer_state.toObject();
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state.toObject();
            }
            if (this.color_tunable_state != null) {
                data.color_tunable_state = this.color_tunable_state.toObject();
            }
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (this.has_on_off_state)
                writer.writeMessage(3, this.on_off_state, () => this.on_off_state.serialize(writer));
            if (this.has_single_dimmer_state)
                writer.writeMessage(4, this.single_dimmer_state, () => this.single_dimmer_state.serialize(writer));
            if (this.has_fan_state)
                writer.writeMessage(5, this.fan_state, () => this.fan_state.serialize(writer));
            if (this.has_color_tunable_state)
                writer.writeMessage(6, this.color_tunable_state, () => this.color_tunable_state.serialize(writer));
            if (this.appliance_type != dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES.ON_OFF)
                writer.writeEnum(7, this.appliance_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddedApplianceAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddedApplianceAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.on_off_state, () => message.on_off_state = OnOffApplianceState.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.single_dimmer_state, () => message.single_dimmer_state = SingleDimmerApplianceState.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.fan_state, () => message.fan_state = FanApplianceState.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.color_tunable_state, () => message.color_tunable_state = ColorTunableApplianceState.deserialize(reader));
                        break;
                    case 7:
                        message.appliance_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddedApplianceAction {
            return EmbeddedApplianceAction.deserialize(bytes);
        }
    }
    export class ApplianceidDeviceidDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
        }): ApplianceidDeviceidDetails {
            const message = new ApplianceidDeviceidDetails({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplianceidDeviceidDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplianceidDeviceidDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApplianceidDeviceidDetails {
            return ApplianceidDeviceidDetails.deserialize(bytes);
        }
    }
    export class OnOffApplianceGroupProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_list?: ApplianceidDeviceidDetails[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_list" in data && data.device_list != undefined) {
                    this.device_list = data.device_list;
                }
            }
        }
        get device_list() {
            return pb_1.Message.getRepeatedWrapperField(this, ApplianceidDeviceidDetails, 1) as ApplianceidDeviceidDetails[];
        }
        set device_list(value: ApplianceidDeviceidDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            device_list?: ReturnType<typeof ApplianceidDeviceidDetails.prototype.toObject>[];
        }): OnOffApplianceGroupProperties {
            const message = new OnOffApplianceGroupProperties({});
            if (data.device_list != null) {
                message.device_list = data.device_list.map(item => ApplianceidDeviceidDetails.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                device_list?: ReturnType<typeof ApplianceidDeviceidDetails.prototype.toObject>[];
            } = {};
            if (this.device_list != null) {
                data.device_list = this.device_list.map((item: ApplianceidDeviceidDetails) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_list.length)
                writer.writeRepeatedMessage(1, this.device_list, (item: ApplianceidDeviceidDetails) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnOffApplianceGroupProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnOffApplianceGroupProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.device_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ApplianceidDeviceidDetails.deserialize(reader), ApplianceidDeviceidDetails));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnOffApplianceGroupProperties {
            return OnOffApplianceGroupProperties.deserialize(bytes);
        }
    }
    export class FanApplianceGroupProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_list?: ApplianceidDeviceidDetails[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_list" in data && data.device_list != undefined) {
                    this.device_list = data.device_list;
                }
            }
        }
        get device_list() {
            return pb_1.Message.getRepeatedWrapperField(this, ApplianceidDeviceidDetails, 1) as ApplianceidDeviceidDetails[];
        }
        set device_list(value: ApplianceidDeviceidDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            device_list?: ReturnType<typeof ApplianceidDeviceidDetails.prototype.toObject>[];
        }): FanApplianceGroupProperties {
            const message = new FanApplianceGroupProperties({});
            if (data.device_list != null) {
                message.device_list = data.device_list.map(item => ApplianceidDeviceidDetails.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                device_list?: ReturnType<typeof ApplianceidDeviceidDetails.prototype.toObject>[];
            } = {};
            if (this.device_list != null) {
                data.device_list = this.device_list.map((item: ApplianceidDeviceidDetails) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_list.length)
                writer.writeRepeatedMessage(1, this.device_list, (item: ApplianceidDeviceidDetails) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FanApplianceGroupProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FanApplianceGroupProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.device_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ApplianceidDeviceidDetails.deserialize(reader), ApplianceidDeviceidDetails));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FanApplianceGroupProperties {
            return FanApplianceGroupProperties.deserialize(bytes);
        }
    }
    export class SingleDimmerApplianceGroupProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_list?: ApplianceidDeviceidDetails[];
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            min_value?: number;
            max_value?: number;
            default_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_list" in data && data.device_list != undefined) {
                    this.device_list = data.device_list;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("fade_off" in data && data.fade_off != undefined) {
                    this.fade_off = data.fade_off;
                }
                if ("fade_down" in data && data.fade_down != undefined) {
                    this.fade_down = data.fade_down;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("default_state" in data && data.default_state != undefined) {
                    this.default_state = data.default_state;
                }
            }
        }
        get device_list() {
            return pb_1.Message.getRepeatedWrapperField(this, ApplianceidDeviceidDetails, 1) as ApplianceidDeviceidDetails[];
        }
        set device_list(value: ApplianceidDeviceidDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get fade_off() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set fade_off(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get fade_down() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set fade_down(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get min_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set min_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get default_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set default_state(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            device_list?: ReturnType<typeof ApplianceidDeviceidDetails.prototype.toObject>[];
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            min_value?: number;
            max_value?: number;
            default_state?: number;
        }): SingleDimmerApplianceGroupProperties {
            const message = new SingleDimmerApplianceGroupProperties({});
            if (data.device_list != null) {
                message.device_list = data.device_list.map(item => ApplianceidDeviceidDetails.fromObject(item));
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.fade_off != null) {
                message.fade_off = data.fade_off;
            }
            if (data.fade_down != null) {
                message.fade_down = data.fade_down;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.default_state != null) {
                message.default_state = data.default_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_list?: ReturnType<typeof ApplianceidDeviceidDetails.prototype.toObject>[];
                fade_time?: number;
                fade_off?: number;
                fade_down?: number;
                min_value?: number;
                max_value?: number;
                default_state?: number;
            } = {};
            if (this.device_list != null) {
                data.device_list = this.device_list.map((item: ApplianceidDeviceidDetails) => item.toObject());
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.fade_off != null) {
                data.fade_off = this.fade_off;
            }
            if (this.fade_down != null) {
                data.fade_down = this.fade_down;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.default_state != null) {
                data.default_state = this.default_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_list.length)
                writer.writeRepeatedMessage(1, this.device_list, (item: ApplianceidDeviceidDetails) => item.serialize(writer));
            if (this.fade_time != 0)
                writer.writeInt32(2, this.fade_time);
            if (this.fade_off != 0)
                writer.writeInt32(6, this.fade_off);
            if (this.fade_down != 0)
                writer.writeInt32(7, this.fade_down);
            if (this.min_value != 0)
                writer.writeInt32(3, this.min_value);
            if (this.max_value != 0)
                writer.writeInt32(4, this.max_value);
            if (this.default_state != 0)
                writer.writeInt32(5, this.default_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleDimmerApplianceGroupProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleDimmerApplianceGroupProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.device_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ApplianceidDeviceidDetails.deserialize(reader), ApplianceidDeviceidDetails));
                        break;
                    case 2:
                        message.fade_time = reader.readInt32();
                        break;
                    case 6:
                        message.fade_off = reader.readInt32();
                        break;
                    case 7:
                        message.fade_down = reader.readInt32();
                        break;
                    case 3:
                        message.min_value = reader.readInt32();
                        break;
                    case 4:
                        message.max_value = reader.readInt32();
                        break;
                    case 5:
                        message.default_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleDimmerApplianceGroupProperties {
            return SingleDimmerApplianceGroupProperties.deserialize(bytes);
        }
    }
    export class ColorTunableApplianceGroupProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_list?: ApplianceidDeviceidDetails[];
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            min_value?: number;
            max_value?: number;
            default_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_list" in data && data.device_list != undefined) {
                    this.device_list = data.device_list;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("fade_off" in data && data.fade_off != undefined) {
                    this.fade_off = data.fade_off;
                }
                if ("fade_down" in data && data.fade_down != undefined) {
                    this.fade_down = data.fade_down;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("default_state" in data && data.default_state != undefined) {
                    this.default_state = data.default_state;
                }
            }
        }
        get device_list() {
            return pb_1.Message.getRepeatedWrapperField(this, ApplianceidDeviceidDetails, 1) as ApplianceidDeviceidDetails[];
        }
        set device_list(value: ApplianceidDeviceidDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get fade_off() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set fade_off(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get fade_down() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set fade_down(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get min_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set min_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get default_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set default_state(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            device_list?: ReturnType<typeof ApplianceidDeviceidDetails.prototype.toObject>[];
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            min_value?: number;
            max_value?: number;
            default_state?: number;
        }): ColorTunableApplianceGroupProperties {
            const message = new ColorTunableApplianceGroupProperties({});
            if (data.device_list != null) {
                message.device_list = data.device_list.map(item => ApplianceidDeviceidDetails.fromObject(item));
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.fade_off != null) {
                message.fade_off = data.fade_off;
            }
            if (data.fade_down != null) {
                message.fade_down = data.fade_down;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.default_state != null) {
                message.default_state = data.default_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_list?: ReturnType<typeof ApplianceidDeviceidDetails.prototype.toObject>[];
                fade_time?: number;
                fade_off?: number;
                fade_down?: number;
                min_value?: number;
                max_value?: number;
                default_state?: number;
            } = {};
            if (this.device_list != null) {
                data.device_list = this.device_list.map((item: ApplianceidDeviceidDetails) => item.toObject());
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.fade_off != null) {
                data.fade_off = this.fade_off;
            }
            if (this.fade_down != null) {
                data.fade_down = this.fade_down;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.default_state != null) {
                data.default_state = this.default_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_list.length)
                writer.writeRepeatedMessage(1, this.device_list, (item: ApplianceidDeviceidDetails) => item.serialize(writer));
            if (this.fade_time != 0)
                writer.writeInt32(2, this.fade_time);
            if (this.fade_off != 0)
                writer.writeInt32(6, this.fade_off);
            if (this.fade_down != 0)
                writer.writeInt32(7, this.fade_down);
            if (this.min_value != 0)
                writer.writeInt32(3, this.min_value);
            if (this.max_value != 0)
                writer.writeInt32(4, this.max_value);
            if (this.default_state != 0)
                writer.writeInt32(5, this.default_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColorTunableApplianceGroupProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColorTunableApplianceGroupProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.device_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ApplianceidDeviceidDetails.deserialize(reader), ApplianceidDeviceidDetails));
                        break;
                    case 2:
                        message.fade_time = reader.readInt32();
                        break;
                    case 6:
                        message.fade_off = reader.readInt32();
                        break;
                    case 7:
                        message.fade_down = reader.readInt32();
                        break;
                    case 3:
                        message.min_value = reader.readInt32();
                        break;
                    case 4:
                        message.max_value = reader.readInt32();
                        break;
                    case 5:
                        message.default_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ColorTunableApplianceGroupProperties {
            return ColorTunableApplianceGroupProperties.deserialize(bytes);
        }
    }
    export class EmbeddedSwitchPort extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            port_id?: number;
            port_state?: number;
            is_in_appliance?: boolean;
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("port_state" in data && data.port_state != undefined) {
                    this.port_state = data.port_state;
                }
                if ("is_in_appliance" in data && data.is_in_appliance != undefined) {
                    this.is_in_appliance = data.is_in_appliance;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get port_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_in_appliance() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_in_appliance(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            port_id?: number;
            port_state?: number;
            is_in_appliance?: boolean;
            appliance_id?: string;
        }): EmbeddedSwitchPort {
            const message = new EmbeddedSwitchPort({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.port_state != null) {
                message.port_state = data.port_state;
            }
            if (data.is_in_appliance != null) {
                message.is_in_appliance = data.is_in_appliance;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: number;
                port_state?: number;
                is_in_appliance?: boolean;
                appliance_id?: string;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.port_state != null) {
                data.port_state = this.port_state;
            }
            if (this.is_in_appliance != null) {
                data.is_in_appliance = this.is_in_appliance;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.port_id != 0)
                writer.writeUint32(1, this.port_id);
            if (this.port_state != 0)
                writer.writeUint32(2, this.port_state);
            if (this.is_in_appliance != false)
                writer.writeBool(3, this.is_in_appliance);
            if (this.appliance_id.length)
                writer.writeString(4, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddedSwitchPort {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddedSwitchPort();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readUint32();
                        break;
                    case 2:
                        message.port_state = reader.readUint32();
                        break;
                    case 3:
                        message.is_in_appliance = reader.readBool();
                        break;
                    case 4:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddedSwitchPort {
            return EmbeddedSwitchPort.deserialize(bytes);
        }
    }
    export class OnOffApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            switch_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("switch_state" in data && data.switch_state != undefined) {
                    this.switch_state = data.switch_state;
                }
            }
        }
        get switch_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set switch_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            switch_state?: number;
        }): OnOffApplianceState {
            const message = new OnOffApplianceState({});
            if (data.switch_state != null) {
                message.switch_state = data.switch_state;
            }
            return message;
        }
        toObject() {
            const data: {
                switch_state?: number;
            } = {};
            if (this.switch_state != null) {
                data.switch_state = this.switch_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.switch_state != 0)
                writer.writeUint32(1, this.switch_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnOffApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnOffApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.switch_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnOffApplianceState {
            return OnOffApplianceState.deserialize(bytes);
        }
    }
    export class OnOffApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            port_id?: number;
        }): OnOffApplianceProperties {
            const message = new OnOffApplianceProperties({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: number;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.port_id != 0)
                writer.writeUint32(1, this.port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnOffApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnOffApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnOffApplianceProperties {
            return OnOffApplianceProperties.deserialize(bytes);
        }
    }
    export class SingleDimmerApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            switch_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("switch_state" in data && data.switch_state != undefined) {
                    this.switch_state = data.switch_state;
                }
            }
        }
        get switch_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set switch_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            switch_state?: number;
        }): SingleDimmerApplianceState {
            const message = new SingleDimmerApplianceState({});
            if (data.switch_state != null) {
                message.switch_state = data.switch_state;
            }
            return message;
        }
        toObject() {
            const data: {
                switch_state?: number;
            } = {};
            if (this.switch_state != null) {
                data.switch_state = this.switch_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.switch_state != 0)
                writer.writeUint32(1, this.switch_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleDimmerApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleDimmerApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.switch_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleDimmerApplianceState {
            return SingleDimmerApplianceState.deserialize(bytes);
        }
    }
    export class SingleDimmerApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            port_id?: number;
            fade_time?: number;
            fade_Off?: number;
            fade_down?: number;
            min_value?: number;
            max_value?: number;
            default_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("fade_Off" in data && data.fade_Off != undefined) {
                    this.fade_Off = data.fade_Off;
                }
                if ("fade_down" in data && data.fade_down != undefined) {
                    this.fade_down = data.fade_down;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("default_state" in data && data.default_state != undefined) {
                    this.default_state = data.default_state;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get fade_Off() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set fade_Off(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get fade_down() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set fade_down(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get min_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set min_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get default_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set default_state(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            port_id?: number;
            fade_time?: number;
            fade_Off?: number;
            fade_down?: number;
            min_value?: number;
            max_value?: number;
            default_state?: number;
        }): SingleDimmerApplianceProperties {
            const message = new SingleDimmerApplianceProperties({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.fade_Off != null) {
                message.fade_Off = data.fade_Off;
            }
            if (data.fade_down != null) {
                message.fade_down = data.fade_down;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.default_state != null) {
                message.default_state = data.default_state;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: number;
                fade_time?: number;
                fade_Off?: number;
                fade_down?: number;
                min_value?: number;
                max_value?: number;
                default_state?: number;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.fade_Off != null) {
                data.fade_Off = this.fade_Off;
            }
            if (this.fade_down != null) {
                data.fade_down = this.fade_down;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.default_state != null) {
                data.default_state = this.default_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.port_id != 0)
                writer.writeUint32(1, this.port_id);
            if (this.fade_time != 0)
                writer.writeInt32(2, this.fade_time);
            if (this.fade_Off != 0)
                writer.writeInt32(6, this.fade_Off);
            if (this.fade_down != 0)
                writer.writeInt32(7, this.fade_down);
            if (this.min_value != 0)
                writer.writeInt32(3, this.min_value);
            if (this.max_value != 0)
                writer.writeInt32(4, this.max_value);
            if (this.default_state != 0)
                writer.writeInt32(5, this.default_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleDimmerApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleDimmerApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readUint32();
                        break;
                    case 2:
                        message.fade_time = reader.readInt32();
                        break;
                    case 6:
                        message.fade_Off = reader.readInt32();
                        break;
                    case 7:
                        message.fade_down = reader.readInt32();
                        break;
                    case 3:
                        message.min_value = reader.readInt32();
                        break;
                    case 4:
                        message.max_value = reader.readInt32();
                        break;
                    case 5:
                        message.default_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleDimmerApplianceProperties {
            return SingleDimmerApplianceProperties.deserialize(bytes);
        }
    }
    export class FanApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fan_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
            }
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fan_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            fan_state?: number;
        }): FanApplianceState {
            const message = new FanApplianceState({});
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            return message;
        }
        toObject() {
            const data: {
                fan_state?: number;
            } = {};
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fan_state != 0)
                writer.writeUint32(1, this.fan_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FanApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FanApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fan_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FanApplianceState {
            return FanApplianceState.deserialize(bytes);
        }
    }
    export class FanApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            port_id?: number;
        }): FanApplianceProperties {
            const message = new FanApplianceProperties({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: number;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.port_id != 0)
                writer.writeUint32(1, this.port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FanApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FanApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FanApplianceProperties {
            return FanApplianceProperties.deserialize(bytes);
        }
    }
    export class ColorTunableApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            light_state?: number;
            warm_white_state?: number;
            cool_white_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("warm_white_state" in data && data.warm_white_state != undefined) {
                    this.warm_white_state = data.warm_white_state;
                }
                if ("cool_white_state" in data && data.cool_white_state != undefined) {
                    this.cool_white_state = data.cool_white_state;
                }
            }
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get warm_white_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set warm_white_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get cool_white_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set cool_white_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            light_state?: number;
            warm_white_state?: number;
            cool_white_state?: number;
        }): ColorTunableApplianceState {
            const message = new ColorTunableApplianceState({});
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.warm_white_state != null) {
                message.warm_white_state = data.warm_white_state;
            }
            if (data.cool_white_state != null) {
                message.cool_white_state = data.cool_white_state;
            }
            return message;
        }
        toObject() {
            const data: {
                light_state?: number;
                warm_white_state?: number;
                cool_white_state?: number;
            } = {};
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.warm_white_state != null) {
                data.warm_white_state = this.warm_white_state;
            }
            if (this.cool_white_state != null) {
                data.cool_white_state = this.cool_white_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.light_state != 0)
                writer.writeUint32(1, this.light_state);
            if (this.warm_white_state != 0)
                writer.writeUint32(2, this.warm_white_state);
            if (this.cool_white_state != 0)
                writer.writeUint32(3, this.cool_white_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColorTunableApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColorTunableApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.light_state = reader.readUint32();
                        break;
                    case 2:
                        message.warm_white_state = reader.readUint32();
                        break;
                    case 3:
                        message.cool_white_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ColorTunableApplianceState {
            return ColorTunableApplianceState.deserialize(bytes);
        }
    }
    export class ColorTunableApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            warm_white_port?: number;
            cool_white_port?: number;
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            min_value?: number;
            max_value?: number;
            default_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("warm_white_port" in data && data.warm_white_port != undefined) {
                    this.warm_white_port = data.warm_white_port;
                }
                if ("cool_white_port" in data && data.cool_white_port != undefined) {
                    this.cool_white_port = data.cool_white_port;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("fade_off" in data && data.fade_off != undefined) {
                    this.fade_off = data.fade_off;
                }
                if ("fade_down" in data && data.fade_down != undefined) {
                    this.fade_down = data.fade_down;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("default_state" in data && data.default_state != undefined) {
                    this.default_state = data.default_state;
                }
            }
        }
        get warm_white_port() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set warm_white_port(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cool_white_port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cool_white_port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get fade_off() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set fade_off(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get fade_down() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set fade_down(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get min_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get max_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_value(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get default_state() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set default_state(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            warm_white_port?: number;
            cool_white_port?: number;
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            min_value?: number;
            max_value?: number;
            default_state?: number;
        }): ColorTunableApplianceProperties {
            const message = new ColorTunableApplianceProperties({});
            if (data.warm_white_port != null) {
                message.warm_white_port = data.warm_white_port;
            }
            if (data.cool_white_port != null) {
                message.cool_white_port = data.cool_white_port;
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.fade_off != null) {
                message.fade_off = data.fade_off;
            }
            if (data.fade_down != null) {
                message.fade_down = data.fade_down;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.default_state != null) {
                message.default_state = data.default_state;
            }
            return message;
        }
        toObject() {
            const data: {
                warm_white_port?: number;
                cool_white_port?: number;
                fade_time?: number;
                fade_off?: number;
                fade_down?: number;
                min_value?: number;
                max_value?: number;
                default_state?: number;
            } = {};
            if (this.warm_white_port != null) {
                data.warm_white_port = this.warm_white_port;
            }
            if (this.cool_white_port != null) {
                data.cool_white_port = this.cool_white_port;
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.fade_off != null) {
                data.fade_off = this.fade_off;
            }
            if (this.fade_down != null) {
                data.fade_down = this.fade_down;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.default_state != null) {
                data.default_state = this.default_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.warm_white_port != 0)
                writer.writeUint32(1, this.warm_white_port);
            if (this.cool_white_port != 0)
                writer.writeUint32(2, this.cool_white_port);
            if (this.fade_time != 0)
                writer.writeInt32(3, this.fade_time);
            if (this.fade_off != 0)
                writer.writeInt32(7, this.fade_off);
            if (this.fade_down != 0)
                writer.writeInt32(8, this.fade_down);
            if (this.min_value != 0)
                writer.writeInt32(4, this.min_value);
            if (this.max_value != 0)
                writer.writeInt32(5, this.max_value);
            if (this.default_state != 0)
                writer.writeInt32(6, this.default_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColorTunableApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColorTunableApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.warm_white_port = reader.readUint32();
                        break;
                    case 2:
                        message.cool_white_port = reader.readUint32();
                        break;
                    case 3:
                        message.fade_time = reader.readInt32();
                        break;
                    case 7:
                        message.fade_off = reader.readInt32();
                        break;
                    case 8:
                        message.fade_down = reader.readInt32();
                        break;
                    case 4:
                        message.min_value = reader.readInt32();
                        break;
                    case 5:
                        message.max_value = reader.readInt32();
                        break;
                    case 6:
                        message.default_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ColorTunableApplianceProperties {
            return ColorTunableApplianceProperties.deserialize(bytes);
        }
    }
    export class GroupOnOffApplianceAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            room_id?: string;
            switch_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("switch_state" in data && data.switch_state != undefined) {
                    this.switch_state = data.switch_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get switch_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set switch_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            room_id?: string;
            switch_state?: number;
        }): GroupOnOffApplianceAction {
            const message = new GroupOnOffApplianceAction({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.switch_state != null) {
                message.switch_state = data.switch_state;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                room_id?: string;
                switch_state?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.switch_state != null) {
                data.switch_state = this.switch_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (this.switch_state != 0)
                writer.writeUint32(3, this.switch_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupOnOffApplianceAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupOnOffApplianceAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    case 3:
                        message.switch_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupOnOffApplianceAction {
            return GroupOnOffApplianceAction.deserialize(bytes);
        }
    }
    export class GroupSingleDimmerApplianceAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            room_id?: string;
            switch_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("switch_state" in data && data.switch_state != undefined) {
                    this.switch_state = data.switch_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get switch_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set switch_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            room_id?: string;
            switch_state?: number;
        }): GroupSingleDimmerApplianceAction {
            const message = new GroupSingleDimmerApplianceAction({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.switch_state != null) {
                message.switch_state = data.switch_state;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                room_id?: string;
                switch_state?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.switch_state != null) {
                data.switch_state = this.switch_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (this.switch_state != 0)
                writer.writeUint32(3, this.switch_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupSingleDimmerApplianceAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupSingleDimmerApplianceAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    case 3:
                        message.switch_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupSingleDimmerApplianceAction {
            return GroupSingleDimmerApplianceAction.deserialize(bytes);
        }
    }
    export class GroupFanApplianceAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            room_id?: string;
            fan_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set fan_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            room_id?: string;
            fan_state?: number;
        }): GroupFanApplianceAction {
            const message = new GroupFanApplianceAction({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                room_id?: string;
                fan_state?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (this.fan_state != 0)
                writer.writeUint32(3, this.fan_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupFanApplianceAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupFanApplianceAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    case 3:
                        message.fan_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupFanApplianceAction {
            return GroupFanApplianceAction.deserialize(bytes);
        }
    }
    export class GroupColorTunableApplianceAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            room_id?: string;
            light_state?: number;
            warm_white_state?: number;
            cool_white_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("warm_white_state" in data && data.warm_white_state != undefined) {
                    this.warm_white_state = data.warm_white_state;
                }
                if ("cool_white_state" in data && data.cool_white_state != undefined) {
                    this.cool_white_state = data.cool_white_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get warm_white_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set warm_white_state(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get cool_white_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set cool_white_state(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            group_id?: number;
            room_id?: string;
            light_state?: number;
            warm_white_state?: number;
            cool_white_state?: number;
        }): GroupColorTunableApplianceAction {
            const message = new GroupColorTunableApplianceAction({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.warm_white_state != null) {
                message.warm_white_state = data.warm_white_state;
            }
            if (data.cool_white_state != null) {
                message.cool_white_state = data.cool_white_state;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                room_id?: string;
                light_state?: number;
                warm_white_state?: number;
                cool_white_state?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.warm_white_state != null) {
                data.warm_white_state = this.warm_white_state;
            }
            if (this.cool_white_state != null) {
                data.cool_white_state = this.cool_white_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (this.light_state != 0)
                writer.writeUint32(3, this.light_state);
            if (this.warm_white_state != 0)
                writer.writeUint32(4, this.warm_white_state);
            if (this.cool_white_state != 0)
                writer.writeUint32(5, this.cool_white_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupColorTunableApplianceAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupColorTunableApplianceAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    case 3:
                        message.light_state = reader.readUint32();
                        break;
                    case 4:
                        message.warm_white_state = reader.readUint32();
                        break;
                    case 5:
                        message.cool_white_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupColorTunableApplianceAction {
            return GroupColorTunableApplianceAction.deserialize(bytes);
        }
    }
    export class EmbeddedAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [[5, 6, 7, 8], [9, 10, 11, 12], [14, 15, 16, 17]];
        constructor(data?: any[] | ({
            appliance_id?: string;
            appliance_name?: string;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            in_group?: boolean;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
            group_id?: number;
        } & (({
            on_off_state?: OnOffApplianceState;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: SingleDimmerApplianceState;
            fan_state?: never;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: FanApplianceState;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: ColorTunableApplianceState;
        }) | ({
            on_off_properties?: OnOffApplianceProperties;
            single_dimmer_properties?: never;
            fan_properties?: never;
            color_tunable_properties?: never;
        } | {
            on_off_properties?: never;
            single_dimmer_properties?: SingleDimmerApplianceProperties;
            fan_properties?: never;
            color_tunable_properties?: never;
        } | {
            on_off_properties?: never;
            single_dimmer_properties?: never;
            fan_properties?: FanApplianceProperties;
            color_tunable_properties?: never;
        } | {
            on_off_properties?: never;
            single_dimmer_properties?: never;
            fan_properties?: never;
            color_tunable_properties?: ColorTunableApplianceProperties;
        }) | ({
            on_off_default_state?: OnOffApplianceState;
            single_dimmer_default_state?: never;
            fan_default_state?: never;
            color_tunable_default_state?: never;
        } | {
            on_off_default_state?: never;
            single_dimmer_default_state?: SingleDimmerApplianceState;
            fan_default_state?: never;
            color_tunable_default_state?: never;
        } | {
            on_off_default_state?: never;
            single_dimmer_default_state?: never;
            fan_default_state?: FanApplianceState;
            color_tunable_default_state?: never;
        } | {
            on_off_default_state?: never;
            single_dimmer_default_state?: never;
            fan_default_state?: never;
            color_tunable_default_state?: ColorTunableApplianceState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_name" in data && data.appliance_name != undefined) {
                    this.appliance_name = data.appliance_name;
                }
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
                if ("on_off_state" in data && data.on_off_state != undefined) {
                    this.on_off_state = data.on_off_state;
                }
                if ("single_dimmer_state" in data && data.single_dimmer_state != undefined) {
                    this.single_dimmer_state = data.single_dimmer_state;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("color_tunable_state" in data && data.color_tunable_state != undefined) {
                    this.color_tunable_state = data.color_tunable_state;
                }
                if ("on_off_properties" in data && data.on_off_properties != undefined) {
                    this.on_off_properties = data.on_off_properties;
                }
                if ("single_dimmer_properties" in data && data.single_dimmer_properties != undefined) {
                    this.single_dimmer_properties = data.single_dimmer_properties;
                }
                if ("fan_properties" in data && data.fan_properties != undefined) {
                    this.fan_properties = data.fan_properties;
                }
                if ("color_tunable_properties" in data && data.color_tunable_properties != undefined) {
                    this.color_tunable_properties = data.color_tunable_properties;
                }
                if ("icon_type" in data && data.icon_type != undefined) {
                    this.icon_type = data.icon_type;
                }
                if ("on_off_default_state" in data && data.on_off_default_state != undefined) {
                    this.on_off_default_state = data.on_off_default_state;
                }
                if ("single_dimmer_default_state" in data && data.single_dimmer_default_state != undefined) {
                    this.single_dimmer_default_state = data.single_dimmer_default_state;
                }
                if ("fan_default_state" in data && data.fan_default_state != undefined) {
                    this.fan_default_state = data.fan_default_state;
                }
                if ("color_tunable_default_state" in data && data.color_tunable_default_state != undefined) {
                    this.color_tunable_default_state = data.color_tunable_default_state;
                }
                if ("in_group" in data && data.in_group != undefined) {
                    this.in_group = data.in_group;
                }
                if ("last_update_time" in data && data.last_update_time != undefined) {
                    this.last_update_time = data.last_update_time;
                }
                if ("last_update_by" in data && data.last_update_by != undefined) {
                    this.last_update_by = data.last_update_by;
                }
                if ("last_update_user" in data && data.last_update_user != undefined) {
                    this.last_update_user = data.last_update_user;
                }
                if ("last_update_source" in data && data.last_update_source != undefined) {
                    this.last_update_source = data.last_update_source;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES.ON_OFF) as dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
        }
        set appliance_type(value: dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES) {
            pb_1.Message.setField(this, 3, value);
        }
        get on_off_state() {
            return pb_1.Message.getWrapperField(this, OnOffApplianceState, 5) as OnOffApplianceState;
        }
        set on_off_state(value: OnOffApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_on_off_state() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get single_dimmer_state() {
            return pb_1.Message.getWrapperField(this, SingleDimmerApplianceState, 6) as SingleDimmerApplianceState;
        }
        set single_dimmer_state(value: SingleDimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_single_dimmer_state() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get fan_state() {
            return pb_1.Message.getWrapperField(this, FanApplianceState, 7) as FanApplianceState;
        }
        set fan_state(value: FanApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_fan_state() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get color_tunable_state() {
            return pb_1.Message.getWrapperField(this, ColorTunableApplianceState, 8) as ColorTunableApplianceState;
        }
        set color_tunable_state(value: ColorTunableApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_color_tunable_state() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get on_off_properties() {
            return pb_1.Message.getWrapperField(this, OnOffApplianceProperties, 9) as OnOffApplianceProperties;
        }
        set on_off_properties(value: OnOffApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[1], value);
        }
        get has_on_off_properties() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get single_dimmer_properties() {
            return pb_1.Message.getWrapperField(this, SingleDimmerApplianceProperties, 10) as SingleDimmerApplianceProperties;
        }
        set single_dimmer_properties(value: SingleDimmerApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[1], value);
        }
        get has_single_dimmer_properties() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get fan_properties() {
            return pb_1.Message.getWrapperField(this, FanApplianceProperties, 11) as FanApplianceProperties;
        }
        set fan_properties(value: FanApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[1], value);
        }
        get has_fan_properties() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get color_tunable_properties() {
            return pb_1.Message.getWrapperField(this, ColorTunableApplianceProperties, 12) as ColorTunableApplianceProperties;
        }
        set color_tunable_properties(value: ColorTunableApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[1], value);
        }
        get has_color_tunable_properties() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get icon_type() {
            return pb_1.Message.getFieldWithDefault(this, 13, dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set icon_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 13, value);
        }
        get on_off_default_state() {
            return pb_1.Message.getWrapperField(this, OnOffApplianceState, 14) as OnOffApplianceState;
        }
        set on_off_default_state(value: OnOffApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[2], value);
        }
        get has_on_off_default_state() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get single_dimmer_default_state() {
            return pb_1.Message.getWrapperField(this, SingleDimmerApplianceState, 15) as SingleDimmerApplianceState;
        }
        set single_dimmer_default_state(value: SingleDimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[2], value);
        }
        get has_single_dimmer_default_state() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get fan_default_state() {
            return pb_1.Message.getWrapperField(this, FanApplianceState, 16) as FanApplianceState;
        }
        set fan_default_state(value: FanApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[2], value);
        }
        get has_fan_default_state() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get color_tunable_default_state() {
            return pb_1.Message.getWrapperField(this, ColorTunableApplianceState, 17) as ColorTunableApplianceState;
        }
        set color_tunable_default_state(value: ColorTunableApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[2], value);
        }
        get has_color_tunable_default_state() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get in_group() {
            return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
        }
        set in_group(value: boolean) {
            pb_1.Message.setField(this, 18, value);
        }
        get last_update_time() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set last_update_time(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get last_update_by() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set last_update_by(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get last_update_user() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set last_update_user(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get last_update_source() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set last_update_source(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get appliance_state() {
            const cases: {
                [index: number]: "none" | "on_off_state" | "single_dimmer_state" | "fan_state" | "color_tunable_state";
            } = {
                0: "none",
                5: "on_off_state",
                6: "single_dimmer_state",
                7: "fan_state",
                8: "color_tunable_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 6, 7, 8])];
        }
        get appliance_properties() {
            const cases: {
                [index: number]: "none" | "on_off_properties" | "single_dimmer_properties" | "fan_properties" | "color_tunable_properties";
            } = {
                0: "none",
                9: "on_off_properties",
                10: "single_dimmer_properties",
                11: "fan_properties",
                12: "color_tunable_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9, 10, 11, 12])];
        }
        get default_state() {
            const cases: {
                [index: number]: "none" | "on_off_default_state" | "single_dimmer_default_state" | "fan_default_state" | "color_tunable_default_state";
            } = {
                0: "none",
                14: "on_off_default_state",
                15: "single_dimmer_default_state",
                16: "fan_default_state",
                17: "color_tunable_default_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [14, 15, 16, 17])];
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_name?: string;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
            on_off_state?: ReturnType<typeof OnOffApplianceState.prototype.toObject>;
            single_dimmer_state?: ReturnType<typeof SingleDimmerApplianceState.prototype.toObject>;
            fan_state?: ReturnType<typeof FanApplianceState.prototype.toObject>;
            color_tunable_state?: ReturnType<typeof ColorTunableApplianceState.prototype.toObject>;
            on_off_properties?: ReturnType<typeof OnOffApplianceProperties.prototype.toObject>;
            single_dimmer_properties?: ReturnType<typeof SingleDimmerApplianceProperties.prototype.toObject>;
            fan_properties?: ReturnType<typeof FanApplianceProperties.prototype.toObject>;
            color_tunable_properties?: ReturnType<typeof ColorTunableApplianceProperties.prototype.toObject>;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            on_off_default_state?: ReturnType<typeof OnOffApplianceState.prototype.toObject>;
            single_dimmer_default_state?: ReturnType<typeof SingleDimmerApplianceState.prototype.toObject>;
            fan_default_state?: ReturnType<typeof FanApplianceState.prototype.toObject>;
            color_tunable_default_state?: ReturnType<typeof ColorTunableApplianceState.prototype.toObject>;
            in_group?: boolean;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
            group_id?: number;
        }): EmbeddedAppliance {
            const message = new EmbeddedAppliance({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_name != null) {
                message.appliance_name = data.appliance_name;
            }
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            if (data.on_off_state != null) {
                message.on_off_state = OnOffApplianceState.fromObject(data.on_off_state);
            }
            if (data.single_dimmer_state != null) {
                message.single_dimmer_state = SingleDimmerApplianceState.fromObject(data.single_dimmer_state);
            }
            if (data.fan_state != null) {
                message.fan_state = FanApplianceState.fromObject(data.fan_state);
            }
            if (data.color_tunable_state != null) {
                message.color_tunable_state = ColorTunableApplianceState.fromObject(data.color_tunable_state);
            }
            if (data.on_off_properties != null) {
                message.on_off_properties = OnOffApplianceProperties.fromObject(data.on_off_properties);
            }
            if (data.single_dimmer_properties != null) {
                message.single_dimmer_properties = SingleDimmerApplianceProperties.fromObject(data.single_dimmer_properties);
            }
            if (data.fan_properties != null) {
                message.fan_properties = FanApplianceProperties.fromObject(data.fan_properties);
            }
            if (data.color_tunable_properties != null) {
                message.color_tunable_properties = ColorTunableApplianceProperties.fromObject(data.color_tunable_properties);
            }
            if (data.icon_type != null) {
                message.icon_type = data.icon_type;
            }
            if (data.on_off_default_state != null) {
                message.on_off_default_state = OnOffApplianceState.fromObject(data.on_off_default_state);
            }
            if (data.single_dimmer_default_state != null) {
                message.single_dimmer_default_state = SingleDimmerApplianceState.fromObject(data.single_dimmer_default_state);
            }
            if (data.fan_default_state != null) {
                message.fan_default_state = FanApplianceState.fromObject(data.fan_default_state);
            }
            if (data.color_tunable_default_state != null) {
                message.color_tunable_default_state = ColorTunableApplianceState.fromObject(data.color_tunable_default_state);
            }
            if (data.in_group != null) {
                message.in_group = data.in_group;
            }
            if (data.last_update_time != null) {
                message.last_update_time = data.last_update_time;
            }
            if (data.last_update_by != null) {
                message.last_update_by = data.last_update_by;
            }
            if (data.last_update_user != null) {
                message.last_update_user = data.last_update_user;
            }
            if (data.last_update_source != null) {
                message.last_update_source = data.last_update_source;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_name?: string;
                appliance_type?: dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES;
                on_off_state?: ReturnType<typeof OnOffApplianceState.prototype.toObject>;
                single_dimmer_state?: ReturnType<typeof SingleDimmerApplianceState.prototype.toObject>;
                fan_state?: ReturnType<typeof FanApplianceState.prototype.toObject>;
                color_tunable_state?: ReturnType<typeof ColorTunableApplianceState.prototype.toObject>;
                on_off_properties?: ReturnType<typeof OnOffApplianceProperties.prototype.toObject>;
                single_dimmer_properties?: ReturnType<typeof SingleDimmerApplianceProperties.prototype.toObject>;
                fan_properties?: ReturnType<typeof FanApplianceProperties.prototype.toObject>;
                color_tunable_properties?: ReturnType<typeof ColorTunableApplianceProperties.prototype.toObject>;
                icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
                on_off_default_state?: ReturnType<typeof OnOffApplianceState.prototype.toObject>;
                single_dimmer_default_state?: ReturnType<typeof SingleDimmerApplianceState.prototype.toObject>;
                fan_default_state?: ReturnType<typeof FanApplianceState.prototype.toObject>;
                color_tunable_default_state?: ReturnType<typeof ColorTunableApplianceState.prototype.toObject>;
                in_group?: boolean;
                last_update_time?: number;
                last_update_by?: string;
                last_update_user?: string;
                last_update_source?: string;
                group_id?: number;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_name != null) {
                data.appliance_name = this.appliance_name;
            }
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            if (this.on_off_state != null) {
                data.on_off_state = this.on_off_state.toObject();
            }
            if (this.single_dimmer_state != null) {
                data.single_dimmer_state = this.single_dimmer_state.toObject();
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state.toObject();
            }
            if (this.color_tunable_state != null) {
                data.color_tunable_state = this.color_tunable_state.toObject();
            }
            if (this.on_off_properties != null) {
                data.on_off_properties = this.on_off_properties.toObject();
            }
            if (this.single_dimmer_properties != null) {
                data.single_dimmer_properties = this.single_dimmer_properties.toObject();
            }
            if (this.fan_properties != null) {
                data.fan_properties = this.fan_properties.toObject();
            }
            if (this.color_tunable_properties != null) {
                data.color_tunable_properties = this.color_tunable_properties.toObject();
            }
            if (this.icon_type != null) {
                data.icon_type = this.icon_type;
            }
            if (this.on_off_default_state != null) {
                data.on_off_default_state = this.on_off_default_state.toObject();
            }
            if (this.single_dimmer_default_state != null) {
                data.single_dimmer_default_state = this.single_dimmer_default_state.toObject();
            }
            if (this.fan_default_state != null) {
                data.fan_default_state = this.fan_default_state.toObject();
            }
            if (this.color_tunable_default_state != null) {
                data.color_tunable_default_state = this.color_tunable_default_state.toObject();
            }
            if (this.in_group != null) {
                data.in_group = this.in_group;
            }
            if (this.last_update_time != null) {
                data.last_update_time = this.last_update_time;
            }
            if (this.last_update_by != null) {
                data.last_update_by = this.last_update_by;
            }
            if (this.last_update_user != null) {
                data.last_update_user = this.last_update_user;
            }
            if (this.last_update_source != null) {
                data.last_update_source = this.last_update_source;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.appliance_name.length)
                writer.writeString(2, this.appliance_name);
            if (this.appliance_type != dependency_1.com.keus.hub.EMBEDDED_APPLIANCE_TYPES.ON_OFF)
                writer.writeEnum(3, this.appliance_type);
            if (this.has_on_off_state)
                writer.writeMessage(5, this.on_off_state, () => this.on_off_state.serialize(writer));
            if (this.has_single_dimmer_state)
                writer.writeMessage(6, this.single_dimmer_state, () => this.single_dimmer_state.serialize(writer));
            if (this.has_fan_state)
                writer.writeMessage(7, this.fan_state, () => this.fan_state.serialize(writer));
            if (this.has_color_tunable_state)
                writer.writeMessage(8, this.color_tunable_state, () => this.color_tunable_state.serialize(writer));
            if (this.has_on_off_properties)
                writer.writeMessage(9, this.on_off_properties, () => this.on_off_properties.serialize(writer));
            if (this.has_single_dimmer_properties)
                writer.writeMessage(10, this.single_dimmer_properties, () => this.single_dimmer_properties.serialize(writer));
            if (this.has_fan_properties)
                writer.writeMessage(11, this.fan_properties, () => this.fan_properties.serialize(writer));
            if (this.has_color_tunable_properties)
                writer.writeMessage(12, this.color_tunable_properties, () => this.color_tunable_properties.serialize(writer));
            if (this.icon_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(13, this.icon_type);
            if (this.has_on_off_default_state)
                writer.writeMessage(14, this.on_off_default_state, () => this.on_off_default_state.serialize(writer));
            if (this.has_single_dimmer_default_state)
                writer.writeMessage(15, this.single_dimmer_default_state, () => this.single_dimmer_default_state.serialize(writer));
            if (this.has_fan_default_state)
                writer.writeMessage(16, this.fan_default_state, () => this.fan_default_state.serialize(writer));
            if (this.has_color_tunable_default_state)
                writer.writeMessage(17, this.color_tunable_default_state, () => this.color_tunable_default_state.serialize(writer));
            if (this.in_group != false)
                writer.writeBool(18, this.in_group);
            if (this.last_update_time != 0)
                writer.writeInt64(19, this.last_update_time);
            if (this.last_update_by.length)
                writer.writeString(20, this.last_update_by);
            if (this.last_update_user.length)
                writer.writeString(21, this.last_update_user);
            if (this.last_update_source.length)
                writer.writeString(22, this.last_update_source);
            if (this.group_id != 0)
                writer.writeInt32(23, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddedAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddedAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_name = reader.readString();
                        break;
                    case 3:
                        message.appliance_type = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.on_off_state, () => message.on_off_state = OnOffApplianceState.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.single_dimmer_state, () => message.single_dimmer_state = SingleDimmerApplianceState.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.fan_state, () => message.fan_state = FanApplianceState.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.color_tunable_state, () => message.color_tunable_state = ColorTunableApplianceState.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.on_off_properties, () => message.on_off_properties = OnOffApplianceProperties.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.single_dimmer_properties, () => message.single_dimmer_properties = SingleDimmerApplianceProperties.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.fan_properties, () => message.fan_properties = FanApplianceProperties.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.color_tunable_properties, () => message.color_tunable_properties = ColorTunableApplianceProperties.deserialize(reader));
                        break;
                    case 13:
                        message.icon_type = reader.readEnum();
                        break;
                    case 14:
                        reader.readMessage(message.on_off_default_state, () => message.on_off_default_state = OnOffApplianceState.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.single_dimmer_default_state, () => message.single_dimmer_default_state = SingleDimmerApplianceState.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.fan_default_state, () => message.fan_default_state = FanApplianceState.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.color_tunable_default_state, () => message.color_tunable_default_state = ColorTunableApplianceState.deserialize(reader));
                        break;
                    case 18:
                        message.in_group = reader.readBool();
                        break;
                    case 19:
                        message.last_update_time = reader.readInt64();
                        break;
                    case 20:
                        message.last_update_by = reader.readString();
                        break;
                    case 21:
                        message.last_update_user = reader.readString();
                        break;
                    case 22:
                        message.last_update_source = reader.readString();
                        break;
                    case 23:
                        message.group_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddedAppliance {
            return EmbeddedAppliance.deserialize(bytes);
        }
    }
    export class SwitchApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            appliance_id?: string;
        }): SwitchApplianceProperties {
            const message = new SwitchApplianceProperties({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwitchApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwitchApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwitchApplianceProperties {
            return SwitchApplianceProperties.deserialize(bytes);
        }
    }
    export class SwitchGroupProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            group_id?: number;
            room_id?: string;
        }): SwitchGroupProperties {
            const message = new SwitchGroupProperties({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                room_id?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwitchGroupProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwitchGroupProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwitchGroupProperties {
            return SwitchGroupProperties.deserialize(bytes);
        }
    }
    export class SwitchAcFanProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): SwitchAcFanProperties {
            const message = new SwitchAcFanProperties({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwitchAcFanProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwitchAcFanProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwitchAcFanProperties {
            return SwitchAcFanProperties.deserialize(bytes);
        }
    }
    export class SwitchDcFanProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): SwitchDcFanProperties {
            const message = new SwitchDcFanProperties({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwitchDcFanProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwitchDcFanProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwitchDcFanProperties {
            return SwitchDcFanProperties.deserialize(bytes);
        }
    }
    export class EmbeddedSwitch extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5, 6, 7]];
        constructor(data?: any[] | ({
            switch_id?: number;
            switch_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_TYPES;
            switch_name?: string;
        } & (({
            appliance_properties?: SwitchApplianceProperties;
            group_properties?: never;
            ac_fan_properties?: never;
            dc_fan_properties?: never;
        } | {
            appliance_properties?: never;
            group_properties?: SwitchGroupProperties;
            ac_fan_properties?: never;
            dc_fan_properties?: never;
        } | {
            appliance_properties?: never;
            group_properties?: never;
            ac_fan_properties?: SwitchAcFanProperties;
            dc_fan_properties?: never;
        } | {
            appliance_properties?: never;
            group_properties?: never;
            ac_fan_properties?: never;
            dc_fan_properties?: SwitchDcFanProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("switch_id" in data && data.switch_id != undefined) {
                    this.switch_id = data.switch_id;
                }
                if ("switch_type" in data && data.switch_type != undefined) {
                    this.switch_type = data.switch_type;
                }
                if ("switch_name" in data && data.switch_name != undefined) {
                    this.switch_name = data.switch_name;
                }
                if ("appliance_properties" in data && data.appliance_properties != undefined) {
                    this.appliance_properties = data.appliance_properties;
                }
                if ("group_properties" in data && data.group_properties != undefined) {
                    this.group_properties = data.group_properties;
                }
                if ("ac_fan_properties" in data && data.ac_fan_properties != undefined) {
                    this.ac_fan_properties = data.ac_fan_properties;
                }
                if ("dc_fan_properties" in data && data.dc_fan_properties != undefined) {
                    this.dc_fan_properties = data.dc_fan_properties;
                }
            }
        }
        get switch_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set switch_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get switch_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.EMBEDDED_SWITCH_TYPES.APPLIANCE) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_TYPES;
        }
        set switch_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get switch_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set switch_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get appliance_properties() {
            return pb_1.Message.getWrapperField(this, SwitchApplianceProperties, 4) as SwitchApplianceProperties;
        }
        set appliance_properties(value: SwitchApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_appliance_properties() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get group_properties() {
            return pb_1.Message.getWrapperField(this, SwitchGroupProperties, 5) as SwitchGroupProperties;
        }
        set group_properties(value: SwitchGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_group_properties() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ac_fan_properties() {
            return pb_1.Message.getWrapperField(this, SwitchAcFanProperties, 6) as SwitchAcFanProperties;
        }
        set ac_fan_properties(value: SwitchAcFanProperties) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_ac_fan_properties() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get dc_fan_properties() {
            return pb_1.Message.getWrapperField(this, SwitchDcFanProperties, 7) as SwitchDcFanProperties;
        }
        set dc_fan_properties(value: SwitchDcFanProperties) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_dc_fan_properties() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get switch_properties() {
            const cases: {
                [index: number]: "none" | "appliance_properties" | "group_properties" | "ac_fan_properties" | "dc_fan_properties";
            } = {
                0: "none",
                4: "appliance_properties",
                5: "group_properties",
                6: "ac_fan_properties",
                7: "dc_fan_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7])];
        }
        static fromObject(data: {
            switch_id?: number;
            switch_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_TYPES;
            switch_name?: string;
            appliance_properties?: ReturnType<typeof SwitchApplianceProperties.prototype.toObject>;
            group_properties?: ReturnType<typeof SwitchGroupProperties.prototype.toObject>;
            ac_fan_properties?: ReturnType<typeof SwitchAcFanProperties.prototype.toObject>;
            dc_fan_properties?: ReturnType<typeof SwitchDcFanProperties.prototype.toObject>;
        }): EmbeddedSwitch {
            const message = new EmbeddedSwitch({});
            if (data.switch_id != null) {
                message.switch_id = data.switch_id;
            }
            if (data.switch_type != null) {
                message.switch_type = data.switch_type;
            }
            if (data.switch_name != null) {
                message.switch_name = data.switch_name;
            }
            if (data.appliance_properties != null) {
                message.appliance_properties = SwitchApplianceProperties.fromObject(data.appliance_properties);
            }
            if (data.group_properties != null) {
                message.group_properties = SwitchGroupProperties.fromObject(data.group_properties);
            }
            if (data.ac_fan_properties != null) {
                message.ac_fan_properties = SwitchAcFanProperties.fromObject(data.ac_fan_properties);
            }
            if (data.dc_fan_properties != null) {
                message.dc_fan_properties = SwitchDcFanProperties.fromObject(data.dc_fan_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                switch_id?: number;
                switch_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_TYPES;
                switch_name?: string;
                appliance_properties?: ReturnType<typeof SwitchApplianceProperties.prototype.toObject>;
                group_properties?: ReturnType<typeof SwitchGroupProperties.prototype.toObject>;
                ac_fan_properties?: ReturnType<typeof SwitchAcFanProperties.prototype.toObject>;
                dc_fan_properties?: ReturnType<typeof SwitchDcFanProperties.prototype.toObject>;
            } = {};
            if (this.switch_id != null) {
                data.switch_id = this.switch_id;
            }
            if (this.switch_type != null) {
                data.switch_type = this.switch_type;
            }
            if (this.switch_name != null) {
                data.switch_name = this.switch_name;
            }
            if (this.appliance_properties != null) {
                data.appliance_properties = this.appliance_properties.toObject();
            }
            if (this.group_properties != null) {
                data.group_properties = this.group_properties.toObject();
            }
            if (this.ac_fan_properties != null) {
                data.ac_fan_properties = this.ac_fan_properties.toObject();
            }
            if (this.dc_fan_properties != null) {
                data.dc_fan_properties = this.dc_fan_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.switch_id != 0)
                writer.writeUint32(1, this.switch_id);
            if (this.switch_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_TYPES.APPLIANCE)
                writer.writeEnum(2, this.switch_type);
            if (this.switch_name.length)
                writer.writeString(3, this.switch_name);
            if (this.has_appliance_properties)
                writer.writeMessage(4, this.appliance_properties, () => this.appliance_properties.serialize(writer));
            if (this.has_group_properties)
                writer.writeMessage(5, this.group_properties, () => this.group_properties.serialize(writer));
            if (this.has_ac_fan_properties)
                writer.writeMessage(6, this.ac_fan_properties, () => this.ac_fan_properties.serialize(writer));
            if (this.has_dc_fan_properties)
                writer.writeMessage(7, this.dc_fan_properties, () => this.dc_fan_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddedSwitch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddedSwitch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.switch_id = reader.readUint32();
                        break;
                    case 2:
                        message.switch_type = reader.readEnum();
                        break;
                    case 3:
                        message.switch_name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.appliance_properties, () => message.appliance_properties = SwitchApplianceProperties.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.group_properties, () => message.group_properties = SwitchGroupProperties.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.ac_fan_properties, () => message.ac_fan_properties = SwitchAcFanProperties.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.dc_fan_properties, () => message.dc_fan_properties = SwitchDcFanProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddedSwitch {
            return EmbeddedSwitch.deserialize(bytes);
        }
    }
    export class EmbeddedSwitchProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            output_ports?: EmbeddedSwitchPort[];
            appliance?: EmbeddedAppliance[];
            switch?: EmbeddedSwitch[];
            is_area_master?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("output_ports" in data && data.output_ports != undefined) {
                    this.output_ports = data.output_ports;
                }
                if ("appliance" in data && data.appliance != undefined) {
                    this.appliance = data.appliance;
                }
                if ("switch" in data && data.switch != undefined) {
                    this.switch = data.switch;
                }
                if ("is_area_master" in data && data.is_area_master != undefined) {
                    this.is_area_master = data.is_area_master;
                }
            }
        }
        get output_ports() {
            return pb_1.Message.getRepeatedWrapperField(this, EmbeddedSwitchPort, 1) as EmbeddedSwitchPort[];
        }
        set output_ports(value: EmbeddedSwitchPort[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get appliance() {
            return pb_1.Message.getRepeatedWrapperField(this, EmbeddedAppliance, 2) as EmbeddedAppliance[];
        }
        set appliance(value: EmbeddedAppliance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get switch() {
            return pb_1.Message.getRepeatedWrapperField(this, EmbeddedSwitch, 3) as EmbeddedSwitch[];
        }
        set switch(value: EmbeddedSwitch[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get is_area_master() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_area_master(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            output_ports?: ReturnType<typeof EmbeddedSwitchPort.prototype.toObject>[];
            appliance?: ReturnType<typeof EmbeddedAppliance.prototype.toObject>[];
            switch?: ReturnType<typeof EmbeddedSwitch.prototype.toObject>[];
            is_area_master?: boolean;
        }): EmbeddedSwitchProperties {
            const message = new EmbeddedSwitchProperties({});
            if (data.output_ports != null) {
                message.output_ports = data.output_ports.map(item => EmbeddedSwitchPort.fromObject(item));
            }
            if (data.appliance != null) {
                message.appliance = data.appliance.map(item => EmbeddedAppliance.fromObject(item));
            }
            if (data.switch != null) {
                message.switch = data.switch.map(item => EmbeddedSwitch.fromObject(item));
            }
            if (data.is_area_master != null) {
                message.is_area_master = data.is_area_master;
            }
            return message;
        }
        toObject() {
            const data: {
                output_ports?: ReturnType<typeof EmbeddedSwitchPort.prototype.toObject>[];
                appliance?: ReturnType<typeof EmbeddedAppliance.prototype.toObject>[];
                switch?: ReturnType<typeof EmbeddedSwitch.prototype.toObject>[];
                is_area_master?: boolean;
            } = {};
            if (this.output_ports != null) {
                data.output_ports = this.output_ports.map((item: EmbeddedSwitchPort) => item.toObject());
            }
            if (this.appliance != null) {
                data.appliance = this.appliance.map((item: EmbeddedAppliance) => item.toObject());
            }
            if (this.switch != null) {
                data.switch = this.switch.map((item: EmbeddedSwitch) => item.toObject());
            }
            if (this.is_area_master != null) {
                data.is_area_master = this.is_area_master;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.output_ports.length)
                writer.writeRepeatedMessage(1, this.output_ports, (item: EmbeddedSwitchPort) => item.serialize(writer));
            if (this.appliance.length)
                writer.writeRepeatedMessage(2, this.appliance, (item: EmbeddedAppliance) => item.serialize(writer));
            if (this.switch.length)
                writer.writeRepeatedMessage(3, this.switch, (item: EmbeddedSwitch) => item.serialize(writer));
            if (this.is_area_master != false)
                writer.writeBool(4, this.is_area_master);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddedSwitchProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddedSwitchProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.output_ports, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EmbeddedSwitchPort.deserialize(reader), EmbeddedSwitchPort));
                        break;
                    case 2:
                        reader.readMessage(message.appliance, () => pb_1.Message.addToRepeatedWrapperField(message, 2, EmbeddedAppliance.deserialize(reader), EmbeddedAppliance));
                        break;
                    case 3:
                        reader.readMessage(message.switch, () => pb_1.Message.addToRepeatedWrapperField(message, 3, EmbeddedSwitch.deserialize(reader), EmbeddedSwitch));
                        break;
                    case 4:
                        message.is_area_master = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddedSwitchProperties {
            return EmbeddedSwitchProperties.deserialize(bytes);
        }
    }
    export class EmbeddedSwitchState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): EmbeddedSwitchState {
            const message = new EmbeddedSwitchState({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddedSwitchState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddedSwitchState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddedSwitchState {
            return EmbeddedSwitchState.deserialize(bytes);
        }
    }
    export class MoveEmbeddedSwitchRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveEmbeddedSwitchRoom {
            const message = new MoveEmbeddedSwitchRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveEmbeddedSwitchRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveEmbeddedSwitchRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveEmbeddedSwitchRoom {
            return MoveEmbeddedSwitchRoom.deserialize(bytes);
        }
    }
    export class MoveEmbeddedSwitchRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveEmbeddedSwitchRoomResponse {
            const message = new MoveEmbeddedSwitchRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveEmbeddedSwitchRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveEmbeddedSwitchRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveEmbeddedSwitchRoomResponse {
            return MoveEmbeddedSwitchRoomResponse.deserialize(bytes);
        }
    }
    export class EditEmbeddedSwitchDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
        }): EditEmbeddedSwitchDetails {
            const message = new EditEmbeddedSwitchDetails({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_location.length)
                writer.writeString(3, this.device_location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditEmbeddedSwitchDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditEmbeddedSwitchDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_location = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditEmbeddedSwitchDetails {
            return EditEmbeddedSwitchDetails.deserialize(bytes);
        }
    }
    export class EditEmbeddedSwitchDetailsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EditEmbeddedSwitchDetailsResponse {
            const message = new EditEmbeddedSwitchDetailsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditEmbeddedSwitchDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditEmbeddedSwitchDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditEmbeddedSwitchDetailsResponse {
            return EditEmbeddedSwitchDetailsResponse.deserialize(bytes);
        }
    }
    export class AddEditAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            appliance?: EmbeddedAppliance;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance" in data && data.appliance != undefined) {
                    this.appliance = data.appliance;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance() {
            return pb_1.Message.getWrapperField(this, EmbeddedAppliance, 2) as EmbeddedAppliance;
        }
        set appliance(value: EmbeddedAppliance) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_id?: string;
            appliance?: ReturnType<typeof EmbeddedAppliance.prototype.toObject>;
        }): AddEditAppliance {
            const message = new AddEditAppliance({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance != null) {
                message.appliance = EmbeddedAppliance.fromObject(data.appliance);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance?: ReturnType<typeof EmbeddedAppliance.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance != null) {
                data.appliance = this.appliance.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.has_appliance)
                writer.writeMessage(2, this.appliance, () => this.appliance.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddEditAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddEditAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance, () => message.appliance = EmbeddedAppliance.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddEditAppliance {
            return AddEditAppliance.deserialize(bytes);
        }
    }
    export class AddEditApplianceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            appliance_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            appliance_id?: string;
            ops_message?: string;
        }): AddEditApplianceResponse {
            const message = new AddEditApplianceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                appliance_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.appliance_id.length)
                writer.writeString(4, this.appliance_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddEditApplianceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddEditApplianceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.appliance_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddEditApplianceResponse {
            return AddEditApplianceResponse.deserialize(bytes);
        }
    }
    export class ConfigureAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [[9, 10, 11, 12]];
        constructor(data?: any[] | ({
            device_id?: string;
            appliance_id?: string;
        } & (({
            on_off_properties?: OnOffApplianceProperties;
            single_dimmer_properties?: never;
            fan_properties?: never;
            color_tunable_properties?: never;
        } | {
            on_off_properties?: never;
            single_dimmer_properties?: SingleDimmerApplianceProperties;
            fan_properties?: never;
            color_tunable_properties?: never;
        } | {
            on_off_properties?: never;
            single_dimmer_properties?: never;
            fan_properties?: FanApplianceProperties;
            color_tunable_properties?: never;
        } | {
            on_off_properties?: never;
            single_dimmer_properties?: never;
            fan_properties?: never;
            color_tunable_properties?: ColorTunableApplianceProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("on_off_properties" in data && data.on_off_properties != undefined) {
                    this.on_off_properties = data.on_off_properties;
                }
                if ("single_dimmer_properties" in data && data.single_dimmer_properties != undefined) {
                    this.single_dimmer_properties = data.single_dimmer_properties;
                }
                if ("fan_properties" in data && data.fan_properties != undefined) {
                    this.fan_properties = data.fan_properties;
                }
                if ("color_tunable_properties" in data && data.color_tunable_properties != undefined) {
                    this.color_tunable_properties = data.color_tunable_properties;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get on_off_properties() {
            return pb_1.Message.getWrapperField(this, OnOffApplianceProperties, 9) as OnOffApplianceProperties;
        }
        set on_off_properties(value: OnOffApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_on_off_properties() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get single_dimmer_properties() {
            return pb_1.Message.getWrapperField(this, SingleDimmerApplianceProperties, 10) as SingleDimmerApplianceProperties;
        }
        set single_dimmer_properties(value: SingleDimmerApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_single_dimmer_properties() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get fan_properties() {
            return pb_1.Message.getWrapperField(this, FanApplianceProperties, 11) as FanApplianceProperties;
        }
        set fan_properties(value: FanApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_fan_properties() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get color_tunable_properties() {
            return pb_1.Message.getWrapperField(this, ColorTunableApplianceProperties, 12) as ColorTunableApplianceProperties;
        }
        set color_tunable_properties(value: ColorTunableApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_color_tunable_properties() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get appliance_properties() {
            const cases: {
                [index: number]: "none" | "on_off_properties" | "single_dimmer_properties" | "fan_properties" | "color_tunable_properties";
            } = {
                0: "none",
                9: "on_off_properties",
                10: "single_dimmer_properties",
                11: "fan_properties",
                12: "color_tunable_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9, 10, 11, 12])];
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
            on_off_properties?: ReturnType<typeof OnOffApplianceProperties.prototype.toObject>;
            single_dimmer_properties?: ReturnType<typeof SingleDimmerApplianceProperties.prototype.toObject>;
            fan_properties?: ReturnType<typeof FanApplianceProperties.prototype.toObject>;
            color_tunable_properties?: ReturnType<typeof ColorTunableApplianceProperties.prototype.toObject>;
        }): ConfigureAppliance {
            const message = new ConfigureAppliance({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.on_off_properties != null) {
                message.on_off_properties = OnOffApplianceProperties.fromObject(data.on_off_properties);
            }
            if (data.single_dimmer_properties != null) {
                message.single_dimmer_properties = SingleDimmerApplianceProperties.fromObject(data.single_dimmer_properties);
            }
            if (data.fan_properties != null) {
                message.fan_properties = FanApplianceProperties.fromObject(data.fan_properties);
            }
            if (data.color_tunable_properties != null) {
                message.color_tunable_properties = ColorTunableApplianceProperties.fromObject(data.color_tunable_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
                on_off_properties?: ReturnType<typeof OnOffApplianceProperties.prototype.toObject>;
                single_dimmer_properties?: ReturnType<typeof SingleDimmerApplianceProperties.prototype.toObject>;
                fan_properties?: ReturnType<typeof FanApplianceProperties.prototype.toObject>;
                color_tunable_properties?: ReturnType<typeof ColorTunableApplianceProperties.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.on_off_properties != null) {
                data.on_off_properties = this.on_off_properties.toObject();
            }
            if (this.single_dimmer_properties != null) {
                data.single_dimmer_properties = this.single_dimmer_properties.toObject();
            }
            if (this.fan_properties != null) {
                data.fan_properties = this.fan_properties.toObject();
            }
            if (this.color_tunable_properties != null) {
                data.color_tunable_properties = this.color_tunable_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (this.has_on_off_properties)
                writer.writeMessage(9, this.on_off_properties, () => this.on_off_properties.serialize(writer));
            if (this.has_single_dimmer_properties)
                writer.writeMessage(10, this.single_dimmer_properties, () => this.single_dimmer_properties.serialize(writer));
            if (this.has_fan_properties)
                writer.writeMessage(11, this.fan_properties, () => this.fan_properties.serialize(writer));
            if (this.has_color_tunable_properties)
                writer.writeMessage(12, this.color_tunable_properties, () => this.color_tunable_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.on_off_properties, () => message.on_off_properties = OnOffApplianceProperties.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.single_dimmer_properties, () => message.single_dimmer_properties = SingleDimmerApplianceProperties.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.fan_properties, () => message.fan_properties = FanApplianceProperties.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.color_tunable_properties, () => message.color_tunable_properties = ColorTunableApplianceProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureAppliance {
            return ConfigureAppliance.deserialize(bytes);
        }
    }
    export class ConfigureApplianceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureApplianceResponse {
            const message = new ConfigureApplianceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureApplianceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureApplianceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureApplianceResponse {
            return ConfigureApplianceResponse.deserialize(bytes);
        }
    }
    export class DeleteAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
        }): DeleteAppliance {
            const message = new DeleteAppliance({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAppliance {
            return DeleteAppliance.deserialize(bytes);
        }
    }
    export class DeleteApplianceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): DeleteApplianceResponse {
            const message = new DeleteApplianceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApplianceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApplianceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApplianceResponse {
            return DeleteApplianceResponse.deserialize(bytes);
        }
    }
    export class ConfigureEmbeddedSwitches extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            switch?: EmbeddedSwitch;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("switch" in data && data.switch != undefined) {
                    this.switch = data.switch;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get switch() {
            return pb_1.Message.getWrapperField(this, EmbeddedSwitch, 2) as EmbeddedSwitch;
        }
        set switch(value: EmbeddedSwitch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_switch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_id?: string;
            switch?: ReturnType<typeof EmbeddedSwitch.prototype.toObject>;
        }): ConfigureEmbeddedSwitches {
            const message = new ConfigureEmbeddedSwitches({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.switch != null) {
                message.switch = EmbeddedSwitch.fromObject(data.switch);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                switch?: ReturnType<typeof EmbeddedSwitch.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.switch != null) {
                data.switch = this.switch.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.has_switch)
                writer.writeMessage(2, this.switch, () => this.switch.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureEmbeddedSwitches {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureEmbeddedSwitches();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.switch, () => message.switch = EmbeddedSwitch.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureEmbeddedSwitches {
            return ConfigureEmbeddedSwitches.deserialize(bytes);
        }
    }
    export class ConfigureEmbeddedSwitchesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureEmbeddedSwitchesResponse {
            const message = new ConfigureEmbeddedSwitchesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureEmbeddedSwitchesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureEmbeddedSwitchesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureEmbeddedSwitchesResponse {
            return ConfigureEmbeddedSwitchesResponse.deserialize(bytes);
        }
    }
    export class UpdateApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6]];
        constructor(data?: any[] | ({
            device_id?: string;
            appliance_id?: string;
        } & (({
            on_off_state?: OnOffApplianceState;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: SingleDimmerApplianceState;
            fan_state?: never;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: FanApplianceState;
            color_tunable_state?: never;
        } | {
            on_off_state?: never;
            single_dimmer_state?: never;
            fan_state?: never;
            color_tunable_state?: ColorTunableApplianceState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("on_off_state" in data && data.on_off_state != undefined) {
                    this.on_off_state = data.on_off_state;
                }
                if ("single_dimmer_state" in data && data.single_dimmer_state != undefined) {
                    this.single_dimmer_state = data.single_dimmer_state;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("color_tunable_state" in data && data.color_tunable_state != undefined) {
                    this.color_tunable_state = data.color_tunable_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get on_off_state() {
            return pb_1.Message.getWrapperField(this, OnOffApplianceState, 3) as OnOffApplianceState;
        }
        set on_off_state(value: OnOffApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_on_off_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get single_dimmer_state() {
            return pb_1.Message.getWrapperField(this, SingleDimmerApplianceState, 4) as SingleDimmerApplianceState;
        }
        set single_dimmer_state(value: SingleDimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_single_dimmer_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get fan_state() {
            return pb_1.Message.getWrapperField(this, FanApplianceState, 5) as FanApplianceState;
        }
        set fan_state(value: FanApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_fan_state() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get color_tunable_state() {
            return pb_1.Message.getWrapperField(this, ColorTunableApplianceState, 6) as ColorTunableApplianceState;
        }
        set color_tunable_state(value: ColorTunableApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_color_tunable_state() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get appliance_state() {
            const cases: {
                [index: number]: "none" | "on_off_state" | "single_dimmer_state" | "fan_state" | "color_tunable_state";
            } = {
                0: "none",
                3: "on_off_state",
                4: "single_dimmer_state",
                5: "fan_state",
                6: "color_tunable_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6])];
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
            on_off_state?: ReturnType<typeof OnOffApplianceState.prototype.toObject>;
            single_dimmer_state?: ReturnType<typeof SingleDimmerApplianceState.prototype.toObject>;
            fan_state?: ReturnType<typeof FanApplianceState.prototype.toObject>;
            color_tunable_state?: ReturnType<typeof ColorTunableApplianceState.prototype.toObject>;
        }): UpdateApplianceState {
            const message = new UpdateApplianceState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.on_off_state != null) {
                message.on_off_state = OnOffApplianceState.fromObject(data.on_off_state);
            }
            if (data.single_dimmer_state != null) {
                message.single_dimmer_state = SingleDimmerApplianceState.fromObject(data.single_dimmer_state);
            }
            if (data.fan_state != null) {
                message.fan_state = FanApplianceState.fromObject(data.fan_state);
            }
            if (data.color_tunable_state != null) {
                message.color_tunable_state = ColorTunableApplianceState.fromObject(data.color_tunable_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
                on_off_state?: ReturnType<typeof OnOffApplianceState.prototype.toObject>;
                single_dimmer_state?: ReturnType<typeof SingleDimmerApplianceState.prototype.toObject>;
                fan_state?: ReturnType<typeof FanApplianceState.prototype.toObject>;
                color_tunable_state?: ReturnType<typeof ColorTunableApplianceState.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.on_off_state != null) {
                data.on_off_state = this.on_off_state.toObject();
            }
            if (this.single_dimmer_state != null) {
                data.single_dimmer_state = this.single_dimmer_state.toObject();
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state.toObject();
            }
            if (this.color_tunable_state != null) {
                data.color_tunable_state = this.color_tunable_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (this.has_on_off_state)
                writer.writeMessage(3, this.on_off_state, () => this.on_off_state.serialize(writer));
            if (this.has_single_dimmer_state)
                writer.writeMessage(4, this.single_dimmer_state, () => this.single_dimmer_state.serialize(writer));
            if (this.has_fan_state)
                writer.writeMessage(5, this.fan_state, () => this.fan_state.serialize(writer));
            if (this.has_color_tunable_state)
                writer.writeMessage(6, this.color_tunable_state, () => this.color_tunable_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.on_off_state, () => message.on_off_state = OnOffApplianceState.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.single_dimmer_state, () => message.single_dimmer_state = SingleDimmerApplianceState.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.fan_state, () => message.fan_state = FanApplianceState.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.color_tunable_state, () => message.color_tunable_state = ColorTunableApplianceState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateApplianceState {
            return UpdateApplianceState.deserialize(bytes);
        }
    }
    export class UpdateApplianceStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateApplianceStateResponse {
            const message = new UpdateApplianceStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateApplianceStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateApplianceStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateApplianceStateResponse {
            return UpdateApplianceStateResponse.deserialize(bytes);
        }
    }
    export class UpdatePortState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            port_id?: number;
            port_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("port_state" in data && data.port_state != undefined) {
                    this.port_state = data.port_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get port_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set port_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            port_id?: number;
            port_state?: number;
        }): UpdatePortState {
            const message = new UpdatePortState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.port_state != null) {
                message.port_state = data.port_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                port_id?: number;
                port_state?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.port_state != null) {
                data.port_state = this.port_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.port_id != 0)
                writer.writeUint32(2, this.port_id);
            if (this.port_state != 0)
                writer.writeUint32(3, this.port_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePortState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePortState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.port_id = reader.readUint32();
                        break;
                    case 3:
                        message.port_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePortState {
            return UpdatePortState.deserialize(bytes);
        }
    }
    export class UpdatePortStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdatePortStateResponse {
            const message = new UpdatePortStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePortStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePortStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePortStateResponse {
            return UpdatePortStateResponse.deserialize(bytes);
        }
    }
    export class ResetZigbeeEmbeddedSwitch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): ResetZigbeeEmbeddedSwitch {
            const message = new ResetZigbeeEmbeddedSwitch({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeEmbeddedSwitch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeEmbeddedSwitch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeEmbeddedSwitch {
            return ResetZigbeeEmbeddedSwitch.deserialize(bytes);
        }
    }
    export class ResetZigbeeEmbeddedSwitchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetZigbeeEmbeddedSwitchResponse {
            const message = new ResetZigbeeEmbeddedSwitchResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeEmbeddedSwitchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeEmbeddedSwitchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeEmbeddedSwitchResponse {
            return ResetZigbeeEmbeddedSwitchResponse.deserialize(bytes);
        }
    }
    export class ReportZigbeeEmbeddedApplianceActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            appliance_id?: string;
            appliance_state?: number;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_state" in data && data.appliance_state != undefined) {
                    this.appliance_state = data.appliance_state;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appliance_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set appliance_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
            appliance_state?: number;
            activity_time?: number;
        }): ReportZigbeeEmbeddedApplianceActivity {
            const message = new ReportZigbeeEmbeddedApplianceActivity({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_state != null) {
                message.appliance_state = data.appliance_state;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
                appliance_state?: number;
                activity_time?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_state != null) {
                data.appliance_state = this.appliance_state;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (this.appliance_state != 0)
                writer.writeUint32(3, this.appliance_state);
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportZigbeeEmbeddedApplianceActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportZigbeeEmbeddedApplianceActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    case 3:
                        message.appliance_state = reader.readUint32();
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportZigbeeEmbeddedApplianceActivity {
            return ReportZigbeeEmbeddedApplianceActivity.deserialize(bytes);
        }
    }
    export class ZigbeeEmbeddedApplianceEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_state?: UpdateApplianceState;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_state" in data && data.update_state != undefined) {
                    this.update_state = data.update_state;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get update_state() {
            return pb_1.Message.getWrapperField(this, UpdateApplianceState, 1) as UpdateApplianceState;
        }
        set update_state(value: UpdateApplianceState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_update_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_state?: ReturnType<typeof UpdateApplianceState.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): ZigbeeEmbeddedApplianceEvent {
            const message = new ZigbeeEmbeddedApplianceEvent({});
            if (data.update_state != null) {
                message.update_state = UpdateApplianceState.fromObject(data.update_state);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                update_state?: ReturnType<typeof UpdateApplianceState.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.update_state != null) {
                data.update_state = this.update_state.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_update_state)
                writer.writeMessage(1, this.update_state, () => this.update_state.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeEmbeddedApplianceEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeEmbeddedApplianceEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.update_state, () => message.update_state = UpdateApplianceState.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeEmbeddedApplianceEvent {
            return ZigbeeEmbeddedApplianceEvent.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeEmbeddedSwitch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceZigbeeEmbeddedSwitch {
            const message = new ReplaceZigbeeEmbeddedSwitch({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeEmbeddedSwitch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeEmbeddedSwitch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeEmbeddedSwitch {
            return ReplaceZigbeeEmbeddedSwitch.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeEmbeddedSwitchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceZigbeeEmbeddedSwitchResponse {
            const message = new ReplaceZigbeeEmbeddedSwitchResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeEmbeddedSwitchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeEmbeddedSwitchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeEmbeddedSwitchResponse {
            return ReplaceZigbeeEmbeddedSwitchResponse.deserialize(bytes);
        }
    }
    export class SetEmbeddedSwitchAreaMaster extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            is_area_master?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("is_area_master" in data && data.is_area_master != undefined) {
                    this.is_area_master = data.is_area_master;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_area_master() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_area_master(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            is_area_master?: boolean;
        }): SetEmbeddedSwitchAreaMaster {
            const message = new SetEmbeddedSwitchAreaMaster({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.is_area_master != null) {
                message.is_area_master = data.is_area_master;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                is_area_master?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.is_area_master != null) {
                data.is_area_master = this.is_area_master;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.is_area_master != false)
                writer.writeBool(2, this.is_area_master);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetEmbeddedSwitchAreaMaster {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetEmbeddedSwitchAreaMaster();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.is_area_master = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetEmbeddedSwitchAreaMaster {
            return SetEmbeddedSwitchAreaMaster.deserialize(bytes);
        }
    }
    export class SetEmbeddedSwitchAreaMasterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetEmbeddedSwitchAreaMasterResponse {
            const message = new SetEmbeddedSwitchAreaMasterResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetEmbeddedSwitchAreaMasterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetEmbeddedSwitchAreaMasterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetEmbeddedSwitchAreaMasterResponse {
            return SetEmbeddedSwitchAreaMasterResponse.deserialize(bytes);
        }
    }
    export class RenameZigbeeEmbeddedSwitchAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            appliance_id?: string;
            appliance_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_name" in data && data.appliance_name != undefined) {
                    this.appliance_name = data.appliance_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appliance_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set appliance_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
            appliance_name?: string;
        }): RenameZigbeeEmbeddedSwitchAppliance {
            const message = new RenameZigbeeEmbeddedSwitchAppliance({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_name != null) {
                message.appliance_name = data.appliance_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
                appliance_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_name != null) {
                data.appliance_name = this.appliance_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (this.appliance_name.length)
                writer.writeString(3, this.appliance_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeEmbeddedSwitchAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeEmbeddedSwitchAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    case 3:
                        message.appliance_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeEmbeddedSwitchAppliance {
            return RenameZigbeeEmbeddedSwitchAppliance.deserialize(bytes);
        }
    }
    export class RenameZigbeeEmbeddedSwitchApplianceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameZigbeeEmbeddedSwitchApplianceResponse {
            const message = new RenameZigbeeEmbeddedSwitchApplianceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeEmbeddedSwitchApplianceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeEmbeddedSwitchApplianceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeEmbeddedSwitchApplianceResponse {
            return RenameZigbeeEmbeddedSwitchApplianceResponse.deserialize(bytes);
        }
    }
    export class ChangeZigbeeEmbeddedSwitchApplianceIcon extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            appliance_id?: string;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("icon_type" in data && data.icon_type != undefined) {
                    this.icon_type = data.icon_type;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get icon_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set icon_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            appliance_id?: string;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }): ChangeZigbeeEmbeddedSwitchApplianceIcon {
            const message = new ChangeZigbeeEmbeddedSwitchApplianceIcon({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.icon_type != null) {
                message.icon_type = data.icon_type;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                appliance_id?: string;
                icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.icon_type != null) {
                data.icon_type = this.icon_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (this.icon_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(3, this.icon_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeZigbeeEmbeddedSwitchApplianceIcon {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeZigbeeEmbeddedSwitchApplianceIcon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    case 3:
                        message.icon_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeZigbeeEmbeddedSwitchApplianceIcon {
            return ChangeZigbeeEmbeddedSwitchApplianceIcon.deserialize(bytes);
        }
    }
    export class ChangeZigbeeEmbeddedSwitchApplianceIconResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ChangeZigbeeEmbeddedSwitchApplianceIconResponse {
            const message = new ChangeZigbeeEmbeddedSwitchApplianceIconResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeZigbeeEmbeddedSwitchApplianceIconResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeZigbeeEmbeddedSwitchApplianceIconResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeZigbeeEmbeddedSwitchApplianceIconResponse {
            return ChangeZigbeeEmbeddedSwitchApplianceIconResponse.deserialize(bytes);
        }
    }
    export class SetEmbeddedSwitchAreaMasterEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            is_area_master?: boolean;
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("is_area_master" in data && data.is_area_master != undefined) {
                    this.is_area_master = data.is_area_master;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_area_master() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_area_master(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            is_area_master?: boolean;
            device_id?: string;
        }): SetEmbeddedSwitchAreaMasterEvent {
            const message = new SetEmbeddedSwitchAreaMasterEvent({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.is_area_master != null) {
                message.is_area_master = data.is_area_master;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                is_area_master?: boolean;
                device_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.is_area_master != null) {
                data.is_area_master = this.is_area_master;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.is_area_master != false)
                writer.writeBool(5, this.is_area_master);
            if (this.device_id.length)
                writer.writeString(6, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetEmbeddedSwitchAreaMasterEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetEmbeddedSwitchAreaMasterEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        message.is_area_master = reader.readBool();
                        break;
                    case 6:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetEmbeddedSwitchAreaMasterEvent {
            return SetEmbeddedSwitchAreaMasterEvent.deserialize(bytes);
        }
    }
}
