/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/smart_console.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./device_constants";
import * as dependency_2 from "./../activity/activity_constants";
import * as dependency_3 from "./../gateway-models/groups/gmgroups";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class SmartConsoleRelayAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            relay_id?: number;
            relay_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
                if ("relay_state" in data && data.relay_state != undefined) {
                    this.relay_state = data.relay_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get relay_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set relay_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            relay_id?: number;
            relay_state?: number;
        }): SmartConsoleRelayAction {
            const message = new SmartConsoleRelayAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            if (data.relay_state != null) {
                message.relay_state = data.relay_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                relay_id?: number;
                relay_state?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            if (this.relay_state != null) {
                data.relay_state = this.relay_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.relay_id != 0)
                writer.writeInt32(2, this.relay_id);
            if (this.relay_state != 0)
                writer.writeInt32(3, this.relay_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleRelayAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleRelayAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.relay_id = reader.readInt32();
                        break;
                    case 3:
                        message.relay_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleRelayAction {
            return SmartConsoleRelayAction.deserialize(bytes);
        }
    }
    export class SmartConsoleGroupButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            group_id?: number;
            room_id?: string;
        }): SmartConsoleGroupButtonProperties {
            const message = new SmartConsoleGroupButtonProperties({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                room_id?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleGroupButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleGroupButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleGroupButtonProperties {
            return SmartConsoleGroupButtonProperties.deserialize(bytes);
        }
    }
    export class SmartConsoleSceneButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            scene_id?: number;
            room_id?: string;
        }): SmartConsoleSceneButtonProperties {
            const message = new SmartConsoleSceneButtonProperties({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                room_id?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleSceneButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleSceneButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleSceneButtonProperties {
            return SmartConsoleSceneButtonProperties.deserialize(bytes);
        }
    }
    export class SmartConsoleCurtainButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string[];
            appliance_id?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set device_id(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set appliance_id(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string[];
            appliance_id?: string[];
        }): SmartConsoleCurtainButtonProperties {
            const message = new SmartConsoleCurtainButtonProperties({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string[];
                appliance_id?: string[];
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeRepeatedString(1, this.device_id);
            if (this.appliance_id.length)
                writer.writeRepeatedString(2, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleCurtainButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleCurtainButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleCurtainButtonProperties {
            return SmartConsoleCurtainButtonProperties.deserialize(bytes);
        }
    }
    export class SmartConsoleFanButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): SmartConsoleFanButtonProperties {
            const message = new SmartConsoleFanButtonProperties({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleFanButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleFanButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleFanButtonProperties {
            return SmartConsoleFanButtonProperties.deserialize(bytes);
        }
    }
    export class SmartConsoleRelayButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            relay_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
            }
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            relay_id?: number;
        }): SmartConsoleRelayButtonProperties {
            const message = new SmartConsoleRelayButtonProperties({});
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            return message;
        }
        toObject() {
            const data: {
                relay_id?: number;
            } = {};
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.relay_id != 0)
                writer.writeInt32(1, this.relay_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleRelayButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleRelayButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.relay_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleRelayButtonProperties {
            return SmartConsoleRelayButtonProperties.deserialize(bytes);
        }
    }
    export class SmartConsoleRemoteRelayButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            relay_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            relay_id?: number;
        }): SmartConsoleRemoteRelayButtonProperties {
            const message = new SmartConsoleRemoteRelayButtonProperties({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                relay_id?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.relay_id != 0)
                writer.writeInt32(2, this.relay_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleRemoteRelayButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleRemoteRelayButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.relay_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleRemoteRelayButtonProperties {
            return SmartConsoleRemoteRelayButtonProperties.deserialize(bytes);
        }
    }
    export class SmartConsoleNoPropsButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SmartConsoleNoPropsButtonProperties {
            const message = new SmartConsoleNoPropsButtonProperties({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleNoPropsButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleNoPropsButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleNoPropsButtonProperties {
            return SmartConsoleNoPropsButtonProperties.deserialize(bytes);
        }
    }
    export class SmartConsoleRelay extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            relay_id?: number;
            relay_name?: string;
            relay_state?: number;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            is_high_power?: boolean;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
            is_assigned?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
                if ("relay_name" in data && data.relay_name != undefined) {
                    this.relay_name = data.relay_name;
                }
                if ("relay_state" in data && data.relay_state != undefined) {
                    this.relay_state = data.relay_state;
                }
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
                if ("is_high_power" in data && data.is_high_power != undefined) {
                    this.is_high_power = data.is_high_power;
                }
                if ("last_update_time" in data && data.last_update_time != undefined) {
                    this.last_update_time = data.last_update_time;
                }
                if ("last_update_by" in data && data.last_update_by != undefined) {
                    this.last_update_by = data.last_update_by;
                }
                if ("last_update_user" in data && data.last_update_user != undefined) {
                    this.last_update_user = data.last_update_user;
                }
                if ("last_update_source" in data && data.last_update_source != undefined) {
                    this.last_update_source = data.last_update_source;
                }
                if ("is_assigned" in data && data.is_assigned != undefined) {
                    this.is_assigned = data.is_assigned;
                }
            }
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set relay_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get relay_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set relay_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set appliance_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_high_power() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_high_power(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get last_update_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set last_update_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get last_update_by() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set last_update_by(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get last_update_user() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set last_update_user(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get last_update_source() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set last_update_source(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get is_assigned() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set is_assigned(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            relay_id?: number;
            relay_name?: string;
            relay_state?: number;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            is_high_power?: boolean;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
            is_assigned?: boolean;
        }): SmartConsoleRelay {
            const message = new SmartConsoleRelay({});
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            if (data.relay_name != null) {
                message.relay_name = data.relay_name;
            }
            if (data.relay_state != null) {
                message.relay_state = data.relay_state;
            }
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            if (data.is_high_power != null) {
                message.is_high_power = data.is_high_power;
            }
            if (data.last_update_time != null) {
                message.last_update_time = data.last_update_time;
            }
            if (data.last_update_by != null) {
                message.last_update_by = data.last_update_by;
            }
            if (data.last_update_user != null) {
                message.last_update_user = data.last_update_user;
            }
            if (data.last_update_source != null) {
                message.last_update_source = data.last_update_source;
            }
            if (data.is_assigned != null) {
                message.is_assigned = data.is_assigned;
            }
            return message;
        }
        toObject() {
            const data: {
                relay_id?: number;
                relay_name?: string;
                relay_state?: number;
                appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
                is_high_power?: boolean;
                last_update_time?: number;
                last_update_by?: string;
                last_update_user?: string;
                last_update_source?: string;
                is_assigned?: boolean;
            } = {};
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            if (this.relay_name != null) {
                data.relay_name = this.relay_name;
            }
            if (this.relay_state != null) {
                data.relay_state = this.relay_state;
            }
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            if (this.is_high_power != null) {
                data.is_high_power = this.is_high_power;
            }
            if (this.last_update_time != null) {
                data.last_update_time = this.last_update_time;
            }
            if (this.last_update_by != null) {
                data.last_update_by = this.last_update_by;
            }
            if (this.last_update_user != null) {
                data.last_update_user = this.last_update_user;
            }
            if (this.last_update_source != null) {
                data.last_update_source = this.last_update_source;
            }
            if (this.is_assigned != null) {
                data.is_assigned = this.is_assigned;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.relay_id != 0)
                writer.writeInt32(1, this.relay_id);
            if (this.relay_name.length)
                writer.writeString(2, this.relay_name);
            if (this.relay_state != 0)
                writer.writeInt32(3, this.relay_state);
            if (this.appliance_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(4, this.appliance_type);
            if (this.is_high_power != false)
                writer.writeBool(5, this.is_high_power);
            if (this.last_update_time != 0)
                writer.writeInt64(6, this.last_update_time);
            if (this.last_update_by.length)
                writer.writeString(7, this.last_update_by);
            if (this.last_update_user.length)
                writer.writeString(8, this.last_update_user);
            if (this.last_update_source.length)
                writer.writeString(9, this.last_update_source);
            if (this.is_assigned != false)
                writer.writeBool(10, this.is_assigned);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleRelay {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleRelay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.relay_id = reader.readInt32();
                        break;
                    case 2:
                        message.relay_name = reader.readString();
                        break;
                    case 3:
                        message.relay_state = reader.readInt32();
                        break;
                    case 4:
                        message.appliance_type = reader.readEnum();
                        break;
                    case 5:
                        message.is_high_power = reader.readBool();
                        break;
                    case 6:
                        message.last_update_time = reader.readInt64();
                        break;
                    case 7:
                        message.last_update_by = reader.readString();
                        break;
                    case 8:
                        message.last_update_user = reader.readString();
                        break;
                    case 9:
                        message.last_update_source = reader.readString();
                        break;
                    case 10:
                        message.is_assigned = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleRelay {
            return SmartConsoleRelay.deserialize(bytes);
        }
    }
    export class SmartConsoleButton extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15, 16, 17]];
        constructor(data?: any[] | ({
            button_id?: number;
            button_type?: dependency_1.com.keus.hub.SMART_CONSOLE_BUTTON_TYPES;
        } & (({
            group_button_properties?: SmartConsoleGroupButtonProperties;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            relay_button_properties?: never;
            noprops_button_properties?: never;
            remote_relay_button_properties?: never;
            gmgroup_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: SmartConsoleSceneButtonProperties;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            relay_button_properties?: never;
            noprops_button_properties?: never;
            remote_relay_button_properties?: never;
            gmgroup_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: SmartConsoleCurtainButtonProperties;
            fan_button_properties?: never;
            relay_button_properties?: never;
            noprops_button_properties?: never;
            remote_relay_button_properties?: never;
            gmgroup_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: SmartConsoleFanButtonProperties;
            relay_button_properties?: never;
            noprops_button_properties?: never;
            remote_relay_button_properties?: never;
            gmgroup_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            relay_button_properties?: SmartConsoleRelayButtonProperties;
            noprops_button_properties?: never;
            remote_relay_button_properties?: never;
            gmgroup_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            relay_button_properties?: never;
            noprops_button_properties?: SmartConsoleNoPropsButtonProperties;
            remote_relay_button_properties?: never;
            gmgroup_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            relay_button_properties?: never;
            noprops_button_properties?: never;
            remote_relay_button_properties?: SmartConsoleRemoteRelayButtonProperties;
            gmgroup_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            relay_button_properties?: never;
            noprops_button_properties?: never;
            remote_relay_button_properties?: never;
            gmgroup_button_properties?: dependency_3.com.keus.gateway.SmartConsoleGMGroupButtonProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("button_id" in data && data.button_id != undefined) {
                    this.button_id = data.button_id;
                }
                if ("button_type" in data && data.button_type != undefined) {
                    this.button_type = data.button_type;
                }
                if ("group_button_properties" in data && data.group_button_properties != undefined) {
                    this.group_button_properties = data.group_button_properties;
                }
                if ("scene_button_properties" in data && data.scene_button_properties != undefined) {
                    this.scene_button_properties = data.scene_button_properties;
                }
                if ("curtain_button_properties" in data && data.curtain_button_properties != undefined) {
                    this.curtain_button_properties = data.curtain_button_properties;
                }
                if ("fan_button_properties" in data && data.fan_button_properties != undefined) {
                    this.fan_button_properties = data.fan_button_properties;
                }
                if ("relay_button_properties" in data && data.relay_button_properties != undefined) {
                    this.relay_button_properties = data.relay_button_properties;
                }
                if ("noprops_button_properties" in data && data.noprops_button_properties != undefined) {
                    this.noprops_button_properties = data.noprops_button_properties;
                }
                if ("remote_relay_button_properties" in data && data.remote_relay_button_properties != undefined) {
                    this.remote_relay_button_properties = data.remote_relay_button_properties;
                }
                if ("gmgroup_button_properties" in data && data.gmgroup_button_properties != undefined) {
                    this.gmgroup_button_properties = data.gmgroup_button_properties;
                }
            }
        }
        get button_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set button_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get button_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.SMART_CONSOLE_BUTTON_TYPES.SC_UNCONFIGURED) as dependency_1.com.keus.hub.SMART_CONSOLE_BUTTON_TYPES;
        }
        set button_type(value: dependency_1.com.keus.hub.SMART_CONSOLE_BUTTON_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_button_properties() {
            return pb_1.Message.getWrapperField(this, SmartConsoleGroupButtonProperties, 10) as SmartConsoleGroupButtonProperties;
        }
        set group_button_properties(value: SmartConsoleGroupButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_group_button_properties() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get scene_button_properties() {
            return pb_1.Message.getWrapperField(this, SmartConsoleSceneButtonProperties, 11) as SmartConsoleSceneButtonProperties;
        }
        set scene_button_properties(value: SmartConsoleSceneButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_scene_button_properties() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get curtain_button_properties() {
            return pb_1.Message.getWrapperField(this, SmartConsoleCurtainButtonProperties, 12) as SmartConsoleCurtainButtonProperties;
        }
        set curtain_button_properties(value: SmartConsoleCurtainButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_curtain_button_properties() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get fan_button_properties() {
            return pb_1.Message.getWrapperField(this, SmartConsoleFanButtonProperties, 13) as SmartConsoleFanButtonProperties;
        }
        set fan_button_properties(value: SmartConsoleFanButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_fan_button_properties() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get relay_button_properties() {
            return pb_1.Message.getWrapperField(this, SmartConsoleRelayButtonProperties, 14) as SmartConsoleRelayButtonProperties;
        }
        set relay_button_properties(value: SmartConsoleRelayButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_relay_button_properties() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get noprops_button_properties() {
            return pb_1.Message.getWrapperField(this, SmartConsoleNoPropsButtonProperties, 15) as SmartConsoleNoPropsButtonProperties;
        }
        set noprops_button_properties(value: SmartConsoleNoPropsButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_noprops_button_properties() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get remote_relay_button_properties() {
            return pb_1.Message.getWrapperField(this, SmartConsoleRemoteRelayButtonProperties, 16) as SmartConsoleRemoteRelayButtonProperties;
        }
        set remote_relay_button_properties(value: SmartConsoleRemoteRelayButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_remote_relay_button_properties() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get gmgroup_button_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.SmartConsoleGMGroupButtonProperties, 17) as dependency_3.com.keus.gateway.SmartConsoleGMGroupButtonProperties;
        }
        set gmgroup_button_properties(value: dependency_3.com.keus.gateway.SmartConsoleGMGroupButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_gmgroup_button_properties() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get button_properties() {
            const cases: {
                [index: number]: "none" | "group_button_properties" | "scene_button_properties" | "curtain_button_properties" | "fan_button_properties" | "relay_button_properties" | "noprops_button_properties" | "remote_relay_button_properties" | "gmgroup_button_properties";
            } = {
                0: "none",
                10: "group_button_properties",
                11: "scene_button_properties",
                12: "curtain_button_properties",
                13: "fan_button_properties",
                14: "relay_button_properties",
                15: "noprops_button_properties",
                16: "remote_relay_button_properties",
                17: "gmgroup_button_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15, 16, 17])];
        }
        static fromObject(data: {
            button_id?: number;
            button_type?: dependency_1.com.keus.hub.SMART_CONSOLE_BUTTON_TYPES;
            group_button_properties?: ReturnType<typeof SmartConsoleGroupButtonProperties.prototype.toObject>;
            scene_button_properties?: ReturnType<typeof SmartConsoleSceneButtonProperties.prototype.toObject>;
            curtain_button_properties?: ReturnType<typeof SmartConsoleCurtainButtonProperties.prototype.toObject>;
            fan_button_properties?: ReturnType<typeof SmartConsoleFanButtonProperties.prototype.toObject>;
            relay_button_properties?: ReturnType<typeof SmartConsoleRelayButtonProperties.prototype.toObject>;
            noprops_button_properties?: ReturnType<typeof SmartConsoleNoPropsButtonProperties.prototype.toObject>;
            remote_relay_button_properties?: ReturnType<typeof SmartConsoleRemoteRelayButtonProperties.prototype.toObject>;
            gmgroup_button_properties?: ReturnType<typeof dependency_3.com.keus.gateway.SmartConsoleGMGroupButtonProperties.prototype.toObject>;
        }): SmartConsoleButton {
            const message = new SmartConsoleButton({});
            if (data.button_id != null) {
                message.button_id = data.button_id;
            }
            if (data.button_type != null) {
                message.button_type = data.button_type;
            }
            if (data.group_button_properties != null) {
                message.group_button_properties = SmartConsoleGroupButtonProperties.fromObject(data.group_button_properties);
            }
            if (data.scene_button_properties != null) {
                message.scene_button_properties = SmartConsoleSceneButtonProperties.fromObject(data.scene_button_properties);
            }
            if (data.curtain_button_properties != null) {
                message.curtain_button_properties = SmartConsoleCurtainButtonProperties.fromObject(data.curtain_button_properties);
            }
            if (data.fan_button_properties != null) {
                message.fan_button_properties = SmartConsoleFanButtonProperties.fromObject(data.fan_button_properties);
            }
            if (data.relay_button_properties != null) {
                message.relay_button_properties = SmartConsoleRelayButtonProperties.fromObject(data.relay_button_properties);
            }
            if (data.noprops_button_properties != null) {
                message.noprops_button_properties = SmartConsoleNoPropsButtonProperties.fromObject(data.noprops_button_properties);
            }
            if (data.remote_relay_button_properties != null) {
                message.remote_relay_button_properties = SmartConsoleRemoteRelayButtonProperties.fromObject(data.remote_relay_button_properties);
            }
            if (data.gmgroup_button_properties != null) {
                message.gmgroup_button_properties = dependency_3.com.keus.gateway.SmartConsoleGMGroupButtonProperties.fromObject(data.gmgroup_button_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                button_id?: number;
                button_type?: dependency_1.com.keus.hub.SMART_CONSOLE_BUTTON_TYPES;
                group_button_properties?: ReturnType<typeof SmartConsoleGroupButtonProperties.prototype.toObject>;
                scene_button_properties?: ReturnType<typeof SmartConsoleSceneButtonProperties.prototype.toObject>;
                curtain_button_properties?: ReturnType<typeof SmartConsoleCurtainButtonProperties.prototype.toObject>;
                fan_button_properties?: ReturnType<typeof SmartConsoleFanButtonProperties.prototype.toObject>;
                relay_button_properties?: ReturnType<typeof SmartConsoleRelayButtonProperties.prototype.toObject>;
                noprops_button_properties?: ReturnType<typeof SmartConsoleNoPropsButtonProperties.prototype.toObject>;
                remote_relay_button_properties?: ReturnType<typeof SmartConsoleRemoteRelayButtonProperties.prototype.toObject>;
                gmgroup_button_properties?: ReturnType<typeof dependency_3.com.keus.gateway.SmartConsoleGMGroupButtonProperties.prototype.toObject>;
            } = {};
            if (this.button_id != null) {
                data.button_id = this.button_id;
            }
            if (this.button_type != null) {
                data.button_type = this.button_type;
            }
            if (this.group_button_properties != null) {
                data.group_button_properties = this.group_button_properties.toObject();
            }
            if (this.scene_button_properties != null) {
                data.scene_button_properties = this.scene_button_properties.toObject();
            }
            if (this.curtain_button_properties != null) {
                data.curtain_button_properties = this.curtain_button_properties.toObject();
            }
            if (this.fan_button_properties != null) {
                data.fan_button_properties = this.fan_button_properties.toObject();
            }
            if (this.relay_button_properties != null) {
                data.relay_button_properties = this.relay_button_properties.toObject();
            }
            if (this.noprops_button_properties != null) {
                data.noprops_button_properties = this.noprops_button_properties.toObject();
            }
            if (this.remote_relay_button_properties != null) {
                data.remote_relay_button_properties = this.remote_relay_button_properties.toObject();
            }
            if (this.gmgroup_button_properties != null) {
                data.gmgroup_button_properties = this.gmgroup_button_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.button_id != 0)
                writer.writeInt32(1, this.button_id);
            if (this.button_type != dependency_1.com.keus.hub.SMART_CONSOLE_BUTTON_TYPES.SC_UNCONFIGURED)
                writer.writeEnum(2, this.button_type);
            if (this.has_group_button_properties)
                writer.writeMessage(10, this.group_button_properties, () => this.group_button_properties.serialize(writer));
            if (this.has_scene_button_properties)
                writer.writeMessage(11, this.scene_button_properties, () => this.scene_button_properties.serialize(writer));
            if (this.has_curtain_button_properties)
                writer.writeMessage(12, this.curtain_button_properties, () => this.curtain_button_properties.serialize(writer));
            if (this.has_fan_button_properties)
                writer.writeMessage(13, this.fan_button_properties, () => this.fan_button_properties.serialize(writer));
            if (this.has_relay_button_properties)
                writer.writeMessage(14, this.relay_button_properties, () => this.relay_button_properties.serialize(writer));
            if (this.has_noprops_button_properties)
                writer.writeMessage(15, this.noprops_button_properties, () => this.noprops_button_properties.serialize(writer));
            if (this.has_remote_relay_button_properties)
                writer.writeMessage(16, this.remote_relay_button_properties, () => this.remote_relay_button_properties.serialize(writer));
            if (this.has_gmgroup_button_properties)
                writer.writeMessage(17, this.gmgroup_button_properties, () => this.gmgroup_button_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleButton {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleButton();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.button_id = reader.readInt32();
                        break;
                    case 2:
                        message.button_type = reader.readEnum();
                        break;
                    case 10:
                        reader.readMessage(message.group_button_properties, () => message.group_button_properties = SmartConsoleGroupButtonProperties.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.scene_button_properties, () => message.scene_button_properties = SmartConsoleSceneButtonProperties.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.curtain_button_properties, () => message.curtain_button_properties = SmartConsoleCurtainButtonProperties.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.fan_button_properties, () => message.fan_button_properties = SmartConsoleFanButtonProperties.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.relay_button_properties, () => message.relay_button_properties = SmartConsoleRelayButtonProperties.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.noprops_button_properties, () => message.noprops_button_properties = SmartConsoleNoPropsButtonProperties.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.remote_relay_button_properties, () => message.remote_relay_button_properties = SmartConsoleRemoteRelayButtonProperties.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.gmgroup_button_properties, () => message.gmgroup_button_properties = dependency_3.com.keus.gateway.SmartConsoleGMGroupButtonProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleButton {
            return SmartConsoleButton.deserialize(bytes);
        }
    }
    export class SmartConsoleState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SmartConsoleState {
            const message = new SmartConsoleState({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleState {
            return SmartConsoleState.deserialize(bytes);
        }
    }
    export class SmartConsoleProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            button?: SmartConsoleButton[];
            relay?: SmartConsoleRelay[];
            default_fan?: string;
            scene_step_size?: number;
            default_scene_id?: number;
            default_scene_room?: string;
            is_area_master?: boolean;
            is_dali_master?: boolean;
            identify_status?: boolean;
            interaction_mode?: dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("button" in data && data.button != undefined) {
                    this.button = data.button;
                }
                if ("relay" in data && data.relay != undefined) {
                    this.relay = data.relay;
                }
                if ("default_fan" in data && data.default_fan != undefined) {
                    this.default_fan = data.default_fan;
                }
                if ("scene_step_size" in data && data.scene_step_size != undefined) {
                    this.scene_step_size = data.scene_step_size;
                }
                if ("default_scene_id" in data && data.default_scene_id != undefined) {
                    this.default_scene_id = data.default_scene_id;
                }
                if ("default_scene_room" in data && data.default_scene_room != undefined) {
                    this.default_scene_room = data.default_scene_room;
                }
                if ("is_area_master" in data && data.is_area_master != undefined) {
                    this.is_area_master = data.is_area_master;
                }
                if ("is_dali_master" in data && data.is_dali_master != undefined) {
                    this.is_dali_master = data.is_dali_master;
                }
                if ("identify_status" in data && data.identify_status != undefined) {
                    this.identify_status = data.identify_status;
                }
                if ("interaction_mode" in data && data.interaction_mode != undefined) {
                    this.interaction_mode = data.interaction_mode;
                }
            }
        }
        get button() {
            return pb_1.Message.getRepeatedWrapperField(this, SmartConsoleButton, 1) as SmartConsoleButton[];
        }
        set button(value: SmartConsoleButton[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get relay() {
            return pb_1.Message.getRepeatedWrapperField(this, SmartConsoleRelay, 7) as SmartConsoleRelay[];
        }
        set relay(value: SmartConsoleRelay[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get default_fan() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set default_fan(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scene_step_size() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set scene_step_size(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get default_scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set default_scene_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get default_scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set default_scene_room(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get is_area_master() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set is_area_master(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get is_dali_master() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set is_dali_master(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get identify_status() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set identify_status(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get interaction_mode() {
            return pb_1.Message.getFieldWithDefault(this, 11, dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES.SC_PROXIMITY) as dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES;
        }
        set interaction_mode(value: dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            button?: ReturnType<typeof SmartConsoleButton.prototype.toObject>[];
            relay?: ReturnType<typeof SmartConsoleRelay.prototype.toObject>[];
            default_fan?: string;
            scene_step_size?: number;
            default_scene_id?: number;
            default_scene_room?: string;
            is_area_master?: boolean;
            is_dali_master?: boolean;
            identify_status?: boolean;
            interaction_mode?: dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES;
        }): SmartConsoleProperties {
            const message = new SmartConsoleProperties({});
            if (data.button != null) {
                message.button = data.button.map(item => SmartConsoleButton.fromObject(item));
            }
            if (data.relay != null) {
                message.relay = data.relay.map(item => SmartConsoleRelay.fromObject(item));
            }
            if (data.default_fan != null) {
                message.default_fan = data.default_fan;
            }
            if (data.scene_step_size != null) {
                message.scene_step_size = data.scene_step_size;
            }
            if (data.default_scene_id != null) {
                message.default_scene_id = data.default_scene_id;
            }
            if (data.default_scene_room != null) {
                message.default_scene_room = data.default_scene_room;
            }
            if (data.is_area_master != null) {
                message.is_area_master = data.is_area_master;
            }
            if (data.is_dali_master != null) {
                message.is_dali_master = data.is_dali_master;
            }
            if (data.identify_status != null) {
                message.identify_status = data.identify_status;
            }
            if (data.interaction_mode != null) {
                message.interaction_mode = data.interaction_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                button?: ReturnType<typeof SmartConsoleButton.prototype.toObject>[];
                relay?: ReturnType<typeof SmartConsoleRelay.prototype.toObject>[];
                default_fan?: string;
                scene_step_size?: number;
                default_scene_id?: number;
                default_scene_room?: string;
                is_area_master?: boolean;
                is_dali_master?: boolean;
                identify_status?: boolean;
                interaction_mode?: dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES;
            } = {};
            if (this.button != null) {
                data.button = this.button.map((item: SmartConsoleButton) => item.toObject());
            }
            if (this.relay != null) {
                data.relay = this.relay.map((item: SmartConsoleRelay) => item.toObject());
            }
            if (this.default_fan != null) {
                data.default_fan = this.default_fan;
            }
            if (this.scene_step_size != null) {
                data.scene_step_size = this.scene_step_size;
            }
            if (this.default_scene_id != null) {
                data.default_scene_id = this.default_scene_id;
            }
            if (this.default_scene_room != null) {
                data.default_scene_room = this.default_scene_room;
            }
            if (this.is_area_master != null) {
                data.is_area_master = this.is_area_master;
            }
            if (this.is_dali_master != null) {
                data.is_dali_master = this.is_dali_master;
            }
            if (this.identify_status != null) {
                data.identify_status = this.identify_status;
            }
            if (this.interaction_mode != null) {
                data.interaction_mode = this.interaction_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.button.length)
                writer.writeRepeatedMessage(1, this.button, (item: SmartConsoleButton) => item.serialize(writer));
            if (this.relay.length)
                writer.writeRepeatedMessage(7, this.relay, (item: SmartConsoleRelay) => item.serialize(writer));
            if (this.default_fan.length)
                writer.writeString(2, this.default_fan);
            if (this.scene_step_size != 0)
                writer.writeInt32(4, this.scene_step_size);
            if (this.default_scene_id != 0)
                writer.writeInt32(5, this.default_scene_id);
            if (this.default_scene_room.length)
                writer.writeString(6, this.default_scene_room);
            if (this.is_area_master != false)
                writer.writeBool(8, this.is_area_master);
            if (this.is_dali_master != false)
                writer.writeBool(9, this.is_dali_master);
            if (this.identify_status != false)
                writer.writeBool(10, this.identify_status);
            if (this.interaction_mode != dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES.SC_PROXIMITY)
                writer.writeEnum(11, this.interaction_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartConsoleProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartConsoleProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.button, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SmartConsoleButton.deserialize(reader), SmartConsoleButton));
                        break;
                    case 7:
                        reader.readMessage(message.relay, () => pb_1.Message.addToRepeatedWrapperField(message, 7, SmartConsoleRelay.deserialize(reader), SmartConsoleRelay));
                        break;
                    case 2:
                        message.default_fan = reader.readString();
                        break;
                    case 4:
                        message.scene_step_size = reader.readInt32();
                        break;
                    case 5:
                        message.default_scene_id = reader.readInt32();
                        break;
                    case 6:
                        message.default_scene_room = reader.readString();
                        break;
                    case 8:
                        message.is_area_master = reader.readBool();
                        break;
                    case 9:
                        message.is_dali_master = reader.readBool();
                        break;
                    case 10:
                        message.identify_status = reader.readBool();
                        break;
                    case 11:
                        message.interaction_mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartConsoleProperties {
            return SmartConsoleProperties.deserialize(bytes);
        }
    }
    export class FlashConsoleButtons extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            identify_status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("identify_status" in data && data.identify_status != undefined) {
                    this.identify_status = data.identify_status;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get identify_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set identify_status(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            identify_status?: boolean;
        }): FlashConsoleButtons {
            const message = new FlashConsoleButtons({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.identify_status != null) {
                message.identify_status = data.identify_status;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                identify_status?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.identify_status != null) {
                data.identify_status = this.identify_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.identify_status != false)
                writer.writeBool(2, this.identify_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlashConsoleButtons {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlashConsoleButtons();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.identify_status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlashConsoleButtons {
            return FlashConsoleButtons.deserialize(bytes);
        }
    }
    export class FlashConsoleButtonsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): FlashConsoleButtonsResponse {
            const message = new FlashConsoleButtonsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlashConsoleButtonsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlashConsoleButtonsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlashConsoleButtonsResponse {
            return FlashConsoleButtonsResponse.deserialize(bytes);
        }
    }
    export class ClearConsoleData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            force_clear?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("force_clear" in data && data.force_clear != undefined) {
                    this.force_clear = data.force_clear;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get force_clear() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set force_clear(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            force_clear?: boolean;
        }): ClearConsoleData {
            const message = new ClearConsoleData({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.force_clear != null) {
                message.force_clear = data.force_clear;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                force_clear?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.force_clear != null) {
                data.force_clear = this.force_clear;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.force_clear != false)
                writer.writeBool(2, this.force_clear);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearConsoleData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearConsoleData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.force_clear = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearConsoleData {
            return ClearConsoleData.deserialize(bytes);
        }
    }
    export class ClearConsoleDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ClearConsoleDataResponse {
            const message = new ClearConsoleDataResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearConsoleDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearConsoleDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearConsoleDataResponse {
            return ClearConsoleDataResponse.deserialize(bytes);
        }
    }
    export class ConfigureConsoleButtons extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            button?: SmartConsoleButton[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("button" in data && data.button != undefined) {
                    this.button = data.button;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get button() {
            return pb_1.Message.getRepeatedWrapperField(this, SmartConsoleButton, 2) as SmartConsoleButton[];
        }
        set button(value: SmartConsoleButton[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            button?: ReturnType<typeof SmartConsoleButton.prototype.toObject>[];
        }): ConfigureConsoleButtons {
            const message = new ConfigureConsoleButtons({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.button != null) {
                message.button = data.button.map(item => SmartConsoleButton.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                button?: ReturnType<typeof SmartConsoleButton.prototype.toObject>[];
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.button != null) {
                data.button = this.button.map((item: SmartConsoleButton) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.button.length)
                writer.writeRepeatedMessage(2, this.button, (item: SmartConsoleButton) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureConsoleButtons {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureConsoleButtons();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.button, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SmartConsoleButton.deserialize(reader), SmartConsoleButton));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureConsoleButtons {
            return ConfigureConsoleButtons.deserialize(bytes);
        }
    }
    export class ConfigureConsoleButtonsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureConsoleButtonsResponse {
            const message = new ConfigureConsoleButtonsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureConsoleButtonsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureConsoleButtonsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureConsoleButtonsResponse {
            return ConfigureConsoleButtonsResponse.deserialize(bytes);
        }
    }
    export class ConfigureSmartConsoleRelay extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            relay_id?: number;
            relay_name?: string;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            is_high_power?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
                if ("relay_name" in data && data.relay_name != undefined) {
                    this.relay_name = data.relay_name;
                }
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
                if ("is_high_power" in data && data.is_high_power != undefined) {
                    this.is_high_power = data.is_high_power;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get relay_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set relay_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set appliance_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_high_power() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_high_power(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            device_id?: string;
            relay_id?: number;
            relay_name?: string;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            is_high_power?: boolean;
        }): ConfigureSmartConsoleRelay {
            const message = new ConfigureSmartConsoleRelay({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            if (data.relay_name != null) {
                message.relay_name = data.relay_name;
            }
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            if (data.is_high_power != null) {
                message.is_high_power = data.is_high_power;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                relay_id?: number;
                relay_name?: string;
                appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
                is_high_power?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            if (this.relay_name != null) {
                data.relay_name = this.relay_name;
            }
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            if (this.is_high_power != null) {
                data.is_high_power = this.is_high_power;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.relay_id != 0)
                writer.writeInt32(2, this.relay_id);
            if (this.relay_name.length)
                writer.writeString(3, this.relay_name);
            if (this.appliance_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(5, this.appliance_type);
            if (this.is_high_power != false)
                writer.writeBool(6, this.is_high_power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureSmartConsoleRelay {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureSmartConsoleRelay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.relay_id = reader.readInt32();
                        break;
                    case 3:
                        message.relay_name = reader.readString();
                        break;
                    case 5:
                        message.appliance_type = reader.readEnum();
                        break;
                    case 6:
                        message.is_high_power = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureSmartConsoleRelay {
            return ConfigureSmartConsoleRelay.deserialize(bytes);
        }
    }
    export class ConfigureSmartConsoleRelayResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureSmartConsoleRelayResponse {
            const message = new ConfigureSmartConsoleRelayResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureSmartConsoleRelayResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureSmartConsoleRelayResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureSmartConsoleRelayResponse {
            return ConfigureSmartConsoleRelayResponse.deserialize(bytes);
        }
    }
    export class SetConsoleRelayState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            relay_id?: number;
            relay_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
                if ("relay_state" in data && data.relay_state != undefined) {
                    this.relay_state = data.relay_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get relay_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set relay_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            relay_id?: number;
            relay_state?: number;
        }): SetConsoleRelayState {
            const message = new SetConsoleRelayState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            if (data.relay_state != null) {
                message.relay_state = data.relay_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                relay_id?: number;
                relay_state?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            if (this.relay_state != null) {
                data.relay_state = this.relay_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.relay_id != 0)
                writer.writeInt32(2, this.relay_id);
            if (this.relay_state != 0)
                writer.writeInt32(3, this.relay_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetConsoleRelayState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetConsoleRelayState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.relay_id = reader.readInt32();
                        break;
                    case 3:
                        message.relay_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetConsoleRelayState {
            return SetConsoleRelayState.deserialize(bytes);
        }
    }
    export class SetConsoleRelayStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetConsoleRelayStateResponse {
            const message = new SetConsoleRelayStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetConsoleRelayStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetConsoleRelayStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetConsoleRelayStateResponse {
            return SetConsoleRelayStateResponse.deserialize(bytes);
        }
    }
    export class SetAreaMaster extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            is_area_master?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("is_area_master" in data && data.is_area_master != undefined) {
                    this.is_area_master = data.is_area_master;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_area_master() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_area_master(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            is_area_master?: boolean;
        }): SetAreaMaster {
            const message = new SetAreaMaster({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.is_area_master != null) {
                message.is_area_master = data.is_area_master;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                is_area_master?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.is_area_master != null) {
                data.is_area_master = this.is_area_master;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.is_area_master != false)
                writer.writeBool(2, this.is_area_master);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetAreaMaster {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetAreaMaster();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.is_area_master = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetAreaMaster {
            return SetAreaMaster.deserialize(bytes);
        }
    }
    export class SetAreaMasterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetAreaMasterResponse {
            const message = new SetAreaMasterResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetAreaMasterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetAreaMasterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetAreaMasterResponse {
            return SetAreaMasterResponse.deserialize(bytes);
        }
    }
    export class ConfigureSmartConsole extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            default_fan?: string;
            scene_step_size?: number;
            default_scene_id?: number;
            default_scene_room?: string;
            interaction_mode?: dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("default_fan" in data && data.default_fan != undefined) {
                    this.default_fan = data.default_fan;
                }
                if ("scene_step_size" in data && data.scene_step_size != undefined) {
                    this.scene_step_size = data.scene_step_size;
                }
                if ("default_scene_id" in data && data.default_scene_id != undefined) {
                    this.default_scene_id = data.default_scene_id;
                }
                if ("default_scene_room" in data && data.default_scene_room != undefined) {
                    this.default_scene_room = data.default_scene_room;
                }
                if ("interaction_mode" in data && data.interaction_mode != undefined) {
                    this.interaction_mode = data.interaction_mode;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get default_fan() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set default_fan(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get scene_step_size() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set scene_step_size(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get default_scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set default_scene_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get default_scene_room() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set default_scene_room(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get interaction_mode() {
            return pb_1.Message.getFieldWithDefault(this, 8, dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES.SC_PROXIMITY) as dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES;
        }
        set interaction_mode(value: dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            default_fan?: string;
            scene_step_size?: number;
            default_scene_id?: number;
            default_scene_room?: string;
            interaction_mode?: dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES;
        }): ConfigureSmartConsole {
            const message = new ConfigureSmartConsole({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.default_fan != null) {
                message.default_fan = data.default_fan;
            }
            if (data.scene_step_size != null) {
                message.scene_step_size = data.scene_step_size;
            }
            if (data.default_scene_id != null) {
                message.default_scene_id = data.default_scene_id;
            }
            if (data.default_scene_room != null) {
                message.default_scene_room = data.default_scene_room;
            }
            if (data.interaction_mode != null) {
                message.interaction_mode = data.interaction_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
                default_fan?: string;
                scene_step_size?: number;
                default_scene_id?: number;
                default_scene_room?: string;
                interaction_mode?: dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.default_fan != null) {
                data.default_fan = this.default_fan;
            }
            if (this.scene_step_size != null) {
                data.scene_step_size = this.scene_step_size;
            }
            if (this.default_scene_id != null) {
                data.default_scene_id = this.default_scene_id;
            }
            if (this.default_scene_room != null) {
                data.default_scene_room = this.default_scene_room;
            }
            if (this.interaction_mode != null) {
                data.interaction_mode = this.interaction_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(7, this.device_name);
            if (this.device_location.length)
                writer.writeString(2, this.device_location);
            if (this.default_fan.length)
                writer.writeString(3, this.default_fan);
            if (this.scene_step_size != 0)
                writer.writeInt32(4, this.scene_step_size);
            if (this.default_scene_id != 0)
                writer.writeInt32(5, this.default_scene_id);
            if (this.default_scene_room.length)
                writer.writeString(6, this.default_scene_room);
            if (this.interaction_mode != dependency_1.com.keus.hub.SMART_CONSOLE_INTERACTION_MODES.SC_PROXIMITY)
                writer.writeEnum(8, this.interaction_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureSmartConsole {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureSmartConsole();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 7:
                        message.device_name = reader.readString();
                        break;
                    case 2:
                        message.device_location = reader.readString();
                        break;
                    case 3:
                        message.default_fan = reader.readString();
                        break;
                    case 4:
                        message.scene_step_size = reader.readInt32();
                        break;
                    case 5:
                        message.default_scene_id = reader.readInt32();
                        break;
                    case 6:
                        message.default_scene_room = reader.readString();
                        break;
                    case 8:
                        message.interaction_mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureSmartConsole {
            return ConfigureSmartConsole.deserialize(bytes);
        }
    }
    export class ConfigureSmartConsoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureSmartConsoleResponse {
            const message = new ConfigureSmartConsoleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureSmartConsoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureSmartConsoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureSmartConsoleResponse {
            return ConfigureSmartConsoleResponse.deserialize(bytes);
        }
    }
    export class MoveSmartConsoleRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveSmartConsoleRoom {
            const message = new MoveSmartConsoleRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveSmartConsoleRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveSmartConsoleRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveSmartConsoleRoom {
            return MoveSmartConsoleRoom.deserialize(bytes);
        }
    }
    export class MoveSmartConsoleRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveSmartConsoleRoomResponse {
            const message = new MoveSmartConsoleRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveSmartConsoleRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveSmartConsoleRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveSmartConsoleRoomResponse {
            return MoveSmartConsoleRoomResponse.deserialize(bytes);
        }
    }
    export class ResetSmartConsole extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): ResetSmartConsole {
            const message = new ResetSmartConsole({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetSmartConsole {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetSmartConsole();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetSmartConsole {
            return ResetSmartConsole.deserialize(bytes);
        }
    }
    export class ResetSmartConsoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetSmartConsoleResponse {
            const message = new ResetSmartConsoleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetSmartConsoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetSmartConsoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetSmartConsoleResponse {
            return ResetSmartConsoleResponse.deserialize(bytes);
        }
    }
    export class SetDaliMaster extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            is_dali_master?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("is_dali_master" in data && data.is_dali_master != undefined) {
                    this.is_dali_master = data.is_dali_master;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_dali_master() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_dali_master(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            is_dali_master?: boolean;
        }): SetDaliMaster {
            const message = new SetDaliMaster({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.is_dali_master != null) {
                message.is_dali_master = data.is_dali_master;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                is_dali_master?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.is_dali_master != null) {
                data.is_dali_master = this.is_dali_master;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.is_dali_master != false)
                writer.writeBool(2, this.is_dali_master);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDaliMaster {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDaliMaster();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.is_dali_master = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDaliMaster {
            return SetDaliMaster.deserialize(bytes);
        }
    }
    export class SetDaliMasterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetDaliMasterResponse {
            const message = new SetDaliMasterResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDaliMasterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDaliMasterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDaliMasterResponse {
            return SetDaliMasterResponse.deserialize(bytes);
        }
    }
    export class DiscoverDaliDevices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            discovery_type?: dependency_1.com.keus.hub.SMART_CONSOLE_DALI_DISCOVERY_TYPES;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("discovery_type" in data && data.discovery_type != undefined) {
                    this.discovery_type = data.discovery_type;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get discovery_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.SMART_CONSOLE_DALI_DISCOVERY_TYPES.SC_ADDITIVE_DISCOVERY) as dependency_1.com.keus.hub.SMART_CONSOLE_DALI_DISCOVERY_TYPES;
        }
        set discovery_type(value: dependency_1.com.keus.hub.SMART_CONSOLE_DALI_DISCOVERY_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            discovery_type?: dependency_1.com.keus.hub.SMART_CONSOLE_DALI_DISCOVERY_TYPES;
        }): DiscoverDaliDevices {
            const message = new DiscoverDaliDevices({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.discovery_type != null) {
                message.discovery_type = data.discovery_type;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                discovery_type?: dependency_1.com.keus.hub.SMART_CONSOLE_DALI_DISCOVERY_TYPES;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.discovery_type != null) {
                data.discovery_type = this.discovery_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.discovery_type != dependency_1.com.keus.hub.SMART_CONSOLE_DALI_DISCOVERY_TYPES.SC_ADDITIVE_DISCOVERY)
                writer.writeEnum(2, this.discovery_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscoverDaliDevices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscoverDaliDevices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.discovery_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscoverDaliDevices {
            return DiscoverDaliDevices.deserialize(bytes);
        }
    }
    export class DiscoverDaliDevicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): DiscoverDaliDevicesResponse {
            const message = new DiscoverDaliDevicesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscoverDaliDevicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscoverDaliDevicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscoverDaliDevicesResponse {
            return DiscoverDaliDevicesResponse.deserialize(bytes);
        }
    }
    export class DaliSetRestoreLastLevel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            enable?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("enable" in data && data.enable != undefined) {
                    this.enable = data.enable;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get enable() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set enable(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            enable?: boolean;
        }): DaliSetRestoreLastLevel {
            const message = new DaliSetRestoreLastLevel({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.enable != null) {
                message.enable = data.enable;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                enable?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.enable != null) {
                data.enable = this.enable;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.enable != false)
                writer.writeBool(2, this.enable);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSetRestoreLastLevel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSetRestoreLastLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.enable = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSetRestoreLastLevel {
            return DaliSetRestoreLastLevel.deserialize(bytes);
        }
    }
    export class DaliSetRestoreLastLevelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): DaliSetRestoreLastLevelResponse {
            const message = new DaliSetRestoreLastLevelResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSetRestoreLastLevelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSetRestoreLastLevelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSetRestoreLastLevelResponse {
            return DaliSetRestoreLastLevelResponse.deserialize(bytes);
        }
    }
    export class SyncSceneUIData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): SyncSceneUIData {
            const message = new SyncSceneUIData({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncSceneUIData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncSceneUIData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SyncSceneUIData {
            return SyncSceneUIData.deserialize(bytes);
        }
    }
    export class SyncSceneUIDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }): SyncSceneUIDataResponse {
            const message = new SyncSceneUIDataResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                request_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.request_id.length)
                writer.writeString(4, this.request_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncSceneUIDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncSceneUIDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.request_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SyncSceneUIDataResponse {
            return SyncSceneUIDataResponse.deserialize(bytes);
        }
    }
    export class ReportConsoleRelayActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            relay_id?: number;
            relay_state?: number;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
                if ("relay_state" in data && data.relay_state != undefined) {
                    this.relay_state = data.relay_state;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get relay_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set relay_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            device_id?: string;
            relay_id?: number;
            relay_state?: number;
            activity_time?: number;
        }): ReportConsoleRelayActivity {
            const message = new ReportConsoleRelayActivity({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            if (data.relay_state != null) {
                message.relay_state = data.relay_state;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                relay_id?: number;
                relay_state?: number;
                activity_time?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            if (this.relay_state != null) {
                data.relay_state = this.relay_state;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.relay_id != 0)
                writer.writeInt32(2, this.relay_id);
            if (this.relay_state != 0)
                writer.writeInt32(3, this.relay_state);
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportConsoleRelayActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportConsoleRelayActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.relay_id = reader.readInt32();
                        break;
                    case 3:
                        message.relay_state = reader.readInt32();
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportConsoleRelayActivity {
            return ReportConsoleRelayActivity.deserialize(bytes);
        }
    }
    export class ConsoleRelayEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_state?: SetConsoleRelayState;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_state" in data && data.update_state != undefined) {
                    this.update_state = data.update_state;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get update_state() {
            return pb_1.Message.getWrapperField(this, SetConsoleRelayState, 1) as SetConsoleRelayState;
        }
        set update_state(value: SetConsoleRelayState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_update_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_state?: ReturnType<typeof SetConsoleRelayState.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): ConsoleRelayEvent {
            const message = new ConsoleRelayEvent({});
            if (data.update_state != null) {
                message.update_state = SetConsoleRelayState.fromObject(data.update_state);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                update_state?: ReturnType<typeof SetConsoleRelayState.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.update_state != null) {
                data.update_state = this.update_state.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_update_state)
                writer.writeMessage(1, this.update_state, () => this.update_state.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsoleRelayEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsoleRelayEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.update_state, () => message.update_state = SetConsoleRelayState.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsoleRelayEvent {
            return ConsoleRelayEvent.deserialize(bytes);
        }
    }
    export class ReplaceSmartConsole extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceSmartConsole {
            const message = new ReplaceSmartConsole({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceSmartConsole {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceSmartConsole();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceSmartConsole {
            return ReplaceSmartConsole.deserialize(bytes);
        }
    }
    export class ReplaceSmartConsoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceSmartConsoleResponse {
            const message = new ReplaceSmartConsoleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceSmartConsoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceSmartConsoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceSmartConsoleResponse {
            return ReplaceSmartConsoleResponse.deserialize(bytes);
        }
    }
    export class RenameSmartConsole extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            relay_id?: number;
            relay_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
                if ("relay_name" in data && data.relay_name != undefined) {
                    this.relay_name = data.relay_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get relay_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set relay_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            relay_id?: number;
            relay_name?: string;
        }): RenameSmartConsole {
            const message = new RenameSmartConsole({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            if (data.relay_name != null) {
                message.relay_name = data.relay_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                relay_id?: number;
                relay_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            if (this.relay_name != null) {
                data.relay_name = this.relay_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.relay_id != 0)
                writer.writeInt32(2, this.relay_id);
            if (this.relay_name.length)
                writer.writeString(3, this.relay_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameSmartConsole {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameSmartConsole();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.relay_id = reader.readInt32();
                        break;
                    case 3:
                        message.relay_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameSmartConsole {
            return RenameSmartConsole.deserialize(bytes);
        }
    }
    export class RenameSmartConsoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameSmartConsoleResponse {
            const message = new RenameSmartConsoleResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameSmartConsoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameSmartConsoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameSmartConsoleResponse {
            return RenameSmartConsoleResponse.deserialize(bytes);
        }
    }
    export class ChangeSmartConsoleRelayApplianceType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            relay_id?: number;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("relay_id" in data && data.relay_id != undefined) {
                    this.relay_id = data.relay_id;
                }
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get relay_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set relay_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set appliance_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            relay_id?: number;
            appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }): ChangeSmartConsoleRelayApplianceType {
            const message = new ChangeSmartConsoleRelayApplianceType({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.relay_id != null) {
                message.relay_id = data.relay_id;
            }
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                relay_id?: number;
                appliance_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.relay_id != null) {
                data.relay_id = this.relay_id;
            }
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.relay_id != 0)
                writer.writeInt32(2, this.relay_id);
            if (this.appliance_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(3, this.appliance_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeSmartConsoleRelayApplianceType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeSmartConsoleRelayApplianceType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.relay_id = reader.readInt32();
                        break;
                    case 3:
                        message.appliance_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeSmartConsoleRelayApplianceType {
            return ChangeSmartConsoleRelayApplianceType.deserialize(bytes);
        }
    }
    export class ChangeSmartConsoleRelayApplianceTypeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ChangeSmartConsoleRelayApplianceTypeResponse {
            const message = new ChangeSmartConsoleRelayApplianceTypeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeSmartConsoleRelayApplianceTypeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeSmartConsoleRelayApplianceTypeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeSmartConsoleRelayApplianceTypeResponse {
            return ChangeSmartConsoleRelayApplianceTypeResponse.deserialize(bytes);
        }
    }
    export class SetAreaMasterEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            is_area_master?: boolean;
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("is_area_master" in data && data.is_area_master != undefined) {
                    this.is_area_master = data.is_area_master;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_area_master() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_area_master(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            is_area_master?: boolean;
            device_id?: string;
        }): SetAreaMasterEvent {
            const message = new SetAreaMasterEvent({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.is_area_master != null) {
                message.is_area_master = data.is_area_master;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                is_area_master?: boolean;
                device_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.is_area_master != null) {
                data.is_area_master = this.is_area_master;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.is_area_master != false)
                writer.writeBool(5, this.is_area_master);
            if (this.device_id.length)
                writer.writeString(6, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetAreaMasterEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetAreaMasterEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        message.is_area_master = reader.readBool();
                        break;
                    case 6:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetAreaMasterEvent {
            return SetAreaMasterEvent.deserialize(bytes);
        }
    }
}
