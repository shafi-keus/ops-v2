/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/zigbee_rgbwwa_driver.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./device_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class ZigbeeRgbwwaAction extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12]];
        constructor(data?: any[] | ({
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            device_state?: number;
        } & (({
            rgb_state?: RGB;
            wwa_state?: never;
        } | {
            rgb_state?: never;
            wwa_state?: WWA;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("rgb_state" in data && data.rgb_state != undefined) {
                    this.rgb_state = data.rgb_state;
                }
                if ("wwa_state" in data && data.wwa_state != undefined) {
                    this.wwa_state = data.wwa_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rgb_state() {
            return pb_1.Message.getWrapperField(this, RGB, 11) as RGB;
        }
        set rgb_state(value: RGB) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_rgb_state() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get wwa_state() {
            return pb_1.Message.getWrapperField(this, WWA, 12) as WWA;
        }
        set wwa_state(value: WWA) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_wwa_state() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get update_state() {
            const cases: {
                [index: number]: "none" | "rgb_state" | "wwa_state";
            } = {
                0: "none",
                11: "rgb_state",
                12: "wwa_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12])];
        }
        static fromObject(data: {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            device_state?: number;
            rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
            wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
        }): ZigbeeRgbwwaAction {
            const message = new ZigbeeRgbwwaAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.rgb_state != null) {
                message.rgb_state = RGB.fromObject(data.rgb_state);
            }
            if (data.wwa_state != null) {
                message.wwa_state = WWA.fromObject(data.wwa_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                device_state?: number;
                rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
                wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.rgb_state != null) {
                data.rgb_state = this.rgb_state.toObject();
            }
            if (this.wwa_state != null) {
                data.wwa_state = this.wwa_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(2, this.update_type);
            if (this.device_state != 0)
                writer.writeInt32(3, this.device_state);
            if (this.has_rgb_state)
                writer.writeMessage(11, this.rgb_state, () => this.rgb_state.serialize(writer));
            if (this.has_wwa_state)
                writer.writeMessage(12, this.wwa_state, () => this.wwa_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeRgbwwaAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeRgbwwaAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.update_type = reader.readEnum();
                        break;
                    case 3:
                        message.device_state = reader.readInt32();
                        break;
                    case 11:
                        reader.readMessage(message.rgb_state, () => message.rgb_state = RGB.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.wwa_state, () => message.wwa_state = WWA.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeRgbwwaAction {
            return ZigbeeRgbwwaAction.deserialize(bytes);
        }
    }
    export class GroupZigbeeRgbwwaAction extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12]];
        constructor(data?: any[] | ({
            group_id?: number;
            room_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            device_state?: number;
        } & (({
            rgb_state?: RGB;
            wwa_state?: never;
        } | {
            rgb_state?: never;
            wwa_state?: WWA;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("rgb_state" in data && data.rgb_state != undefined) {
                    this.rgb_state = data.rgb_state;
                }
                if ("wwa_state" in data && data.wwa_state != undefined) {
                    this.wwa_state = data.wwa_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get rgb_state() {
            return pb_1.Message.getWrapperField(this, RGB, 11) as RGB;
        }
        set rgb_state(value: RGB) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_rgb_state() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get wwa_state() {
            return pb_1.Message.getWrapperField(this, WWA, 12) as WWA;
        }
        set wwa_state(value: WWA) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_wwa_state() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get update_state() {
            const cases: {
                [index: number]: "none" | "rgb_state" | "wwa_state";
            } = {
                0: "none",
                11: "rgb_state",
                12: "wwa_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12])];
        }
        static fromObject(data: {
            group_id?: number;
            room_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            device_state?: number;
            rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
            wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
        }): GroupZigbeeRgbwwaAction {
            const message = new GroupZigbeeRgbwwaAction({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.rgb_state != null) {
                message.rgb_state = RGB.fromObject(data.rgb_state);
            }
            if (data.wwa_state != null) {
                message.wwa_state = WWA.fromObject(data.wwa_state);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                room_id?: string;
                update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                device_state?: number;
                rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
                wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.rgb_state != null) {
                data.rgb_state = this.rgb_state.toObject();
            }
            if (this.wwa_state != null) {
                data.wwa_state = this.wwa_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (this.update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(3, this.update_type);
            if (this.device_state != 0)
                writer.writeInt32(4, this.device_state);
            if (this.has_rgb_state)
                writer.writeMessage(11, this.rgb_state, () => this.rgb_state.serialize(writer));
            if (this.has_wwa_state)
                writer.writeMessage(12, this.wwa_state, () => this.wwa_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupZigbeeRgbwwaAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupZigbeeRgbwwaAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    case 3:
                        message.update_type = reader.readEnum();
                        break;
                    case 4:
                        message.device_state = reader.readInt32();
                        break;
                    case 11:
                        reader.readMessage(message.rgb_state, () => message.rgb_state = RGB.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.wwa_state, () => message.wwa_state = WWA.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupZigbeeRgbwwaAction {
            return GroupZigbeeRgbwwaAction.deserialize(bytes);
        }
    }
    export class GroupZigbeeRgbwwaState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            device_state?: number;
            rgb_state?: RGB;
            wwa_state?: WWA;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("rgb_state" in data && data.rgb_state != undefined) {
                    this.rgb_state = data.rgb_state;
                }
                if ("wwa_state" in data && data.wwa_state != undefined) {
                    this.wwa_state = data.wwa_state;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get rgb_state() {
            return pb_1.Message.getWrapperField(this, RGB, 3) as RGB;
        }
        set rgb_state(value: RGB) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_rgb_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get wwa_state() {
            return pb_1.Message.getWrapperField(this, WWA, 4) as WWA;
        }
        set wwa_state(value: WWA) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_wwa_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            device_state?: number;
            rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
            wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
        }): GroupZigbeeRgbwwaState {
            const message = new GroupZigbeeRgbwwaState({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.rgb_state != null) {
                message.rgb_state = RGB.fromObject(data.rgb_state);
            }
            if (data.wwa_state != null) {
                message.wwa_state = WWA.fromObject(data.wwa_state);
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                device_state?: number;
                rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
                wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.rgb_state != null) {
                data.rgb_state = this.rgb_state.toObject();
            }
            if (this.wwa_state != null) {
                data.wwa_state = this.wwa_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(1, this.update_type);
            if (this.device_state != 0)
                writer.writeInt32(2, this.device_state);
            if (this.has_rgb_state)
                writer.writeMessage(3, this.rgb_state, () => this.rgb_state.serialize(writer));
            if (this.has_wwa_state)
                writer.writeMessage(4, this.wwa_state, () => this.wwa_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupZigbeeRgbwwaState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupZigbeeRgbwwaState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.device_state = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.rgb_state, () => message.rgb_state = RGB.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.wwa_state, () => message.wwa_state = WWA.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupZigbeeRgbwwaState {
            return GroupZigbeeRgbwwaState.deserialize(bytes);
        }
    }
    export class GroupZigbeeRgbwwaProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            output_channels?: number;
            rgb_enabled?: boolean;
            warm_white_enabled?: boolean;
            cool_white_enabled?: boolean;
            amber_enabled?: boolean;
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            default_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            default_rgb_action?: RGB;
            default_wwa_action?: WWA;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("output_channels" in data && data.output_channels != undefined) {
                    this.output_channels = data.output_channels;
                }
                if ("rgb_enabled" in data && data.rgb_enabled != undefined) {
                    this.rgb_enabled = data.rgb_enabled;
                }
                if ("warm_white_enabled" in data && data.warm_white_enabled != undefined) {
                    this.warm_white_enabled = data.warm_white_enabled;
                }
                if ("cool_white_enabled" in data && data.cool_white_enabled != undefined) {
                    this.cool_white_enabled = data.cool_white_enabled;
                }
                if ("amber_enabled" in data && data.amber_enabled != undefined) {
                    this.amber_enabled = data.amber_enabled;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("fade_off" in data && data.fade_off != undefined) {
                    this.fade_off = data.fade_off;
                }
                if ("fade_down" in data && data.fade_down != undefined) {
                    this.fade_down = data.fade_down;
                }
                if ("default_update_type" in data && data.default_update_type != undefined) {
                    this.default_update_type = data.default_update_type;
                }
                if ("default_rgb_action" in data && data.default_rgb_action != undefined) {
                    this.default_rgb_action = data.default_rgb_action;
                }
                if ("default_wwa_action" in data && data.default_wwa_action != undefined) {
                    this.default_wwa_action = data.default_wwa_action;
                }
            }
        }
        get output_channels() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set output_channels(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get rgb_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set rgb_enabled(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get warm_white_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set warm_white_enabled(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get cool_white_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cool_white_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get amber_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set amber_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get fade_off() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set fade_off(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get fade_down() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set fade_down(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get default_update_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set default_update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 7, value);
        }
        get default_rgb_action() {
            return pb_1.Message.getWrapperField(this, RGB, 8) as RGB;
        }
        set default_rgb_action(value: RGB) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_default_rgb_action() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get default_wwa_action() {
            return pb_1.Message.getWrapperField(this, WWA, 9) as WWA;
        }
        set default_wwa_action(value: WWA) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_default_wwa_action() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            output_channels?: number;
            rgb_enabled?: boolean;
            warm_white_enabled?: boolean;
            cool_white_enabled?: boolean;
            amber_enabled?: boolean;
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            default_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            default_rgb_action?: ReturnType<typeof RGB.prototype.toObject>;
            default_wwa_action?: ReturnType<typeof WWA.prototype.toObject>;
        }): GroupZigbeeRgbwwaProperties {
            const message = new GroupZigbeeRgbwwaProperties({});
            if (data.output_channels != null) {
                message.output_channels = data.output_channels;
            }
            if (data.rgb_enabled != null) {
                message.rgb_enabled = data.rgb_enabled;
            }
            if (data.warm_white_enabled != null) {
                message.warm_white_enabled = data.warm_white_enabled;
            }
            if (data.cool_white_enabled != null) {
                message.cool_white_enabled = data.cool_white_enabled;
            }
            if (data.amber_enabled != null) {
                message.amber_enabled = data.amber_enabled;
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.fade_off != null) {
                message.fade_off = data.fade_off;
            }
            if (data.fade_down != null) {
                message.fade_down = data.fade_down;
            }
            if (data.default_update_type != null) {
                message.default_update_type = data.default_update_type;
            }
            if (data.default_rgb_action != null) {
                message.default_rgb_action = RGB.fromObject(data.default_rgb_action);
            }
            if (data.default_wwa_action != null) {
                message.default_wwa_action = WWA.fromObject(data.default_wwa_action);
            }
            return message;
        }
        toObject() {
            const data: {
                output_channels?: number;
                rgb_enabled?: boolean;
                warm_white_enabled?: boolean;
                cool_white_enabled?: boolean;
                amber_enabled?: boolean;
                fade_time?: number;
                fade_off?: number;
                fade_down?: number;
                default_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                default_rgb_action?: ReturnType<typeof RGB.prototype.toObject>;
                default_wwa_action?: ReturnType<typeof WWA.prototype.toObject>;
            } = {};
            if (this.output_channels != null) {
                data.output_channels = this.output_channels;
            }
            if (this.rgb_enabled != null) {
                data.rgb_enabled = this.rgb_enabled;
            }
            if (this.warm_white_enabled != null) {
                data.warm_white_enabled = this.warm_white_enabled;
            }
            if (this.cool_white_enabled != null) {
                data.cool_white_enabled = this.cool_white_enabled;
            }
            if (this.amber_enabled != null) {
                data.amber_enabled = this.amber_enabled;
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.fade_off != null) {
                data.fade_off = this.fade_off;
            }
            if (this.fade_down != null) {
                data.fade_down = this.fade_down;
            }
            if (this.default_update_type != null) {
                data.default_update_type = this.default_update_type;
            }
            if (this.default_rgb_action != null) {
                data.default_rgb_action = this.default_rgb_action.toObject();
            }
            if (this.default_wwa_action != null) {
                data.default_wwa_action = this.default_wwa_action.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.output_channels != 0)
                writer.writeUint32(1, this.output_channels);
            if (this.rgb_enabled != false)
                writer.writeBool(2, this.rgb_enabled);
            if (this.warm_white_enabled != false)
                writer.writeBool(3, this.warm_white_enabled);
            if (this.cool_white_enabled != false)
                writer.writeBool(4, this.cool_white_enabled);
            if (this.amber_enabled != false)
                writer.writeBool(5, this.amber_enabled);
            if (this.fade_time != 0)
                writer.writeUint32(6, this.fade_time);
            if (this.fade_off != 0)
                writer.writeUint32(10, this.fade_off);
            if (this.fade_down != 0)
                writer.writeUint32(11, this.fade_down);
            if (this.default_update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(7, this.default_update_type);
            if (this.has_default_rgb_action)
                writer.writeMessage(8, this.default_rgb_action, () => this.default_rgb_action.serialize(writer));
            if (this.has_default_wwa_action)
                writer.writeMessage(9, this.default_wwa_action, () => this.default_wwa_action.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupZigbeeRgbwwaProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupZigbeeRgbwwaProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.output_channels = reader.readUint32();
                        break;
                    case 2:
                        message.rgb_enabled = reader.readBool();
                        break;
                    case 3:
                        message.warm_white_enabled = reader.readBool();
                        break;
                    case 4:
                        message.cool_white_enabled = reader.readBool();
                        break;
                    case 5:
                        message.amber_enabled = reader.readBool();
                        break;
                    case 6:
                        message.fade_time = reader.readUint32();
                        break;
                    case 10:
                        message.fade_off = reader.readUint32();
                        break;
                    case 11:
                        message.fade_down = reader.readUint32();
                        break;
                    case 7:
                        message.default_update_type = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message.default_rgb_action, () => message.default_rgb_action = RGB.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.default_wwa_action, () => message.default_wwa_action = WWA.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupZigbeeRgbwwaProperties {
            return GroupZigbeeRgbwwaProperties.deserialize(bytes);
        }
    }
    export class ZigbeeRgbwwaProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            output_channels?: number;
            rgb_enabled?: boolean;
            warm_white_enabled?: boolean;
            cool_white_enabled?: boolean;
            amber_enabled?: boolean;
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("output_channels" in data && data.output_channels != undefined) {
                    this.output_channels = data.output_channels;
                }
                if ("rgb_enabled" in data && data.rgb_enabled != undefined) {
                    this.rgb_enabled = data.rgb_enabled;
                }
                if ("warm_white_enabled" in data && data.warm_white_enabled != undefined) {
                    this.warm_white_enabled = data.warm_white_enabled;
                }
                if ("cool_white_enabled" in data && data.cool_white_enabled != undefined) {
                    this.cool_white_enabled = data.cool_white_enabled;
                }
                if ("amber_enabled" in data && data.amber_enabled != undefined) {
                    this.amber_enabled = data.amber_enabled;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("fade_off" in data && data.fade_off != undefined) {
                    this.fade_off = data.fade_off;
                }
                if ("fade_down" in data && data.fade_down != undefined) {
                    this.fade_down = data.fade_down;
                }
                if ("icon_type" in data && data.icon_type != undefined) {
                    this.icon_type = data.icon_type;
                }
            }
        }
        get output_channels() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set output_channels(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get rgb_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set rgb_enabled(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get warm_white_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set warm_white_enabled(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get cool_white_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cool_white_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get amber_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set amber_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get fade_off() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set fade_off(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get fade_down() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set fade_down(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get icon_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set icon_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            output_channels?: number;
            rgb_enabled?: boolean;
            warm_white_enabled?: boolean;
            cool_white_enabled?: boolean;
            amber_enabled?: boolean;
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }): ZigbeeRgbwwaProperties {
            const message = new ZigbeeRgbwwaProperties({});
            if (data.output_channels != null) {
                message.output_channels = data.output_channels;
            }
            if (data.rgb_enabled != null) {
                message.rgb_enabled = data.rgb_enabled;
            }
            if (data.warm_white_enabled != null) {
                message.warm_white_enabled = data.warm_white_enabled;
            }
            if (data.cool_white_enabled != null) {
                message.cool_white_enabled = data.cool_white_enabled;
            }
            if (data.amber_enabled != null) {
                message.amber_enabled = data.amber_enabled;
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.fade_off != null) {
                message.fade_off = data.fade_off;
            }
            if (data.fade_down != null) {
                message.fade_down = data.fade_down;
            }
            if (data.icon_type != null) {
                message.icon_type = data.icon_type;
            }
            return message;
        }
        toObject() {
            const data: {
                output_channels?: number;
                rgb_enabled?: boolean;
                warm_white_enabled?: boolean;
                cool_white_enabled?: boolean;
                amber_enabled?: boolean;
                fade_time?: number;
                fade_off?: number;
                fade_down?: number;
                icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            } = {};
            if (this.output_channels != null) {
                data.output_channels = this.output_channels;
            }
            if (this.rgb_enabled != null) {
                data.rgb_enabled = this.rgb_enabled;
            }
            if (this.warm_white_enabled != null) {
                data.warm_white_enabled = this.warm_white_enabled;
            }
            if (this.cool_white_enabled != null) {
                data.cool_white_enabled = this.cool_white_enabled;
            }
            if (this.amber_enabled != null) {
                data.amber_enabled = this.amber_enabled;
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.fade_off != null) {
                data.fade_off = this.fade_off;
            }
            if (this.fade_down != null) {
                data.fade_down = this.fade_down;
            }
            if (this.icon_type != null) {
                data.icon_type = this.icon_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.output_channels != 0)
                writer.writeUint32(1, this.output_channels);
            if (this.rgb_enabled != false)
                writer.writeBool(2, this.rgb_enabled);
            if (this.warm_white_enabled != false)
                writer.writeBool(3, this.warm_white_enabled);
            if (this.cool_white_enabled != false)
                writer.writeBool(4, this.cool_white_enabled);
            if (this.amber_enabled != false)
                writer.writeBool(5, this.amber_enabled);
            if (this.fade_time != 0)
                writer.writeUint32(6, this.fade_time);
            if (this.fade_off != 0)
                writer.writeUint32(7, this.fade_off);
            if (this.fade_down != 0)
                writer.writeUint32(8, this.fade_down);
            if (this.icon_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(9, this.icon_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeRgbwwaProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeRgbwwaProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.output_channels = reader.readUint32();
                        break;
                    case 2:
                        message.rgb_enabled = reader.readBool();
                        break;
                    case 3:
                        message.warm_white_enabled = reader.readBool();
                        break;
                    case 4:
                        message.cool_white_enabled = reader.readBool();
                        break;
                    case 5:
                        message.amber_enabled = reader.readBool();
                        break;
                    case 6:
                        message.fade_time = reader.readUint32();
                        break;
                    case 7:
                        message.fade_off = reader.readUint32();
                        break;
                    case 8:
                        message.fade_down = reader.readUint32();
                        break;
                    case 9:
                        message.icon_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeRgbwwaProperties {
            return ZigbeeRgbwwaProperties.deserialize(bytes);
        }
    }
    export class RGB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            red?: number;
            green?: number;
            blue?: number;
            pattern?: number;
            device_state?: number;
            brightness?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("red" in data && data.red != undefined) {
                    this.red = data.red;
                }
                if ("green" in data && data.green != undefined) {
                    this.green = data.green;
                }
                if ("blue" in data && data.blue != undefined) {
                    this.blue = data.blue;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("brightness" in data && data.brightness != undefined) {
                    this.brightness = data.brightness;
                }
            }
        }
        get red() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set red(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get green() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set green(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get blue() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set blue(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set pattern(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get brightness() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set brightness(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            red?: number;
            green?: number;
            blue?: number;
            pattern?: number;
            device_state?: number;
            brightness?: number;
        }): RGB {
            const message = new RGB({});
            if (data.red != null) {
                message.red = data.red;
            }
            if (data.green != null) {
                message.green = data.green;
            }
            if (data.blue != null) {
                message.blue = data.blue;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.brightness != null) {
                message.brightness = data.brightness;
            }
            return message;
        }
        toObject() {
            const data: {
                red?: number;
                green?: number;
                blue?: number;
                pattern?: number;
                device_state?: number;
                brightness?: number;
            } = {};
            if (this.red != null) {
                data.red = this.red;
            }
            if (this.green != null) {
                data.green = this.green;
            }
            if (this.blue != null) {
                data.blue = this.blue;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.brightness != null) {
                data.brightness = this.brightness;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.red != 0)
                writer.writeUint32(1, this.red);
            if (this.green != 0)
                writer.writeUint32(2, this.green);
            if (this.blue != 0)
                writer.writeUint32(3, this.blue);
            if (this.pattern != 0)
                writer.writeUint32(4, this.pattern);
            if (this.device_state != 0)
                writer.writeUint32(5, this.device_state);
            if (this.brightness != 0)
                writer.writeUint32(6, this.brightness);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RGB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RGB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.red = reader.readUint32();
                        break;
                    case 2:
                        message.green = reader.readUint32();
                        break;
                    case 3:
                        message.blue = reader.readUint32();
                        break;
                    case 4:
                        message.pattern = reader.readUint32();
                        break;
                    case 5:
                        message.device_state = reader.readUint32();
                        break;
                    case 6:
                        message.brightness = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RGB {
            return RGB.deserialize(bytes);
        }
    }
    export class WWA extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            warm_white?: number;
            cool_white?: number;
            amber?: number;
            device_state?: number;
            brightness?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("warm_white" in data && data.warm_white != undefined) {
                    this.warm_white = data.warm_white;
                }
                if ("cool_white" in data && data.cool_white != undefined) {
                    this.cool_white = data.cool_white;
                }
                if ("amber" in data && data.amber != undefined) {
                    this.amber = data.amber;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("brightness" in data && data.brightness != undefined) {
                    this.brightness = data.brightness;
                }
            }
        }
        get warm_white() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set warm_white(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cool_white() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cool_white(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get amber() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set amber(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get brightness() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set brightness(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            warm_white?: number;
            cool_white?: number;
            amber?: number;
            device_state?: number;
            brightness?: number;
        }): WWA {
            const message = new WWA({});
            if (data.warm_white != null) {
                message.warm_white = data.warm_white;
            }
            if (data.cool_white != null) {
                message.cool_white = data.cool_white;
            }
            if (data.amber != null) {
                message.amber = data.amber;
            }
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.brightness != null) {
                message.brightness = data.brightness;
            }
            return message;
        }
        toObject() {
            const data: {
                warm_white?: number;
                cool_white?: number;
                amber?: number;
                device_state?: number;
                brightness?: number;
            } = {};
            if (this.warm_white != null) {
                data.warm_white = this.warm_white;
            }
            if (this.cool_white != null) {
                data.cool_white = this.cool_white;
            }
            if (this.amber != null) {
                data.amber = this.amber;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.brightness != null) {
                data.brightness = this.brightness;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.warm_white != 0)
                writer.writeUint32(1, this.warm_white);
            if (this.cool_white != 0)
                writer.writeUint32(2, this.cool_white);
            if (this.amber != 0)
                writer.writeUint32(3, this.amber);
            if (this.device_state != 0)
                writer.writeUint32(4, this.device_state);
            if (this.brightness != 0)
                writer.writeUint32(5, this.brightness);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WWA {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WWA();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.warm_white = reader.readUint32();
                        break;
                    case 2:
                        message.cool_white = reader.readUint32();
                        break;
                    case 3:
                        message.amber = reader.readUint32();
                        break;
                    case 4:
                        message.device_state = reader.readUint32();
                        break;
                    case 5:
                        message.brightness = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WWA {
            return WWA.deserialize(bytes);
        }
    }
    export class ZigbeeRgbwwaState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            default_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            last_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            default_rgb_action?: RGB;
            default_wwa_action?: WWA;
            last_updated_rgb_action?: RGB;
            last_updated_wwa_action?: WWA;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("default_update_type" in data && data.default_update_type != undefined) {
                    this.default_update_type = data.default_update_type;
                }
                if ("last_update_type" in data && data.last_update_type != undefined) {
                    this.last_update_type = data.last_update_type;
                }
                if ("default_rgb_action" in data && data.default_rgb_action != undefined) {
                    this.default_rgb_action = data.default_rgb_action;
                }
                if ("default_wwa_action" in data && data.default_wwa_action != undefined) {
                    this.default_wwa_action = data.default_wwa_action;
                }
                if ("last_updated_rgb_action" in data && data.last_updated_rgb_action != undefined) {
                    this.last_updated_rgb_action = data.last_updated_rgb_action;
                }
                if ("last_updated_wwa_action" in data && data.last_updated_wwa_action != undefined) {
                    this.last_updated_wwa_action = data.last_updated_wwa_action;
                }
            }
        }
        get default_update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set default_update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 1, value);
        }
        get last_update_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set last_update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get default_rgb_action() {
            return pb_1.Message.getWrapperField(this, RGB, 3) as RGB;
        }
        set default_rgb_action(value: RGB) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_default_rgb_action() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get default_wwa_action() {
            return pb_1.Message.getWrapperField(this, WWA, 4) as WWA;
        }
        set default_wwa_action(value: WWA) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_default_wwa_action() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get last_updated_rgb_action() {
            return pb_1.Message.getWrapperField(this, RGB, 5) as RGB;
        }
        set last_updated_rgb_action(value: RGB) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_last_updated_rgb_action() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get last_updated_wwa_action() {
            return pb_1.Message.getWrapperField(this, WWA, 6) as WWA;
        }
        set last_updated_wwa_action(value: WWA) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_last_updated_wwa_action() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            default_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            last_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            default_rgb_action?: ReturnType<typeof RGB.prototype.toObject>;
            default_wwa_action?: ReturnType<typeof WWA.prototype.toObject>;
            last_updated_rgb_action?: ReturnType<typeof RGB.prototype.toObject>;
            last_updated_wwa_action?: ReturnType<typeof WWA.prototype.toObject>;
        }): ZigbeeRgbwwaState {
            const message = new ZigbeeRgbwwaState({});
            if (data.default_update_type != null) {
                message.default_update_type = data.default_update_type;
            }
            if (data.last_update_type != null) {
                message.last_update_type = data.last_update_type;
            }
            if (data.default_rgb_action != null) {
                message.default_rgb_action = RGB.fromObject(data.default_rgb_action);
            }
            if (data.default_wwa_action != null) {
                message.default_wwa_action = WWA.fromObject(data.default_wwa_action);
            }
            if (data.last_updated_rgb_action != null) {
                message.last_updated_rgb_action = RGB.fromObject(data.last_updated_rgb_action);
            }
            if (data.last_updated_wwa_action != null) {
                message.last_updated_wwa_action = WWA.fromObject(data.last_updated_wwa_action);
            }
            return message;
        }
        toObject() {
            const data: {
                default_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                last_update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                default_rgb_action?: ReturnType<typeof RGB.prototype.toObject>;
                default_wwa_action?: ReturnType<typeof WWA.prototype.toObject>;
                last_updated_rgb_action?: ReturnType<typeof RGB.prototype.toObject>;
                last_updated_wwa_action?: ReturnType<typeof WWA.prototype.toObject>;
            } = {};
            if (this.default_update_type != null) {
                data.default_update_type = this.default_update_type;
            }
            if (this.last_update_type != null) {
                data.last_update_type = this.last_update_type;
            }
            if (this.default_rgb_action != null) {
                data.default_rgb_action = this.default_rgb_action.toObject();
            }
            if (this.default_wwa_action != null) {
                data.default_wwa_action = this.default_wwa_action.toObject();
            }
            if (this.last_updated_rgb_action != null) {
                data.last_updated_rgb_action = this.last_updated_rgb_action.toObject();
            }
            if (this.last_updated_wwa_action != null) {
                data.last_updated_wwa_action = this.last_updated_wwa_action.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.default_update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(1, this.default_update_type);
            if (this.last_update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(2, this.last_update_type);
            if (this.has_default_rgb_action)
                writer.writeMessage(3, this.default_rgb_action, () => this.default_rgb_action.serialize(writer));
            if (this.has_default_wwa_action)
                writer.writeMessage(4, this.default_wwa_action, () => this.default_wwa_action.serialize(writer));
            if (this.has_last_updated_rgb_action)
                writer.writeMessage(5, this.last_updated_rgb_action, () => this.last_updated_rgb_action.serialize(writer));
            if (this.has_last_updated_wwa_action)
                writer.writeMessage(6, this.last_updated_wwa_action, () => this.last_updated_wwa_action.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeRgbwwaState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeRgbwwaState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.default_update_type = reader.readEnum();
                        break;
                    case 2:
                        message.last_update_type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.default_rgb_action, () => message.default_rgb_action = RGB.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.default_wwa_action, () => message.default_wwa_action = WWA.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.last_updated_rgb_action, () => message.last_updated_rgb_action = RGB.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.last_updated_wwa_action, () => message.last_updated_wwa_action = WWA.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeRgbwwaState {
            return ZigbeeRgbwwaState.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeRgbwwa extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            is_hidden?: boolean;
            warm_white_enabled?: boolean;
            cool_white_enabled?: boolean;
            amber_enabled?: boolean;
            device_location?: string;
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            rgb_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
                if ("warm_white_enabled" in data && data.warm_white_enabled != undefined) {
                    this.warm_white_enabled = data.warm_white_enabled;
                }
                if ("cool_white_enabled" in data && data.cool_white_enabled != undefined) {
                    this.cool_white_enabled = data.cool_white_enabled;
                }
                if ("amber_enabled" in data && data.amber_enabled != undefined) {
                    this.amber_enabled = data.amber_enabled;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("fade_off" in data && data.fade_off != undefined) {
                    this.fade_off = data.fade_off;
                }
                if ("fade_down" in data && data.fade_down != undefined) {
                    this.fade_down = data.fade_down;
                }
                if ("icon_type" in data && data.icon_type != undefined) {
                    this.icon_type = data.icon_type;
                }
                if ("rgb_enabled" in data && data.rgb_enabled != undefined) {
                    this.rgb_enabled = data.rgb_enabled;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get warm_white_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set warm_white_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get cool_white_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set cool_white_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get amber_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set amber_enabled(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get fade_off() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set fade_off(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get fade_down() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set fade_down(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get icon_type() {
            return pb_1.Message.getFieldWithDefault(this, 12, dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set icon_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 12, value);
        }
        get rgb_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set rgb_enabled(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            is_hidden?: boolean;
            warm_white_enabled?: boolean;
            cool_white_enabled?: boolean;
            amber_enabled?: boolean;
            device_location?: string;
            fade_time?: number;
            fade_off?: number;
            fade_down?: number;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            rgb_enabled?: boolean;
        }): ConfigureZigbeeRgbwwa {
            const message = new ConfigureZigbeeRgbwwa({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            if (data.warm_white_enabled != null) {
                message.warm_white_enabled = data.warm_white_enabled;
            }
            if (data.cool_white_enabled != null) {
                message.cool_white_enabled = data.cool_white_enabled;
            }
            if (data.amber_enabled != null) {
                message.amber_enabled = data.amber_enabled;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.fade_off != null) {
                message.fade_off = data.fade_off;
            }
            if (data.fade_down != null) {
                message.fade_down = data.fade_down;
            }
            if (data.icon_type != null) {
                message.icon_type = data.icon_type;
            }
            if (data.rgb_enabled != null) {
                message.rgb_enabled = data.rgb_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                is_hidden?: boolean;
                warm_white_enabled?: boolean;
                cool_white_enabled?: boolean;
                amber_enabled?: boolean;
                device_location?: string;
                fade_time?: number;
                fade_off?: number;
                fade_down?: number;
                icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
                rgb_enabled?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            if (this.warm_white_enabled != null) {
                data.warm_white_enabled = this.warm_white_enabled;
            }
            if (this.cool_white_enabled != null) {
                data.cool_white_enabled = this.cool_white_enabled;
            }
            if (this.amber_enabled != null) {
                data.amber_enabled = this.amber_enabled;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.fade_off != null) {
                data.fade_off = this.fade_off;
            }
            if (this.fade_down != null) {
                data.fade_down = this.fade_down;
            }
            if (this.icon_type != null) {
                data.icon_type = this.icon_type;
            }
            if (this.rgb_enabled != null) {
                data.rgb_enabled = this.rgb_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.is_hidden != false)
                writer.writeBool(3, this.is_hidden);
            if (this.warm_white_enabled != false)
                writer.writeBool(4, this.warm_white_enabled);
            if (this.cool_white_enabled != false)
                writer.writeBool(5, this.cool_white_enabled);
            if (this.amber_enabled != false)
                writer.writeBool(6, this.amber_enabled);
            if (this.device_location.length)
                writer.writeString(7, this.device_location);
            if (this.fade_time != 0)
                writer.writeUint32(8, this.fade_time);
            if (this.fade_off != 0)
                writer.writeUint32(10, this.fade_off);
            if (this.fade_down != 0)
                writer.writeUint32(11, this.fade_down);
            if (this.icon_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(12, this.icon_type);
            if (this.rgb_enabled != false)
                writer.writeBool(9, this.rgb_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeRgbwwa {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeRgbwwa();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.is_hidden = reader.readBool();
                        break;
                    case 4:
                        message.warm_white_enabled = reader.readBool();
                        break;
                    case 5:
                        message.cool_white_enabled = reader.readBool();
                        break;
                    case 6:
                        message.amber_enabled = reader.readBool();
                        break;
                    case 7:
                        message.device_location = reader.readString();
                        break;
                    case 8:
                        message.fade_time = reader.readUint32();
                        break;
                    case 10:
                        message.fade_off = reader.readUint32();
                        break;
                    case 11:
                        message.fade_down = reader.readUint32();
                        break;
                    case 12:
                        message.icon_type = reader.readEnum();
                        break;
                    case 9:
                        message.rgb_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeRgbwwa {
            return ConfigureZigbeeRgbwwa.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeRgbwwaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureZigbeeRgbwwaResponse {
            const message = new ConfigureZigbeeRgbwwaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeRgbwwaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeRgbwwaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeRgbwwaResponse {
            return ConfigureZigbeeRgbwwaResponse.deserialize(bytes);
        }
    }
    export class UpdateZigbeeRgbwwaState extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            device_state?: number;
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        } & (({
            rgb_state?: RGB;
            wwa_state?: never;
        } | {
            rgb_state?: never;
            wwa_state?: WWA;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("rgb_state" in data && data.rgb_state != undefined) {
                    this.rgb_state = data.rgb_state;
                }
                if ("wwa_state" in data && data.wwa_state != undefined) {
                    this.wwa_state = data.wwa_state;
                }
            }
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 5, value);
        }
        get rgb_state() {
            return pb_1.Message.getWrapperField(this, RGB, 3) as RGB;
        }
        set rgb_state(value: RGB) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_rgb_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get wwa_state() {
            return pb_1.Message.getWrapperField(this, WWA, 4) as WWA;
        }
        set wwa_state(value: WWA) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_wwa_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get update_state() {
            const cases: {
                [index: number]: "none" | "rgb_state" | "wwa_state";
            } = {
                0: "none",
                3: "rgb_state",
                4: "wwa_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            device_state?: number;
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
            wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
        }): UpdateZigbeeRgbwwaState {
            const message = new UpdateZigbeeRgbwwaState({});
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.rgb_state != null) {
                message.rgb_state = RGB.fromObject(data.rgb_state);
            }
            if (data.wwa_state != null) {
                message.wwa_state = WWA.fromObject(data.wwa_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_state?: number;
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
                wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
            } = {};
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.rgb_state != null) {
                data.rgb_state = this.rgb_state.toObject();
            }
            if (this.wwa_state != null) {
                data.wwa_state = this.wwa_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_state != 0)
                writer.writeInt32(1, this.device_state);
            if (this.device_id.length)
                writer.writeString(2, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(5, this.update_type);
            if (this.has_rgb_state)
                writer.writeMessage(3, this.rgb_state, () => this.rgb_state.serialize(writer));
            if (this.has_wwa_state)
                writer.writeMessage(4, this.wwa_state, () => this.wwa_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeRgbwwaState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeRgbwwaState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_state = reader.readInt32();
                        break;
                    case 2:
                        message.device_id = reader.readString();
                        break;
                    case 5:
                        message.update_type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.rgb_state, () => message.rgb_state = RGB.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.wwa_state, () => message.wwa_state = WWA.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeRgbwwaState {
            return UpdateZigbeeRgbwwaState.deserialize(bytes);
        }
    }
    export class UpdateZigbeeRgbwwaStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateZigbeeRgbwwaStateResponse {
            const message = new UpdateZigbeeRgbwwaStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeRgbwwaStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeRgbwwaStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeRgbwwaStateResponse {
            return UpdateZigbeeRgbwwaStateResponse.deserialize(bytes);
        }
    }
    export class UpdateZigbeeRgbwwaChannelState extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            device_state?: number;
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        } & (({
            rgb_state?: RGB;
            wwa_state?: never;
        } | {
            rgb_state?: never;
            wwa_state?: WWA;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("rgb_state" in data && data.rgb_state != undefined) {
                    this.rgb_state = data.rgb_state;
                }
                if ("wwa_state" in data && data.wwa_state != undefined) {
                    this.wwa_state = data.wwa_state;
                }
            }
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 5, value);
        }
        get rgb_state() {
            return pb_1.Message.getWrapperField(this, RGB, 3) as RGB;
        }
        set rgb_state(value: RGB) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_rgb_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get wwa_state() {
            return pb_1.Message.getWrapperField(this, WWA, 4) as WWA;
        }
        set wwa_state(value: WWA) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_wwa_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get update_state() {
            const cases: {
                [index: number]: "none" | "rgb_state" | "wwa_state";
            } = {
                0: "none",
                3: "rgb_state",
                4: "wwa_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            device_state?: number;
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
            wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
        }): UpdateZigbeeRgbwwaChannelState {
            const message = new UpdateZigbeeRgbwwaChannelState({});
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.rgb_state != null) {
                message.rgb_state = RGB.fromObject(data.rgb_state);
            }
            if (data.wwa_state != null) {
                message.wwa_state = WWA.fromObject(data.wwa_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_state?: number;
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                rgb_state?: ReturnType<typeof RGB.prototype.toObject>;
                wwa_state?: ReturnType<typeof WWA.prototype.toObject>;
            } = {};
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.rgb_state != null) {
                data.rgb_state = this.rgb_state.toObject();
            }
            if (this.wwa_state != null) {
                data.wwa_state = this.wwa_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_state != 0)
                writer.writeInt32(1, this.device_state);
            if (this.device_id.length)
                writer.writeString(2, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(5, this.update_type);
            if (this.has_rgb_state)
                writer.writeMessage(3, this.rgb_state, () => this.rgb_state.serialize(writer));
            if (this.has_wwa_state)
                writer.writeMessage(4, this.wwa_state, () => this.wwa_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeRgbwwaChannelState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeRgbwwaChannelState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_state = reader.readInt32();
                        break;
                    case 2:
                        message.device_id = reader.readString();
                        break;
                    case 5:
                        message.update_type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.rgb_state, () => message.rgb_state = RGB.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.wwa_state, () => message.wwa_state = WWA.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeRgbwwaChannelState {
            return UpdateZigbeeRgbwwaChannelState.deserialize(bytes);
        }
    }
    export class UpdateZigbeeRgbwwaChannelStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateZigbeeRgbwwaChannelStateResponse {
            const message = new UpdateZigbeeRgbwwaChannelStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeRgbwwaChannelStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeRgbwwaChannelStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeRgbwwaChannelStateResponse {
            return UpdateZigbeeRgbwwaChannelStateResponse.deserialize(bytes);
        }
    }
    export class SetZigbeeRgbwwaDefaultAction extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        } & (({
            default_rgb?: RGB;
            default_wwa?: never;
        } | {
            default_rgb?: never;
            default_wwa?: WWA;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("default_rgb" in data && data.default_rgb != undefined) {
                    this.default_rgb = data.default_rgb;
                }
                if ("default_wwa" in data && data.default_wwa != undefined) {
                    this.default_wwa = data.default_wwa;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE) as dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 5, value);
        }
        get default_rgb() {
            return pb_1.Message.getWrapperField(this, RGB, 2) as RGB;
        }
        set default_rgb(value: RGB) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_default_rgb() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get default_wwa() {
            return pb_1.Message.getWrapperField(this, WWA, 3) as WWA;
        }
        set default_wwa(value: WWA) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_default_wwa() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get default_action() {
            const cases: {
                [index: number]: "none" | "default_rgb" | "default_wwa";
            } = {
                0: "none",
                2: "default_rgb",
                3: "default_wwa"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
            default_rgb?: ReturnType<typeof RGB.prototype.toObject>;
            default_wwa?: ReturnType<typeof WWA.prototype.toObject>;
        }): SetZigbeeRgbwwaDefaultAction {
            const message = new SetZigbeeRgbwwaDefaultAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.default_rgb != null) {
                message.default_rgb = RGB.fromObject(data.default_rgb);
            }
            if (data.default_wwa != null) {
                message.default_wwa = WWA.fromObject(data.default_wwa);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE;
                default_rgb?: ReturnType<typeof RGB.prototype.toObject>;
                default_wwa?: ReturnType<typeof WWA.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.default_rgb != null) {
                data.default_rgb = this.default_rgb.toObject();
            }
            if (this.default_wwa != null) {
                data.default_wwa = this.default_wwa.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.RGBWWA_DRIVER_UPDATE_TYPE.RGBWWA_WWA_UPDATE)
                writer.writeEnum(5, this.update_type);
            if (this.has_default_rgb)
                writer.writeMessage(2, this.default_rgb, () => this.default_rgb.serialize(writer));
            if (this.has_default_wwa)
                writer.writeMessage(3, this.default_wwa, () => this.default_wwa.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetZigbeeRgbwwaDefaultAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetZigbeeRgbwwaDefaultAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 5:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.default_rgb, () => message.default_rgb = RGB.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.default_wwa, () => message.default_wwa = WWA.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetZigbeeRgbwwaDefaultAction {
            return SetZigbeeRgbwwaDefaultAction.deserialize(bytes);
        }
    }
    export class SetZigbeeRgbwwaDefaultActionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetZigbeeRgbwwaDefaultActionResponse {
            const message = new SetZigbeeRgbwwaDefaultActionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetZigbeeRgbwwaDefaultActionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetZigbeeRgbwwaDefaultActionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetZigbeeRgbwwaDefaultActionResponse {
            return SetZigbeeRgbwwaDefaultActionResponse.deserialize(bytes);
        }
    }
    export class MoveZigbeeRgbwwaRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveZigbeeRgbwwaRoom {
            const message = new MoveZigbeeRgbwwaRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeRgbwwaRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeRgbwwaRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeRgbwwaRoom {
            return MoveZigbeeRgbwwaRoom.deserialize(bytes);
        }
    }
    export class MoveZigbeeRgbwwaRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveZigbeeRgbwwaRoomResponse {
            const message = new MoveZigbeeRgbwwaRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeRgbwwaRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeRgbwwaRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeRgbwwaRoomResponse {
            return MoveZigbeeRgbwwaRoomResponse.deserialize(bytes);
        }
    }
    export class ResetZigbeeRgbwwa extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): ResetZigbeeRgbwwa {
            const message = new ResetZigbeeRgbwwa({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeRgbwwa {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeRgbwwa();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeRgbwwa {
            return ResetZigbeeRgbwwa.deserialize(bytes);
        }
    }
    export class ResetZigbeeRgbwwaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetZigbeeRgbwwaResponse {
            const message = new ResetZigbeeRgbwwaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeRgbwwaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeRgbwwaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeRgbwwaResponse {
            return ResetZigbeeRgbwwaResponse.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeRgbwwa extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceZigbeeRgbwwa {
            const message = new ReplaceZigbeeRgbwwa({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeRgbwwa {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeRgbwwa();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeRgbwwa {
            return ReplaceZigbeeRgbwwa.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeRgbwwaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceZigbeeRgbwwaResponse {
            const message = new ReplaceZigbeeRgbwwaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeRgbwwaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeRgbwwaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeRgbwwaResponse {
            return ReplaceZigbeeRgbwwaResponse.deserialize(bytes);
        }
    }
    export class RenameZigbeeRgbwwa extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
        }): RenameZigbeeRgbwwa {
            const message = new RenameZigbeeRgbwwa({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeRgbwwa {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeRgbwwa();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeRgbwwa {
            return RenameZigbeeRgbwwa.deserialize(bytes);
        }
    }
    export class RenameZigbeeRgbwwaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameZigbeeRgbwwaResponse {
            const message = new RenameZigbeeRgbwwaResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeRgbwwaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeRgbwwaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeRgbwwaResponse {
            return RenameZigbeeRgbwwaResponse.deserialize(bytes);
        }
    }
    export class ChangeZigbeeRGBWWAIcon extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("icon_type" in data && data.icon_type != undefined) {
                    this.icon_type = data.icon_type;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get icon_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set icon_type(value: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }): ChangeZigbeeRGBWWAIcon {
            const message = new ChangeZigbeeRGBWWAIcon({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.icon_type != null) {
                message.icon_type = data.icon_type;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                icon_type?: dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.icon_type != null) {
                data.icon_type = this.icon_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.icon_type != dependency_1.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(3, this.icon_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeZigbeeRGBWWAIcon {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeZigbeeRGBWWAIcon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 3:
                        message.icon_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeZigbeeRGBWWAIcon {
            return ChangeZigbeeRGBWWAIcon.deserialize(bytes);
        }
    }
    export class ChangeZigbeeRGBWWAIconResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ChangeZigbeeRGBWWAIconResponse {
            const message = new ChangeZigbeeRGBWWAIconResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeZigbeeRGBWWAIconResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeZigbeeRGBWWAIconResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeZigbeeRGBWWAIconResponse {
            return ChangeZigbeeRGBWWAIconResponse.deserialize(bytes);
        }
    }
}
