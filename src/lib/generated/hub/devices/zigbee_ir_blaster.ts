/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/zigbee_ir_blaster.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./device_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum AC_BLAST_TYPES {
        AC_ONOFF = 0,
        AC_TEMPERATURE = 1,
        AC_SWINGH = 2,
        AC_SWINGV = 3,
        AC_FANLVL = 4,
        AC_MODE = 5,
        AC_OTHER = 6
    }
    export enum TV_BLAST_TYPES {
        TV_ONOFF = 0,
        TV_CHNL_INC = 1,
        TV_CHNL_DEC = 2,
        TV_VOL_INC = 3,
        TV_VOL_DEC = 4,
        TV_CHNL_SEL = 5,
        TV_SRC_SEL = 6,
        TV_MODE_SEL = 15,
        TV_MUTE = 7,
        TV_MENU_LEFT = 8,
        TV_MENU_RIGHT = 9,
        TV_MENU_UP = 10,
        TV_MENU_DOWN = 11,
        TV_MENU_OK = 12,
        TV_MENU_OPEN = 13,
        TV_MENU_CLOSE = 14
    }
    export enum AMP_BLAST_TYPES {
        AMP_ONOFF = 0,
        AMP_VOL_INC = 3,
        AMP_VOL_DEC = 4,
        AMP_SRC_SEL = 6,
        AMP_MODE_SEL = 15,
        AMP_MUTE = 7,
        AMP_MENU_LEFT = 8,
        AMP_MENU_RIGHT = 9,
        AMP_MENU_UP = 10,
        AMP_MENU_DOWN = 11,
        AMP_MENU_OK = 12,
        AMP_MENU_OPEN = 13,
        AMP_MENU_CLOSE = 14
    }
    export enum PR_BLAST_TYPES {
        PR_ONOFF = 0,
        PR_SRC_SEL = 6,
        PR_MODE_SEL = 15,
        PR_MENU_LEFT = 8,
        PR_MENU_RIGHT = 9,
        PR_MENU_UP = 10,
        PR_MENU_DOWN = 11,
        PR_MENU_OK = 12,
        PR_MENU_OPEN = 13,
        PR_MENU_CLOSE = 14
    }
    export enum FAN_BLAST_TYPES {
        FAN_ONOFF = 0,
        FAN_SPEED_INC = 1,
        FAN_SPEED_DEC = 2,
        FAN_BOOST = 3,
        FAN_LED_UPDATE = 4,
        FAN_SPEED = 5
    }
    export class ZigbeeIRBlasterState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ZigbeeIRBlasterState {
            const message = new ZigbeeIRBlasterState({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeIRBlasterState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeIRBlasterState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeIRBlasterState {
            return ZigbeeIRBlasterState.deserialize(bytes);
        }
    }
    export class ZigbeeIRBlasterProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blast_signal_delay?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blast_signal_delay" in data && data.blast_signal_delay != undefined) {
                    this.blast_signal_delay = data.blast_signal_delay;
                }
            }
        }
        get blast_signal_delay() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set blast_signal_delay(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            blast_signal_delay?: number;
        }): ZigbeeIRBlasterProperties {
            const message = new ZigbeeIRBlasterProperties({});
            if (data.blast_signal_delay != null) {
                message.blast_signal_delay = data.blast_signal_delay;
            }
            return message;
        }
        toObject() {
            const data: {
                blast_signal_delay?: number;
            } = {};
            if (this.blast_signal_delay != null) {
                data.blast_signal_delay = this.blast_signal_delay;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blast_signal_delay != 0)
                writer.writeUint32(1, this.blast_signal_delay);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeIRBlasterProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeIRBlasterProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.blast_signal_delay = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeIRBlasterProperties {
            return ZigbeeIRBlasterProperties.deserialize(bytes);
        }
    }
    export class ZigbeeIRBlasterAction extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12, 13, 14, 15]];
        constructor(data?: any[] | ({
            remote_id?: string;
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            ir_device?: string;
        } & (({
            ac_action_info?: IRACBlastAction;
            tv_action_info?: never;
            amp_action_info?: never;
            pr_action_info?: never;
            fan_action_info?: never;
        } | {
            ac_action_info?: never;
            tv_action_info?: IRTVBlastAction;
            amp_action_info?: never;
            pr_action_info?: never;
            fan_action_info?: never;
        } | {
            ac_action_info?: never;
            tv_action_info?: never;
            amp_action_info?: IRAMPBlastAction;
            pr_action_info?: never;
            fan_action_info?: never;
        } | {
            ac_action_info?: never;
            tv_action_info?: never;
            amp_action_info?: never;
            pr_action_info?: IRPRBlastAction;
            fan_action_info?: never;
        } | {
            ac_action_info?: never;
            tv_action_info?: never;
            amp_action_info?: never;
            pr_action_info?: never;
            fan_action_info?: IRFANBlastAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
                if ("ir_device" in data && data.ir_device != undefined) {
                    this.ir_device = data.ir_device;
                }
                if ("ac_action_info" in data && data.ac_action_info != undefined) {
                    this.ac_action_info = data.ac_action_info;
                }
                if ("tv_action_info" in data && data.tv_action_info != undefined) {
                    this.tv_action_info = data.tv_action_info;
                }
                if ("amp_action_info" in data && data.amp_action_info != undefined) {
                    this.amp_action_info = data.amp_action_info;
                }
                if ("pr_action_info" in data && data.pr_action_info != undefined) {
                    this.pr_action_info = data.pr_action_info;
                }
                if ("fan_action_info" in data && data.fan_action_info != undefined) {
                    this.fan_action_info = data.fan_action_info;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC) as dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        }
        set remote_type(value: dependency_1.com.keus.hub.IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get ir_device() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ir_device(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ac_action_info() {
            return pb_1.Message.getWrapperField(this, IRACBlastAction, 11) as IRACBlastAction;
        }
        set ac_action_info(value: IRACBlastAction) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_ac_action_info() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get tv_action_info() {
            return pb_1.Message.getWrapperField(this, IRTVBlastAction, 12) as IRTVBlastAction;
        }
        set tv_action_info(value: IRTVBlastAction) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_tv_action_info() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get amp_action_info() {
            return pb_1.Message.getWrapperField(this, IRAMPBlastAction, 13) as IRAMPBlastAction;
        }
        set amp_action_info(value: IRAMPBlastAction) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_amp_action_info() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get pr_action_info() {
            return pb_1.Message.getWrapperField(this, IRPRBlastAction, 14) as IRPRBlastAction;
        }
        set pr_action_info(value: IRPRBlastAction) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_pr_action_info() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get fan_action_info() {
            return pb_1.Message.getWrapperField(this, IRFANBlastAction, 15) as IRFANBlastAction;
        }
        set fan_action_info(value: IRFANBlastAction) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_fan_action_info() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get blast_action_info() {
            const cases: {
                [index: number]: "none" | "ac_action_info" | "tv_action_info" | "amp_action_info" | "pr_action_info" | "fan_action_info";
            } = {
                0: "none",
                11: "ac_action_info",
                12: "tv_action_info",
                13: "amp_action_info",
                14: "pr_action_info",
                15: "fan_action_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12, 13, 14, 15])];
        }
        static fromObject(data: {
            remote_id?: string;
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            ir_device?: string;
            ac_action_info?: ReturnType<typeof IRACBlastAction.prototype.toObject>;
            tv_action_info?: ReturnType<typeof IRTVBlastAction.prototype.toObject>;
            amp_action_info?: ReturnType<typeof IRAMPBlastAction.prototype.toObject>;
            pr_action_info?: ReturnType<typeof IRPRBlastAction.prototype.toObject>;
            fan_action_info?: ReturnType<typeof IRFANBlastAction.prototype.toObject>;
        }): ZigbeeIRBlasterAction {
            const message = new ZigbeeIRBlasterAction({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            if (data.ir_device != null) {
                message.ir_device = data.ir_device;
            }
            if (data.ac_action_info != null) {
                message.ac_action_info = IRACBlastAction.fromObject(data.ac_action_info);
            }
            if (data.tv_action_info != null) {
                message.tv_action_info = IRTVBlastAction.fromObject(data.tv_action_info);
            }
            if (data.amp_action_info != null) {
                message.amp_action_info = IRAMPBlastAction.fromObject(data.amp_action_info);
            }
            if (data.pr_action_info != null) {
                message.pr_action_info = IRPRBlastAction.fromObject(data.pr_action_info);
            }
            if (data.fan_action_info != null) {
                message.fan_action_info = IRFANBlastAction.fromObject(data.fan_action_info);
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
                remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
                ir_device?: string;
                ac_action_info?: ReturnType<typeof IRACBlastAction.prototype.toObject>;
                tv_action_info?: ReturnType<typeof IRTVBlastAction.prototype.toObject>;
                amp_action_info?: ReturnType<typeof IRAMPBlastAction.prototype.toObject>;
                pr_action_info?: ReturnType<typeof IRPRBlastAction.prototype.toObject>;
                fan_action_info?: ReturnType<typeof IRFANBlastAction.prototype.toObject>;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            if (this.ir_device != null) {
                data.ir_device = this.ir_device;
            }
            if (this.ac_action_info != null) {
                data.ac_action_info = this.ac_action_info.toObject();
            }
            if (this.tv_action_info != null) {
                data.tv_action_info = this.tv_action_info.toObject();
            }
            if (this.amp_action_info != null) {
                data.amp_action_info = this.amp_action_info.toObject();
            }
            if (this.pr_action_info != null) {
                data.pr_action_info = this.pr_action_info.toObject();
            }
            if (this.fan_action_info != null) {
                data.fan_action_info = this.fan_action_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (this.remote_type != dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(2, this.remote_type);
            if (this.ir_device.length)
                writer.writeString(3, this.ir_device);
            if (this.has_ac_action_info)
                writer.writeMessage(11, this.ac_action_info, () => this.ac_action_info.serialize(writer));
            if (this.has_tv_action_info)
                writer.writeMessage(12, this.tv_action_info, () => this.tv_action_info.serialize(writer));
            if (this.has_amp_action_info)
                writer.writeMessage(13, this.amp_action_info, () => this.amp_action_info.serialize(writer));
            if (this.has_pr_action_info)
                writer.writeMessage(14, this.pr_action_info, () => this.pr_action_info.serialize(writer));
            if (this.has_fan_action_info)
                writer.writeMessage(15, this.fan_action_info, () => this.fan_action_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeIRBlasterAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeIRBlasterAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    case 2:
                        message.remote_type = reader.readEnum();
                        break;
                    case 3:
                        message.ir_device = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.ac_action_info, () => message.ac_action_info = IRACBlastAction.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.tv_action_info, () => message.tv_action_info = IRTVBlastAction.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.amp_action_info, () => message.amp_action_info = IRAMPBlastAction.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.pr_action_info, () => message.pr_action_info = IRPRBlastAction.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.fan_action_info, () => message.fan_action_info = IRFANBlastAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeIRBlasterAction {
            return ZigbeeIRBlasterAction.deserialize(bytes);
        }
    }
    export class IRRemote extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12, 13, 14, 15], [31, 32, 33, 34, 35]];
        constructor(data?: any[] | ({
            remote_id?: string;
            model_id?: string;
            company_id?: string;
            remote_name?: string;
            ir_device?: string;
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
        } & (({
            ac_properties?: IRACRemoteProperties;
            tv_properties?: never;
            amp_properties?: never;
            pr_properties?: never;
            fan_properties?: never;
        } | {
            ac_properties?: never;
            tv_properties?: IRTVRemoteProperties;
            amp_properties?: never;
            pr_properties?: never;
            fan_properties?: never;
        } | {
            ac_properties?: never;
            tv_properties?: never;
            amp_properties?: IRAMPRemoteProperties;
            pr_properties?: never;
            fan_properties?: never;
        } | {
            ac_properties?: never;
            tv_properties?: never;
            amp_properties?: never;
            pr_properties?: IRPRRemoteProperties;
            fan_properties?: never;
        } | {
            ac_properties?: never;
            tv_properties?: never;
            amp_properties?: never;
            pr_properties?: never;
            fan_properties?: IRFANRemoteProperties;
        }) | ({
            ac_state?: IRACRemoteState;
            tv_state?: never;
            amp_state?: never;
            pr_state?: never;
            fan_state?: never;
        } | {
            ac_state?: never;
            tv_state?: IRTVRemoteState;
            amp_state?: never;
            pr_state?: never;
            fan_state?: never;
        } | {
            ac_state?: never;
            tv_state?: never;
            amp_state?: IRAMPRemoteState;
            pr_state?: never;
            fan_state?: never;
        } | {
            ac_state?: never;
            tv_state?: never;
            amp_state?: never;
            pr_state?: IRPRRemoteState;
            fan_state?: never;
        } | {
            ac_state?: never;
            tv_state?: never;
            amp_state?: never;
            pr_state?: never;
            fan_state?: IRFANRemoteState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
                if ("model_id" in data && data.model_id != undefined) {
                    this.model_id = data.model_id;
                }
                if ("company_id" in data && data.company_id != undefined) {
                    this.company_id = data.company_id;
                }
                if ("remote_name" in data && data.remote_name != undefined) {
                    this.remote_name = data.remote_name;
                }
                if ("ir_device" in data && data.ir_device != undefined) {
                    this.ir_device = data.ir_device;
                }
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
                if ("ac_properties" in data && data.ac_properties != undefined) {
                    this.ac_properties = data.ac_properties;
                }
                if ("tv_properties" in data && data.tv_properties != undefined) {
                    this.tv_properties = data.tv_properties;
                }
                if ("amp_properties" in data && data.amp_properties != undefined) {
                    this.amp_properties = data.amp_properties;
                }
                if ("pr_properties" in data && data.pr_properties != undefined) {
                    this.pr_properties = data.pr_properties;
                }
                if ("fan_properties" in data && data.fan_properties != undefined) {
                    this.fan_properties = data.fan_properties;
                }
                if ("ac_state" in data && data.ac_state != undefined) {
                    this.ac_state = data.ac_state;
                }
                if ("tv_state" in data && data.tv_state != undefined) {
                    this.tv_state = data.tv_state;
                }
                if ("amp_state" in data && data.amp_state != undefined) {
                    this.amp_state = data.amp_state;
                }
                if ("pr_state" in data && data.pr_state != undefined) {
                    this.pr_state = data.pr_state;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("last_update_time" in data && data.last_update_time != undefined) {
                    this.last_update_time = data.last_update_time;
                }
                if ("last_update_by" in data && data.last_update_by != undefined) {
                    this.last_update_by = data.last_update_by;
                }
                if ("last_update_user" in data && data.last_update_user != undefined) {
                    this.last_update_user = data.last_update_user;
                }
                if ("last_update_source" in data && data.last_update_source != undefined) {
                    this.last_update_source = data.last_update_source;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get model_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set model_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get company_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set company_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get remote_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set remote_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ir_device() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ir_device(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC) as dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        }
        set remote_type(value: dependency_1.com.keus.hub.IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 6, value);
        }
        get ac_properties() {
            return pb_1.Message.getWrapperField(this, IRACRemoteProperties, 11) as IRACRemoteProperties;
        }
        set ac_properties(value: IRACRemoteProperties) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_ac_properties() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get tv_properties() {
            return pb_1.Message.getWrapperField(this, IRTVRemoteProperties, 12) as IRTVRemoteProperties;
        }
        set tv_properties(value: IRTVRemoteProperties) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_tv_properties() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get amp_properties() {
            return pb_1.Message.getWrapperField(this, IRAMPRemoteProperties, 13) as IRAMPRemoteProperties;
        }
        set amp_properties(value: IRAMPRemoteProperties) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_amp_properties() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get pr_properties() {
            return pb_1.Message.getWrapperField(this, IRPRRemoteProperties, 14) as IRPRRemoteProperties;
        }
        set pr_properties(value: IRPRRemoteProperties) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_pr_properties() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get fan_properties() {
            return pb_1.Message.getWrapperField(this, IRFANRemoteProperties, 15) as IRFANRemoteProperties;
        }
        set fan_properties(value: IRFANRemoteProperties) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_fan_properties() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get ac_state() {
            return pb_1.Message.getWrapperField(this, IRACRemoteState, 31) as IRACRemoteState;
        }
        set ac_state(value: IRACRemoteState) {
            pb_1.Message.setOneofWrapperField(this, 31, this.#one_of_decls[1], value);
        }
        get has_ac_state() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get tv_state() {
            return pb_1.Message.getWrapperField(this, IRTVRemoteState, 32) as IRTVRemoteState;
        }
        set tv_state(value: IRTVRemoteState) {
            pb_1.Message.setOneofWrapperField(this, 32, this.#one_of_decls[1], value);
        }
        get has_tv_state() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get amp_state() {
            return pb_1.Message.getWrapperField(this, IRAMPRemoteState, 33) as IRAMPRemoteState;
        }
        set amp_state(value: IRAMPRemoteState) {
            pb_1.Message.setOneofWrapperField(this, 33, this.#one_of_decls[1], value);
        }
        get has_amp_state() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get pr_state() {
            return pb_1.Message.getWrapperField(this, IRPRRemoteState, 34) as IRPRRemoteState;
        }
        set pr_state(value: IRPRRemoteState) {
            pb_1.Message.setOneofWrapperField(this, 34, this.#one_of_decls[1], value);
        }
        get has_pr_state() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get fan_state() {
            return pb_1.Message.getWrapperField(this, IRFANRemoteState, 35) as IRFANRemoteState;
        }
        set fan_state(value: IRFANRemoteState) {
            pb_1.Message.setOneofWrapperField(this, 35, this.#one_of_decls[1], value);
        }
        get has_fan_state() {
            return pb_1.Message.getField(this, 35) != null;
        }
        get last_update_time() {
            return pb_1.Message.getFieldWithDefault(this, 60, 0) as number;
        }
        set last_update_time(value: number) {
            pb_1.Message.setField(this, 60, value);
        }
        get last_update_by() {
            return pb_1.Message.getFieldWithDefault(this, 61, "") as string;
        }
        set last_update_by(value: string) {
            pb_1.Message.setField(this, 61, value);
        }
        get last_update_user() {
            return pb_1.Message.getFieldWithDefault(this, 62, "") as string;
        }
        set last_update_user(value: string) {
            pb_1.Message.setField(this, 62, value);
        }
        get last_update_source() {
            return pb_1.Message.getFieldWithDefault(this, 63, "") as string;
        }
        set last_update_source(value: string) {
            pb_1.Message.setField(this, 63, value);
        }
        get remote_properties() {
            const cases: {
                [index: number]: "none" | "ac_properties" | "tv_properties" | "amp_properties" | "pr_properties" | "fan_properties";
            } = {
                0: "none",
                11: "ac_properties",
                12: "tv_properties",
                13: "amp_properties",
                14: "pr_properties",
                15: "fan_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12, 13, 14, 15])];
        }
        get remote_state() {
            const cases: {
                [index: number]: "none" | "ac_state" | "tv_state" | "amp_state" | "pr_state" | "fan_state";
            } = {
                0: "none",
                31: "ac_state",
                32: "tv_state",
                33: "amp_state",
                34: "pr_state",
                35: "fan_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [31, 32, 33, 34, 35])];
        }
        static fromObject(data: {
            remote_id?: string;
            model_id?: string;
            company_id?: string;
            remote_name?: string;
            ir_device?: string;
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            ac_properties?: ReturnType<typeof IRACRemoteProperties.prototype.toObject>;
            tv_properties?: ReturnType<typeof IRTVRemoteProperties.prototype.toObject>;
            amp_properties?: ReturnType<typeof IRAMPRemoteProperties.prototype.toObject>;
            pr_properties?: ReturnType<typeof IRPRRemoteProperties.prototype.toObject>;
            fan_properties?: ReturnType<typeof IRFANRemoteProperties.prototype.toObject>;
            ac_state?: ReturnType<typeof IRACRemoteState.prototype.toObject>;
            tv_state?: ReturnType<typeof IRTVRemoteState.prototype.toObject>;
            amp_state?: ReturnType<typeof IRAMPRemoteState.prototype.toObject>;
            pr_state?: ReturnType<typeof IRPRRemoteState.prototype.toObject>;
            fan_state?: ReturnType<typeof IRFANRemoteState.prototype.toObject>;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
        }): IRRemote {
            const message = new IRRemote({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            if (data.model_id != null) {
                message.model_id = data.model_id;
            }
            if (data.company_id != null) {
                message.company_id = data.company_id;
            }
            if (data.remote_name != null) {
                message.remote_name = data.remote_name;
            }
            if (data.ir_device != null) {
                message.ir_device = data.ir_device;
            }
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            if (data.ac_properties != null) {
                message.ac_properties = IRACRemoteProperties.fromObject(data.ac_properties);
            }
            if (data.tv_properties != null) {
                message.tv_properties = IRTVRemoteProperties.fromObject(data.tv_properties);
            }
            if (data.amp_properties != null) {
                message.amp_properties = IRAMPRemoteProperties.fromObject(data.amp_properties);
            }
            if (data.pr_properties != null) {
                message.pr_properties = IRPRRemoteProperties.fromObject(data.pr_properties);
            }
            if (data.fan_properties != null) {
                message.fan_properties = IRFANRemoteProperties.fromObject(data.fan_properties);
            }
            if (data.ac_state != null) {
                message.ac_state = IRACRemoteState.fromObject(data.ac_state);
            }
            if (data.tv_state != null) {
                message.tv_state = IRTVRemoteState.fromObject(data.tv_state);
            }
            if (data.amp_state != null) {
                message.amp_state = IRAMPRemoteState.fromObject(data.amp_state);
            }
            if (data.pr_state != null) {
                message.pr_state = IRPRRemoteState.fromObject(data.pr_state);
            }
            if (data.fan_state != null) {
                message.fan_state = IRFANRemoteState.fromObject(data.fan_state);
            }
            if (data.last_update_time != null) {
                message.last_update_time = data.last_update_time;
            }
            if (data.last_update_by != null) {
                message.last_update_by = data.last_update_by;
            }
            if (data.last_update_user != null) {
                message.last_update_user = data.last_update_user;
            }
            if (data.last_update_source != null) {
                message.last_update_source = data.last_update_source;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
                model_id?: string;
                company_id?: string;
                remote_name?: string;
                ir_device?: string;
                remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
                ac_properties?: ReturnType<typeof IRACRemoteProperties.prototype.toObject>;
                tv_properties?: ReturnType<typeof IRTVRemoteProperties.prototype.toObject>;
                amp_properties?: ReturnType<typeof IRAMPRemoteProperties.prototype.toObject>;
                pr_properties?: ReturnType<typeof IRPRRemoteProperties.prototype.toObject>;
                fan_properties?: ReturnType<typeof IRFANRemoteProperties.prototype.toObject>;
                ac_state?: ReturnType<typeof IRACRemoteState.prototype.toObject>;
                tv_state?: ReturnType<typeof IRTVRemoteState.prototype.toObject>;
                amp_state?: ReturnType<typeof IRAMPRemoteState.prototype.toObject>;
                pr_state?: ReturnType<typeof IRPRRemoteState.prototype.toObject>;
                fan_state?: ReturnType<typeof IRFANRemoteState.prototype.toObject>;
                last_update_time?: number;
                last_update_by?: string;
                last_update_user?: string;
                last_update_source?: string;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            if (this.model_id != null) {
                data.model_id = this.model_id;
            }
            if (this.company_id != null) {
                data.company_id = this.company_id;
            }
            if (this.remote_name != null) {
                data.remote_name = this.remote_name;
            }
            if (this.ir_device != null) {
                data.ir_device = this.ir_device;
            }
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            if (this.ac_properties != null) {
                data.ac_properties = this.ac_properties.toObject();
            }
            if (this.tv_properties != null) {
                data.tv_properties = this.tv_properties.toObject();
            }
            if (this.amp_properties != null) {
                data.amp_properties = this.amp_properties.toObject();
            }
            if (this.pr_properties != null) {
                data.pr_properties = this.pr_properties.toObject();
            }
            if (this.fan_properties != null) {
                data.fan_properties = this.fan_properties.toObject();
            }
            if (this.ac_state != null) {
                data.ac_state = this.ac_state.toObject();
            }
            if (this.tv_state != null) {
                data.tv_state = this.tv_state.toObject();
            }
            if (this.amp_state != null) {
                data.amp_state = this.amp_state.toObject();
            }
            if (this.pr_state != null) {
                data.pr_state = this.pr_state.toObject();
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state.toObject();
            }
            if (this.last_update_time != null) {
                data.last_update_time = this.last_update_time;
            }
            if (this.last_update_by != null) {
                data.last_update_by = this.last_update_by;
            }
            if (this.last_update_user != null) {
                data.last_update_user = this.last_update_user;
            }
            if (this.last_update_source != null) {
                data.last_update_source = this.last_update_source;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (this.model_id.length)
                writer.writeString(2, this.model_id);
            if (this.company_id.length)
                writer.writeString(3, this.company_id);
            if (this.remote_name.length)
                writer.writeString(4, this.remote_name);
            if (this.ir_device.length)
                writer.writeString(5, this.ir_device);
            if (this.remote_type != dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(6, this.remote_type);
            if (this.has_ac_properties)
                writer.writeMessage(11, this.ac_properties, () => this.ac_properties.serialize(writer));
            if (this.has_tv_properties)
                writer.writeMessage(12, this.tv_properties, () => this.tv_properties.serialize(writer));
            if (this.has_amp_properties)
                writer.writeMessage(13, this.amp_properties, () => this.amp_properties.serialize(writer));
            if (this.has_pr_properties)
                writer.writeMessage(14, this.pr_properties, () => this.pr_properties.serialize(writer));
            if (this.has_fan_properties)
                writer.writeMessage(15, this.fan_properties, () => this.fan_properties.serialize(writer));
            if (this.has_ac_state)
                writer.writeMessage(31, this.ac_state, () => this.ac_state.serialize(writer));
            if (this.has_tv_state)
                writer.writeMessage(32, this.tv_state, () => this.tv_state.serialize(writer));
            if (this.has_amp_state)
                writer.writeMessage(33, this.amp_state, () => this.amp_state.serialize(writer));
            if (this.has_pr_state)
                writer.writeMessage(34, this.pr_state, () => this.pr_state.serialize(writer));
            if (this.has_fan_state)
                writer.writeMessage(35, this.fan_state, () => this.fan_state.serialize(writer));
            if (this.last_update_time != 0)
                writer.writeInt64(60, this.last_update_time);
            if (this.last_update_by.length)
                writer.writeString(61, this.last_update_by);
            if (this.last_update_user.length)
                writer.writeString(62, this.last_update_user);
            if (this.last_update_source.length)
                writer.writeString(63, this.last_update_source);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRRemote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRRemote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    case 2:
                        message.model_id = reader.readString();
                        break;
                    case 3:
                        message.company_id = reader.readString();
                        break;
                    case 4:
                        message.remote_name = reader.readString();
                        break;
                    case 5:
                        message.ir_device = reader.readString();
                        break;
                    case 6:
                        message.remote_type = reader.readEnum();
                        break;
                    case 11:
                        reader.readMessage(message.ac_properties, () => message.ac_properties = IRACRemoteProperties.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.tv_properties, () => message.tv_properties = IRTVRemoteProperties.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.amp_properties, () => message.amp_properties = IRAMPRemoteProperties.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.pr_properties, () => message.pr_properties = IRPRRemoteProperties.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.fan_properties, () => message.fan_properties = IRFANRemoteProperties.deserialize(reader));
                        break;
                    case 31:
                        reader.readMessage(message.ac_state, () => message.ac_state = IRACRemoteState.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.tv_state, () => message.tv_state = IRTVRemoteState.deserialize(reader));
                        break;
                    case 33:
                        reader.readMessage(message.amp_state, () => message.amp_state = IRAMPRemoteState.deserialize(reader));
                        break;
                    case 34:
                        reader.readMessage(message.pr_state, () => message.pr_state = IRPRRemoteState.deserialize(reader));
                        break;
                    case 35:
                        reader.readMessage(message.fan_state, () => message.fan_state = IRFANRemoteState.deserialize(reader));
                        break;
                    case 60:
                        message.last_update_time = reader.readInt64();
                        break;
                    case 61:
                        message.last_update_by = reader.readString();
                        break;
                    case 62:
                        message.last_update_user = reader.readString();
                        break;
                    case 63:
                        message.last_update_source = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRRemote {
            return IRRemote.deserialize(bytes);
        }
    }
    export class IRACRemoteProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            temperature_range?: number[];
            swing_h_enabled?: boolean;
            swing_h_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            swing_h_options?: string[];
            swing_v_enabled?: boolean;
            swing_v_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            swing_v_options?: string[];
            fan_enabled?: boolean;
            fan_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            fan_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 4, 7, 10, 13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("temperature_range" in data && data.temperature_range != undefined) {
                    this.temperature_range = data.temperature_range;
                }
                if ("swing_h_enabled" in data && data.swing_h_enabled != undefined) {
                    this.swing_h_enabled = data.swing_h_enabled;
                }
                if ("swing_h_select_type" in data && data.swing_h_select_type != undefined) {
                    this.swing_h_select_type = data.swing_h_select_type;
                }
                if ("swing_h_options" in data && data.swing_h_options != undefined) {
                    this.swing_h_options = data.swing_h_options;
                }
                if ("swing_v_enabled" in data && data.swing_v_enabled != undefined) {
                    this.swing_v_enabled = data.swing_v_enabled;
                }
                if ("swing_v_select_type" in data && data.swing_v_select_type != undefined) {
                    this.swing_v_select_type = data.swing_v_select_type;
                }
                if ("swing_v_options" in data && data.swing_v_options != undefined) {
                    this.swing_v_options = data.swing_v_options;
                }
                if ("fan_enabled" in data && data.fan_enabled != undefined) {
                    this.fan_enabled = data.fan_enabled;
                }
                if ("fan_select_type" in data && data.fan_select_type != undefined) {
                    this.fan_select_type = data.fan_select_type;
                }
                if ("fan_options" in data && data.fan_options != undefined) {
                    this.fan_options = data.fan_options;
                }
                if ("mode_enabled" in data && data.mode_enabled != undefined) {
                    this.mode_enabled = data.mode_enabled;
                }
                if ("mode_select_type" in data && data.mode_select_type != undefined) {
                    this.mode_select_type = data.mode_select_type;
                }
                if ("mode_options" in data && data.mode_options != undefined) {
                    this.mode_options = data.mode_options;
                }
            }
        }
        get temperature_range() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set temperature_range(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get swing_h_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set swing_h_enabled(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get swing_h_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set swing_h_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 3, value);
        }
        get swing_h_options() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set swing_h_options(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get swing_v_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set swing_v_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get swing_v_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set swing_v_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 6, value);
        }
        get swing_v_options() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set swing_v_options(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get fan_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set fan_enabled(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get fan_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set fan_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 9, value);
        }
        get fan_options() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set fan_options(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get mode_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set mode_enabled(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get mode_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 12, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set mode_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 12, value);
        }
        get mode_options() {
            return pb_1.Message.getFieldWithDefault(this, 13, []) as string[];
        }
        set mode_options(value: string[]) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            temperature_range?: number[];
            swing_h_enabled?: boolean;
            swing_h_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            swing_h_options?: string[];
            swing_v_enabled?: boolean;
            swing_v_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            swing_v_options?: string[];
            fan_enabled?: boolean;
            fan_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            fan_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
        }): IRACRemoteProperties {
            const message = new IRACRemoteProperties({});
            if (data.temperature_range != null) {
                message.temperature_range = data.temperature_range;
            }
            if (data.swing_h_enabled != null) {
                message.swing_h_enabled = data.swing_h_enabled;
            }
            if (data.swing_h_select_type != null) {
                message.swing_h_select_type = data.swing_h_select_type;
            }
            if (data.swing_h_options != null) {
                message.swing_h_options = data.swing_h_options;
            }
            if (data.swing_v_enabled != null) {
                message.swing_v_enabled = data.swing_v_enabled;
            }
            if (data.swing_v_select_type != null) {
                message.swing_v_select_type = data.swing_v_select_type;
            }
            if (data.swing_v_options != null) {
                message.swing_v_options = data.swing_v_options;
            }
            if (data.fan_enabled != null) {
                message.fan_enabled = data.fan_enabled;
            }
            if (data.fan_select_type != null) {
                message.fan_select_type = data.fan_select_type;
            }
            if (data.fan_options != null) {
                message.fan_options = data.fan_options;
            }
            if (data.mode_enabled != null) {
                message.mode_enabled = data.mode_enabled;
            }
            if (data.mode_select_type != null) {
                message.mode_select_type = data.mode_select_type;
            }
            if (data.mode_options != null) {
                message.mode_options = data.mode_options;
            }
            return message;
        }
        toObject() {
            const data: {
                temperature_range?: number[];
                swing_h_enabled?: boolean;
                swing_h_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                swing_h_options?: string[];
                swing_v_enabled?: boolean;
                swing_v_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                swing_v_options?: string[];
                fan_enabled?: boolean;
                fan_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                fan_options?: string[];
                mode_enabled?: boolean;
                mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                mode_options?: string[];
            } = {};
            if (this.temperature_range != null) {
                data.temperature_range = this.temperature_range;
            }
            if (this.swing_h_enabled != null) {
                data.swing_h_enabled = this.swing_h_enabled;
            }
            if (this.swing_h_select_type != null) {
                data.swing_h_select_type = this.swing_h_select_type;
            }
            if (this.swing_h_options != null) {
                data.swing_h_options = this.swing_h_options;
            }
            if (this.swing_v_enabled != null) {
                data.swing_v_enabled = this.swing_v_enabled;
            }
            if (this.swing_v_select_type != null) {
                data.swing_v_select_type = this.swing_v_select_type;
            }
            if (this.swing_v_options != null) {
                data.swing_v_options = this.swing_v_options;
            }
            if (this.fan_enabled != null) {
                data.fan_enabled = this.fan_enabled;
            }
            if (this.fan_select_type != null) {
                data.fan_select_type = this.fan_select_type;
            }
            if (this.fan_options != null) {
                data.fan_options = this.fan_options;
            }
            if (this.mode_enabled != null) {
                data.mode_enabled = this.mode_enabled;
            }
            if (this.mode_select_type != null) {
                data.mode_select_type = this.mode_select_type;
            }
            if (this.mode_options != null) {
                data.mode_options = this.mode_options;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.temperature_range.length)
                writer.writePackedUint32(1, this.temperature_range);
            if (this.swing_h_enabled != false)
                writer.writeBool(2, this.swing_h_enabled);
            if (this.swing_h_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(3, this.swing_h_select_type);
            if (this.swing_h_options.length)
                writer.writeRepeatedString(4, this.swing_h_options);
            if (this.swing_v_enabled != false)
                writer.writeBool(5, this.swing_v_enabled);
            if (this.swing_v_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(6, this.swing_v_select_type);
            if (this.swing_v_options.length)
                writer.writeRepeatedString(7, this.swing_v_options);
            if (this.fan_enabled != false)
                writer.writeBool(8, this.fan_enabled);
            if (this.fan_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(9, this.fan_select_type);
            if (this.fan_options.length)
                writer.writeRepeatedString(10, this.fan_options);
            if (this.mode_enabled != false)
                writer.writeBool(11, this.mode_enabled);
            if (this.mode_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(12, this.mode_select_type);
            if (this.mode_options.length)
                writer.writeRepeatedString(13, this.mode_options);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRACRemoteProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRACRemoteProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.temperature_range = reader.readPackedUint32();
                        break;
                    case 2:
                        message.swing_h_enabled = reader.readBool();
                        break;
                    case 3:
                        message.swing_h_select_type = reader.readEnum();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.swing_v_enabled = reader.readBool();
                        break;
                    case 6:
                        message.swing_v_select_type = reader.readEnum();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        message.fan_enabled = reader.readBool();
                        break;
                    case 9:
                        message.fan_select_type = reader.readEnum();
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    case 11:
                        message.mode_enabled = reader.readBool();
                        break;
                    case 12:
                        message.mode_select_type = reader.readEnum();
                        break;
                    case 13:
                        pb_1.Message.addToRepeatedField(message, 13, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRACRemoteProperties {
            return IRACRemoteProperties.deserialize(bytes);
        }
    }
    export class IRACRemoteState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            power_on?: boolean;
            temperature?: number;
            swingHLevel?: string;
            swingVLevel?: string;
            fanLevel?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("temperature" in data && data.temperature != undefined) {
                    this.temperature = data.temperature;
                }
                if ("swingHLevel" in data && data.swingHLevel != undefined) {
                    this.swingHLevel = data.swingHLevel;
                }
                if ("swingVLevel" in data && data.swingVLevel != undefined) {
                    this.swingVLevel = data.swingVLevel;
                }
                if ("fanLevel" in data && data.fanLevel != undefined) {
                    this.fanLevel = data.fanLevel;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get temperature() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set temperature(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get swingHLevel() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set swingHLevel(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get swingVLevel() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set swingVLevel(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get fanLevel() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set fanLevel(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            power_on?: boolean;
            temperature?: number;
            swingHLevel?: string;
            swingVLevel?: string;
            fanLevel?: string;
            mode?: string;
        }): IRACRemoteState {
            const message = new IRACRemoteState({});
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.temperature != null) {
                message.temperature = data.temperature;
            }
            if (data.swingHLevel != null) {
                message.swingHLevel = data.swingHLevel;
            }
            if (data.swingVLevel != null) {
                message.swingVLevel = data.swingVLevel;
            }
            if (data.fanLevel != null) {
                message.fanLevel = data.fanLevel;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                power_on?: boolean;
                temperature?: number;
                swingHLevel?: string;
                swingVLevel?: string;
                fanLevel?: string;
                mode?: string;
            } = {};
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.temperature != null) {
                data.temperature = this.temperature;
            }
            if (this.swingHLevel != null) {
                data.swingHLevel = this.swingHLevel;
            }
            if (this.swingVLevel != null) {
                data.swingVLevel = this.swingVLevel;
            }
            if (this.fanLevel != null) {
                data.fanLevel = this.fanLevel;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.power_on != false)
                writer.writeBool(1, this.power_on);
            if (this.temperature != 0)
                writer.writeUint32(2, this.temperature);
            if (this.swingHLevel.length)
                writer.writeString(3, this.swingHLevel);
            if (this.swingVLevel.length)
                writer.writeString(4, this.swingVLevel);
            if (this.fanLevel.length)
                writer.writeString(5, this.fanLevel);
            if (this.mode.length)
                writer.writeString(6, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRACRemoteState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRACRemoteState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.power_on = reader.readBool();
                        break;
                    case 2:
                        message.temperature = reader.readUint32();
                        break;
                    case 3:
                        message.swingHLevel = reader.readString();
                        break;
                    case 4:
                        message.swingVLevel = reader.readString();
                        break;
                    case 5:
                        message.fanLevel = reader.readString();
                        break;
                    case 6:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRACRemoteState {
            return IRACRemoteState.deserialize(bytes);
        }
    }
    export class IRACBlast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: AC_BLAST_TYPES;
            power_on?: boolean;
            temperature?: number;
            swing_h_Level?: string;
            swing_v_level?: string;
            fan_level?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("temperature" in data && data.temperature != undefined) {
                    this.temperature = data.temperature;
                }
                if ("swing_h_Level" in data && data.swing_h_Level != undefined) {
                    this.swing_h_Level = data.swing_h_Level;
                }
                if ("swing_v_level" in data && data.swing_v_level != undefined) {
                    this.swing_v_level = data.swing_v_level;
                }
                if ("fan_level" in data && data.fan_level != undefined) {
                    this.fan_level = data.fan_level;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AC_BLAST_TYPES.AC_ONOFF) as AC_BLAST_TYPES;
        }
        set update_type(value: AC_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get temperature() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set temperature(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get swing_h_Level() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set swing_h_Level(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get swing_v_level() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set swing_v_level(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get fan_level() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set fan_level(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            update_type?: AC_BLAST_TYPES;
            power_on?: boolean;
            temperature?: number;
            swing_h_Level?: string;
            swing_v_level?: string;
            fan_level?: string;
            mode?: string;
        }): IRACBlast {
            const message = new IRACBlast({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.temperature != null) {
                message.temperature = data.temperature;
            }
            if (data.swing_h_Level != null) {
                message.swing_h_Level = data.swing_h_Level;
            }
            if (data.swing_v_level != null) {
                message.swing_v_level = data.swing_v_level;
            }
            if (data.fan_level != null) {
                message.fan_level = data.fan_level;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: AC_BLAST_TYPES;
                power_on?: boolean;
                temperature?: number;
                swing_h_Level?: string;
                swing_v_level?: string;
                fan_level?: string;
                mode?: string;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.temperature != null) {
                data.temperature = this.temperature;
            }
            if (this.swing_h_Level != null) {
                data.swing_h_Level = this.swing_h_Level;
            }
            if (this.swing_v_level != null) {
                data.swing_v_level = this.swing_v_level;
            }
            if (this.fan_level != null) {
                data.fan_level = this.fan_level;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != AC_BLAST_TYPES.AC_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(7, this.power_on);
            if (this.temperature != 0)
                writer.writeUint32(2, this.temperature);
            if (this.swing_h_Level.length)
                writer.writeString(3, this.swing_h_Level);
            if (this.swing_v_level.length)
                writer.writeString(4, this.swing_v_level);
            if (this.fan_level.length)
                writer.writeString(5, this.fan_level);
            if (this.mode.length)
                writer.writeString(6, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRACBlast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRACBlast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 7:
                        message.power_on = reader.readBool();
                        break;
                    case 2:
                        message.temperature = reader.readUint32();
                        break;
                    case 3:
                        message.swing_h_Level = reader.readString();
                        break;
                    case 4:
                        message.swing_v_level = reader.readString();
                        break;
                    case 5:
                        message.fan_level = reader.readString();
                        break;
                    case 6:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRACBlast {
            return IRACBlast.deserialize(bytes);
        }
    }
    export class IRACBlastAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            power_on?: boolean;
            temperature?: number;
            swing_h_Level?: string;
            swing_v_level?: string;
            fan_level?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("temperature" in data && data.temperature != undefined) {
                    this.temperature = data.temperature;
                }
                if ("swing_h_Level" in data && data.swing_h_Level != undefined) {
                    this.swing_h_Level = data.swing_h_Level;
                }
                if ("swing_v_level" in data && data.swing_v_level != undefined) {
                    this.swing_v_level = data.swing_v_level;
                }
                if ("fan_level" in data && data.fan_level != undefined) {
                    this.fan_level = data.fan_level;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get temperature() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set temperature(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get swing_h_Level() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set swing_h_Level(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get swing_v_level() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set swing_v_level(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get fan_level() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set fan_level(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            power_on?: boolean;
            temperature?: number;
            swing_h_Level?: string;
            swing_v_level?: string;
            fan_level?: string;
            mode?: string;
        }): IRACBlastAction {
            const message = new IRACBlastAction({});
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.temperature != null) {
                message.temperature = data.temperature;
            }
            if (data.swing_h_Level != null) {
                message.swing_h_Level = data.swing_h_Level;
            }
            if (data.swing_v_level != null) {
                message.swing_v_level = data.swing_v_level;
            }
            if (data.fan_level != null) {
                message.fan_level = data.fan_level;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                power_on?: boolean;
                temperature?: number;
                swing_h_Level?: string;
                swing_v_level?: string;
                fan_level?: string;
                mode?: string;
            } = {};
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.temperature != null) {
                data.temperature = this.temperature;
            }
            if (this.swing_h_Level != null) {
                data.swing_h_Level = this.swing_h_Level;
            }
            if (this.swing_v_level != null) {
                data.swing_v_level = this.swing_v_level;
            }
            if (this.fan_level != null) {
                data.fan_level = this.fan_level;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.power_on != false)
                writer.writeBool(7, this.power_on);
            if (this.temperature != 0)
                writer.writeUint32(2, this.temperature);
            if (this.swing_h_Level.length)
                writer.writeString(3, this.swing_h_Level);
            if (this.swing_v_level.length)
                writer.writeString(4, this.swing_v_level);
            if (this.fan_level.length)
                writer.writeString(5, this.fan_level);
            if (this.mode.length)
                writer.writeString(6, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRACBlastAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRACBlastAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 7:
                        message.power_on = reader.readBool();
                        break;
                    case 2:
                        message.temperature = reader.readUint32();
                        break;
                    case 3:
                        message.swing_h_Level = reader.readString();
                        break;
                    case 4:
                        message.swing_v_level = reader.readString();
                        break;
                    case 5:
                        message.fan_level = reader.readString();
                        break;
                    case 6:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRACBlastAction {
            return IRACBlastAction.deserialize(bytes);
        }
    }
    export class IRRemoteEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_state?: BlastIRCommand;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_state" in data && data.update_state != undefined) {
                    this.update_state = data.update_state;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get update_state() {
            return pb_1.Message.getWrapperField(this, BlastIRCommand, 1) as BlastIRCommand;
        }
        set update_state(value: BlastIRCommand) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_update_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_state?: ReturnType<typeof BlastIRCommand.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): IRRemoteEvent {
            const message = new IRRemoteEvent({});
            if (data.update_state != null) {
                message.update_state = BlastIRCommand.fromObject(data.update_state);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                update_state?: ReturnType<typeof BlastIRCommand.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.update_state != null) {
                data.update_state = this.update_state.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_update_state)
                writer.writeMessage(1, this.update_state, () => this.update_state.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRRemoteEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRRemoteEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.update_state, () => message.update_state = BlastIRCommand.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRRemoteEvent {
            return IRRemoteEvent.deserialize(bytes);
        }
    }
    export class IRTVRemoteProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_enabled?: boolean;
            source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            source_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_enabled" in data && data.source_enabled != undefined) {
                    this.source_enabled = data.source_enabled;
                }
                if ("source_select_type" in data && data.source_select_type != undefined) {
                    this.source_select_type = data.source_select_type;
                }
                if ("source_options" in data && data.source_options != undefined) {
                    this.source_options = data.source_options;
                }
                if ("mode_enabled" in data && data.mode_enabled != undefined) {
                    this.mode_enabled = data.mode_enabled;
                }
                if ("mode_select_type" in data && data.mode_select_type != undefined) {
                    this.mode_select_type = data.mode_select_type;
                }
                if ("mode_options" in data && data.mode_options != undefined) {
                    this.mode_options = data.mode_options;
                }
            }
        }
        get source_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set source_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set source_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get source_options() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set source_options(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set mode_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get mode_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set mode_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 5, value);
        }
        get mode_options() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set mode_options(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            source_enabled?: boolean;
            source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            source_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
        }): IRTVRemoteProperties {
            const message = new IRTVRemoteProperties({});
            if (data.source_enabled != null) {
                message.source_enabled = data.source_enabled;
            }
            if (data.source_select_type != null) {
                message.source_select_type = data.source_select_type;
            }
            if (data.source_options != null) {
                message.source_options = data.source_options;
            }
            if (data.mode_enabled != null) {
                message.mode_enabled = data.mode_enabled;
            }
            if (data.mode_select_type != null) {
                message.mode_select_type = data.mode_select_type;
            }
            if (data.mode_options != null) {
                message.mode_options = data.mode_options;
            }
            return message;
        }
        toObject() {
            const data: {
                source_enabled?: boolean;
                source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                source_options?: string[];
                mode_enabled?: boolean;
                mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                mode_options?: string[];
            } = {};
            if (this.source_enabled != null) {
                data.source_enabled = this.source_enabled;
            }
            if (this.source_select_type != null) {
                data.source_select_type = this.source_select_type;
            }
            if (this.source_options != null) {
                data.source_options = this.source_options;
            }
            if (this.mode_enabled != null) {
                data.mode_enabled = this.mode_enabled;
            }
            if (this.mode_select_type != null) {
                data.mode_select_type = this.mode_select_type;
            }
            if (this.mode_options != null) {
                data.mode_options = this.mode_options;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_enabled != false)
                writer.writeBool(1, this.source_enabled);
            if (this.source_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(2, this.source_select_type);
            if (this.source_options.length)
                writer.writeRepeatedString(3, this.source_options);
            if (this.mode_enabled != false)
                writer.writeBool(4, this.mode_enabled);
            if (this.mode_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(5, this.mode_select_type);
            if (this.mode_options.length)
                writer.writeRepeatedString(6, this.mode_options);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRTVRemoteProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRTVRemoteProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_enabled = reader.readBool();
                        break;
                    case 2:
                        message.source_select_type = reader.readEnum();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.mode_enabled = reader.readBool();
                        break;
                    case 5:
                        message.mode_select_type = reader.readEnum();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRTVRemoteProperties {
            return IRTVRemoteProperties.deserialize(bytes);
        }
    }
    export class IRTVRemoteState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): IRTVRemoteState {
            const message = new IRTVRemoteState({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRTVRemoteState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRTVRemoteState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRTVRemoteState {
            return IRTVRemoteState.deserialize(bytes);
        }
    }
    export class IRTVBlast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: TV_BLAST_TYPES;
            power_on?: boolean;
            channel_number?: number;
            source?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("channel_number" in data && data.channel_number != undefined) {
                    this.channel_number = data.channel_number;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, TV_BLAST_TYPES.TV_ONOFF) as TV_BLAST_TYPES;
        }
        set update_type(value: TV_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get channel_number() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set channel_number(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_type?: TV_BLAST_TYPES;
            power_on?: boolean;
            channel_number?: number;
            source?: string;
            mode?: string;
        }): IRTVBlast {
            const message = new IRTVBlast({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.channel_number != null) {
                message.channel_number = data.channel_number;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: TV_BLAST_TYPES;
                power_on?: boolean;
                channel_number?: number;
                source?: string;
                mode?: string;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.channel_number != null) {
                data.channel_number = this.channel_number;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != TV_BLAST_TYPES.TV_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.channel_number != 0)
                writer.writeUint32(3, this.channel_number);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.mode.length)
                writer.writeString(5, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRTVBlast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRTVBlast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 3:
                        message.channel_number = reader.readUint32();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRTVBlast {
            return IRTVBlast.deserialize(bytes);
        }
    }
    export class IRTVBlastAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: TV_BLAST_TYPES;
            power_on?: boolean;
            channel_number?: number;
            source?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("channel_number" in data && data.channel_number != undefined) {
                    this.channel_number = data.channel_number;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, TV_BLAST_TYPES.TV_ONOFF) as TV_BLAST_TYPES;
        }
        set update_type(value: TV_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get channel_number() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set channel_number(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_type?: TV_BLAST_TYPES;
            power_on?: boolean;
            channel_number?: number;
            source?: string;
            mode?: string;
        }): IRTVBlastAction {
            const message = new IRTVBlastAction({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.channel_number != null) {
                message.channel_number = data.channel_number;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: TV_BLAST_TYPES;
                power_on?: boolean;
                channel_number?: number;
                source?: string;
                mode?: string;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.channel_number != null) {
                data.channel_number = this.channel_number;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != TV_BLAST_TYPES.TV_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.channel_number != 0)
                writer.writeUint32(3, this.channel_number);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.mode.length)
                writer.writeString(5, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRTVBlastAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRTVBlastAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 3:
                        message.channel_number = reader.readUint32();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRTVBlastAction {
            return IRTVBlastAction.deserialize(bytes);
        }
    }
    export class IRAMPRemoteProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_enabled?: boolean;
            source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            source_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_enabled" in data && data.source_enabled != undefined) {
                    this.source_enabled = data.source_enabled;
                }
                if ("source_select_type" in data && data.source_select_type != undefined) {
                    this.source_select_type = data.source_select_type;
                }
                if ("source_options" in data && data.source_options != undefined) {
                    this.source_options = data.source_options;
                }
                if ("mode_enabled" in data && data.mode_enabled != undefined) {
                    this.mode_enabled = data.mode_enabled;
                }
                if ("mode_select_type" in data && data.mode_select_type != undefined) {
                    this.mode_select_type = data.mode_select_type;
                }
                if ("mode_options" in data && data.mode_options != undefined) {
                    this.mode_options = data.mode_options;
                }
            }
        }
        get source_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set source_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set source_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get source_options() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set source_options(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set mode_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get mode_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set mode_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 5, value);
        }
        get mode_options() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set mode_options(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            source_enabled?: boolean;
            source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            source_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
        }): IRAMPRemoteProperties {
            const message = new IRAMPRemoteProperties({});
            if (data.source_enabled != null) {
                message.source_enabled = data.source_enabled;
            }
            if (data.source_select_type != null) {
                message.source_select_type = data.source_select_type;
            }
            if (data.source_options != null) {
                message.source_options = data.source_options;
            }
            if (data.mode_enabled != null) {
                message.mode_enabled = data.mode_enabled;
            }
            if (data.mode_select_type != null) {
                message.mode_select_type = data.mode_select_type;
            }
            if (data.mode_options != null) {
                message.mode_options = data.mode_options;
            }
            return message;
        }
        toObject() {
            const data: {
                source_enabled?: boolean;
                source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                source_options?: string[];
                mode_enabled?: boolean;
                mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                mode_options?: string[];
            } = {};
            if (this.source_enabled != null) {
                data.source_enabled = this.source_enabled;
            }
            if (this.source_select_type != null) {
                data.source_select_type = this.source_select_type;
            }
            if (this.source_options != null) {
                data.source_options = this.source_options;
            }
            if (this.mode_enabled != null) {
                data.mode_enabled = this.mode_enabled;
            }
            if (this.mode_select_type != null) {
                data.mode_select_type = this.mode_select_type;
            }
            if (this.mode_options != null) {
                data.mode_options = this.mode_options;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_enabled != false)
                writer.writeBool(1, this.source_enabled);
            if (this.source_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(2, this.source_select_type);
            if (this.source_options.length)
                writer.writeRepeatedString(3, this.source_options);
            if (this.mode_enabled != false)
                writer.writeBool(4, this.mode_enabled);
            if (this.mode_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(5, this.mode_select_type);
            if (this.mode_options.length)
                writer.writeRepeatedString(6, this.mode_options);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRAMPRemoteProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRAMPRemoteProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_enabled = reader.readBool();
                        break;
                    case 2:
                        message.source_select_type = reader.readEnum();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.mode_enabled = reader.readBool();
                        break;
                    case 5:
                        message.mode_select_type = reader.readEnum();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRAMPRemoteProperties {
            return IRAMPRemoteProperties.deserialize(bytes);
        }
    }
    export class IRAMPRemoteState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): IRAMPRemoteState {
            const message = new IRAMPRemoteState({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRAMPRemoteState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRAMPRemoteState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRAMPRemoteState {
            return IRAMPRemoteState.deserialize(bytes);
        }
    }
    export class IRAMPBlast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: AMP_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AMP_BLAST_TYPES.AMP_ONOFF) as AMP_BLAST_TYPES;
        }
        set update_type(value: AMP_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            update_type?: AMP_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }): IRAMPBlast {
            const message = new IRAMPBlast({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: AMP_BLAST_TYPES;
                power_on?: boolean;
                source?: string;
                mode?: string;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != AMP_BLAST_TYPES.AMP_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.source.length)
                writer.writeString(3, this.source);
            if (this.mode.length)
                writer.writeString(4, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRAMPBlast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRAMPBlast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 3:
                        message.source = reader.readString();
                        break;
                    case 4:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRAMPBlast {
            return IRAMPBlast.deserialize(bytes);
        }
    }
    export class IRAMPBlastAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: AMP_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AMP_BLAST_TYPES.AMP_ONOFF) as AMP_BLAST_TYPES;
        }
        set update_type(value: AMP_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_type?: AMP_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }): IRAMPBlastAction {
            const message = new IRAMPBlastAction({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: AMP_BLAST_TYPES;
                power_on?: boolean;
                source?: string;
                mode?: string;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != AMP_BLAST_TYPES.AMP_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.mode.length)
                writer.writeString(5, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRAMPBlastAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRAMPBlastAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRAMPBlastAction {
            return IRAMPBlastAction.deserialize(bytes);
        }
    }
    export class IRPRRemoteProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_enabled?: boolean;
            source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            source_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
            onoff_type?: dependency_1.com.keus.hub.IR_ONOFF_TYPES;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_enabled" in data && data.source_enabled != undefined) {
                    this.source_enabled = data.source_enabled;
                }
                if ("source_select_type" in data && data.source_select_type != undefined) {
                    this.source_select_type = data.source_select_type;
                }
                if ("source_options" in data && data.source_options != undefined) {
                    this.source_options = data.source_options;
                }
                if ("mode_enabled" in data && data.mode_enabled != undefined) {
                    this.mode_enabled = data.mode_enabled;
                }
                if ("mode_select_type" in data && data.mode_select_type != undefined) {
                    this.mode_select_type = data.mode_select_type;
                }
                if ("mode_options" in data && data.mode_options != undefined) {
                    this.mode_options = data.mode_options;
                }
                if ("onoff_type" in data && data.onoff_type != undefined) {
                    this.onoff_type = data.onoff_type;
                }
            }
        }
        get source_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set source_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set source_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get source_options() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set source_options(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set mode_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get mode_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set mode_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 5, value);
        }
        get mode_options() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set mode_options(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get onoff_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_1.com.keus.hub.IR_ONOFF_TYPES.ONOFF_BUTTON) as dependency_1.com.keus.hub.IR_ONOFF_TYPES;
        }
        set onoff_type(value: dependency_1.com.keus.hub.IR_ONOFF_TYPES) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            source_enabled?: boolean;
            source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            source_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
            onoff_type?: dependency_1.com.keus.hub.IR_ONOFF_TYPES;
        }): IRPRRemoteProperties {
            const message = new IRPRRemoteProperties({});
            if (data.source_enabled != null) {
                message.source_enabled = data.source_enabled;
            }
            if (data.source_select_type != null) {
                message.source_select_type = data.source_select_type;
            }
            if (data.source_options != null) {
                message.source_options = data.source_options;
            }
            if (data.mode_enabled != null) {
                message.mode_enabled = data.mode_enabled;
            }
            if (data.mode_select_type != null) {
                message.mode_select_type = data.mode_select_type;
            }
            if (data.mode_options != null) {
                message.mode_options = data.mode_options;
            }
            if (data.onoff_type != null) {
                message.onoff_type = data.onoff_type;
            }
            return message;
        }
        toObject() {
            const data: {
                source_enabled?: boolean;
                source_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                source_options?: string[];
                mode_enabled?: boolean;
                mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                mode_options?: string[];
                onoff_type?: dependency_1.com.keus.hub.IR_ONOFF_TYPES;
            } = {};
            if (this.source_enabled != null) {
                data.source_enabled = this.source_enabled;
            }
            if (this.source_select_type != null) {
                data.source_select_type = this.source_select_type;
            }
            if (this.source_options != null) {
                data.source_options = this.source_options;
            }
            if (this.mode_enabled != null) {
                data.mode_enabled = this.mode_enabled;
            }
            if (this.mode_select_type != null) {
                data.mode_select_type = this.mode_select_type;
            }
            if (this.mode_options != null) {
                data.mode_options = this.mode_options;
            }
            if (this.onoff_type != null) {
                data.onoff_type = this.onoff_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_enabled != false)
                writer.writeBool(1, this.source_enabled);
            if (this.source_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(2, this.source_select_type);
            if (this.source_options.length)
                writer.writeRepeatedString(3, this.source_options);
            if (this.mode_enabled != false)
                writer.writeBool(4, this.mode_enabled);
            if (this.mode_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(5, this.mode_select_type);
            if (this.mode_options.length)
                writer.writeRepeatedString(6, this.mode_options);
            if (this.onoff_type != dependency_1.com.keus.hub.IR_ONOFF_TYPES.ONOFF_BUTTON)
                writer.writeEnum(7, this.onoff_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRPRRemoteProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRPRRemoteProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_enabled = reader.readBool();
                        break;
                    case 2:
                        message.source_select_type = reader.readEnum();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.mode_enabled = reader.readBool();
                        break;
                    case 5:
                        message.mode_select_type = reader.readEnum();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.onoff_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRPRRemoteProperties {
            return IRPRRemoteProperties.deserialize(bytes);
        }
    }
    export class IRPRRemoteState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: PR_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, PR_BLAST_TYPES.PR_ONOFF) as PR_BLAST_TYPES;
        }
        set update_type(value: PR_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            update_type?: PR_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }): IRPRRemoteState {
            const message = new IRPRRemoteState({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: PR_BLAST_TYPES;
                power_on?: boolean;
                source?: string;
                mode?: string;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != PR_BLAST_TYPES.PR_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.source.length)
                writer.writeString(3, this.source);
            if (this.mode.length)
                writer.writeString(4, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRPRRemoteState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRPRRemoteState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 3:
                        message.source = reader.readString();
                        break;
                    case 4:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRPRRemoteState {
            return IRPRRemoteState.deserialize(bytes);
        }
    }
    export class IRPRBlast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: PR_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, PR_BLAST_TYPES.PR_ONOFF) as PR_BLAST_TYPES;
        }
        set update_type(value: PR_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            update_type?: PR_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }): IRPRBlast {
            const message = new IRPRBlast({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: PR_BLAST_TYPES;
                power_on?: boolean;
                source?: string;
                mode?: string;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != PR_BLAST_TYPES.PR_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.source.length)
                writer.writeString(3, this.source);
            if (this.mode.length)
                writer.writeString(4, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRPRBlast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRPRBlast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 3:
                        message.source = reader.readString();
                        break;
                    case 4:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRPRBlast {
            return IRPRBlast.deserialize(bytes);
        }
    }
    export class IRPRBlastAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: PR_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, PR_BLAST_TYPES.PR_ONOFF) as PR_BLAST_TYPES;
        }
        set update_type(value: PR_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_type?: PR_BLAST_TYPES;
            power_on?: boolean;
            source?: string;
            mode?: string;
        }): IRPRBlastAction {
            const message = new IRPRBlastAction({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: PR_BLAST_TYPES;
                power_on?: boolean;
                source?: string;
                mode?: string;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != PR_BLAST_TYPES.PR_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.mode.length)
                writer.writeString(5, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRPRBlastAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRPRBlastAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRPRBlastAction {
            return IRPRBlastAction.deserialize(bytes);
        }
    }
    export class IRFANRemoteProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            speed_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            speed_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
            led_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("speed_select_type" in data && data.speed_select_type != undefined) {
                    this.speed_select_type = data.speed_select_type;
                }
                if ("speed_options" in data && data.speed_options != undefined) {
                    this.speed_options = data.speed_options;
                }
                if ("mode_enabled" in data && data.mode_enabled != undefined) {
                    this.mode_enabled = data.mode_enabled;
                }
                if ("mode_select_type" in data && data.mode_select_type != undefined) {
                    this.mode_select_type = data.mode_select_type;
                }
                if ("mode_options" in data && data.mode_options != undefined) {
                    this.mode_options = data.mode_options;
                }
                if ("led_enabled" in data && data.led_enabled != undefined) {
                    this.led_enabled = data.led_enabled;
                }
            }
        }
        get speed_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set speed_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get speed_options() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set speed_options(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get mode_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set mode_enabled(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode_select_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE) as dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
        }
        set mode_select_type(value: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES) {
            pb_1.Message.setField(this, 4, value);
        }
        get mode_options() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set mode_options(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get led_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set led_enabled(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            speed_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            speed_options?: string[];
            mode_enabled?: boolean;
            mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
            mode_options?: string[];
            led_enabled?: boolean;
        }): IRFANRemoteProperties {
            const message = new IRFANRemoteProperties({});
            if (data.speed_select_type != null) {
                message.speed_select_type = data.speed_select_type;
            }
            if (data.speed_options != null) {
                message.speed_options = data.speed_options;
            }
            if (data.mode_enabled != null) {
                message.mode_enabled = data.mode_enabled;
            }
            if (data.mode_select_type != null) {
                message.mode_select_type = data.mode_select_type;
            }
            if (data.mode_options != null) {
                message.mode_options = data.mode_options;
            }
            if (data.led_enabled != null) {
                message.led_enabled = data.led_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                speed_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                speed_options?: string[];
                mode_enabled?: boolean;
                mode_select_type?: dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES;
                mode_options?: string[];
                led_enabled?: boolean;
            } = {};
            if (this.speed_select_type != null) {
                data.speed_select_type = this.speed_select_type;
            }
            if (this.speed_options != null) {
                data.speed_options = this.speed_options;
            }
            if (this.mode_enabled != null) {
                data.mode_enabled = this.mode_enabled;
            }
            if (this.mode_select_type != null) {
                data.mode_select_type = this.mode_select_type;
            }
            if (this.mode_options != null) {
                data.mode_options = this.mode_options;
            }
            if (this.led_enabled != null) {
                data.led_enabled = this.led_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.speed_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(1, this.speed_select_type);
            if (this.speed_options.length)
                writer.writeRepeatedString(2, this.speed_options);
            if (this.mode_enabled != false)
                writer.writeBool(3, this.mode_enabled);
            if (this.mode_select_type != dependency_1.com.keus.hub.IR_REMOTE_SELECTION_TYPES.IR_CYCLE)
                writer.writeEnum(4, this.mode_select_type);
            if (this.mode_options.length)
                writer.writeRepeatedString(5, this.mode_options);
            if (this.led_enabled != false)
                writer.writeBool(6, this.led_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRFANRemoteProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRFANRemoteProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.speed_select_type = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.mode_enabled = reader.readBool();
                        break;
                    case 4:
                        message.mode_select_type = reader.readEnum();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.led_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRFANRemoteProperties {
            return IRFANRemoteProperties.deserialize(bytes);
        }
    }
    export class IRFANRemoteState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            power_on?: boolean;
            speed_level?: string;
            mode?: string;
            led_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("speed_level" in data && data.speed_level != undefined) {
                    this.speed_level = data.speed_level;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("led_state" in data && data.led_state != undefined) {
                    this.led_state = data.led_state;
                }
            }
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get speed_level() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set speed_level(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get led_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set led_state(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            power_on?: boolean;
            speed_level?: string;
            mode?: string;
            led_state?: number;
        }): IRFANRemoteState {
            const message = new IRFANRemoteState({});
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.speed_level != null) {
                message.speed_level = data.speed_level;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.led_state != null) {
                message.led_state = data.led_state;
            }
            return message;
        }
        toObject() {
            const data: {
                power_on?: boolean;
                speed_level?: string;
                mode?: string;
                led_state?: number;
            } = {};
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.speed_level != null) {
                data.speed_level = this.speed_level;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.led_state != null) {
                data.led_state = this.led_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.power_on != false)
                writer.writeBool(1, this.power_on);
            if (this.speed_level.length)
                writer.writeString(2, this.speed_level);
            if (this.mode.length)
                writer.writeString(3, this.mode);
            if (this.led_state != 0)
                writer.writeUint32(4, this.led_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRFANRemoteState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRFANRemoteState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.power_on = reader.readBool();
                        break;
                    case 2:
                        message.speed_level = reader.readString();
                        break;
                    case 3:
                        message.mode = reader.readString();
                        break;
                    case 4:
                        message.led_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRFANRemoteState {
            return IRFANRemoteState.deserialize(bytes);
        }
    }
    export class IRFANBlast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: FAN_BLAST_TYPES;
            power_on?: boolean;
            speed_level?: string;
            mode?: string;
            led_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("speed_level" in data && data.speed_level != undefined) {
                    this.speed_level = data.speed_level;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("led_state" in data && data.led_state != undefined) {
                    this.led_state = data.led_state;
                }
            }
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, FAN_BLAST_TYPES.FAN_ONOFF) as FAN_BLAST_TYPES;
        }
        set update_type(value: FAN_BLAST_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get speed_level() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set speed_level(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get led_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set led_state(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_type?: FAN_BLAST_TYPES;
            power_on?: boolean;
            speed_level?: string;
            mode?: string;
            led_state?: number;
        }): IRFANBlast {
            const message = new IRFANBlast({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.speed_level != null) {
                message.speed_level = data.speed_level;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.led_state != null) {
                message.led_state = data.led_state;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: FAN_BLAST_TYPES;
                power_on?: boolean;
                speed_level?: string;
                mode?: string;
                led_state?: number;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.speed_level != null) {
                data.speed_level = this.speed_level;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.led_state != null) {
                data.led_state = this.led_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != FAN_BLAST_TYPES.FAN_ONOFF)
                writer.writeEnum(1, this.update_type);
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.speed_level.length)
                writer.writeString(3, this.speed_level);
            if (this.mode.length)
                writer.writeString(4, this.mode);
            if (this.led_state != 0)
                writer.writeUint32(5, this.led_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRFANBlast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRFANBlast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 3:
                        message.speed_level = reader.readString();
                        break;
                    case 4:
                        message.mode = reader.readString();
                        break;
                    case 5:
                        message.led_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRFANBlast {
            return IRFANBlast.deserialize(bytes);
        }
    }
    export class IRFANBlastAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            power_on?: boolean;
            speed_level?: string;
            mode?: string;
            led_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("power_on" in data && data.power_on != undefined) {
                    this.power_on = data.power_on;
                }
                if ("speed_level" in data && data.speed_level != undefined) {
                    this.speed_level = data.speed_level;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("led_state" in data && data.led_state != undefined) {
                    this.led_state = data.led_state;
                }
            }
        }
        get power_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set power_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get speed_level() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set speed_level(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get led_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set led_state(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            power_on?: boolean;
            speed_level?: string;
            mode?: string;
            led_state?: number;
        }): IRFANBlastAction {
            const message = new IRFANBlastAction({});
            if (data.power_on != null) {
                message.power_on = data.power_on;
            }
            if (data.speed_level != null) {
                message.speed_level = data.speed_level;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.led_state != null) {
                message.led_state = data.led_state;
            }
            return message;
        }
        toObject() {
            const data: {
                power_on?: boolean;
                speed_level?: string;
                mode?: string;
                led_state?: number;
            } = {};
            if (this.power_on != null) {
                data.power_on = this.power_on;
            }
            if (this.speed_level != null) {
                data.speed_level = this.speed_level;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.led_state != null) {
                data.led_state = this.led_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.power_on != false)
                writer.writeBool(2, this.power_on);
            if (this.speed_level.length)
                writer.writeString(3, this.speed_level);
            if (this.mode.length)
                writer.writeString(4, this.mode);
            if (this.led_state != 0)
                writer.writeUint32(5, this.led_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IRFANBlastAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IRFANBlastAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.power_on = reader.readBool();
                        break;
                    case 3:
                        message.speed_level = reader.readString();
                        break;
                    case 4:
                        message.mode = reader.readString();
                        break;
                    case 5:
                        message.led_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IRFANBlastAction {
            return IRFANBlastAction.deserialize(bytes);
        }
    }
    export class MoveZigbeeIRBlasterRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
            force_move?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
                if ("force_move" in data && data.force_move != undefined) {
                    this.force_move = data.force_move;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get force_move() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set force_move(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
            force_move?: boolean;
        }): MoveZigbeeIRBlasterRoom {
            const message = new MoveZigbeeIRBlasterRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            if (data.force_move != null) {
                message.force_move = data.force_move;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
                force_move?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            if (this.force_move != null) {
                data.force_move = this.force_move;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (this.force_move != false)
                writer.writeBool(4, this.force_move);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeIRBlasterRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeIRBlasterRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    case 4:
                        message.force_move = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeIRBlasterRoom {
            return MoveZigbeeIRBlasterRoom.deserialize(bytes);
        }
    }
    export class MoveZigbeeIRBlasterRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveZigbeeIRBlasterRoomResponse {
            const message = new MoveZigbeeIRBlasterRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeIRBlasterRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeIRBlasterRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeIRBlasterRoomResponse {
            return MoveZigbeeIRBlasterRoomResponse.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeIRBlaster extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            blast_signal_delay?: number;
            is_hidden?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("blast_signal_delay" in data && data.blast_signal_delay != undefined) {
                    this.blast_signal_delay = data.blast_signal_delay;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get blast_signal_delay() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set blast_signal_delay(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            blast_signal_delay?: number;
            is_hidden?: boolean;
        }): ConfigureZigbeeIRBlaster {
            const message = new ConfigureZigbeeIRBlaster({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.blast_signal_delay != null) {
                message.blast_signal_delay = data.blast_signal_delay;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
                blast_signal_delay?: number;
                is_hidden?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.blast_signal_delay != null) {
                data.blast_signal_delay = this.blast_signal_delay;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_location.length)
                writer.writeString(3, this.device_location);
            if (this.blast_signal_delay != 0)
                writer.writeUint32(4, this.blast_signal_delay);
            if (this.is_hidden != false)
                writer.writeBool(5, this.is_hidden);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeIRBlaster {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeIRBlaster();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_location = reader.readString();
                        break;
                    case 4:
                        message.blast_signal_delay = reader.readUint32();
                        break;
                    case 5:
                        message.is_hidden = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeIRBlaster {
            return ConfigureZigbeeIRBlaster.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeIRBlasterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureZigbeeIRBlasterResponse {
            const message = new ConfigureZigbeeIRBlasterResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeIRBlasterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeIRBlasterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeIRBlasterResponse {
            return ConfigureZigbeeIRBlasterResponse.deserialize(bytes);
        }
    }
    export class AddRemoteToZigbeeIRBlaster extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            remote_name?: string;
            ir_device?: string;
            company_id?: string;
            model_id?: string;
            version?: string;
            force_download?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
                if ("remote_name" in data && data.remote_name != undefined) {
                    this.remote_name = data.remote_name;
                }
                if ("ir_device" in data && data.ir_device != undefined) {
                    this.ir_device = data.ir_device;
                }
                if ("company_id" in data && data.company_id != undefined) {
                    this.company_id = data.company_id;
                }
                if ("model_id" in data && data.model_id != undefined) {
                    this.model_id = data.model_id;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("force_download" in data && data.force_download != undefined) {
                    this.force_download = data.force_download;
                }
            }
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC) as dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        }
        set remote_type(value: dependency_1.com.keus.hub.IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get remote_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set remote_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ir_device() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ir_device(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get company_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set company_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get model_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set model_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get force_download() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set force_download(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            remote_name?: string;
            ir_device?: string;
            company_id?: string;
            model_id?: string;
            version?: string;
            force_download?: boolean;
        }): AddRemoteToZigbeeIRBlaster {
            const message = new AddRemoteToZigbeeIRBlaster({});
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            if (data.remote_name != null) {
                message.remote_name = data.remote_name;
            }
            if (data.ir_device != null) {
                message.ir_device = data.ir_device;
            }
            if (data.company_id != null) {
                message.company_id = data.company_id;
            }
            if (data.model_id != null) {
                message.model_id = data.model_id;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.force_download != null) {
                message.force_download = data.force_download;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
                remote_name?: string;
                ir_device?: string;
                company_id?: string;
                model_id?: string;
                version?: string;
                force_download?: boolean;
            } = {};
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            if (this.remote_name != null) {
                data.remote_name = this.remote_name;
            }
            if (this.ir_device != null) {
                data.ir_device = this.ir_device;
            }
            if (this.company_id != null) {
                data.company_id = this.company_id;
            }
            if (this.model_id != null) {
                data.model_id = this.model_id;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.force_download != null) {
                data.force_download = this.force_download;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_type != dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(1, this.remote_type);
            if (this.remote_name.length)
                writer.writeString(2, this.remote_name);
            if (this.ir_device.length)
                writer.writeString(3, this.ir_device);
            if (this.company_id.length)
                writer.writeString(4, this.company_id);
            if (this.model_id.length)
                writer.writeString(5, this.model_id);
            if (this.version.length)
                writer.writeString(6, this.version);
            if (this.force_download != false)
                writer.writeBool(7, this.force_download);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddRemoteToZigbeeIRBlaster {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddRemoteToZigbeeIRBlaster();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_type = reader.readEnum();
                        break;
                    case 2:
                        message.remote_name = reader.readString();
                        break;
                    case 3:
                        message.ir_device = reader.readString();
                        break;
                    case 4:
                        message.company_id = reader.readString();
                        break;
                    case 5:
                        message.model_id = reader.readString();
                        break;
                    case 6:
                        message.version = reader.readString();
                        break;
                    case 7:
                        message.force_download = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddRemoteToZigbeeIRBlaster {
            return AddRemoteToZigbeeIRBlaster.deserialize(bytes);
        }
    }
    export class AddRemoteToZigbeeIRBlasterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            remote?: IRRemote;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("remote" in data && data.remote != undefined) {
                    this.remote = data.remote;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get remote() {
            return pb_1.Message.getWrapperField(this, IRRemote, 4) as IRRemote;
        }
        set remote(value: IRRemote) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_remote() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            remote?: ReturnType<typeof IRRemote.prototype.toObject>;
            ops_message?: string;
        }): AddRemoteToZigbeeIRBlasterResponse {
            const message = new AddRemoteToZigbeeIRBlasterResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.remote != null) {
                message.remote = IRRemote.fromObject(data.remote);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                remote?: ReturnType<typeof IRRemote.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.remote != null) {
                data.remote = this.remote.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_remote)
                writer.writeMessage(4, this.remote, () => this.remote.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddRemoteToZigbeeIRBlasterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddRemoteToZigbeeIRBlasterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.remote, () => message.remote = IRRemote.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddRemoteToZigbeeIRBlasterResponse {
            return AddRemoteToZigbeeIRBlasterResponse.deserialize(bytes);
        }
    }
    export class RemoveRemoteFromZigbeeIRBlaster extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_id?: string;
            force_delete?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            remote_id?: string;
            force_delete?: boolean;
        }): RemoveRemoteFromZigbeeIRBlaster {
            const message = new RemoveRemoteFromZigbeeIRBlaster({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
                force_delete?: boolean;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (this.force_delete != false)
                writer.writeBool(2, this.force_delete);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveRemoteFromZigbeeIRBlaster {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveRemoteFromZigbeeIRBlaster();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    case 2:
                        message.force_delete = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveRemoteFromZigbeeIRBlaster {
            return RemoveRemoteFromZigbeeIRBlaster.deserialize(bytes);
        }
    }
    export class RemoveRemoteFromZigbeeIRBlasterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RemoveRemoteFromZigbeeIRBlasterResponse {
            const message = new RemoveRemoteFromZigbeeIRBlasterResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveRemoteFromZigbeeIRBlasterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveRemoteFromZigbeeIRBlasterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveRemoteFromZigbeeIRBlasterResponse {
            return RemoveRemoteFromZigbeeIRBlasterResponse.deserialize(bytes);
        }
    }
    export class BlastIRCommand extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12, 13, 14, 15]];
        constructor(data?: any[] | ({
            remote_id?: string;
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        } & (({
            ac_blast_info?: IRACBlast;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: IRTVBlast;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: IRAMPBlast;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: IRPRBlast;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: IRFANBlast;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
                if ("ac_blast_info" in data && data.ac_blast_info != undefined) {
                    this.ac_blast_info = data.ac_blast_info;
                }
                if ("tv_blast_info" in data && data.tv_blast_info != undefined) {
                    this.tv_blast_info = data.tv_blast_info;
                }
                if ("amp_blast_info" in data && data.amp_blast_info != undefined) {
                    this.amp_blast_info = data.amp_blast_info;
                }
                if ("pr_blast_info" in data && data.pr_blast_info != undefined) {
                    this.pr_blast_info = data.pr_blast_info;
                }
                if ("fan_blast_info" in data && data.fan_blast_info != undefined) {
                    this.fan_blast_info = data.fan_blast_info;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC) as dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        }
        set remote_type(value: dependency_1.com.keus.hub.IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get ac_blast_info() {
            return pb_1.Message.getWrapperField(this, IRACBlast, 11) as IRACBlast;
        }
        set ac_blast_info(value: IRACBlast) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_ac_blast_info() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get tv_blast_info() {
            return pb_1.Message.getWrapperField(this, IRTVBlast, 12) as IRTVBlast;
        }
        set tv_blast_info(value: IRTVBlast) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_tv_blast_info() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get amp_blast_info() {
            return pb_1.Message.getWrapperField(this, IRAMPBlast, 13) as IRAMPBlast;
        }
        set amp_blast_info(value: IRAMPBlast) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_amp_blast_info() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get pr_blast_info() {
            return pb_1.Message.getWrapperField(this, IRPRBlast, 14) as IRPRBlast;
        }
        set pr_blast_info(value: IRPRBlast) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_pr_blast_info() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get fan_blast_info() {
            return pb_1.Message.getWrapperField(this, IRFANBlast, 15) as IRFANBlast;
        }
        set fan_blast_info(value: IRFANBlast) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_fan_blast_info() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get blast_info() {
            const cases: {
                [index: number]: "none" | "ac_blast_info" | "tv_blast_info" | "amp_blast_info" | "pr_blast_info" | "fan_blast_info";
            } = {
                0: "none",
                11: "ac_blast_info",
                12: "tv_blast_info",
                13: "amp_blast_info",
                14: "pr_blast_info",
                15: "fan_blast_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12, 13, 14, 15])];
        }
        static fromObject(data: {
            remote_id?: string;
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            ac_blast_info?: ReturnType<typeof IRACBlast.prototype.toObject>;
            tv_blast_info?: ReturnType<typeof IRTVBlast.prototype.toObject>;
            amp_blast_info?: ReturnType<typeof IRAMPBlast.prototype.toObject>;
            pr_blast_info?: ReturnType<typeof IRPRBlast.prototype.toObject>;
            fan_blast_info?: ReturnType<typeof IRFANBlast.prototype.toObject>;
        }): BlastIRCommand {
            const message = new BlastIRCommand({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            if (data.ac_blast_info != null) {
                message.ac_blast_info = IRACBlast.fromObject(data.ac_blast_info);
            }
            if (data.tv_blast_info != null) {
                message.tv_blast_info = IRTVBlast.fromObject(data.tv_blast_info);
            }
            if (data.amp_blast_info != null) {
                message.amp_blast_info = IRAMPBlast.fromObject(data.amp_blast_info);
            }
            if (data.pr_blast_info != null) {
                message.pr_blast_info = IRPRBlast.fromObject(data.pr_blast_info);
            }
            if (data.fan_blast_info != null) {
                message.fan_blast_info = IRFANBlast.fromObject(data.fan_blast_info);
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
                remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
                ac_blast_info?: ReturnType<typeof IRACBlast.prototype.toObject>;
                tv_blast_info?: ReturnType<typeof IRTVBlast.prototype.toObject>;
                amp_blast_info?: ReturnType<typeof IRAMPBlast.prototype.toObject>;
                pr_blast_info?: ReturnType<typeof IRPRBlast.prototype.toObject>;
                fan_blast_info?: ReturnType<typeof IRFANBlast.prototype.toObject>;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            if (this.ac_blast_info != null) {
                data.ac_blast_info = this.ac_blast_info.toObject();
            }
            if (this.tv_blast_info != null) {
                data.tv_blast_info = this.tv_blast_info.toObject();
            }
            if (this.amp_blast_info != null) {
                data.amp_blast_info = this.amp_blast_info.toObject();
            }
            if (this.pr_blast_info != null) {
                data.pr_blast_info = this.pr_blast_info.toObject();
            }
            if (this.fan_blast_info != null) {
                data.fan_blast_info = this.fan_blast_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (this.remote_type != dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(2, this.remote_type);
            if (this.has_ac_blast_info)
                writer.writeMessage(11, this.ac_blast_info, () => this.ac_blast_info.serialize(writer));
            if (this.has_tv_blast_info)
                writer.writeMessage(12, this.tv_blast_info, () => this.tv_blast_info.serialize(writer));
            if (this.has_amp_blast_info)
                writer.writeMessage(13, this.amp_blast_info, () => this.amp_blast_info.serialize(writer));
            if (this.has_pr_blast_info)
                writer.writeMessage(14, this.pr_blast_info, () => this.pr_blast_info.serialize(writer));
            if (this.has_fan_blast_info)
                writer.writeMessage(15, this.fan_blast_info, () => this.fan_blast_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlastIRCommand {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlastIRCommand();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    case 2:
                        message.remote_type = reader.readEnum();
                        break;
                    case 11:
                        reader.readMessage(message.ac_blast_info, () => message.ac_blast_info = IRACBlast.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.tv_blast_info, () => message.tv_blast_info = IRTVBlast.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.amp_blast_info, () => message.amp_blast_info = IRAMPBlast.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.pr_blast_info, () => message.pr_blast_info = IRPRBlast.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.fan_blast_info, () => message.fan_blast_info = IRFANBlast.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlastIRCommand {
            return BlastIRCommand.deserialize(bytes);
        }
    }
    export class BlastIRCommandResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): BlastIRCommandResponse {
            const message = new BlastIRCommandResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlastIRCommandResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlastIRCommandResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlastIRCommandResponse {
            return BlastIRCommandResponse.deserialize(bytes);
        }
    }
    export class DMBlastIRCommand extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12, 13, 14, 15]];
        constructor(data?: any[] | ({
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            ir_device?: string;
            company_id?: string;
            model_id?: string;
            version?: string;
        } & (({
            ac_blast_info?: IRACBlast;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: IRTVBlast;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: IRAMPBlast;
            pr_blast_info?: never;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: IRPRBlast;
            fan_blast_info?: never;
        } | {
            ac_blast_info?: never;
            tv_blast_info?: never;
            amp_blast_info?: never;
            pr_blast_info?: never;
            fan_blast_info?: IRFANBlast;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
                if ("ir_device" in data && data.ir_device != undefined) {
                    this.ir_device = data.ir_device;
                }
                if ("company_id" in data && data.company_id != undefined) {
                    this.company_id = data.company_id;
                }
                if ("model_id" in data && data.model_id != undefined) {
                    this.model_id = data.model_id;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("ac_blast_info" in data && data.ac_blast_info != undefined) {
                    this.ac_blast_info = data.ac_blast_info;
                }
                if ("tv_blast_info" in data && data.tv_blast_info != undefined) {
                    this.tv_blast_info = data.tv_blast_info;
                }
                if ("amp_blast_info" in data && data.amp_blast_info != undefined) {
                    this.amp_blast_info = data.amp_blast_info;
                }
                if ("pr_blast_info" in data && data.pr_blast_info != undefined) {
                    this.pr_blast_info = data.pr_blast_info;
                }
                if ("fan_blast_info" in data && data.fan_blast_info != undefined) {
                    this.fan_blast_info = data.fan_blast_info;
                }
            }
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC) as dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        }
        set remote_type(value: dependency_1.com.keus.hub.IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get ir_device() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ir_device(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get company_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set company_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get model_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set model_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get ac_blast_info() {
            return pb_1.Message.getWrapperField(this, IRACBlast, 11) as IRACBlast;
        }
        set ac_blast_info(value: IRACBlast) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_ac_blast_info() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get tv_blast_info() {
            return pb_1.Message.getWrapperField(this, IRTVBlast, 12) as IRTVBlast;
        }
        set tv_blast_info(value: IRTVBlast) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_tv_blast_info() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get amp_blast_info() {
            return pb_1.Message.getWrapperField(this, IRAMPBlast, 13) as IRAMPBlast;
        }
        set amp_blast_info(value: IRAMPBlast) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_amp_blast_info() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get pr_blast_info() {
            return pb_1.Message.getWrapperField(this, IRPRBlast, 14) as IRPRBlast;
        }
        set pr_blast_info(value: IRPRBlast) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_pr_blast_info() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get fan_blast_info() {
            return pb_1.Message.getWrapperField(this, IRFANBlast, 15) as IRFANBlast;
        }
        set fan_blast_info(value: IRFANBlast) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_fan_blast_info() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get blast_info() {
            const cases: {
                [index: number]: "none" | "ac_blast_info" | "tv_blast_info" | "amp_blast_info" | "pr_blast_info" | "fan_blast_info";
            } = {
                0: "none",
                11: "ac_blast_info",
                12: "tv_blast_info",
                13: "amp_blast_info",
                14: "pr_blast_info",
                15: "fan_blast_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12, 13, 14, 15])];
        }
        static fromObject(data: {
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            ir_device?: string;
            company_id?: string;
            model_id?: string;
            version?: string;
            ac_blast_info?: ReturnType<typeof IRACBlast.prototype.toObject>;
            tv_blast_info?: ReturnType<typeof IRTVBlast.prototype.toObject>;
            amp_blast_info?: ReturnType<typeof IRAMPBlast.prototype.toObject>;
            pr_blast_info?: ReturnType<typeof IRPRBlast.prototype.toObject>;
            fan_blast_info?: ReturnType<typeof IRFANBlast.prototype.toObject>;
        }): DMBlastIRCommand {
            const message = new DMBlastIRCommand({});
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            if (data.ir_device != null) {
                message.ir_device = data.ir_device;
            }
            if (data.company_id != null) {
                message.company_id = data.company_id;
            }
            if (data.model_id != null) {
                message.model_id = data.model_id;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.ac_blast_info != null) {
                message.ac_blast_info = IRACBlast.fromObject(data.ac_blast_info);
            }
            if (data.tv_blast_info != null) {
                message.tv_blast_info = IRTVBlast.fromObject(data.tv_blast_info);
            }
            if (data.amp_blast_info != null) {
                message.amp_blast_info = IRAMPBlast.fromObject(data.amp_blast_info);
            }
            if (data.pr_blast_info != null) {
                message.pr_blast_info = IRPRBlast.fromObject(data.pr_blast_info);
            }
            if (data.fan_blast_info != null) {
                message.fan_blast_info = IRFANBlast.fromObject(data.fan_blast_info);
            }
            return message;
        }
        toObject() {
            const data: {
                remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
                ir_device?: string;
                company_id?: string;
                model_id?: string;
                version?: string;
                ac_blast_info?: ReturnType<typeof IRACBlast.prototype.toObject>;
                tv_blast_info?: ReturnType<typeof IRTVBlast.prototype.toObject>;
                amp_blast_info?: ReturnType<typeof IRAMPBlast.prototype.toObject>;
                pr_blast_info?: ReturnType<typeof IRPRBlast.prototype.toObject>;
                fan_blast_info?: ReturnType<typeof IRFANBlast.prototype.toObject>;
            } = {};
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            if (this.ir_device != null) {
                data.ir_device = this.ir_device;
            }
            if (this.company_id != null) {
                data.company_id = this.company_id;
            }
            if (this.model_id != null) {
                data.model_id = this.model_id;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.ac_blast_info != null) {
                data.ac_blast_info = this.ac_blast_info.toObject();
            }
            if (this.tv_blast_info != null) {
                data.tv_blast_info = this.tv_blast_info.toObject();
            }
            if (this.amp_blast_info != null) {
                data.amp_blast_info = this.amp_blast_info.toObject();
            }
            if (this.pr_blast_info != null) {
                data.pr_blast_info = this.pr_blast_info.toObject();
            }
            if (this.fan_blast_info != null) {
                data.fan_blast_info = this.fan_blast_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_type != dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(1, this.remote_type);
            if (this.ir_device.length)
                writer.writeString(3, this.ir_device);
            if (this.company_id.length)
                writer.writeString(4, this.company_id);
            if (this.model_id.length)
                writer.writeString(5, this.model_id);
            if (this.version.length)
                writer.writeString(6, this.version);
            if (this.has_ac_blast_info)
                writer.writeMessage(11, this.ac_blast_info, () => this.ac_blast_info.serialize(writer));
            if (this.has_tv_blast_info)
                writer.writeMessage(12, this.tv_blast_info, () => this.tv_blast_info.serialize(writer));
            if (this.has_amp_blast_info)
                writer.writeMessage(13, this.amp_blast_info, () => this.amp_blast_info.serialize(writer));
            if (this.has_pr_blast_info)
                writer.writeMessage(14, this.pr_blast_info, () => this.pr_blast_info.serialize(writer));
            if (this.has_fan_blast_info)
                writer.writeMessage(15, this.fan_blast_info, () => this.fan_blast_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DMBlastIRCommand {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DMBlastIRCommand();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_type = reader.readEnum();
                        break;
                    case 3:
                        message.ir_device = reader.readString();
                        break;
                    case 4:
                        message.company_id = reader.readString();
                        break;
                    case 5:
                        message.model_id = reader.readString();
                        break;
                    case 6:
                        message.version = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.ac_blast_info, () => message.ac_blast_info = IRACBlast.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.tv_blast_info, () => message.tv_blast_info = IRTVBlast.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.amp_blast_info, () => message.amp_blast_info = IRAMPBlast.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.pr_blast_info, () => message.pr_blast_info = IRPRBlast.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.fan_blast_info, () => message.fan_blast_info = IRFANBlast.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DMBlastIRCommand {
            return DMBlastIRCommand.deserialize(bytes);
        }
    }
    export class DMBlastIRCommandResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): DMBlastIRCommandResponse {
            const message = new DMBlastIRCommandResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DMBlastIRCommandResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DMBlastIRCommandResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DMBlastIRCommandResponse {
            return DMBlastIRCommandResponse.deserialize(bytes);
        }
    }
    export class CloudIRRemote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            company_id?: string;
            company_name?: string;
            model_id?: string;
            model_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("company_id" in data && data.company_id != undefined) {
                    this.company_id = data.company_id;
                }
                if ("company_name" in data && data.company_name != undefined) {
                    this.company_name = data.company_name;
                }
                if ("model_id" in data && data.model_id != undefined) {
                    this.model_id = data.model_id;
                }
                if ("model_name" in data && data.model_name != undefined) {
                    this.model_name = data.model_name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get company_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set company_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get company_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set company_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get model_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set model_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get model_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set model_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            company_id?: string;
            company_name?: string;
            model_id?: string;
            model_name?: string;
        }): CloudIRRemote {
            const message = new CloudIRRemote({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.company_id != null) {
                message.company_id = data.company_id;
            }
            if (data.company_name != null) {
                message.company_name = data.company_name;
            }
            if (data.model_id != null) {
                message.model_id = data.model_id;
            }
            if (data.model_name != null) {
                message.model_name = data.model_name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                company_id?: string;
                company_name?: string;
                model_id?: string;
                model_name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.company_id != null) {
                data.company_id = this.company_id;
            }
            if (this.company_name != null) {
                data.company_name = this.company_name;
            }
            if (this.model_id != null) {
                data.model_id = this.model_id;
            }
            if (this.model_name != null) {
                data.model_name = this.model_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.company_id.length)
                writer.writeString(2, this.company_id);
            if (this.company_name.length)
                writer.writeString(3, this.company_name);
            if (this.model_id.length)
                writer.writeString(4, this.model_id);
            if (this.model_name.length)
                writer.writeString(5, this.model_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloudIRRemote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CloudIRRemote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.company_id = reader.readString();
                        break;
                    case 3:
                        message.company_name = reader.readString();
                        break;
                    case 4:
                        message.model_id = reader.readString();
                        break;
                    case 5:
                        message.model_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CloudIRRemote {
            return CloudIRRemote.deserialize(bytes);
        }
    }
    export class GetIRRemoteList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
            }
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC) as dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        }
        set remote_type(value: dependency_1.com.keus.hub.IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
        }): GetIRRemoteList {
            const message = new GetIRRemoteList({});
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_type?: dependency_1.com.keus.hub.IR_REMOTE_TYPES;
            } = {};
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_type != dependency_1.com.keus.hub.IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(1, this.remote_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetIRRemoteList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetIRRemoteList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetIRRemoteList {
            return GetIRRemoteList.deserialize(bytes);
        }
    }
    export class GetIRRemoteListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ir_remote?: CloudIRRemote[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ir_remote" in data && data.ir_remote != undefined) {
                    this.ir_remote = data.ir_remote;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ir_remote() {
            return pb_1.Message.getRepeatedWrapperField(this, CloudIRRemote, 4) as CloudIRRemote[];
        }
        set ir_remote(value: CloudIRRemote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ir_remote?: ReturnType<typeof CloudIRRemote.prototype.toObject>[];
            ops_message?: string;
        }): GetIRRemoteListResponse {
            const message = new GetIRRemoteListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ir_remote != null) {
                message.ir_remote = data.ir_remote.map(item => CloudIRRemote.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ir_remote?: ReturnType<typeof CloudIRRemote.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ir_remote != null) {
                data.ir_remote = this.ir_remote.map((item: CloudIRRemote) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ir_remote.length)
                writer.writeRepeatedMessage(4, this.ir_remote, (item: CloudIRRemote) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetIRRemoteListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetIRRemoteListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.ir_remote, () => pb_1.Message.addToRepeatedWrapperField(message, 4, CloudIRRemote.deserialize(reader), CloudIRRemote));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetIRRemoteListResponse {
            return GetIRRemoteListResponse.deserialize(bytes);
        }
    }
    export class ResetZigbeeIRBlaster extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): ResetZigbeeIRBlaster {
            const message = new ResetZigbeeIRBlaster({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeIRBlaster {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeIRBlaster();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeIRBlaster {
            return ResetZigbeeIRBlaster.deserialize(bytes);
        }
    }
    export class ResetZigbeeIRBlasterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetZigbeeIRBlasterResponse {
            const message = new ResetZigbeeIRBlasterResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeIRBlasterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeIRBlasterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeIRBlasterResponse {
            return ResetZigbeeIRBlasterResponse.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeIRBlaster extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceZigbeeIRBlaster {
            const message = new ReplaceZigbeeIRBlaster({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeIRBlaster {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeIRBlaster();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeIRBlaster {
            return ReplaceZigbeeIRBlaster.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeIRBlasterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceZigbeeIRBlasterResponse {
            const message = new ReplaceZigbeeIRBlasterResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeIRBlasterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeIRBlasterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeIRBlasterResponse {
            return ReplaceZigbeeIRBlasterResponse.deserialize(bytes);
        }
    }
    export class RenameIrRemote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_id?: string;
            remote_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
                if ("remote_name" in data && data.remote_name != undefined) {
                    this.remote_name = data.remote_name;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get remote_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set remote_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            remote_id?: string;
            remote_name?: string;
        }): RenameIrRemote {
            const message = new RenameIrRemote({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            if (data.remote_name != null) {
                message.remote_name = data.remote_name;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
                remote_name?: string;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            if (this.remote_name != null) {
                data.remote_name = this.remote_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (this.remote_name.length)
                writer.writeString(2, this.remote_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameIrRemote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameIrRemote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    case 2:
                        message.remote_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameIrRemote {
            return RenameIrRemote.deserialize(bytes);
        }
    }
    export class RenameIrRemoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameIrRemoteResponse {
            const message = new RenameIrRemoteResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameIrRemoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameIrRemoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameIrRemoteResponse {
            return RenameIrRemoteResponse.deserialize(bytes);
        }
    }
    export class ReDownloadIrRemote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_id?: string;
            update_device?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
                if ("update_device" in data && data.update_device != undefined) {
                    this.update_device = data.update_device;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_device() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set update_device(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            remote_id?: string;
            update_device?: boolean;
        }): ReDownloadIrRemote {
            const message = new ReDownloadIrRemote({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            if (data.update_device != null) {
                message.update_device = data.update_device;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
                update_device?: boolean;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            if (this.update_device != null) {
                data.update_device = this.update_device;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (this.update_device != false)
                writer.writeBool(2, this.update_device);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReDownloadIrRemote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReDownloadIrRemote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    case 2:
                        message.update_device = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReDownloadIrRemote {
            return ReDownloadIrRemote.deserialize(bytes);
        }
    }
    export class ReDownloadIrRemoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): ReDownloadIrRemoteResponse {
            const message = new ReDownloadIrRemoteResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReDownloadIrRemoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReDownloadIrRemoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReDownloadIrRemoteResponse {
            return ReDownloadIrRemoteResponse.deserialize(bytes);
        }
    }
}
