/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/zigbee_dc_fan_controller.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./device_constants";
import * as dependency_2 from "./../activity/activity_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum DC_FAN_CONTROLLER_STATES {
        DC_OFF = 0,
        DC_LOW = 1,
        DC_MED = 2,
        DC_HIGH = 3,
        DC_MAX = 4,
        DC_NW = 5,
        DC_REVERSE_ON = 6,
        DC_REVERSE_OFF = 7
    }
    export class ZigbeeDCFanControllerProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_reverse?: boolean;
            is_anti_theft?: boolean;
            fade_time?: number;
            has_light?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_reverse" in data && data.is_reverse != undefined) {
                    this.is_reverse = data.is_reverse;
                }
                if ("is_anti_theft" in data && data.is_anti_theft != undefined) {
                    this.is_anti_theft = data.is_anti_theft;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("has_light" in data && data.has_light != undefined) {
                    this.has_light = data.has_light;
                }
            }
        }
        get is_reverse() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_reverse(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_anti_theft() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_anti_theft(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_light() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set has_light(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            is_reverse?: boolean;
            is_anti_theft?: boolean;
            fade_time?: number;
            has_light?: boolean;
        }): ZigbeeDCFanControllerProperties {
            const message = new ZigbeeDCFanControllerProperties({});
            if (data.is_reverse != null) {
                message.is_reverse = data.is_reverse;
            }
            if (data.is_anti_theft != null) {
                message.is_anti_theft = data.is_anti_theft;
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.has_light != null) {
                message.has_light = data.has_light;
            }
            return message;
        }
        toObject() {
            const data: {
                is_reverse?: boolean;
                is_anti_theft?: boolean;
                fade_time?: number;
                has_light?: boolean;
            } = {};
            if (this.is_reverse != null) {
                data.is_reverse = this.is_reverse;
            }
            if (this.is_anti_theft != null) {
                data.is_anti_theft = this.is_anti_theft;
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.has_light != null) {
                data.has_light = this.has_light;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_reverse != false)
                writer.writeBool(1, this.is_reverse);
            if (this.is_anti_theft != false)
                writer.writeBool(2, this.is_anti_theft);
            if (this.fade_time != 0)
                writer.writeInt32(3, this.fade_time);
            if (this.has_light != false)
                writer.writeBool(4, this.has_light);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeDCFanControllerProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeDCFanControllerProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_reverse = reader.readBool();
                        break;
                    case 2:
                        message.is_anti_theft = reader.readBool();
                        break;
                    case 3:
                        message.fade_time = reader.readInt32();
                        break;
                    case 4:
                        message.has_light = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeDCFanControllerProperties {
            return ZigbeeDCFanControllerProperties.deserialize(bytes);
        }
    }
    export class DCFanControllerLightState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            light_state?: number;
            light_temperature?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("light_temperature" in data && data.light_temperature != undefined) {
                    this.light_temperature = data.light_temperature;
                }
            }
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get light_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set light_temperature(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            light_state?: number;
            light_temperature?: number;
        }): DCFanControllerLightState {
            const message = new DCFanControllerLightState({});
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.light_temperature != null) {
                message.light_temperature = data.light_temperature;
            }
            return message;
        }
        toObject() {
            const data: {
                light_state?: number;
                light_temperature?: number;
            } = {};
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.light_temperature != null) {
                data.light_temperature = this.light_temperature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.light_state != 0)
                writer.writeInt32(1, this.light_state);
            if (this.light_temperature != 0)
                writer.writeInt32(2, this.light_temperature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DCFanControllerLightState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DCFanControllerLightState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.light_state = reader.readInt32();
                        break;
                    case 2:
                        message.light_temperature = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DCFanControllerLightState {
            return DCFanControllerLightState.deserialize(bytes);
        }
    }
    export class ZigbeeDCFanControllerState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fan_state?: DC_FAN_CONTROLLER_STATES;
            light_state?: DCFanControllerLightState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
            }
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, DC_FAN_CONTROLLER_STATES.DC_OFF) as DC_FAN_CONTROLLER_STATES;
        }
        set fan_state(value: DC_FAN_CONTROLLER_STATES) {
            pb_1.Message.setField(this, 1, value);
        }
        get light_state() {
            return pb_1.Message.getWrapperField(this, DCFanControllerLightState, 2) as DCFanControllerLightState;
        }
        set light_state(value: DCFanControllerLightState) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_light_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            fan_state?: DC_FAN_CONTROLLER_STATES;
            light_state?: ReturnType<typeof DCFanControllerLightState.prototype.toObject>;
        }): ZigbeeDCFanControllerState {
            const message = new ZigbeeDCFanControllerState({});
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = DCFanControllerLightState.fromObject(data.light_state);
            }
            return message;
        }
        toObject() {
            const data: {
                fan_state?: DC_FAN_CONTROLLER_STATES;
                light_state?: ReturnType<typeof DCFanControllerLightState.prototype.toObject>;
            } = {};
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fan_state != DC_FAN_CONTROLLER_STATES.DC_OFF)
                writer.writeEnum(1, this.fan_state);
            if (this.has_light_state)
                writer.writeMessage(2, this.light_state, () => this.light_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeDCFanControllerState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeDCFanControllerState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fan_state = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.light_state, () => message.light_state = DCFanControllerLightState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeDCFanControllerState {
            return ZigbeeDCFanControllerState.deserialize(bytes);
        }
    }
    export class ZigbeeDCFanControllerAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: DC_FAN_CONTROLLER_STATES;
            light_state?: DCFanControllerLightState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE.DC_FAN_UPDATE) as dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 4, value);
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, DC_FAN_CONTROLLER_STATES.DC_OFF) as DC_FAN_CONTROLLER_STATES;
        }
        set fan_state(value: DC_FAN_CONTROLLER_STATES) {
            pb_1.Message.setField(this, 2, value);
        }
        get light_state() {
            return pb_1.Message.getWrapperField(this, DCFanControllerLightState, 3) as DCFanControllerLightState;
        }
        set light_state(value: DCFanControllerLightState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_light_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: DC_FAN_CONTROLLER_STATES;
            light_state?: ReturnType<typeof DCFanControllerLightState.prototype.toObject>;
        }): ZigbeeDCFanControllerAction {
            const message = new ZigbeeDCFanControllerAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = DCFanControllerLightState.fromObject(data.light_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
                fan_state?: DC_FAN_CONTROLLER_STATES;
                light_state?: ReturnType<typeof DCFanControllerLightState.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE.DC_FAN_UPDATE)
                writer.writeEnum(4, this.update_type);
            if (this.fan_state != DC_FAN_CONTROLLER_STATES.DC_OFF)
                writer.writeEnum(2, this.fan_state);
            if (this.has_light_state)
                writer.writeMessage(3, this.light_state, () => this.light_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeDCFanControllerAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeDCFanControllerAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.fan_state = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.light_state, () => message.light_state = DCFanControllerLightState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeDCFanControllerAction {
            return ZigbeeDCFanControllerAction.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeDCFanController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            is_hidden?: boolean;
            is_reverse?: boolean;
            is_anti_theft?: boolean;
            fade_time?: number;
            has_light?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
                if ("is_reverse" in data && data.is_reverse != undefined) {
                    this.is_reverse = data.is_reverse;
                }
                if ("is_anti_theft" in data && data.is_anti_theft != undefined) {
                    this.is_anti_theft = data.is_anti_theft;
                }
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("has_light" in data && data.has_light != undefined) {
                    this.has_light = data.has_light;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_reverse() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_reverse(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_anti_theft() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_anti_theft(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_light() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set has_light(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            is_hidden?: boolean;
            is_reverse?: boolean;
            is_anti_theft?: boolean;
            fade_time?: number;
            has_light?: boolean;
        }): ConfigureZigbeeDCFanController {
            const message = new ConfigureZigbeeDCFanController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            if (data.is_reverse != null) {
                message.is_reverse = data.is_reverse;
            }
            if (data.is_anti_theft != null) {
                message.is_anti_theft = data.is_anti_theft;
            }
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.has_light != null) {
                message.has_light = data.has_light;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
                is_hidden?: boolean;
                is_reverse?: boolean;
                is_anti_theft?: boolean;
                fade_time?: number;
                has_light?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            if (this.is_reverse != null) {
                data.is_reverse = this.is_reverse;
            }
            if (this.is_anti_theft != null) {
                data.is_anti_theft = this.is_anti_theft;
            }
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.has_light != null) {
                data.has_light = this.has_light;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_location.length)
                writer.writeString(3, this.device_location);
            if (this.is_hidden != false)
                writer.writeBool(4, this.is_hidden);
            if (this.is_reverse != false)
                writer.writeBool(5, this.is_reverse);
            if (this.is_anti_theft != false)
                writer.writeBool(6, this.is_anti_theft);
            if (this.fade_time != 0)
                writer.writeInt32(7, this.fade_time);
            if (this.has_light != false)
                writer.writeBool(8, this.has_light);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeDCFanController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeDCFanController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_location = reader.readString();
                        break;
                    case 4:
                        message.is_hidden = reader.readBool();
                        break;
                    case 5:
                        message.is_reverse = reader.readBool();
                        break;
                    case 6:
                        message.is_anti_theft = reader.readBool();
                        break;
                    case 7:
                        message.fade_time = reader.readInt32();
                        break;
                    case 8:
                        message.has_light = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeDCFanController {
            return ConfigureZigbeeDCFanController.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeDCFanControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureZigbeeDCFanControllerResponse {
            const message = new ConfigureZigbeeDCFanControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeDCFanControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeDCFanControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeDCFanControllerResponse {
            return ConfigureZigbeeDCFanControllerResponse.deserialize(bytes);
        }
    }
    export class UpdateZigbeeDCFanControllerState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: DC_FAN_CONTROLLER_STATES;
            light_state?: DCFanControllerLightState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE.DC_FAN_UPDATE) as dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 10, DC_FAN_CONTROLLER_STATES.DC_OFF) as DC_FAN_CONTROLLER_STATES;
        }
        set fan_state(value: DC_FAN_CONTROLLER_STATES) {
            pb_1.Message.setField(this, 10, value);
        }
        get light_state() {
            return pb_1.Message.getWrapperField(this, DCFanControllerLightState, 11) as DCFanControllerLightState;
        }
        set light_state(value: DCFanControllerLightState) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_light_state() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: DC_FAN_CONTROLLER_STATES;
            light_state?: ReturnType<typeof DCFanControllerLightState.prototype.toObject>;
        }): UpdateZigbeeDCFanControllerState {
            const message = new UpdateZigbeeDCFanControllerState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = DCFanControllerLightState.fromObject(data.light_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
                fan_state?: DC_FAN_CONTROLLER_STATES;
                light_state?: ReturnType<typeof DCFanControllerLightState.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE.DC_FAN_UPDATE)
                writer.writeEnum(2, this.update_type);
            if (this.fan_state != DC_FAN_CONTROLLER_STATES.DC_OFF)
                writer.writeEnum(10, this.fan_state);
            if (this.has_light_state)
                writer.writeMessage(11, this.light_state, () => this.light_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeDCFanControllerState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeDCFanControllerState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.update_type = reader.readEnum();
                        break;
                    case 10:
                        message.fan_state = reader.readEnum();
                        break;
                    case 11:
                        reader.readMessage(message.light_state, () => message.light_state = DCFanControllerLightState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeDCFanControllerState {
            return UpdateZigbeeDCFanControllerState.deserialize(bytes);
        }
    }
    export class UpdateZigbeeDCFanControllerStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateZigbeeDCFanControllerStateResponse {
            const message = new UpdateZigbeeDCFanControllerStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeDCFanControllerStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeDCFanControllerStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeDCFanControllerStateResponse {
            return UpdateZigbeeDCFanControllerStateResponse.deserialize(bytes);
        }
    }
    export class MoveZigbeeDCFanControllerRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveZigbeeDCFanControllerRoom {
            const message = new MoveZigbeeDCFanControllerRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeDCFanControllerRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeDCFanControllerRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeDCFanControllerRoom {
            return MoveZigbeeDCFanControllerRoom.deserialize(bytes);
        }
    }
    export class MoveZigbeeDCFanControllerRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveZigbeeDCFanControllerRoomResponse {
            const message = new MoveZigbeeDCFanControllerRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeDCFanControllerRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeDCFanControllerRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeDCFanControllerRoomResponse {
            return MoveZigbeeDCFanControllerRoomResponse.deserialize(bytes);
        }
    }
    export class ResetZigbeeDCFanController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): ResetZigbeeDCFanController {
            const message = new ResetZigbeeDCFanController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeDCFanController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeDCFanController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeDCFanController {
            return ResetZigbeeDCFanController.deserialize(bytes);
        }
    }
    export class ResetZigbeeDCFanControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetZigbeeDCFanControllerResponse {
            const message = new ResetZigbeeDCFanControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeDCFanControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeDCFanControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeDCFanControllerResponse {
            return ResetZigbeeDCFanControllerResponse.deserialize(bytes);
        }
    }
    export class ReportZigbeeDCFanControllerActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: DC_FAN_CONTROLLER_STATES;
            light_state?: DCFanControllerLightState;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE.DC_FAN_UPDATE) as dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 10, DC_FAN_CONTROLLER_STATES.DC_OFF) as DC_FAN_CONTROLLER_STATES;
        }
        set fan_state(value: DC_FAN_CONTROLLER_STATES) {
            pb_1.Message.setField(this, 10, value);
        }
        get light_state() {
            return pb_1.Message.getWrapperField(this, DCFanControllerLightState, 11) as DCFanControllerLightState;
        }
        set light_state(value: DCFanControllerLightState) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_light_state() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: DC_FAN_CONTROLLER_STATES;
            light_state?: ReturnType<typeof DCFanControllerLightState.prototype.toObject>;
            activity_time?: number;
        }): ReportZigbeeDCFanControllerActivity {
            const message = new ReportZigbeeDCFanControllerActivity({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = DCFanControllerLightState.fromObject(data.light_state);
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE;
                fan_state?: DC_FAN_CONTROLLER_STATES;
                light_state?: ReturnType<typeof DCFanControllerLightState.prototype.toObject>;
                activity_time?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state.toObject();
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.DC_FAN_CONTROLLER_UPDATE_TYPE.DC_FAN_UPDATE)
                writer.writeEnum(2, this.update_type);
            if (this.fan_state != DC_FAN_CONTROLLER_STATES.DC_OFF)
                writer.writeEnum(10, this.fan_state);
            if (this.has_light_state)
                writer.writeMessage(11, this.light_state, () => this.light_state.serialize(writer));
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportZigbeeDCFanControllerActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportZigbeeDCFanControllerActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.update_type = reader.readEnum();
                        break;
                    case 10:
                        message.fan_state = reader.readEnum();
                        break;
                    case 11:
                        reader.readMessage(message.light_state, () => message.light_state = DCFanControllerLightState.deserialize(reader));
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportZigbeeDCFanControllerActivity {
            return ReportZigbeeDCFanControllerActivity.deserialize(bytes);
        }
    }
    export class ZigbeeDCFanControllerEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_state?: UpdateZigbeeDCFanControllerState;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_state" in data && data.update_state != undefined) {
                    this.update_state = data.update_state;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get update_state() {
            return pb_1.Message.getWrapperField(this, UpdateZigbeeDCFanControllerState, 1) as UpdateZigbeeDCFanControllerState;
        }
        set update_state(value: UpdateZigbeeDCFanControllerState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_update_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_state?: ReturnType<typeof UpdateZigbeeDCFanControllerState.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): ZigbeeDCFanControllerEvent {
            const message = new ZigbeeDCFanControllerEvent({});
            if (data.update_state != null) {
                message.update_state = UpdateZigbeeDCFanControllerState.fromObject(data.update_state);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                update_state?: ReturnType<typeof UpdateZigbeeDCFanControllerState.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.update_state != null) {
                data.update_state = this.update_state.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_update_state)
                writer.writeMessage(1, this.update_state, () => this.update_state.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeDCFanControllerEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeDCFanControllerEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.update_state, () => message.update_state = UpdateZigbeeDCFanControllerState.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeDCFanControllerEvent {
            return ZigbeeDCFanControllerEvent.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeDCFanController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceZigbeeDCFanController {
            const message = new ReplaceZigbeeDCFanController({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeDCFanController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeDCFanController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeDCFanController {
            return ReplaceZigbeeDCFanController.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeDCFanControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceZigbeeDCFanControllerResponse {
            const message = new ReplaceZigbeeDCFanControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeDCFanControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeDCFanControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeDCFanControllerResponse {
            return ReplaceZigbeeDCFanControllerResponse.deserialize(bytes);
        }
    }
    export class RenameZigbeeDCFanController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
        }): RenameZigbeeDCFanController {
            const message = new RenameZigbeeDCFanController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeDCFanController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeDCFanController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeDCFanController {
            return RenameZigbeeDCFanController.deserialize(bytes);
        }
    }
    export class RenameZigbeeDCFanControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameZigbeeDCFanControllerResponse {
            const message = new RenameZigbeeDCFanControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeDCFanControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeDCFanControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeDCFanControllerResponse {
            return RenameZigbeeDCFanControllerResponse.deserialize(bytes);
        }
    }
}
