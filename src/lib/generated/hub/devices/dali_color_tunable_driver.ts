/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/dali_color_tunable_driver.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./dali_dimmable_driver";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class DaliColorTunableDriverState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            driver_state?: number;
            color_temperature?: number;
            last_update_by?: string;
            last_update_time?: number;
            last_update_user?: string;
            last_update_source?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
                if ("color_temperature" in data && data.color_temperature != undefined) {
                    this.color_temperature = data.color_temperature;
                }
                if ("last_update_by" in data && data.last_update_by != undefined) {
                    this.last_update_by = data.last_update_by;
                }
                if ("last_update_time" in data && data.last_update_time != undefined) {
                    this.last_update_time = data.last_update_time;
                }
                if ("last_update_user" in data && data.last_update_user != undefined) {
                    this.last_update_user = data.last_update_user;
                }
                if ("last_update_source" in data && data.last_update_source != undefined) {
                    this.last_update_source = data.last_update_source;
                }
            }
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get color_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set color_temperature(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_update_by() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set last_update_by(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get last_update_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set last_update_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_update_user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set last_update_user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get last_update_source() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set last_update_source(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            driver_state?: number;
            color_temperature?: number;
            last_update_by?: string;
            last_update_time?: number;
            last_update_user?: string;
            last_update_source?: string;
        }): DaliColorTunableDriverState {
            const message = new DaliColorTunableDriverState({});
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            if (data.color_temperature != null) {
                message.color_temperature = data.color_temperature;
            }
            if (data.last_update_by != null) {
                message.last_update_by = data.last_update_by;
            }
            if (data.last_update_time != null) {
                message.last_update_time = data.last_update_time;
            }
            if (data.last_update_user != null) {
                message.last_update_user = data.last_update_user;
            }
            if (data.last_update_source != null) {
                message.last_update_source = data.last_update_source;
            }
            return message;
        }
        toObject() {
            const data: {
                driver_state?: number;
                color_temperature?: number;
                last_update_by?: string;
                last_update_time?: number;
                last_update_user?: string;
                last_update_source?: string;
            } = {};
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            if (this.color_temperature != null) {
                data.color_temperature = this.color_temperature;
            }
            if (this.last_update_by != null) {
                data.last_update_by = this.last_update_by;
            }
            if (this.last_update_time != null) {
                data.last_update_time = this.last_update_time;
            }
            if (this.last_update_user != null) {
                data.last_update_user = this.last_update_user;
            }
            if (this.last_update_source != null) {
                data.last_update_source = this.last_update_source;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.driver_state != 0)
                writer.writeInt32(1, this.driver_state);
            if (this.color_temperature != 0)
                writer.writeInt32(2, this.color_temperature);
            if (this.last_update_by.length)
                writer.writeString(3, this.last_update_by);
            if (this.last_update_time != 0)
                writer.writeInt64(4, this.last_update_time);
            if (this.last_update_user.length)
                writer.writeString(5, this.last_update_user);
            if (this.last_update_source.length)
                writer.writeString(6, this.last_update_source);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliColorTunableDriverState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliColorTunableDriverState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.driver_state = reader.readInt32();
                        break;
                    case 2:
                        message.color_temperature = reader.readInt32();
                        break;
                    case 3:
                        message.last_update_by = reader.readString();
                        break;
                    case 4:
                        message.last_update_time = reader.readInt64();
                        break;
                    case 5:
                        message.last_update_user = reader.readString();
                        break;
                    case 6:
                        message.last_update_source = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliColorTunableDriverState {
            return DaliColorTunableDriverState.deserialize(bytes);
        }
    }
    export class DaliColorTunableDriverProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fade_time?: number;
            instant_off?: boolean;
            min_value?: number;
            max_value?: number;
            default_state?: DaliColorTunableDriverState;
            is_driver_property_updated?: boolean;
            min_temperature?: number;
            max_temperature?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("instant_off" in data && data.instant_off != undefined) {
                    this.instant_off = data.instant_off;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("default_state" in data && data.default_state != undefined) {
                    this.default_state = data.default_state;
                }
                if ("is_driver_property_updated" in data && data.is_driver_property_updated != undefined) {
                    this.is_driver_property_updated = data.is_driver_property_updated;
                }
                if ("min_temperature" in data && data.min_temperature != undefined) {
                    this.min_temperature = data.min_temperature;
                }
                if ("max_temperature" in data && data.max_temperature != undefined) {
                    this.max_temperature = data.max_temperature;
                }
            }
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get instant_off() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set instant_off(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get min_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set min_value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get default_state() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableDriverState, 4) as DaliColorTunableDriverState;
        }
        set default_state(value: DaliColorTunableDriverState) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_default_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get is_driver_property_updated() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_driver_property_updated(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get min_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set min_temperature(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_temperature(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            fade_time?: number;
            instant_off?: boolean;
            min_value?: number;
            max_value?: number;
            default_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
            is_driver_property_updated?: boolean;
            min_temperature?: number;
            max_temperature?: number;
        }): DaliColorTunableDriverProperties {
            const message = new DaliColorTunableDriverProperties({});
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.instant_off != null) {
                message.instant_off = data.instant_off;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.default_state != null) {
                message.default_state = DaliColorTunableDriverState.fromObject(data.default_state);
            }
            if (data.is_driver_property_updated != null) {
                message.is_driver_property_updated = data.is_driver_property_updated;
            }
            if (data.min_temperature != null) {
                message.min_temperature = data.min_temperature;
            }
            if (data.max_temperature != null) {
                message.max_temperature = data.max_temperature;
            }
            return message;
        }
        toObject() {
            const data: {
                fade_time?: number;
                instant_off?: boolean;
                min_value?: number;
                max_value?: number;
                default_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
                is_driver_property_updated?: boolean;
                min_temperature?: number;
                max_temperature?: number;
            } = {};
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.instant_off != null) {
                data.instant_off = this.instant_off;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.default_state != null) {
                data.default_state = this.default_state.toObject();
            }
            if (this.is_driver_property_updated != null) {
                data.is_driver_property_updated = this.is_driver_property_updated;
            }
            if (this.min_temperature != null) {
                data.min_temperature = this.min_temperature;
            }
            if (this.max_temperature != null) {
                data.max_temperature = this.max_temperature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fade_time != 0)
                writer.writeInt32(1, this.fade_time);
            if (this.instant_off != false)
                writer.writeBool(8, this.instant_off);
            if (this.min_value != 0)
                writer.writeInt32(2, this.min_value);
            if (this.max_value != 0)
                writer.writeInt32(3, this.max_value);
            if (this.has_default_state)
                writer.writeMessage(4, this.default_state, () => this.default_state.serialize(writer));
            if (this.is_driver_property_updated != false)
                writer.writeBool(5, this.is_driver_property_updated);
            if (this.min_temperature != 0)
                writer.writeInt32(6, this.min_temperature);
            if (this.max_temperature != 0)
                writer.writeInt32(7, this.max_temperature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliColorTunableDriverProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliColorTunableDriverProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fade_time = reader.readInt32();
                        break;
                    case 8:
                        message.instant_off = reader.readBool();
                        break;
                    case 2:
                        message.min_value = reader.readInt32();
                        break;
                    case 3:
                        message.max_value = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.default_state, () => message.default_state = DaliColorTunableDriverState.deserialize(reader));
                        break;
                    case 5:
                        message.is_driver_property_updated = reader.readBool();
                        break;
                    case 6:
                        message.min_temperature = reader.readInt32();
                        break;
                    case 7:
                        message.max_temperature = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliColorTunableDriverProperties {
            return DaliColorTunableDriverProperties.deserialize(bytes);
        }
    }
    export class DaliColorTunableDriverGroupProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fade_time?: number;
            instant_off?: boolean;
            min_value?: number;
            max_value?: number;
            default_state?: DaliColorTunableDriverState;
            device_voice_name?: string;
            min_temperature?: number;
            max_temperature?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("instant_off" in data && data.instant_off != undefined) {
                    this.instant_off = data.instant_off;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("default_state" in data && data.default_state != undefined) {
                    this.default_state = data.default_state;
                }
                if ("device_voice_name" in data && data.device_voice_name != undefined) {
                    this.device_voice_name = data.device_voice_name;
                }
                if ("min_temperature" in data && data.min_temperature != undefined) {
                    this.min_temperature = data.min_temperature;
                }
                if ("max_temperature" in data && data.max_temperature != undefined) {
                    this.max_temperature = data.max_temperature;
                }
            }
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get instant_off() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set instant_off(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get min_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set min_value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get default_state() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableDriverState, 4) as DaliColorTunableDriverState;
        }
        set default_state(value: DaliColorTunableDriverState) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_default_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get device_voice_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_voice_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get min_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set min_temperature(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_temperature(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            fade_time?: number;
            instant_off?: boolean;
            min_value?: number;
            max_value?: number;
            default_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
            device_voice_name?: string;
            min_temperature?: number;
            max_temperature?: number;
        }): DaliColorTunableDriverGroupProperties {
            const message = new DaliColorTunableDriverGroupProperties({});
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.instant_off != null) {
                message.instant_off = data.instant_off;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.default_state != null) {
                message.default_state = DaliColorTunableDriverState.fromObject(data.default_state);
            }
            if (data.device_voice_name != null) {
                message.device_voice_name = data.device_voice_name;
            }
            if (data.min_temperature != null) {
                message.min_temperature = data.min_temperature;
            }
            if (data.max_temperature != null) {
                message.max_temperature = data.max_temperature;
            }
            return message;
        }
        toObject() {
            const data: {
                fade_time?: number;
                instant_off?: boolean;
                min_value?: number;
                max_value?: number;
                default_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
                device_voice_name?: string;
                min_temperature?: number;
                max_temperature?: number;
            } = {};
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.instant_off != null) {
                data.instant_off = this.instant_off;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.default_state != null) {
                data.default_state = this.default_state.toObject();
            }
            if (this.device_voice_name != null) {
                data.device_voice_name = this.device_voice_name;
            }
            if (this.min_temperature != null) {
                data.min_temperature = this.min_temperature;
            }
            if (this.max_temperature != null) {
                data.max_temperature = this.max_temperature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fade_time != 0)
                writer.writeInt32(1, this.fade_time);
            if (this.instant_off != false)
                writer.writeBool(8, this.instant_off);
            if (this.min_value != 0)
                writer.writeInt32(2, this.min_value);
            if (this.max_value != 0)
                writer.writeInt32(3, this.max_value);
            if (this.has_default_state)
                writer.writeMessage(4, this.default_state, () => this.default_state.serialize(writer));
            if (this.device_voice_name.length)
                writer.writeString(5, this.device_voice_name);
            if (this.min_temperature != 0)
                writer.writeInt32(6, this.min_temperature);
            if (this.max_temperature != 0)
                writer.writeInt32(7, this.max_temperature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliColorTunableDriverGroupProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliColorTunableDriverGroupProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fade_time = reader.readInt32();
                        break;
                    case 8:
                        message.instant_off = reader.readBool();
                        break;
                    case 2:
                        message.min_value = reader.readInt32();
                        break;
                    case 3:
                        message.max_value = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.default_state, () => message.default_state = DaliColorTunableDriverState.deserialize(reader));
                        break;
                    case 5:
                        message.device_voice_name = reader.readString();
                        break;
                    case 6:
                        message.min_temperature = reader.readInt32();
                        break;
                    case 7:
                        message.max_temperature = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliColorTunableDriverGroupProperties {
            return DaliColorTunableDriverGroupProperties.deserialize(bytes);
        }
    }
    export class DaliColorTunableDriverGroupSceneAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
            driver_state?: DaliColorTunableDriverState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get driver_state() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableDriverState, 3) as DaliColorTunableDriverState;
        }
        set driver_state(value: DaliColorTunableDriverState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_driver_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            driver_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
        }): DaliColorTunableDriverGroupSceneAction {
            const message = new DaliColorTunableDriverGroupSceneAction({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.driver_state != null) {
                message.driver_state = DaliColorTunableDriverState.fromObject(data.driver_state);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                driver_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.driver_state != null) {
                data.driver_state = this.driver_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.has_driver_state)
                writer.writeMessage(3, this.driver_state, () => this.driver_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliColorTunableDriverGroupSceneAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliColorTunableDriverGroupSceneAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.driver_state, () => message.driver_state = DaliColorTunableDriverState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliColorTunableDriverGroupSceneAction {
            return DaliColorTunableDriverGroupSceneAction.deserialize(bytes);
        }
    }
    export class DaliColorTunableDriverGroupScheculeAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
            driver_state?: DaliColorTunableDriverState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get driver_state() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableDriverState, 3) as DaliColorTunableDriverState;
        }
        set driver_state(value: DaliColorTunableDriverState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_driver_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            driver_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
        }): DaliColorTunableDriverGroupScheculeAction {
            const message = new DaliColorTunableDriverGroupScheculeAction({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.driver_state != null) {
                message.driver_state = DaliColorTunableDriverState.fromObject(data.driver_state);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                driver_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.driver_state != null) {
                data.driver_state = this.driver_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.has_driver_state)
                writer.writeMessage(3, this.driver_state, () => this.driver_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliColorTunableDriverGroupScheculeAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliColorTunableDriverGroupScheculeAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.driver_state, () => message.driver_state = DaliColorTunableDriverState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliColorTunableDriverGroupScheculeAction {
            return DaliColorTunableDriverGroupScheculeAction.deserialize(bytes);
        }
    }
    export class DaliColorTunableDriverGroupActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
            room_id?: string;
            room_name?: string;
            floor_id?: string;
            floor_name?: string;
            section_id?: string;
            section_name?: string;
            driver_state?: DaliColorTunableDriverState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("room_name" in data && data.room_name != undefined) {
                    this.room_name = data.room_name;
                }
                if ("floor_id" in data && data.floor_id != undefined) {
                    this.floor_id = data.floor_id;
                }
                if ("floor_name" in data && data.floor_name != undefined) {
                    this.floor_name = data.floor_name;
                }
                if ("section_id" in data && data.section_id != undefined) {
                    this.section_id = data.section_id;
                }
                if ("section_name" in data && data.section_name != undefined) {
                    this.section_name = data.section_name;
                }
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set room_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get floor_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set floor_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get floor_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set floor_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get section_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set section_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get section_name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set section_name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get driver_state() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableDriverState, 9) as DaliColorTunableDriverState;
        }
        set driver_state(value: DaliColorTunableDriverState) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_driver_state() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            room_id?: string;
            room_name?: string;
            floor_id?: string;
            floor_name?: string;
            section_id?: string;
            section_name?: string;
            driver_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
        }): DaliColorTunableDriverGroupActivity {
            const message = new DaliColorTunableDriverGroupActivity({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.room_name != null) {
                message.room_name = data.room_name;
            }
            if (data.floor_id != null) {
                message.floor_id = data.floor_id;
            }
            if (data.floor_name != null) {
                message.floor_name = data.floor_name;
            }
            if (data.section_id != null) {
                message.section_id = data.section_id;
            }
            if (data.section_name != null) {
                message.section_name = data.section_name;
            }
            if (data.driver_state != null) {
                message.driver_state = DaliColorTunableDriverState.fromObject(data.driver_state);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                room_id?: string;
                room_name?: string;
                floor_id?: string;
                floor_name?: string;
                section_id?: string;
                section_name?: string;
                driver_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.room_name != null) {
                data.room_name = this.room_name;
            }
            if (this.floor_id != null) {
                data.floor_id = this.floor_id;
            }
            if (this.floor_name != null) {
                data.floor_name = this.floor_name;
            }
            if (this.section_id != null) {
                data.section_id = this.section_id;
            }
            if (this.section_name != null) {
                data.section_name = this.section_name;
            }
            if (this.driver_state != null) {
                data.driver_state = this.driver_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.room_id.length)
                writer.writeString(3, this.room_id);
            if (this.room_name.length)
                writer.writeString(4, this.room_name);
            if (this.floor_id.length)
                writer.writeString(5, this.floor_id);
            if (this.floor_name.length)
                writer.writeString(6, this.floor_name);
            if (this.section_id.length)
                writer.writeString(7, this.section_id);
            if (this.section_name.length)
                writer.writeString(8, this.section_name);
            if (this.has_driver_state)
                writer.writeMessage(9, this.driver_state, () => this.driver_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliColorTunableDriverGroupActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliColorTunableDriverGroupActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        message.room_id = reader.readString();
                        break;
                    case 4:
                        message.room_name = reader.readString();
                        break;
                    case 5:
                        message.floor_id = reader.readString();
                        break;
                    case 6:
                        message.floor_name = reader.readString();
                        break;
                    case 7:
                        message.section_id = reader.readString();
                        break;
                    case 8:
                        message.section_name = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.driver_state, () => message.driver_state = DaliColorTunableDriverState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliColorTunableDriverGroupActivity {
            return DaliColorTunableDriverGroupActivity.deserialize(bytes);
        }
    }
    export class MoveDaliColorTunableDriverRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveDaliColorTunableDriverRoom {
            const message = new MoveDaliColorTunableDriverRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveDaliColorTunableDriverRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveDaliColorTunableDriverRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveDaliColorTunableDriverRoom {
            return MoveDaliColorTunableDriverRoom.deserialize(bytes);
        }
    }
    export class MoveDaliColorTunableRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveDaliColorTunableRoomResponse {
            const message = new MoveDaliColorTunableRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveDaliColorTunableRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveDaliColorTunableRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveDaliColorTunableRoomResponse {
            return MoveDaliColorTunableRoomResponse.deserialize(bytes);
        }
    }
    export class SetDaliColorTunableDriverNameLocation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
        }): SetDaliColorTunableDriverNameLocation {
            const message = new SetDaliColorTunableDriverNameLocation({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_location.length)
                writer.writeString(3, this.device_location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDaliColorTunableDriverNameLocation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDaliColorTunableDriverNameLocation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_location = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDaliColorTunableDriverNameLocation {
            return SetDaliColorTunableDriverNameLocation.deserialize(bytes);
        }
    }
    export class SetDaliColorTunableDriverNameLocationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetDaliColorTunableDriverNameLocationResponse {
            const message = new SetDaliColorTunableDriverNameLocationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDaliColorTunableDriverNameLocationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDaliColorTunableDriverNameLocationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDaliColorTunableDriverNameLocationResponse {
            return SetDaliColorTunableDriverNameLocationResponse.deserialize(bytes);
        }
    }
    export class CheckDaliDriverType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): CheckDaliDriverType {
            const message = new CheckDaliDriverType({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckDaliDriverType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckDaliDriverType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckDaliDriverType {
            return CheckDaliDriverType.deserialize(bytes);
        }
    }
    export class CheckDaliDriverTypeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            driver_type?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("driver_type" in data && data.driver_type != undefined) {
                    this.driver_type = data.driver_type;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get driver_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set driver_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            driver_type?: string;
            ops_message?: string;
        }): CheckDaliDriverTypeResponse {
            const message = new CheckDaliDriverTypeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.driver_type != null) {
                message.driver_type = data.driver_type;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                driver_type?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.driver_type != null) {
                data.driver_type = this.driver_type;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.driver_type.length)
                writer.writeString(4, this.driver_type);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckDaliDriverTypeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckDaliDriverTypeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.driver_type = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckDaliDriverTypeResponse {
            return CheckDaliDriverTypeResponse.deserialize(bytes);
        }
    }
    export class UpdateDaliDriverType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            driver_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("driver_type" in data && data.driver_type != undefined) {
                    this.driver_type = data.driver_type;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get driver_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set driver_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            driver_type?: string;
        }): UpdateDaliDriverType {
            const message = new UpdateDaliDriverType({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.driver_type != null) {
                message.driver_type = data.driver_type;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                driver_type?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.driver_type != null) {
                data.driver_type = this.driver_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.driver_type.length)
                writer.writeString(2, this.driver_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDaliDriverType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDaliDriverType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.driver_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDaliDriverType {
            return UpdateDaliDriverType.deserialize(bytes);
        }
    }
    export class UpdateDaliDriverTypeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[5, 6]];
        constructor(data?: any[] | ({
            success?: boolean;
            code?: number;
            message?: string;
            driver_type?: string;
            ops_message?: string;
        } & (({
            ct_props?: DaliColorTunableDriverProperties;
            dd_props?: never;
        } | {
            ct_props?: never;
            dd_props?: dependency_1.com.keus.hub.DaliDimmableDriverProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("driver_type" in data && data.driver_type != undefined) {
                    this.driver_type = data.driver_type;
                }
                if ("ct_props" in data && data.ct_props != undefined) {
                    this.ct_props = data.ct_props;
                }
                if ("dd_props" in data && data.dd_props != undefined) {
                    this.dd_props = data.dd_props;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get driver_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set driver_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ct_props() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableDriverProperties, 5) as DaliColorTunableDriverProperties;
        }
        set ct_props(value: DaliColorTunableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_ct_props() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get dd_props() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.DaliDimmableDriverProperties, 6) as dependency_1.com.keus.hub.DaliDimmableDriverProperties;
        }
        set dd_props(value: dependency_1.com.keus.hub.DaliDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_dd_props() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get device_properties() {
            const cases: {
                [index: number]: "none" | "ct_props" | "dd_props";
            } = {
                0: "none",
                5: "ct_props",
                6: "dd_props"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            driver_type?: string;
            ct_props?: ReturnType<typeof DaliColorTunableDriverProperties.prototype.toObject>;
            dd_props?: ReturnType<typeof dependency_1.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
            ops_message?: string;
        }): UpdateDaliDriverTypeResponse {
            const message = new UpdateDaliDriverTypeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.driver_type != null) {
                message.driver_type = data.driver_type;
            }
            if (data.ct_props != null) {
                message.ct_props = DaliColorTunableDriverProperties.fromObject(data.ct_props);
            }
            if (data.dd_props != null) {
                message.dd_props = dependency_1.com.keus.hub.DaliDimmableDriverProperties.fromObject(data.dd_props);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                driver_type?: string;
                ct_props?: ReturnType<typeof DaliColorTunableDriverProperties.prototype.toObject>;
                dd_props?: ReturnType<typeof dependency_1.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.driver_type != null) {
                data.driver_type = this.driver_type;
            }
            if (this.ct_props != null) {
                data.ct_props = this.ct_props.toObject();
            }
            if (this.dd_props != null) {
                data.dd_props = this.dd_props.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.driver_type.length)
                writer.writeString(4, this.driver_type);
            if (this.has_ct_props)
                writer.writeMessage(5, this.ct_props, () => this.ct_props.serialize(writer));
            if (this.has_dd_props)
                writer.writeMessage(6, this.dd_props, () => this.dd_props.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(7, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDaliDriverTypeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDaliDriverTypeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.driver_type = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.ct_props, () => message.ct_props = DaliColorTunableDriverProperties.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.dd_props, () => message.dd_props = dependency_1.com.keus.hub.DaliDimmableDriverProperties.deserialize(reader));
                        break;
                    case 7:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDaliDriverTypeResponse {
            return UpdateDaliDriverTypeResponse.deserialize(bytes);
        }
    }
    export class ConfigureDaliColorTunableProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fade_time?: number;
            instant_off?: boolean;
            min_value?: number;
            max_value?: number;
            device_id?: string;
            min_temperature?: number;
            max_temperature?: number;
            driver_state?: number;
            color_temperature?: number;
            is_hidden?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fade_time" in data && data.fade_time != undefined) {
                    this.fade_time = data.fade_time;
                }
                if ("instant_off" in data && data.instant_off != undefined) {
                    this.instant_off = data.instant_off;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("min_temperature" in data && data.min_temperature != undefined) {
                    this.min_temperature = data.min_temperature;
                }
                if ("max_temperature" in data && data.max_temperature != undefined) {
                    this.max_temperature = data.max_temperature;
                }
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
                if ("color_temperature" in data && data.color_temperature != undefined) {
                    this.color_temperature = data.color_temperature;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
            }
        }
        get fade_time() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fade_time(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get instant_off() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set instant_off(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get min_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set min_value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get min_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set min_temperature(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get max_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set max_temperature(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get driver_state() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set driver_state(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get color_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set color_temperature(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            fade_time?: number;
            instant_off?: boolean;
            min_value?: number;
            max_value?: number;
            device_id?: string;
            min_temperature?: number;
            max_temperature?: number;
            driver_state?: number;
            color_temperature?: number;
            is_hidden?: boolean;
        }): ConfigureDaliColorTunableProperties {
            const message = new ConfigureDaliColorTunableProperties({});
            if (data.fade_time != null) {
                message.fade_time = data.fade_time;
            }
            if (data.instant_off != null) {
                message.instant_off = data.instant_off;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.min_temperature != null) {
                message.min_temperature = data.min_temperature;
            }
            if (data.max_temperature != null) {
                message.max_temperature = data.max_temperature;
            }
            if (data.driver_state != null) {
                message.driver_state = data.driver_state;
            }
            if (data.color_temperature != null) {
                message.color_temperature = data.color_temperature;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            return message;
        }
        toObject() {
            const data: {
                fade_time?: number;
                instant_off?: boolean;
                min_value?: number;
                max_value?: number;
                device_id?: string;
                min_temperature?: number;
                max_temperature?: number;
                driver_state?: number;
                color_temperature?: number;
                is_hidden?: boolean;
            } = {};
            if (this.fade_time != null) {
                data.fade_time = this.fade_time;
            }
            if (this.instant_off != null) {
                data.instant_off = this.instant_off;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.min_temperature != null) {
                data.min_temperature = this.min_temperature;
            }
            if (this.max_temperature != null) {
                data.max_temperature = this.max_temperature;
            }
            if (this.driver_state != null) {
                data.driver_state = this.driver_state;
            }
            if (this.color_temperature != null) {
                data.color_temperature = this.color_temperature;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fade_time != 0)
                writer.writeInt32(1, this.fade_time);
            if (this.instant_off != false)
                writer.writeBool(10, this.instant_off);
            if (this.min_value != 0)
                writer.writeInt32(2, this.min_value);
            if (this.max_value != 0)
                writer.writeInt32(3, this.max_value);
            if (this.device_id.length)
                writer.writeString(4, this.device_id);
            if (this.min_temperature != 0)
                writer.writeInt32(5, this.min_temperature);
            if (this.max_temperature != 0)
                writer.writeInt32(6, this.max_temperature);
            if (this.driver_state != 0)
                writer.writeInt32(7, this.driver_state);
            if (this.color_temperature != 0)
                writer.writeInt32(8, this.color_temperature);
            if (this.is_hidden != false)
                writer.writeBool(9, this.is_hidden);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureDaliColorTunableProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureDaliColorTunableProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fade_time = reader.readInt32();
                        break;
                    case 10:
                        message.instant_off = reader.readBool();
                        break;
                    case 2:
                        message.min_value = reader.readInt32();
                        break;
                    case 3:
                        message.max_value = reader.readInt32();
                        break;
                    case 4:
                        message.device_id = reader.readString();
                        break;
                    case 5:
                        message.min_temperature = reader.readInt32();
                        break;
                    case 6:
                        message.max_temperature = reader.readInt32();
                        break;
                    case 7:
                        message.driver_state = reader.readInt32();
                        break;
                    case 8:
                        message.color_temperature = reader.readInt32();
                        break;
                    case 9:
                        message.is_hidden = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureDaliColorTunableProperties {
            return ConfigureDaliColorTunableProperties.deserialize(bytes);
        }
    }
    export class ConfigureDaliColorTunablePropertiesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureDaliColorTunablePropertiesResponse {
            const message = new ConfigureDaliColorTunablePropertiesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureDaliColorTunablePropertiesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureDaliColorTunablePropertiesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureDaliColorTunablePropertiesResponse {
            return ConfigureDaliColorTunablePropertiesResponse.deserialize(bytes);
        }
    }
    export class UpdateDaliColorTunableDriverState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            driver_state?: DaliColorTunableDriverState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("driver_state" in data && data.driver_state != undefined) {
                    this.driver_state = data.driver_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get driver_state() {
            return pb_1.Message.getWrapperField(this, DaliColorTunableDriverState, 2) as DaliColorTunableDriverState;
        }
        set driver_state(value: DaliColorTunableDriverState) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_driver_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_id?: string;
            driver_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
        }): UpdateDaliColorTunableDriverState {
            const message = new UpdateDaliColorTunableDriverState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.driver_state != null) {
                message.driver_state = DaliColorTunableDriverState.fromObject(data.driver_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                driver_state?: ReturnType<typeof DaliColorTunableDriverState.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.driver_state != null) {
                data.driver_state = this.driver_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.has_driver_state)
                writer.writeMessage(2, this.driver_state, () => this.driver_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDaliColorTunableDriverState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDaliColorTunableDriverState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.driver_state, () => message.driver_state = DaliColorTunableDriverState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDaliColorTunableDriverState {
            return UpdateDaliColorTunableDriverState.deserialize(bytes);
        }
    }
    export class UpdateDaliColorTunableDriverStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateDaliColorTunableDriverStateResponse {
            const message = new UpdateDaliColorTunableDriverStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDaliColorTunableDriverStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDaliColorTunableDriverStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDaliColorTunableDriverStateResponse {
            return UpdateDaliColorTunableDriverStateResponse.deserialize(bytes);
        }
    }
    export class ResetDaliColorTunableDriver extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            force_reset?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("force_reset" in data && data.force_reset != undefined) {
                    this.force_reset = data.force_reset;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get force_reset() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set force_reset(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            force_reset?: boolean;
        }): ResetDaliColorTunableDriver {
            const message = new ResetDaliColorTunableDriver({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.force_reset != null) {
                message.force_reset = data.force_reset;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                force_reset?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.force_reset != null) {
                data.force_reset = this.force_reset;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.force_reset != false)
                writer.writeBool(2, this.force_reset);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetDaliColorTunableDriver {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetDaliColorTunableDriver();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.force_reset = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetDaliColorTunableDriver {
            return ResetDaliColorTunableDriver.deserialize(bytes);
        }
    }
    export class ResetDaliColorTunableDriverResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetDaliColorTunableDriverResponse {
            const message = new ResetDaliColorTunableDriverResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetDaliColorTunableDriverResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetDaliColorTunableDriverResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetDaliColorTunableDriverResponse {
            return ResetDaliColorTunableDriverResponse.deserialize(bytes);
        }
    }
    export class ReplaceDaliColorTunableDriver extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceDaliColorTunableDriver {
            const message = new ReplaceDaliColorTunableDriver({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDaliColorTunableDriver {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDaliColorTunableDriver();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDaliColorTunableDriver {
            return ReplaceDaliColorTunableDriver.deserialize(bytes);
        }
    }
    export class ReplaceDaliColorTunableDriverResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceDaliColorTunableDriverResponse {
            const message = new ReplaceDaliColorTunableDriverResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDaliColorTunableDriverResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDaliColorTunableDriverResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDaliColorTunableDriverResponse {
            return ReplaceDaliColorTunableDriverResponse.deserialize(bytes);
        }
    }
}
