/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/device.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./zigbee_curtain_controller";
import * as dependency_2 from "./zigbee_dimmable_driver";
import * as dependency_3 from "./zigbee_nondimmable_driver";
import * as dependency_4 from "./dali_dimmable_driver";
import * as dependency_5 from "./dali_color_tunable_driver";
import * as dependency_6 from "./dali_nondimmable_driver";
import * as dependency_7 from "./smart_console";
import * as dependency_8 from "./scene_wizard";
import * as dependency_9 from "./zigbee_embedded_switch";
import * as dependency_10 from "./zigbee_ac_fan_controller";
import * as dependency_11 from "./zigbee_dc_fan_controller";
import * as dependency_12 from "./zigbee_rgbwwa_driver";
import * as dependency_13 from "./zigbee_embedded_scene_switch";
import * as dependency_14 from "./zigbee_inline_dimmer";
import * as dependency_15 from "./device_constants";
import * as dependency_16 from "./zigbee_ir_blaster";
import * as dependency_17 from "./../activity/activity_constants";
import * as dependency_18 from "./zigbee_curtain_wizard";
import * as dependency_19 from "./zigbee_range_extender";
import * as dependency_20 from "./zigbee_contact_sensor";
import * as dependency_21 from "./../gateway-models/devices/gmdevice";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class DeviceNullRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeviceNullRequest {
            const message = new DeviceNullRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceNullRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceNullRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceNullRequest {
            return DeviceNullRequest.deserialize(bytes);
        }
    }
    export class Device extends pb_1.Message {
        #one_of_decls: number[][] = [[21, 22, 23, 24, 25, 26, 33, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38], [41, 42, 43, 44, 45, 46, 53, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58]];
        constructor(data?: any[] | ({
            device_id?: string;
            master_id?: string;
            device_type?: string;
            device_category?: string;
            device_name?: string;
            device_section?: string;
            device_room?: string;
            device_location?: string;
            device_control_type?: string;
            device_parent?: string;
            firmware_version?: string;
            is_hidden?: boolean;
            is_configured?: boolean;
            manufacturer_name?: string;
            device_type_display_name?: string;
            device_type_name?: string;
            in_group?: boolean;
            device_group?: number;
            group_room?: string;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
            device_sync_info?: DeviceSyncInfo;
            marked_for_delete?: dependency_15.com.keus.hub.MARK_FOR_DELETE_STATUS;
            registered_at?: number;
        } & (({
            zdimmable_driver_properties?: dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: dependency_4.com.keus.hub.DaliDimmableDriverProperties;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: dependency_6.com.keus.hub.DaliNonDimmableDriverProperties;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: dependency_1.com.keus.hub.ZigbeeCurtainControllerProperties;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: dependency_7.com.keus.hub.SmartConsoleProperties;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: dependency_8.com.keus.hub.SceneWizardProperties;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: dependency_9.com.keus.hub.EmbeddedSwitchProperties;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: dependency_10.com.keus.hub.ZigbeeACFanControllerProperties;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: dependency_11.com.keus.hub.ZigbeeDCFanControllerProperties;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: dependency_12.com.keus.hub.ZigbeeRgbwwaProperties;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchProperties;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: dependency_14.com.keus.hub.ZigbeeInlineDimmerProperties;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: dependency_16.com.keus.hub.ZigbeeIRBlasterProperties;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: dependency_5.com.keus.hub.DaliColorTunableDriverProperties;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: dependency_20.com.keus.hub.ContactSensorProperties;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: dependency_19.com.keus.hub.ZigbeeRangeExtenderProperties;
            zcurtain_wizard_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zcurtain_controller_properties?: never;
            smart_console_properties?: never;
            scene_wizard_properties?: never;
            embedded_switch_properties?: never;
            ac_fan_controller_properties?: never;
            dc_fan_controller_properties?: never;
            rgbwwa_properties?: never;
            embedded_sceneswitch_properties?: never;
            inline_dimmer_properties?: never;
            zir_blaster_properties?: never;
            dcolortunable_driver_properties?: never;
            contact_sensor_properties?: never;
            zigbee_range_extender_properties?: never;
            zcurtain_wizard_properties?: dependency_18.com.keus.hub.ZigbeeCurtainWizardProperties;
        }) | ({
            zdimmable_driver_state?: dependency_2.com.keus.hub.ZigbeeDimmableDriverState;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: dependency_4.com.keus.hub.DaliDimmableDriverState;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: dependency_6.com.keus.hub.DaliNonDimmableDriverState;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: dependency_1.com.keus.hub.ZigbeeCurtainControllerState;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: dependency_7.com.keus.hub.SmartConsoleState;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: dependency_8.com.keus.hub.SceneWizardState;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: dependency_9.com.keus.hub.EmbeddedSwitchState;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: dependency_10.com.keus.hub.ZigbeeACFanControllerState;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: dependency_11.com.keus.hub.ZigbeeDCFanControllerState;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: dependency_12.com.keus.hub.ZigbeeRgbwwaState;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchState;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: dependency_14.com.keus.hub.ZigbeeInlineDimmerState;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: dependency_16.com.keus.hub.ZigbeeIRBlasterState;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: dependency_5.com.keus.hub.DaliColorTunableDriverState;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: dependency_20.com.keus.hub.ContactSensorState;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: dependency_19.com.keus.hub.ZigbeeRangeExtenderState;
            zcurtain_wizard_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_contoller_state?: never;
            smart_console_state?: never;
            scene_wizard_state?: never;
            embedded_switch_state?: never;
            ac_fan_controller_state?: never;
            dc_fan_controller_state?: never;
            rgbwwa_state?: never;
            embedded_sceneswitch_state?: never;
            inline_dimmer_state?: never;
            zir_blaster_state?: never;
            dcolortunable_driver_state?: never;
            contact_sensor_state?: never;
            zigbee_range_extender_state?: never;
            zcurtain_wizard_state?: dependency_18.com.keus.hub.ZigbeeCurtainWizardState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("master_id" in data && data.master_id != undefined) {
                    this.master_id = data.master_id;
                }
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("device_category" in data && data.device_category != undefined) {
                    this.device_category = data.device_category;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("device_control_type" in data && data.device_control_type != undefined) {
                    this.device_control_type = data.device_control_type;
                }
                if ("device_parent" in data && data.device_parent != undefined) {
                    this.device_parent = data.device_parent;
                }
                if ("firmware_version" in data && data.firmware_version != undefined) {
                    this.firmware_version = data.firmware_version;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
                if ("is_configured" in data && data.is_configured != undefined) {
                    this.is_configured = data.is_configured;
                }
                if ("manufacturer_name" in data && data.manufacturer_name != undefined) {
                    this.manufacturer_name = data.manufacturer_name;
                }
                if ("device_type_display_name" in data && data.device_type_display_name != undefined) {
                    this.device_type_display_name = data.device_type_display_name;
                }
                if ("device_type_name" in data && data.device_type_name != undefined) {
                    this.device_type_name = data.device_type_name;
                }
                if ("in_group" in data && data.in_group != undefined) {
                    this.in_group = data.in_group;
                }
                if ("device_group" in data && data.device_group != undefined) {
                    this.device_group = data.device_group;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("zdimmable_driver_properties" in data && data.zdimmable_driver_properties != undefined) {
                    this.zdimmable_driver_properties = data.zdimmable_driver_properties;
                }
                if ("znondimmable_driver_properties" in data && data.znondimmable_driver_properties != undefined) {
                    this.znondimmable_driver_properties = data.znondimmable_driver_properties;
                }
                if ("ddimmable_driver_properties" in data && data.ddimmable_driver_properties != undefined) {
                    this.ddimmable_driver_properties = data.ddimmable_driver_properties;
                }
                if ("dnondimmable_driver_properties" in data && data.dnondimmable_driver_properties != undefined) {
                    this.dnondimmable_driver_properties = data.dnondimmable_driver_properties;
                }
                if ("zcurtain_controller_properties" in data && data.zcurtain_controller_properties != undefined) {
                    this.zcurtain_controller_properties = data.zcurtain_controller_properties;
                }
                if ("smart_console_properties" in data && data.smart_console_properties != undefined) {
                    this.smart_console_properties = data.smart_console_properties;
                }
                if ("scene_wizard_properties" in data && data.scene_wizard_properties != undefined) {
                    this.scene_wizard_properties = data.scene_wizard_properties;
                }
                if ("embedded_switch_properties" in data && data.embedded_switch_properties != undefined) {
                    this.embedded_switch_properties = data.embedded_switch_properties;
                }
                if ("ac_fan_controller_properties" in data && data.ac_fan_controller_properties != undefined) {
                    this.ac_fan_controller_properties = data.ac_fan_controller_properties;
                }
                if ("dc_fan_controller_properties" in data && data.dc_fan_controller_properties != undefined) {
                    this.dc_fan_controller_properties = data.dc_fan_controller_properties;
                }
                if ("rgbwwa_properties" in data && data.rgbwwa_properties != undefined) {
                    this.rgbwwa_properties = data.rgbwwa_properties;
                }
                if ("embedded_sceneswitch_properties" in data && data.embedded_sceneswitch_properties != undefined) {
                    this.embedded_sceneswitch_properties = data.embedded_sceneswitch_properties;
                }
                if ("inline_dimmer_properties" in data && data.inline_dimmer_properties != undefined) {
                    this.inline_dimmer_properties = data.inline_dimmer_properties;
                }
                if ("zir_blaster_properties" in data && data.zir_blaster_properties != undefined) {
                    this.zir_blaster_properties = data.zir_blaster_properties;
                }
                if ("dcolortunable_driver_properties" in data && data.dcolortunable_driver_properties != undefined) {
                    this.dcolortunable_driver_properties = data.dcolortunable_driver_properties;
                }
                if ("contact_sensor_properties" in data && data.contact_sensor_properties != undefined) {
                    this.contact_sensor_properties = data.contact_sensor_properties;
                }
                if ("zigbee_range_extender_properties" in data && data.zigbee_range_extender_properties != undefined) {
                    this.zigbee_range_extender_properties = data.zigbee_range_extender_properties;
                }
                if ("zcurtain_wizard_properties" in data && data.zcurtain_wizard_properties != undefined) {
                    this.zcurtain_wizard_properties = data.zcurtain_wizard_properties;
                }
                if ("zdimmable_driver_state" in data && data.zdimmable_driver_state != undefined) {
                    this.zdimmable_driver_state = data.zdimmable_driver_state;
                }
                if ("znondimmable_driver_state" in data && data.znondimmable_driver_state != undefined) {
                    this.znondimmable_driver_state = data.znondimmable_driver_state;
                }
                if ("ddimmable_driver_state" in data && data.ddimmable_driver_state != undefined) {
                    this.ddimmable_driver_state = data.ddimmable_driver_state;
                }
                if ("dnondimmable_driver_state" in data && data.dnondimmable_driver_state != undefined) {
                    this.dnondimmable_driver_state = data.dnondimmable_driver_state;
                }
                if ("zcurtain_contoller_state" in data && data.zcurtain_contoller_state != undefined) {
                    this.zcurtain_contoller_state = data.zcurtain_contoller_state;
                }
                if ("smart_console_state" in data && data.smart_console_state != undefined) {
                    this.smart_console_state = data.smart_console_state;
                }
                if ("scene_wizard_state" in data && data.scene_wizard_state != undefined) {
                    this.scene_wizard_state = data.scene_wizard_state;
                }
                if ("embedded_switch_state" in data && data.embedded_switch_state != undefined) {
                    this.embedded_switch_state = data.embedded_switch_state;
                }
                if ("ac_fan_controller_state" in data && data.ac_fan_controller_state != undefined) {
                    this.ac_fan_controller_state = data.ac_fan_controller_state;
                }
                if ("dc_fan_controller_state" in data && data.dc_fan_controller_state != undefined) {
                    this.dc_fan_controller_state = data.dc_fan_controller_state;
                }
                if ("rgbwwa_state" in data && data.rgbwwa_state != undefined) {
                    this.rgbwwa_state = data.rgbwwa_state;
                }
                if ("embedded_sceneswitch_state" in data && data.embedded_sceneswitch_state != undefined) {
                    this.embedded_sceneswitch_state = data.embedded_sceneswitch_state;
                }
                if ("inline_dimmer_state" in data && data.inline_dimmer_state != undefined) {
                    this.inline_dimmer_state = data.inline_dimmer_state;
                }
                if ("zir_blaster_state" in data && data.zir_blaster_state != undefined) {
                    this.zir_blaster_state = data.zir_blaster_state;
                }
                if ("dcolortunable_driver_state" in data && data.dcolortunable_driver_state != undefined) {
                    this.dcolortunable_driver_state = data.dcolortunable_driver_state;
                }
                if ("contact_sensor_state" in data && data.contact_sensor_state != undefined) {
                    this.contact_sensor_state = data.contact_sensor_state;
                }
                if ("zigbee_range_extender_state" in data && data.zigbee_range_extender_state != undefined) {
                    this.zigbee_range_extender_state = data.zigbee_range_extender_state;
                }
                if ("zcurtain_wizard_state" in data && data.zcurtain_wizard_state != undefined) {
                    this.zcurtain_wizard_state = data.zcurtain_wizard_state;
                }
                if ("last_update_time" in data && data.last_update_time != undefined) {
                    this.last_update_time = data.last_update_time;
                }
                if ("last_update_by" in data && data.last_update_by != undefined) {
                    this.last_update_by = data.last_update_by;
                }
                if ("last_update_user" in data && data.last_update_user != undefined) {
                    this.last_update_user = data.last_update_user;
                }
                if ("last_update_source" in data && data.last_update_source != undefined) {
                    this.last_update_source = data.last_update_source;
                }
                if ("device_sync_info" in data && data.device_sync_info != undefined) {
                    this.device_sync_info = data.device_sync_info;
                }
                if ("marked_for_delete" in data && data.marked_for_delete != undefined) {
                    this.marked_for_delete = data.marked_for_delete;
                }
                if ("registered_at" in data && data.registered_at != undefined) {
                    this.registered_at = data.registered_at;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get master_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set master_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_category() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_category(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get device_control_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set device_control_type(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get device_parent() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set device_parent(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get firmware_version() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set firmware_version(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get is_configured() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set is_configured(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get manufacturer_name() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set manufacturer_name(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get device_type_display_name() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set device_type_display_name(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get device_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set device_type_name(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get in_group() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set in_group(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get device_group() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set device_group(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get zdimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties, 21) as dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties;
        }
        set zdimmable_driver_properties(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_properties() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get znondimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties, 22) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties;
        }
        set znondimmable_driver_properties(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_properties() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get ddimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverProperties, 23) as dependency_4.com.keus.hub.DaliDimmableDriverProperties;
        }
        set ddimmable_driver_properties(value: dependency_4.com.keus.hub.DaliDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_properties() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get dnondimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverProperties, 24) as dependency_6.com.keus.hub.DaliNonDimmableDriverProperties;
        }
        set dnondimmable_driver_properties(value: dependency_6.com.keus.hub.DaliNonDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_properties() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get zcurtain_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerProperties, 25) as dependency_1.com.keus.hub.ZigbeeCurtainControllerProperties;
        }
        set zcurtain_controller_properties(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_zcurtain_controller_properties() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get smart_console_properties() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.hub.SmartConsoleProperties, 26) as dependency_7.com.keus.hub.SmartConsoleProperties;
        }
        set smart_console_properties(value: dependency_7.com.keus.hub.SmartConsoleProperties) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_smart_console_properties() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get scene_wizard_properties() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.SceneWizardProperties, 33) as dependency_8.com.keus.hub.SceneWizardProperties;
        }
        set scene_wizard_properties(value: dependency_8.com.keus.hub.SceneWizardProperties) {
            pb_1.Message.setOneofWrapperField(this, 33, this.#one_of_decls[0], value);
        }
        get has_scene_wizard_properties() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get embedded_switch_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.EmbeddedSwitchProperties, 27) as dependency_9.com.keus.hub.EmbeddedSwitchProperties;
        }
        set embedded_switch_properties(value: dependency_9.com.keus.hub.EmbeddedSwitchProperties) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_embedded_switch_properties() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get ac_fan_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ZigbeeACFanControllerProperties, 28) as dependency_10.com.keus.hub.ZigbeeACFanControllerProperties;
        }
        set ac_fan_controller_properties(value: dependency_10.com.keus.hub.ZigbeeACFanControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_ac_fan_controller_properties() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get dc_fan_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.hub.ZigbeeDCFanControllerProperties, 29) as dependency_11.com.keus.hub.ZigbeeDCFanControllerProperties;
        }
        set dc_fan_controller_properties(value: dependency_11.com.keus.hub.ZigbeeDCFanControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
        }
        get has_dc_fan_controller_properties() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get rgbwwa_properties() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.hub.ZigbeeRgbwwaProperties, 30) as dependency_12.com.keus.hub.ZigbeeRgbwwaProperties;
        }
        set rgbwwa_properties(value: dependency_12.com.keus.hub.ZigbeeRgbwwaProperties) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
        }
        get has_rgbwwa_properties() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get embedded_sceneswitch_properties() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchProperties, 31) as dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchProperties;
        }
        set embedded_sceneswitch_properties(value: dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchProperties) {
            pb_1.Message.setOneofWrapperField(this, 31, this.#one_of_decls[0], value);
        }
        get has_embedded_sceneswitch_properties() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get inline_dimmer_properties() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.hub.ZigbeeInlineDimmerProperties, 32) as dependency_14.com.keus.hub.ZigbeeInlineDimmerProperties;
        }
        set inline_dimmer_properties(value: dependency_14.com.keus.hub.ZigbeeInlineDimmerProperties) {
            pb_1.Message.setOneofWrapperField(this, 32, this.#one_of_decls[0], value);
        }
        get has_inline_dimmer_properties() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get zir_blaster_properties() {
            return pb_1.Message.getWrapperField(this, dependency_16.com.keus.hub.ZigbeeIRBlasterProperties, 34) as dependency_16.com.keus.hub.ZigbeeIRBlasterProperties;
        }
        set zir_blaster_properties(value: dependency_16.com.keus.hub.ZigbeeIRBlasterProperties) {
            pb_1.Message.setOneofWrapperField(this, 34, this.#one_of_decls[0], value);
        }
        get has_zir_blaster_properties() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get dcolortunable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverProperties, 35) as dependency_5.com.keus.hub.DaliColorTunableDriverProperties;
        }
        set dcolortunable_driver_properties(value: dependency_5.com.keus.hub.DaliColorTunableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 35, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_properties() {
            return pb_1.Message.getField(this, 35) != null;
        }
        get contact_sensor_properties() {
            return pb_1.Message.getWrapperField(this, dependency_20.com.keus.hub.ContactSensorProperties, 36) as dependency_20.com.keus.hub.ContactSensorProperties;
        }
        set contact_sensor_properties(value: dependency_20.com.keus.hub.ContactSensorProperties) {
            pb_1.Message.setOneofWrapperField(this, 36, this.#one_of_decls[0], value);
        }
        get has_contact_sensor_properties() {
            return pb_1.Message.getField(this, 36) != null;
        }
        get zigbee_range_extender_properties() {
            return pb_1.Message.getWrapperField(this, dependency_19.com.keus.hub.ZigbeeRangeExtenderProperties, 37) as dependency_19.com.keus.hub.ZigbeeRangeExtenderProperties;
        }
        set zigbee_range_extender_properties(value: dependency_19.com.keus.hub.ZigbeeRangeExtenderProperties) {
            pb_1.Message.setOneofWrapperField(this, 37, this.#one_of_decls[0], value);
        }
        get has_zigbee_range_extender_properties() {
            return pb_1.Message.getField(this, 37) != null;
        }
        get zcurtain_wizard_properties() {
            return pb_1.Message.getWrapperField(this, dependency_18.com.keus.hub.ZigbeeCurtainWizardProperties, 38) as dependency_18.com.keus.hub.ZigbeeCurtainWizardProperties;
        }
        set zcurtain_wizard_properties(value: dependency_18.com.keus.hub.ZigbeeCurtainWizardProperties) {
            pb_1.Message.setOneofWrapperField(this, 38, this.#one_of_decls[0], value);
        }
        get has_zcurtain_wizard_properties() {
            return pb_1.Message.getField(this, 38) != null;
        }
        get zdimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverState, 41) as dependency_2.com.keus.hub.ZigbeeDimmableDriverState;
        }
        set zdimmable_driver_state(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 41, this.#one_of_decls[1], value);
        }
        get has_zdimmable_driver_state() {
            return pb_1.Message.getField(this, 41) != null;
        }
        get znondimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState, 42) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState;
        }
        set znondimmable_driver_state(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 42, this.#one_of_decls[1], value);
        }
        get has_znondimmable_driver_state() {
            return pb_1.Message.getField(this, 42) != null;
        }
        get ddimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverState, 43) as dependency_4.com.keus.hub.DaliDimmableDriverState;
        }
        set ddimmable_driver_state(value: dependency_4.com.keus.hub.DaliDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 43, this.#one_of_decls[1], value);
        }
        get has_ddimmable_driver_state() {
            return pb_1.Message.getField(this, 43) != null;
        }
        get dnondimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverState, 44) as dependency_6.com.keus.hub.DaliNonDimmableDriverState;
        }
        set dnondimmable_driver_state(value: dependency_6.com.keus.hub.DaliNonDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 44, this.#one_of_decls[1], value);
        }
        get has_dnondimmable_driver_state() {
            return pb_1.Message.getField(this, 44) != null;
        }
        get zcurtain_contoller_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerState, 45) as dependency_1.com.keus.hub.ZigbeeCurtainControllerState;
        }
        set zcurtain_contoller_state(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerState) {
            pb_1.Message.setOneofWrapperField(this, 45, this.#one_of_decls[1], value);
        }
        get has_zcurtain_contoller_state() {
            return pb_1.Message.getField(this, 45) != null;
        }
        get smart_console_state() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.hub.SmartConsoleState, 46) as dependency_7.com.keus.hub.SmartConsoleState;
        }
        set smart_console_state(value: dependency_7.com.keus.hub.SmartConsoleState) {
            pb_1.Message.setOneofWrapperField(this, 46, this.#one_of_decls[1], value);
        }
        get has_smart_console_state() {
            return pb_1.Message.getField(this, 46) != null;
        }
        get scene_wizard_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.SceneWizardState, 53) as dependency_8.com.keus.hub.SceneWizardState;
        }
        set scene_wizard_state(value: dependency_8.com.keus.hub.SceneWizardState) {
            pb_1.Message.setOneofWrapperField(this, 53, this.#one_of_decls[1], value);
        }
        get has_scene_wizard_state() {
            return pb_1.Message.getField(this, 53) != null;
        }
        get embedded_switch_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.EmbeddedSwitchState, 47) as dependency_9.com.keus.hub.EmbeddedSwitchState;
        }
        set embedded_switch_state(value: dependency_9.com.keus.hub.EmbeddedSwitchState) {
            pb_1.Message.setOneofWrapperField(this, 47, this.#one_of_decls[1], value);
        }
        get has_embedded_switch_state() {
            return pb_1.Message.getField(this, 47) != null;
        }
        get ac_fan_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.hub.ZigbeeACFanControllerState, 48) as dependency_10.com.keus.hub.ZigbeeACFanControllerState;
        }
        set ac_fan_controller_state(value: dependency_10.com.keus.hub.ZigbeeACFanControllerState) {
            pb_1.Message.setOneofWrapperField(this, 48, this.#one_of_decls[1], value);
        }
        get has_ac_fan_controller_state() {
            return pb_1.Message.getField(this, 48) != null;
        }
        get dc_fan_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.hub.ZigbeeDCFanControllerState, 49) as dependency_11.com.keus.hub.ZigbeeDCFanControllerState;
        }
        set dc_fan_controller_state(value: dependency_11.com.keus.hub.ZigbeeDCFanControllerState) {
            pb_1.Message.setOneofWrapperField(this, 49, this.#one_of_decls[1], value);
        }
        get has_dc_fan_controller_state() {
            return pb_1.Message.getField(this, 49) != null;
        }
        get rgbwwa_state() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.hub.ZigbeeRgbwwaState, 50) as dependency_12.com.keus.hub.ZigbeeRgbwwaState;
        }
        set rgbwwa_state(value: dependency_12.com.keus.hub.ZigbeeRgbwwaState) {
            pb_1.Message.setOneofWrapperField(this, 50, this.#one_of_decls[1], value);
        }
        get has_rgbwwa_state() {
            return pb_1.Message.getField(this, 50) != null;
        }
        get embedded_sceneswitch_state() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchState, 51) as dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchState;
        }
        set embedded_sceneswitch_state(value: dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchState) {
            pb_1.Message.setOneofWrapperField(this, 51, this.#one_of_decls[1], value);
        }
        get has_embedded_sceneswitch_state() {
            return pb_1.Message.getField(this, 51) != null;
        }
        get inline_dimmer_state() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.hub.ZigbeeInlineDimmerState, 52) as dependency_14.com.keus.hub.ZigbeeInlineDimmerState;
        }
        set inline_dimmer_state(value: dependency_14.com.keus.hub.ZigbeeInlineDimmerState) {
            pb_1.Message.setOneofWrapperField(this, 52, this.#one_of_decls[1], value);
        }
        get has_inline_dimmer_state() {
            return pb_1.Message.getField(this, 52) != null;
        }
        get zir_blaster_state() {
            return pb_1.Message.getWrapperField(this, dependency_16.com.keus.hub.ZigbeeIRBlasterState, 54) as dependency_16.com.keus.hub.ZigbeeIRBlasterState;
        }
        set zir_blaster_state(value: dependency_16.com.keus.hub.ZigbeeIRBlasterState) {
            pb_1.Message.setOneofWrapperField(this, 54, this.#one_of_decls[1], value);
        }
        get has_zir_blaster_state() {
            return pb_1.Message.getField(this, 54) != null;
        }
        get dcolortunable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverState, 55) as dependency_5.com.keus.hub.DaliColorTunableDriverState;
        }
        set dcolortunable_driver_state(value: dependency_5.com.keus.hub.DaliColorTunableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 55, this.#one_of_decls[1], value);
        }
        get has_dcolortunable_driver_state() {
            return pb_1.Message.getField(this, 55) != null;
        }
        get contact_sensor_state() {
            return pb_1.Message.getWrapperField(this, dependency_20.com.keus.hub.ContactSensorState, 56) as dependency_20.com.keus.hub.ContactSensorState;
        }
        set contact_sensor_state(value: dependency_20.com.keus.hub.ContactSensorState) {
            pb_1.Message.setOneofWrapperField(this, 56, this.#one_of_decls[1], value);
        }
        get has_contact_sensor_state() {
            return pb_1.Message.getField(this, 56) != null;
        }
        get zigbee_range_extender_state() {
            return pb_1.Message.getWrapperField(this, dependency_19.com.keus.hub.ZigbeeRangeExtenderState, 57) as dependency_19.com.keus.hub.ZigbeeRangeExtenderState;
        }
        set zigbee_range_extender_state(value: dependency_19.com.keus.hub.ZigbeeRangeExtenderState) {
            pb_1.Message.setOneofWrapperField(this, 57, this.#one_of_decls[1], value);
        }
        get has_zigbee_range_extender_state() {
            return pb_1.Message.getField(this, 57) != null;
        }
        get zcurtain_wizard_state() {
            return pb_1.Message.getWrapperField(this, dependency_18.com.keus.hub.ZigbeeCurtainWizardState, 58) as dependency_18.com.keus.hub.ZigbeeCurtainWizardState;
        }
        set zcurtain_wizard_state(value: dependency_18.com.keus.hub.ZigbeeCurtainWizardState) {
            pb_1.Message.setOneofWrapperField(this, 58, this.#one_of_decls[1], value);
        }
        get has_zcurtain_wizard_state() {
            return pb_1.Message.getField(this, 58) != null;
        }
        get last_update_time() {
            return pb_1.Message.getFieldWithDefault(this, 60, 0) as number;
        }
        set last_update_time(value: number) {
            pb_1.Message.setField(this, 60, value);
        }
        get last_update_by() {
            return pb_1.Message.getFieldWithDefault(this, 61, "") as string;
        }
        set last_update_by(value: string) {
            pb_1.Message.setField(this, 61, value);
        }
        get last_update_user() {
            return pb_1.Message.getFieldWithDefault(this, 62, "") as string;
        }
        set last_update_user(value: string) {
            pb_1.Message.setField(this, 62, value);
        }
        get last_update_source() {
            return pb_1.Message.getFieldWithDefault(this, 63, "") as string;
        }
        set last_update_source(value: string) {
            pb_1.Message.setField(this, 63, value);
        }
        get device_sync_info() {
            return pb_1.Message.getWrapperField(this, DeviceSyncInfo, 64) as DeviceSyncInfo;
        }
        set device_sync_info(value: DeviceSyncInfo) {
            pb_1.Message.setWrapperField(this, 64, value);
        }
        get has_device_sync_info() {
            return pb_1.Message.getField(this, 64) != null;
        }
        get marked_for_delete() {
            return pb_1.Message.getFieldWithDefault(this, 65, dependency_15.com.keus.hub.MARK_FOR_DELETE_STATUS.NO_FALG) as dependency_15.com.keus.hub.MARK_FOR_DELETE_STATUS;
        }
        set marked_for_delete(value: dependency_15.com.keus.hub.MARK_FOR_DELETE_STATUS) {
            pb_1.Message.setField(this, 65, value);
        }
        get registered_at() {
            return pb_1.Message.getFieldWithDefault(this, 66, 0) as number;
        }
        set registered_at(value: number) {
            pb_1.Message.setField(this, 66, value);
        }
        get device_properties() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_properties" | "znondimmable_driver_properties" | "ddimmable_driver_properties" | "dnondimmable_driver_properties" | "zcurtain_controller_properties" | "smart_console_properties" | "scene_wizard_properties" | "embedded_switch_properties" | "ac_fan_controller_properties" | "dc_fan_controller_properties" | "rgbwwa_properties" | "embedded_sceneswitch_properties" | "inline_dimmer_properties" | "zir_blaster_properties" | "dcolortunable_driver_properties" | "contact_sensor_properties" | "zigbee_range_extender_properties" | "zcurtain_wizard_properties";
            } = {
                0: "none",
                21: "zdimmable_driver_properties",
                22: "znondimmable_driver_properties",
                23: "ddimmable_driver_properties",
                24: "dnondimmable_driver_properties",
                25: "zcurtain_controller_properties",
                26: "smart_console_properties",
                33: "scene_wizard_properties",
                27: "embedded_switch_properties",
                28: "ac_fan_controller_properties",
                29: "dc_fan_controller_properties",
                30: "rgbwwa_properties",
                31: "embedded_sceneswitch_properties",
                32: "inline_dimmer_properties",
                34: "zir_blaster_properties",
                35: "dcolortunable_driver_properties",
                36: "contact_sensor_properties",
                37: "zigbee_range_extender_properties",
                38: "zcurtain_wizard_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [21, 22, 23, 24, 25, 26, 33, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38])];
        }
        get device_state() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_state" | "znondimmable_driver_state" | "ddimmable_driver_state" | "dnondimmable_driver_state" | "zcurtain_contoller_state" | "smart_console_state" | "scene_wizard_state" | "embedded_switch_state" | "ac_fan_controller_state" | "dc_fan_controller_state" | "rgbwwa_state" | "embedded_sceneswitch_state" | "inline_dimmer_state" | "zir_blaster_state" | "dcolortunable_driver_state" | "contact_sensor_state" | "zigbee_range_extender_state" | "zcurtain_wizard_state";
            } = {
                0: "none",
                41: "zdimmable_driver_state",
                42: "znondimmable_driver_state",
                43: "ddimmable_driver_state",
                44: "dnondimmable_driver_state",
                45: "zcurtain_contoller_state",
                46: "smart_console_state",
                53: "scene_wizard_state",
                47: "embedded_switch_state",
                48: "ac_fan_controller_state",
                49: "dc_fan_controller_state",
                50: "rgbwwa_state",
                51: "embedded_sceneswitch_state",
                52: "inline_dimmer_state",
                54: "zir_blaster_state",
                55: "dcolortunable_driver_state",
                56: "contact_sensor_state",
                57: "zigbee_range_extender_state",
                58: "zcurtain_wizard_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [41, 42, 43, 44, 45, 46, 53, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58])];
        }
        static fromObject(data: {
            device_id?: string;
            master_id?: string;
            device_type?: string;
            device_category?: string;
            device_name?: string;
            device_section?: string;
            device_room?: string;
            device_location?: string;
            device_control_type?: string;
            device_parent?: string;
            firmware_version?: string;
            is_hidden?: boolean;
            is_configured?: boolean;
            manufacturer_name?: string;
            device_type_display_name?: string;
            device_type_name?: string;
            in_group?: boolean;
            device_group?: number;
            group_room?: string;
            zdimmable_driver_properties?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.prototype.toObject>;
            znondimmable_driver_properties?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.prototype.toObject>;
            ddimmable_driver_properties?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
            dnondimmable_driver_properties?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.prototype.toObject>;
            zcurtain_controller_properties?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerProperties.prototype.toObject>;
            smart_console_properties?: ReturnType<typeof dependency_7.com.keus.hub.SmartConsoleProperties.prototype.toObject>;
            scene_wizard_properties?: ReturnType<typeof dependency_8.com.keus.hub.SceneWizardProperties.prototype.toObject>;
            embedded_switch_properties?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedSwitchProperties.prototype.toObject>;
            ac_fan_controller_properties?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerProperties.prototype.toObject>;
            dc_fan_controller_properties?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerProperties.prototype.toObject>;
            rgbwwa_properties?: ReturnType<typeof dependency_12.com.keus.hub.ZigbeeRgbwwaProperties.prototype.toObject>;
            embedded_sceneswitch_properties?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchProperties.prototype.toObject>;
            inline_dimmer_properties?: ReturnType<typeof dependency_14.com.keus.hub.ZigbeeInlineDimmerProperties.prototype.toObject>;
            zir_blaster_properties?: ReturnType<typeof dependency_16.com.keus.hub.ZigbeeIRBlasterProperties.prototype.toObject>;
            dcolortunable_driver_properties?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverProperties.prototype.toObject>;
            contact_sensor_properties?: ReturnType<typeof dependency_20.com.keus.hub.ContactSensorProperties.prototype.toObject>;
            zigbee_range_extender_properties?: ReturnType<typeof dependency_19.com.keus.hub.ZigbeeRangeExtenderProperties.prototype.toObject>;
            zcurtain_wizard_properties?: ReturnType<typeof dependency_18.com.keus.hub.ZigbeeCurtainWizardProperties.prototype.toObject>;
            zdimmable_driver_state?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverState.prototype.toObject>;
            znondimmable_driver_state?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.prototype.toObject>;
            ddimmable_driver_state?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverState.prototype.toObject>;
            dnondimmable_driver_state?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverState.prototype.toObject>;
            zcurtain_contoller_state?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerState.prototype.toObject>;
            smart_console_state?: ReturnType<typeof dependency_7.com.keus.hub.SmartConsoleState.prototype.toObject>;
            scene_wizard_state?: ReturnType<typeof dependency_8.com.keus.hub.SceneWizardState.prototype.toObject>;
            embedded_switch_state?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedSwitchState.prototype.toObject>;
            ac_fan_controller_state?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerState.prototype.toObject>;
            dc_fan_controller_state?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerState.prototype.toObject>;
            rgbwwa_state?: ReturnType<typeof dependency_12.com.keus.hub.ZigbeeRgbwwaState.prototype.toObject>;
            embedded_sceneswitch_state?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchState.prototype.toObject>;
            inline_dimmer_state?: ReturnType<typeof dependency_14.com.keus.hub.ZigbeeInlineDimmerState.prototype.toObject>;
            zir_blaster_state?: ReturnType<typeof dependency_16.com.keus.hub.ZigbeeIRBlasterState.prototype.toObject>;
            dcolortunable_driver_state?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverState.prototype.toObject>;
            contact_sensor_state?: ReturnType<typeof dependency_20.com.keus.hub.ContactSensorState.prototype.toObject>;
            zigbee_range_extender_state?: ReturnType<typeof dependency_19.com.keus.hub.ZigbeeRangeExtenderState.prototype.toObject>;
            zcurtain_wizard_state?: ReturnType<typeof dependency_18.com.keus.hub.ZigbeeCurtainWizardState.prototype.toObject>;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
            device_sync_info?: ReturnType<typeof DeviceSyncInfo.prototype.toObject>;
            marked_for_delete?: dependency_15.com.keus.hub.MARK_FOR_DELETE_STATUS;
            registered_at?: number;
        }): Device {
            const message = new Device({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.master_id != null) {
                message.master_id = data.master_id;
            }
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.device_category != null) {
                message.device_category = data.device_category;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.device_control_type != null) {
                message.device_control_type = data.device_control_type;
            }
            if (data.device_parent != null) {
                message.device_parent = data.device_parent;
            }
            if (data.firmware_version != null) {
                message.firmware_version = data.firmware_version;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            if (data.is_configured != null) {
                message.is_configured = data.is_configured;
            }
            if (data.manufacturer_name != null) {
                message.manufacturer_name = data.manufacturer_name;
            }
            if (data.device_type_display_name != null) {
                message.device_type_display_name = data.device_type_display_name;
            }
            if (data.device_type_name != null) {
                message.device_type_name = data.device_type_name;
            }
            if (data.in_group != null) {
                message.in_group = data.in_group;
            }
            if (data.device_group != null) {
                message.device_group = data.device_group;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.zdimmable_driver_properties != null) {
                message.zdimmable_driver_properties = dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.fromObject(data.zdimmable_driver_properties);
            }
            if (data.znondimmable_driver_properties != null) {
                message.znondimmable_driver_properties = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.fromObject(data.znondimmable_driver_properties);
            }
            if (data.ddimmable_driver_properties != null) {
                message.ddimmable_driver_properties = dependency_4.com.keus.hub.DaliDimmableDriverProperties.fromObject(data.ddimmable_driver_properties);
            }
            if (data.dnondimmable_driver_properties != null) {
                message.dnondimmable_driver_properties = dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.fromObject(data.dnondimmable_driver_properties);
            }
            if (data.zcurtain_controller_properties != null) {
                message.zcurtain_controller_properties = dependency_1.com.keus.hub.ZigbeeCurtainControllerProperties.fromObject(data.zcurtain_controller_properties);
            }
            if (data.smart_console_properties != null) {
                message.smart_console_properties = dependency_7.com.keus.hub.SmartConsoleProperties.fromObject(data.smart_console_properties);
            }
            if (data.scene_wizard_properties != null) {
                message.scene_wizard_properties = dependency_8.com.keus.hub.SceneWizardProperties.fromObject(data.scene_wizard_properties);
            }
            if (data.embedded_switch_properties != null) {
                message.embedded_switch_properties = dependency_9.com.keus.hub.EmbeddedSwitchProperties.fromObject(data.embedded_switch_properties);
            }
            if (data.ac_fan_controller_properties != null) {
                message.ac_fan_controller_properties = dependency_10.com.keus.hub.ZigbeeACFanControllerProperties.fromObject(data.ac_fan_controller_properties);
            }
            if (data.dc_fan_controller_properties != null) {
                message.dc_fan_controller_properties = dependency_11.com.keus.hub.ZigbeeDCFanControllerProperties.fromObject(data.dc_fan_controller_properties);
            }
            if (data.rgbwwa_properties != null) {
                message.rgbwwa_properties = dependency_12.com.keus.hub.ZigbeeRgbwwaProperties.fromObject(data.rgbwwa_properties);
            }
            if (data.embedded_sceneswitch_properties != null) {
                message.embedded_sceneswitch_properties = dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchProperties.fromObject(data.embedded_sceneswitch_properties);
            }
            if (data.inline_dimmer_properties != null) {
                message.inline_dimmer_properties = dependency_14.com.keus.hub.ZigbeeInlineDimmerProperties.fromObject(data.inline_dimmer_properties);
            }
            if (data.zir_blaster_properties != null) {
                message.zir_blaster_properties = dependency_16.com.keus.hub.ZigbeeIRBlasterProperties.fromObject(data.zir_blaster_properties);
            }
            if (data.dcolortunable_driver_properties != null) {
                message.dcolortunable_driver_properties = dependency_5.com.keus.hub.DaliColorTunableDriverProperties.fromObject(data.dcolortunable_driver_properties);
            }
            if (data.contact_sensor_properties != null) {
                message.contact_sensor_properties = dependency_20.com.keus.hub.ContactSensorProperties.fromObject(data.contact_sensor_properties);
            }
            if (data.zigbee_range_extender_properties != null) {
                message.zigbee_range_extender_properties = dependency_19.com.keus.hub.ZigbeeRangeExtenderProperties.fromObject(data.zigbee_range_extender_properties);
            }
            if (data.zcurtain_wizard_properties != null) {
                message.zcurtain_wizard_properties = dependency_18.com.keus.hub.ZigbeeCurtainWizardProperties.fromObject(data.zcurtain_wizard_properties);
            }
            if (data.zdimmable_driver_state != null) {
                message.zdimmable_driver_state = dependency_2.com.keus.hub.ZigbeeDimmableDriverState.fromObject(data.zdimmable_driver_state);
            }
            if (data.znondimmable_driver_state != null) {
                message.znondimmable_driver_state = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.fromObject(data.znondimmable_driver_state);
            }
            if (data.ddimmable_driver_state != null) {
                message.ddimmable_driver_state = dependency_4.com.keus.hub.DaliDimmableDriverState.fromObject(data.ddimmable_driver_state);
            }
            if (data.dnondimmable_driver_state != null) {
                message.dnondimmable_driver_state = dependency_6.com.keus.hub.DaliNonDimmableDriverState.fromObject(data.dnondimmable_driver_state);
            }
            if (data.zcurtain_contoller_state != null) {
                message.zcurtain_contoller_state = dependency_1.com.keus.hub.ZigbeeCurtainControllerState.fromObject(data.zcurtain_contoller_state);
            }
            if (data.smart_console_state != null) {
                message.smart_console_state = dependency_7.com.keus.hub.SmartConsoleState.fromObject(data.smart_console_state);
            }
            if (data.scene_wizard_state != null) {
                message.scene_wizard_state = dependency_8.com.keus.hub.SceneWizardState.fromObject(data.scene_wizard_state);
            }
            if (data.embedded_switch_state != null) {
                message.embedded_switch_state = dependency_9.com.keus.hub.EmbeddedSwitchState.fromObject(data.embedded_switch_state);
            }
            if (data.ac_fan_controller_state != null) {
                message.ac_fan_controller_state = dependency_10.com.keus.hub.ZigbeeACFanControllerState.fromObject(data.ac_fan_controller_state);
            }
            if (data.dc_fan_controller_state != null) {
                message.dc_fan_controller_state = dependency_11.com.keus.hub.ZigbeeDCFanControllerState.fromObject(data.dc_fan_controller_state);
            }
            if (data.rgbwwa_state != null) {
                message.rgbwwa_state = dependency_12.com.keus.hub.ZigbeeRgbwwaState.fromObject(data.rgbwwa_state);
            }
            if (data.embedded_sceneswitch_state != null) {
                message.embedded_sceneswitch_state = dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchState.fromObject(data.embedded_sceneswitch_state);
            }
            if (data.inline_dimmer_state != null) {
                message.inline_dimmer_state = dependency_14.com.keus.hub.ZigbeeInlineDimmerState.fromObject(data.inline_dimmer_state);
            }
            if (data.zir_blaster_state != null) {
                message.zir_blaster_state = dependency_16.com.keus.hub.ZigbeeIRBlasterState.fromObject(data.zir_blaster_state);
            }
            if (data.dcolortunable_driver_state != null) {
                message.dcolortunable_driver_state = dependency_5.com.keus.hub.DaliColorTunableDriverState.fromObject(data.dcolortunable_driver_state);
            }
            if (data.contact_sensor_state != null) {
                message.contact_sensor_state = dependency_20.com.keus.hub.ContactSensorState.fromObject(data.contact_sensor_state);
            }
            if (data.zigbee_range_extender_state != null) {
                message.zigbee_range_extender_state = dependency_19.com.keus.hub.ZigbeeRangeExtenderState.fromObject(data.zigbee_range_extender_state);
            }
            if (data.zcurtain_wizard_state != null) {
                message.zcurtain_wizard_state = dependency_18.com.keus.hub.ZigbeeCurtainWizardState.fromObject(data.zcurtain_wizard_state);
            }
            if (data.last_update_time != null) {
                message.last_update_time = data.last_update_time;
            }
            if (data.last_update_by != null) {
                message.last_update_by = data.last_update_by;
            }
            if (data.last_update_user != null) {
                message.last_update_user = data.last_update_user;
            }
            if (data.last_update_source != null) {
                message.last_update_source = data.last_update_source;
            }
            if (data.device_sync_info != null) {
                message.device_sync_info = DeviceSyncInfo.fromObject(data.device_sync_info);
            }
            if (data.marked_for_delete != null) {
                message.marked_for_delete = data.marked_for_delete;
            }
            if (data.registered_at != null) {
                message.registered_at = data.registered_at;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                master_id?: string;
                device_type?: string;
                device_category?: string;
                device_name?: string;
                device_section?: string;
                device_room?: string;
                device_location?: string;
                device_control_type?: string;
                device_parent?: string;
                firmware_version?: string;
                is_hidden?: boolean;
                is_configured?: boolean;
                manufacturer_name?: string;
                device_type_display_name?: string;
                device_type_name?: string;
                in_group?: boolean;
                device_group?: number;
                group_room?: string;
                zdimmable_driver_properties?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.prototype.toObject>;
                znondimmable_driver_properties?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.prototype.toObject>;
                ddimmable_driver_properties?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
                dnondimmable_driver_properties?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.prototype.toObject>;
                zcurtain_controller_properties?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerProperties.prototype.toObject>;
                smart_console_properties?: ReturnType<typeof dependency_7.com.keus.hub.SmartConsoleProperties.prototype.toObject>;
                scene_wizard_properties?: ReturnType<typeof dependency_8.com.keus.hub.SceneWizardProperties.prototype.toObject>;
                embedded_switch_properties?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedSwitchProperties.prototype.toObject>;
                ac_fan_controller_properties?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerProperties.prototype.toObject>;
                dc_fan_controller_properties?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerProperties.prototype.toObject>;
                rgbwwa_properties?: ReturnType<typeof dependency_12.com.keus.hub.ZigbeeRgbwwaProperties.prototype.toObject>;
                embedded_sceneswitch_properties?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchProperties.prototype.toObject>;
                inline_dimmer_properties?: ReturnType<typeof dependency_14.com.keus.hub.ZigbeeInlineDimmerProperties.prototype.toObject>;
                zir_blaster_properties?: ReturnType<typeof dependency_16.com.keus.hub.ZigbeeIRBlasterProperties.prototype.toObject>;
                dcolortunable_driver_properties?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverProperties.prototype.toObject>;
                contact_sensor_properties?: ReturnType<typeof dependency_20.com.keus.hub.ContactSensorProperties.prototype.toObject>;
                zigbee_range_extender_properties?: ReturnType<typeof dependency_19.com.keus.hub.ZigbeeRangeExtenderProperties.prototype.toObject>;
                zcurtain_wizard_properties?: ReturnType<typeof dependency_18.com.keus.hub.ZigbeeCurtainWizardProperties.prototype.toObject>;
                zdimmable_driver_state?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverState.prototype.toObject>;
                znondimmable_driver_state?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.prototype.toObject>;
                ddimmable_driver_state?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverState.prototype.toObject>;
                dnondimmable_driver_state?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverState.prototype.toObject>;
                zcurtain_contoller_state?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerState.prototype.toObject>;
                smart_console_state?: ReturnType<typeof dependency_7.com.keus.hub.SmartConsoleState.prototype.toObject>;
                scene_wizard_state?: ReturnType<typeof dependency_8.com.keus.hub.SceneWizardState.prototype.toObject>;
                embedded_switch_state?: ReturnType<typeof dependency_9.com.keus.hub.EmbeddedSwitchState.prototype.toObject>;
                ac_fan_controller_state?: ReturnType<typeof dependency_10.com.keus.hub.ZigbeeACFanControllerState.prototype.toObject>;
                dc_fan_controller_state?: ReturnType<typeof dependency_11.com.keus.hub.ZigbeeDCFanControllerState.prototype.toObject>;
                rgbwwa_state?: ReturnType<typeof dependency_12.com.keus.hub.ZigbeeRgbwwaState.prototype.toObject>;
                embedded_sceneswitch_state?: ReturnType<typeof dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchState.prototype.toObject>;
                inline_dimmer_state?: ReturnType<typeof dependency_14.com.keus.hub.ZigbeeInlineDimmerState.prototype.toObject>;
                zir_blaster_state?: ReturnType<typeof dependency_16.com.keus.hub.ZigbeeIRBlasterState.prototype.toObject>;
                dcolortunable_driver_state?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverState.prototype.toObject>;
                contact_sensor_state?: ReturnType<typeof dependency_20.com.keus.hub.ContactSensorState.prototype.toObject>;
                zigbee_range_extender_state?: ReturnType<typeof dependency_19.com.keus.hub.ZigbeeRangeExtenderState.prototype.toObject>;
                zcurtain_wizard_state?: ReturnType<typeof dependency_18.com.keus.hub.ZigbeeCurtainWizardState.prototype.toObject>;
                last_update_time?: number;
                last_update_by?: string;
                last_update_user?: string;
                last_update_source?: string;
                device_sync_info?: ReturnType<typeof DeviceSyncInfo.prototype.toObject>;
                marked_for_delete?: dependency_15.com.keus.hub.MARK_FOR_DELETE_STATUS;
                registered_at?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.master_id != null) {
                data.master_id = this.master_id;
            }
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.device_category != null) {
                data.device_category = this.device_category;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.device_control_type != null) {
                data.device_control_type = this.device_control_type;
            }
            if (this.device_parent != null) {
                data.device_parent = this.device_parent;
            }
            if (this.firmware_version != null) {
                data.firmware_version = this.firmware_version;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            if (this.is_configured != null) {
                data.is_configured = this.is_configured;
            }
            if (this.manufacturer_name != null) {
                data.manufacturer_name = this.manufacturer_name;
            }
            if (this.device_type_display_name != null) {
                data.device_type_display_name = this.device_type_display_name;
            }
            if (this.device_type_name != null) {
                data.device_type_name = this.device_type_name;
            }
            if (this.in_group != null) {
                data.in_group = this.in_group;
            }
            if (this.device_group != null) {
                data.device_group = this.device_group;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.zdimmable_driver_properties != null) {
                data.zdimmable_driver_properties = this.zdimmable_driver_properties.toObject();
            }
            if (this.znondimmable_driver_properties != null) {
                data.znondimmable_driver_properties = this.znondimmable_driver_properties.toObject();
            }
            if (this.ddimmable_driver_properties != null) {
                data.ddimmable_driver_properties = this.ddimmable_driver_properties.toObject();
            }
            if (this.dnondimmable_driver_properties != null) {
                data.dnondimmable_driver_properties = this.dnondimmable_driver_properties.toObject();
            }
            if (this.zcurtain_controller_properties != null) {
                data.zcurtain_controller_properties = this.zcurtain_controller_properties.toObject();
            }
            if (this.smart_console_properties != null) {
                data.smart_console_properties = this.smart_console_properties.toObject();
            }
            if (this.scene_wizard_properties != null) {
                data.scene_wizard_properties = this.scene_wizard_properties.toObject();
            }
            if (this.embedded_switch_properties != null) {
                data.embedded_switch_properties = this.embedded_switch_properties.toObject();
            }
            if (this.ac_fan_controller_properties != null) {
                data.ac_fan_controller_properties = this.ac_fan_controller_properties.toObject();
            }
            if (this.dc_fan_controller_properties != null) {
                data.dc_fan_controller_properties = this.dc_fan_controller_properties.toObject();
            }
            if (this.rgbwwa_properties != null) {
                data.rgbwwa_properties = this.rgbwwa_properties.toObject();
            }
            if (this.embedded_sceneswitch_properties != null) {
                data.embedded_sceneswitch_properties = this.embedded_sceneswitch_properties.toObject();
            }
            if (this.inline_dimmer_properties != null) {
                data.inline_dimmer_properties = this.inline_dimmer_properties.toObject();
            }
            if (this.zir_blaster_properties != null) {
                data.zir_blaster_properties = this.zir_blaster_properties.toObject();
            }
            if (this.dcolortunable_driver_properties != null) {
                data.dcolortunable_driver_properties = this.dcolortunable_driver_properties.toObject();
            }
            if (this.contact_sensor_properties != null) {
                data.contact_sensor_properties = this.contact_sensor_properties.toObject();
            }
            if (this.zigbee_range_extender_properties != null) {
                data.zigbee_range_extender_properties = this.zigbee_range_extender_properties.toObject();
            }
            if (this.zcurtain_wizard_properties != null) {
                data.zcurtain_wizard_properties = this.zcurtain_wizard_properties.toObject();
            }
            if (this.zdimmable_driver_state != null) {
                data.zdimmable_driver_state = this.zdimmable_driver_state.toObject();
            }
            if (this.znondimmable_driver_state != null) {
                data.znondimmable_driver_state = this.znondimmable_driver_state.toObject();
            }
            if (this.ddimmable_driver_state != null) {
                data.ddimmable_driver_state = this.ddimmable_driver_state.toObject();
            }
            if (this.dnondimmable_driver_state != null) {
                data.dnondimmable_driver_state = this.dnondimmable_driver_state.toObject();
            }
            if (this.zcurtain_contoller_state != null) {
                data.zcurtain_contoller_state = this.zcurtain_contoller_state.toObject();
            }
            if (this.smart_console_state != null) {
                data.smart_console_state = this.smart_console_state.toObject();
            }
            if (this.scene_wizard_state != null) {
                data.scene_wizard_state = this.scene_wizard_state.toObject();
            }
            if (this.embedded_switch_state != null) {
                data.embedded_switch_state = this.embedded_switch_state.toObject();
            }
            if (this.ac_fan_controller_state != null) {
                data.ac_fan_controller_state = this.ac_fan_controller_state.toObject();
            }
            if (this.dc_fan_controller_state != null) {
                data.dc_fan_controller_state = this.dc_fan_controller_state.toObject();
            }
            if (this.rgbwwa_state != null) {
                data.rgbwwa_state = this.rgbwwa_state.toObject();
            }
            if (this.embedded_sceneswitch_state != null) {
                data.embedded_sceneswitch_state = this.embedded_sceneswitch_state.toObject();
            }
            if (this.inline_dimmer_state != null) {
                data.inline_dimmer_state = this.inline_dimmer_state.toObject();
            }
            if (this.zir_blaster_state != null) {
                data.zir_blaster_state = this.zir_blaster_state.toObject();
            }
            if (this.dcolortunable_driver_state != null) {
                data.dcolortunable_driver_state = this.dcolortunable_driver_state.toObject();
            }
            if (this.contact_sensor_state != null) {
                data.contact_sensor_state = this.contact_sensor_state.toObject();
            }
            if (this.zigbee_range_extender_state != null) {
                data.zigbee_range_extender_state = this.zigbee_range_extender_state.toObject();
            }
            if (this.zcurtain_wizard_state != null) {
                data.zcurtain_wizard_state = this.zcurtain_wizard_state.toObject();
            }
            if (this.last_update_time != null) {
                data.last_update_time = this.last_update_time;
            }
            if (this.last_update_by != null) {
                data.last_update_by = this.last_update_by;
            }
            if (this.last_update_user != null) {
                data.last_update_user = this.last_update_user;
            }
            if (this.last_update_source != null) {
                data.last_update_source = this.last_update_source;
            }
            if (this.device_sync_info != null) {
                data.device_sync_info = this.device_sync_info.toObject();
            }
            if (this.marked_for_delete != null) {
                data.marked_for_delete = this.marked_for_delete;
            }
            if (this.registered_at != null) {
                data.registered_at = this.registered_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.master_id.length)
                writer.writeString(2, this.master_id);
            if (this.device_type.length)
                writer.writeString(3, this.device_type);
            if (this.device_category.length)
                writer.writeString(4, this.device_category);
            if (this.device_name.length)
                writer.writeString(5, this.device_name);
            if (this.device_section.length)
                writer.writeString(6, this.device_section);
            if (this.device_room.length)
                writer.writeString(7, this.device_room);
            if (this.device_location.length)
                writer.writeString(18, this.device_location);
            if (this.device_control_type.length)
                writer.writeString(9, this.device_control_type);
            if (this.device_parent.length)
                writer.writeString(17, this.device_parent);
            if (this.firmware_version.length)
                writer.writeString(8, this.firmware_version);
            if (this.is_hidden != false)
                writer.writeBool(10, this.is_hidden);
            if (this.is_configured != false)
                writer.writeBool(11, this.is_configured);
            if (this.manufacturer_name.length)
                writer.writeString(12, this.manufacturer_name);
            if (this.device_type_display_name.length)
                writer.writeString(13, this.device_type_display_name);
            if (this.device_type_name.length)
                writer.writeString(14, this.device_type_name);
            if (this.in_group != false)
                writer.writeBool(15, this.in_group);
            if (this.device_group != 0)
                writer.writeInt32(16, this.device_group);
            if (this.group_room.length)
                writer.writeString(19, this.group_room);
            if (this.has_zdimmable_driver_properties)
                writer.writeMessage(21, this.zdimmable_driver_properties, () => this.zdimmable_driver_properties.serialize(writer));
            if (this.has_znondimmable_driver_properties)
                writer.writeMessage(22, this.znondimmable_driver_properties, () => this.znondimmable_driver_properties.serialize(writer));
            if (this.has_ddimmable_driver_properties)
                writer.writeMessage(23, this.ddimmable_driver_properties, () => this.ddimmable_driver_properties.serialize(writer));
            if (this.has_dnondimmable_driver_properties)
                writer.writeMessage(24, this.dnondimmable_driver_properties, () => this.dnondimmable_driver_properties.serialize(writer));
            if (this.has_zcurtain_controller_properties)
                writer.writeMessage(25, this.zcurtain_controller_properties, () => this.zcurtain_controller_properties.serialize(writer));
            if (this.has_smart_console_properties)
                writer.writeMessage(26, this.smart_console_properties, () => this.smart_console_properties.serialize(writer));
            if (this.has_scene_wizard_properties)
                writer.writeMessage(33, this.scene_wizard_properties, () => this.scene_wizard_properties.serialize(writer));
            if (this.has_embedded_switch_properties)
                writer.writeMessage(27, this.embedded_switch_properties, () => this.embedded_switch_properties.serialize(writer));
            if (this.has_ac_fan_controller_properties)
                writer.writeMessage(28, this.ac_fan_controller_properties, () => this.ac_fan_controller_properties.serialize(writer));
            if (this.has_dc_fan_controller_properties)
                writer.writeMessage(29, this.dc_fan_controller_properties, () => this.dc_fan_controller_properties.serialize(writer));
            if (this.has_rgbwwa_properties)
                writer.writeMessage(30, this.rgbwwa_properties, () => this.rgbwwa_properties.serialize(writer));
            if (this.has_embedded_sceneswitch_properties)
                writer.writeMessage(31, this.embedded_sceneswitch_properties, () => this.embedded_sceneswitch_properties.serialize(writer));
            if (this.has_inline_dimmer_properties)
                writer.writeMessage(32, this.inline_dimmer_properties, () => this.inline_dimmer_properties.serialize(writer));
            if (this.has_zir_blaster_properties)
                writer.writeMessage(34, this.zir_blaster_properties, () => this.zir_blaster_properties.serialize(writer));
            if (this.has_dcolortunable_driver_properties)
                writer.writeMessage(35, this.dcolortunable_driver_properties, () => this.dcolortunable_driver_properties.serialize(writer));
            if (this.has_contact_sensor_properties)
                writer.writeMessage(36, this.contact_sensor_properties, () => this.contact_sensor_properties.serialize(writer));
            if (this.has_zigbee_range_extender_properties)
                writer.writeMessage(37, this.zigbee_range_extender_properties, () => this.zigbee_range_extender_properties.serialize(writer));
            if (this.has_zcurtain_wizard_properties)
                writer.writeMessage(38, this.zcurtain_wizard_properties, () => this.zcurtain_wizard_properties.serialize(writer));
            if (this.has_zdimmable_driver_state)
                writer.writeMessage(41, this.zdimmable_driver_state, () => this.zdimmable_driver_state.serialize(writer));
            if (this.has_znondimmable_driver_state)
                writer.writeMessage(42, this.znondimmable_driver_state, () => this.znondimmable_driver_state.serialize(writer));
            if (this.has_ddimmable_driver_state)
                writer.writeMessage(43, this.ddimmable_driver_state, () => this.ddimmable_driver_state.serialize(writer));
            if (this.has_dnondimmable_driver_state)
                writer.writeMessage(44, this.dnondimmable_driver_state, () => this.dnondimmable_driver_state.serialize(writer));
            if (this.has_zcurtain_contoller_state)
                writer.writeMessage(45, this.zcurtain_contoller_state, () => this.zcurtain_contoller_state.serialize(writer));
            if (this.has_smart_console_state)
                writer.writeMessage(46, this.smart_console_state, () => this.smart_console_state.serialize(writer));
            if (this.has_scene_wizard_state)
                writer.writeMessage(53, this.scene_wizard_state, () => this.scene_wizard_state.serialize(writer));
            if (this.has_embedded_switch_state)
                writer.writeMessage(47, this.embedded_switch_state, () => this.embedded_switch_state.serialize(writer));
            if (this.has_ac_fan_controller_state)
                writer.writeMessage(48, this.ac_fan_controller_state, () => this.ac_fan_controller_state.serialize(writer));
            if (this.has_dc_fan_controller_state)
                writer.writeMessage(49, this.dc_fan_controller_state, () => this.dc_fan_controller_state.serialize(writer));
            if (this.has_rgbwwa_state)
                writer.writeMessage(50, this.rgbwwa_state, () => this.rgbwwa_state.serialize(writer));
            if (this.has_embedded_sceneswitch_state)
                writer.writeMessage(51, this.embedded_sceneswitch_state, () => this.embedded_sceneswitch_state.serialize(writer));
            if (this.has_inline_dimmer_state)
                writer.writeMessage(52, this.inline_dimmer_state, () => this.inline_dimmer_state.serialize(writer));
            if (this.has_zir_blaster_state)
                writer.writeMessage(54, this.zir_blaster_state, () => this.zir_blaster_state.serialize(writer));
            if (this.has_dcolortunable_driver_state)
                writer.writeMessage(55, this.dcolortunable_driver_state, () => this.dcolortunable_driver_state.serialize(writer));
            if (this.has_contact_sensor_state)
                writer.writeMessage(56, this.contact_sensor_state, () => this.contact_sensor_state.serialize(writer));
            if (this.has_zigbee_range_extender_state)
                writer.writeMessage(57, this.zigbee_range_extender_state, () => this.zigbee_range_extender_state.serialize(writer));
            if (this.has_zcurtain_wizard_state)
                writer.writeMessage(58, this.zcurtain_wizard_state, () => this.zcurtain_wizard_state.serialize(writer));
            if (this.last_update_time != 0)
                writer.writeInt64(60, this.last_update_time);
            if (this.last_update_by.length)
                writer.writeString(61, this.last_update_by);
            if (this.last_update_user.length)
                writer.writeString(62, this.last_update_user);
            if (this.last_update_source.length)
                writer.writeString(63, this.last_update_source);
            if (this.has_device_sync_info)
                writer.writeMessage(64, this.device_sync_info, () => this.device_sync_info.serialize(writer));
            if (this.marked_for_delete != dependency_15.com.keus.hub.MARK_FOR_DELETE_STATUS.NO_FALG)
                writer.writeEnum(65, this.marked_for_delete);
            if (this.registered_at != 0)
                writer.writeUint64(66, this.registered_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Device {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Device();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.master_id = reader.readString();
                        break;
                    case 3:
                        message.device_type = reader.readString();
                        break;
                    case 4:
                        message.device_category = reader.readString();
                        break;
                    case 5:
                        message.device_name = reader.readString();
                        break;
                    case 6:
                        message.device_section = reader.readString();
                        break;
                    case 7:
                        message.device_room = reader.readString();
                        break;
                    case 18:
                        message.device_location = reader.readString();
                        break;
                    case 9:
                        message.device_control_type = reader.readString();
                        break;
                    case 17:
                        message.device_parent = reader.readString();
                        break;
                    case 8:
                        message.firmware_version = reader.readString();
                        break;
                    case 10:
                        message.is_hidden = reader.readBool();
                        break;
                    case 11:
                        message.is_configured = reader.readBool();
                        break;
                    case 12:
                        message.manufacturer_name = reader.readString();
                        break;
                    case 13:
                        message.device_type_display_name = reader.readString();
                        break;
                    case 14:
                        message.device_type_name = reader.readString();
                        break;
                    case 15:
                        message.in_group = reader.readBool();
                        break;
                    case 16:
                        message.device_group = reader.readInt32();
                        break;
                    case 19:
                        message.group_room = reader.readString();
                        break;
                    case 21:
                        reader.readMessage(message.zdimmable_driver_properties, () => message.zdimmable_driver_properties = dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.znondimmable_driver_properties, () => message.znondimmable_driver_properties = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.ddimmable_driver_properties, () => message.ddimmable_driver_properties = dependency_4.com.keus.hub.DaliDimmableDriverProperties.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.dnondimmable_driver_properties, () => message.dnondimmable_driver_properties = dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.zcurtain_controller_properties, () => message.zcurtain_controller_properties = dependency_1.com.keus.hub.ZigbeeCurtainControllerProperties.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.smart_console_properties, () => message.smart_console_properties = dependency_7.com.keus.hub.SmartConsoleProperties.deserialize(reader));
                        break;
                    case 33:
                        reader.readMessage(message.scene_wizard_properties, () => message.scene_wizard_properties = dependency_8.com.keus.hub.SceneWizardProperties.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.embedded_switch_properties, () => message.embedded_switch_properties = dependency_9.com.keus.hub.EmbeddedSwitchProperties.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.ac_fan_controller_properties, () => message.ac_fan_controller_properties = dependency_10.com.keus.hub.ZigbeeACFanControllerProperties.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.dc_fan_controller_properties, () => message.dc_fan_controller_properties = dependency_11.com.keus.hub.ZigbeeDCFanControllerProperties.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.rgbwwa_properties, () => message.rgbwwa_properties = dependency_12.com.keus.hub.ZigbeeRgbwwaProperties.deserialize(reader));
                        break;
                    case 31:
                        reader.readMessage(message.embedded_sceneswitch_properties, () => message.embedded_sceneswitch_properties = dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchProperties.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.inline_dimmer_properties, () => message.inline_dimmer_properties = dependency_14.com.keus.hub.ZigbeeInlineDimmerProperties.deserialize(reader));
                        break;
                    case 34:
                        reader.readMessage(message.zir_blaster_properties, () => message.zir_blaster_properties = dependency_16.com.keus.hub.ZigbeeIRBlasterProperties.deserialize(reader));
                        break;
                    case 35:
                        reader.readMessage(message.dcolortunable_driver_properties, () => message.dcolortunable_driver_properties = dependency_5.com.keus.hub.DaliColorTunableDriverProperties.deserialize(reader));
                        break;
                    case 36:
                        reader.readMessage(message.contact_sensor_properties, () => message.contact_sensor_properties = dependency_20.com.keus.hub.ContactSensorProperties.deserialize(reader));
                        break;
                    case 37:
                        reader.readMessage(message.zigbee_range_extender_properties, () => message.zigbee_range_extender_properties = dependency_19.com.keus.hub.ZigbeeRangeExtenderProperties.deserialize(reader));
                        break;
                    case 38:
                        reader.readMessage(message.zcurtain_wizard_properties, () => message.zcurtain_wizard_properties = dependency_18.com.keus.hub.ZigbeeCurtainWizardProperties.deserialize(reader));
                        break;
                    case 41:
                        reader.readMessage(message.zdimmable_driver_state, () => message.zdimmable_driver_state = dependency_2.com.keus.hub.ZigbeeDimmableDriverState.deserialize(reader));
                        break;
                    case 42:
                        reader.readMessage(message.znondimmable_driver_state, () => message.znondimmable_driver_state = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.deserialize(reader));
                        break;
                    case 43:
                        reader.readMessage(message.ddimmable_driver_state, () => message.ddimmable_driver_state = dependency_4.com.keus.hub.DaliDimmableDriverState.deserialize(reader));
                        break;
                    case 44:
                        reader.readMessage(message.dnondimmable_driver_state, () => message.dnondimmable_driver_state = dependency_6.com.keus.hub.DaliNonDimmableDriverState.deserialize(reader));
                        break;
                    case 45:
                        reader.readMessage(message.zcurtain_contoller_state, () => message.zcurtain_contoller_state = dependency_1.com.keus.hub.ZigbeeCurtainControllerState.deserialize(reader));
                        break;
                    case 46:
                        reader.readMessage(message.smart_console_state, () => message.smart_console_state = dependency_7.com.keus.hub.SmartConsoleState.deserialize(reader));
                        break;
                    case 53:
                        reader.readMessage(message.scene_wizard_state, () => message.scene_wizard_state = dependency_8.com.keus.hub.SceneWizardState.deserialize(reader));
                        break;
                    case 47:
                        reader.readMessage(message.embedded_switch_state, () => message.embedded_switch_state = dependency_9.com.keus.hub.EmbeddedSwitchState.deserialize(reader));
                        break;
                    case 48:
                        reader.readMessage(message.ac_fan_controller_state, () => message.ac_fan_controller_state = dependency_10.com.keus.hub.ZigbeeACFanControllerState.deserialize(reader));
                        break;
                    case 49:
                        reader.readMessage(message.dc_fan_controller_state, () => message.dc_fan_controller_state = dependency_11.com.keus.hub.ZigbeeDCFanControllerState.deserialize(reader));
                        break;
                    case 50:
                        reader.readMessage(message.rgbwwa_state, () => message.rgbwwa_state = dependency_12.com.keus.hub.ZigbeeRgbwwaState.deserialize(reader));
                        break;
                    case 51:
                        reader.readMessage(message.embedded_sceneswitch_state, () => message.embedded_sceneswitch_state = dependency_13.com.keus.hub.ZigbeeEmbeddedSceneSwitchState.deserialize(reader));
                        break;
                    case 52:
                        reader.readMessage(message.inline_dimmer_state, () => message.inline_dimmer_state = dependency_14.com.keus.hub.ZigbeeInlineDimmerState.deserialize(reader));
                        break;
                    case 54:
                        reader.readMessage(message.zir_blaster_state, () => message.zir_blaster_state = dependency_16.com.keus.hub.ZigbeeIRBlasterState.deserialize(reader));
                        break;
                    case 55:
                        reader.readMessage(message.dcolortunable_driver_state, () => message.dcolortunable_driver_state = dependency_5.com.keus.hub.DaliColorTunableDriverState.deserialize(reader));
                        break;
                    case 56:
                        reader.readMessage(message.contact_sensor_state, () => message.contact_sensor_state = dependency_20.com.keus.hub.ContactSensorState.deserialize(reader));
                        break;
                    case 57:
                        reader.readMessage(message.zigbee_range_extender_state, () => message.zigbee_range_extender_state = dependency_19.com.keus.hub.ZigbeeRangeExtenderState.deserialize(reader));
                        break;
                    case 58:
                        reader.readMessage(message.zcurtain_wizard_state, () => message.zcurtain_wizard_state = dependency_18.com.keus.hub.ZigbeeCurtainWizardState.deserialize(reader));
                        break;
                    case 60:
                        message.last_update_time = reader.readInt64();
                        break;
                    case 61:
                        message.last_update_by = reader.readString();
                        break;
                    case 62:
                        message.last_update_user = reader.readString();
                        break;
                    case 63:
                        message.last_update_source = reader.readString();
                        break;
                    case 64:
                        reader.readMessage(message.device_sync_info, () => message.device_sync_info = DeviceSyncInfo.deserialize(reader));
                        break;
                    case 65:
                        message.marked_for_delete = reader.readEnum();
                        break;
                    case 66:
                        message.registered_at = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Device {
            return Device.deserialize(bytes);
        }
    }
    export class DeviceSyncInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11]];
        constructor(data?: any[] | ({
            sync_status?: dependency_15.com.keus.hub.DEVICE_SYNC_STATES;
            sync_request_type?: dependency_15.com.keus.hub.DEVICE_JOB_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            job_type_name?: dependency_17.com.keus.hub.JOB_TYPES_NAME;
            job_message?: string;
        } & (({
            dnull_request_params?: DeviceNullRequest;
            sync_scene_uidata_params?: never;
        } | {
            dnull_request_params?: never;
            sync_scene_uidata_params?: dependency_7.com.keus.hub.SyncSceneUIData;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sync_status" in data && data.sync_status != undefined) {
                    this.sync_status = data.sync_status;
                }
                if ("sync_request_type" in data && data.sync_request_type != undefined) {
                    this.sync_request_type = data.sync_request_type;
                }
                if ("sync_request_id" in data && data.sync_request_id != undefined) {
                    this.sync_request_id = data.sync_request_id;
                }
                if ("sync_request_time" in data && data.sync_request_time != undefined) {
                    this.sync_request_time = data.sync_request_time;
                }
                if ("dnull_request_params" in data && data.dnull_request_params != undefined) {
                    this.dnull_request_params = data.dnull_request_params;
                }
                if ("sync_scene_uidata_params" in data && data.sync_scene_uidata_params != undefined) {
                    this.sync_scene_uidata_params = data.sync_scene_uidata_params;
                }
                if ("job_type_name" in data && data.job_type_name != undefined) {
                    this.job_type_name = data.job_type_name;
                }
                if ("job_message" in data && data.job_message != undefined) {
                    this.job_message = data.job_message;
                }
            }
        }
        get sync_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_15.com.keus.hub.DEVICE_SYNC_STATES.DEVICEINSYNC) as dependency_15.com.keus.hub.DEVICE_SYNC_STATES;
        }
        set sync_status(value: dependency_15.com.keus.hub.DEVICE_SYNC_STATES) {
            pb_1.Message.setField(this, 1, value);
        }
        get sync_request_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_15.com.keus.hub.DEVICE_JOB_TYPES.DEVICE_NONE) as dependency_15.com.keus.hub.DEVICE_JOB_TYPES;
        }
        set sync_request_type(value: dependency_15.com.keus.hub.DEVICE_JOB_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get sync_request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sync_request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sync_request_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sync_request_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get dnull_request_params() {
            return pb_1.Message.getWrapperField(this, DeviceNullRequest, 10) as DeviceNullRequest;
        }
        set dnull_request_params(value: DeviceNullRequest) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_dnull_request_params() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get sync_scene_uidata_params() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.hub.SyncSceneUIData, 11) as dependency_7.com.keus.hub.SyncSceneUIData;
        }
        set sync_scene_uidata_params(value: dependency_7.com.keus.hub.SyncSceneUIData) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_sync_scene_uidata_params() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get job_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_17.com.keus.hub.JOB_TYPES_NAME.NO_JOB_RUNNING) as dependency_17.com.keus.hub.JOB_TYPES_NAME;
        }
        set job_type_name(value: dependency_17.com.keus.hub.JOB_TYPES_NAME) {
            pb_1.Message.setField(this, 5, value);
        }
        get job_message() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set job_message(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get sync_request_params() {
            const cases: {
                [index: number]: "none" | "dnull_request_params" | "sync_scene_uidata_params";
            } = {
                0: "none",
                10: "dnull_request_params",
                11: "sync_scene_uidata_params"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11])];
        }
        static fromObject(data: {
            sync_status?: dependency_15.com.keus.hub.DEVICE_SYNC_STATES;
            sync_request_type?: dependency_15.com.keus.hub.DEVICE_JOB_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            dnull_request_params?: ReturnType<typeof DeviceNullRequest.prototype.toObject>;
            sync_scene_uidata_params?: ReturnType<typeof dependency_7.com.keus.hub.SyncSceneUIData.prototype.toObject>;
            job_type_name?: dependency_17.com.keus.hub.JOB_TYPES_NAME;
            job_message?: string;
        }): DeviceSyncInfo {
            const message = new DeviceSyncInfo({});
            if (data.sync_status != null) {
                message.sync_status = data.sync_status;
            }
            if (data.sync_request_type != null) {
                message.sync_request_type = data.sync_request_type;
            }
            if (data.sync_request_id != null) {
                message.sync_request_id = data.sync_request_id;
            }
            if (data.sync_request_time != null) {
                message.sync_request_time = data.sync_request_time;
            }
            if (data.dnull_request_params != null) {
                message.dnull_request_params = DeviceNullRequest.fromObject(data.dnull_request_params);
            }
            if (data.sync_scene_uidata_params != null) {
                message.sync_scene_uidata_params = dependency_7.com.keus.hub.SyncSceneUIData.fromObject(data.sync_scene_uidata_params);
            }
            if (data.job_type_name != null) {
                message.job_type_name = data.job_type_name;
            }
            if (data.job_message != null) {
                message.job_message = data.job_message;
            }
            return message;
        }
        toObject() {
            const data: {
                sync_status?: dependency_15.com.keus.hub.DEVICE_SYNC_STATES;
                sync_request_type?: dependency_15.com.keus.hub.DEVICE_JOB_TYPES;
                sync_request_id?: string;
                sync_request_time?: number;
                dnull_request_params?: ReturnType<typeof DeviceNullRequest.prototype.toObject>;
                sync_scene_uidata_params?: ReturnType<typeof dependency_7.com.keus.hub.SyncSceneUIData.prototype.toObject>;
                job_type_name?: dependency_17.com.keus.hub.JOB_TYPES_NAME;
                job_message?: string;
            } = {};
            if (this.sync_status != null) {
                data.sync_status = this.sync_status;
            }
            if (this.sync_request_type != null) {
                data.sync_request_type = this.sync_request_type;
            }
            if (this.sync_request_id != null) {
                data.sync_request_id = this.sync_request_id;
            }
            if (this.sync_request_time != null) {
                data.sync_request_time = this.sync_request_time;
            }
            if (this.dnull_request_params != null) {
                data.dnull_request_params = this.dnull_request_params.toObject();
            }
            if (this.sync_scene_uidata_params != null) {
                data.sync_scene_uidata_params = this.sync_scene_uidata_params.toObject();
            }
            if (this.job_type_name != null) {
                data.job_type_name = this.job_type_name;
            }
            if (this.job_message != null) {
                data.job_message = this.job_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sync_status != dependency_15.com.keus.hub.DEVICE_SYNC_STATES.DEVICEINSYNC)
                writer.writeEnum(1, this.sync_status);
            if (this.sync_request_type != dependency_15.com.keus.hub.DEVICE_JOB_TYPES.DEVICE_NONE)
                writer.writeEnum(2, this.sync_request_type);
            if (this.sync_request_id.length)
                writer.writeString(3, this.sync_request_id);
            if (this.sync_request_time != 0)
                writer.writeInt64(4, this.sync_request_time);
            if (this.has_dnull_request_params)
                writer.writeMessage(10, this.dnull_request_params, () => this.dnull_request_params.serialize(writer));
            if (this.has_sync_scene_uidata_params)
                writer.writeMessage(11, this.sync_scene_uidata_params, () => this.sync_scene_uidata_params.serialize(writer));
            if (this.job_type_name != dependency_17.com.keus.hub.JOB_TYPES_NAME.NO_JOB_RUNNING)
                writer.writeEnum(5, this.job_type_name);
            if (this.job_message.length)
                writer.writeString(6, this.job_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceSyncInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceSyncInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sync_status = reader.readEnum();
                        break;
                    case 2:
                        message.sync_request_type = reader.readEnum();
                        break;
                    case 3:
                        message.sync_request_id = reader.readString();
                        break;
                    case 4:
                        message.sync_request_time = reader.readInt64();
                        break;
                    case 10:
                        reader.readMessage(message.dnull_request_params, () => message.dnull_request_params = DeviceNullRequest.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.sync_scene_uidata_params, () => message.sync_scene_uidata_params = dependency_7.com.keus.hub.SyncSceneUIData.deserialize(reader));
                        break;
                    case 5:
                        message.job_type_name = reader.readEnum();
                        break;
                    case 6:
                        message.job_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceSyncInfo {
            return DeviceSyncInfo.deserialize(bytes);
        }
    }
    export class RegisterDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_type?: string;
            master_id?: string;
            firmware_version?: string;
            device_parent?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("master_id" in data && data.master_id != undefined) {
                    this.master_id = data.master_id;
                }
                if ("firmware_version" in data && data.firmware_version != undefined) {
                    this.firmware_version = data.firmware_version;
                }
                if ("device_parent" in data && data.device_parent != undefined) {
                    this.device_parent = data.device_parent;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get master_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set master_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get firmware_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set firmware_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_parent() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_parent(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_type?: string;
            master_id?: string;
            firmware_version?: string;
            device_parent?: string;
        }): RegisterDevice {
            const message = new RegisterDevice({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.master_id != null) {
                message.master_id = data.master_id;
            }
            if (data.firmware_version != null) {
                message.firmware_version = data.firmware_version;
            }
            if (data.device_parent != null) {
                message.device_parent = data.device_parent;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_type?: string;
                master_id?: string;
                firmware_version?: string;
                device_parent?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.master_id != null) {
                data.master_id = this.master_id;
            }
            if (this.firmware_version != null) {
                data.firmware_version = this.firmware_version;
            }
            if (this.device_parent != null) {
                data.device_parent = this.device_parent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_type.length)
                writer.writeString(2, this.device_type);
            if (this.master_id.length)
                writer.writeString(3, this.master_id);
            if (this.firmware_version.length)
                writer.writeString(4, this.firmware_version);
            if (this.device_parent.length)
                writer.writeString(5, this.device_parent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_type = reader.readString();
                        break;
                    case 3:
                        message.master_id = reader.readString();
                        break;
                    case 4:
                        message.firmware_version = reader.readString();
                        break;
                    case 5:
                        message.device_parent = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterDevice {
            return RegisterDevice.deserialize(bytes);
        }
    }
    export class RegisterDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            registered_device?: Device;
            ops_message?: string;
            registered_gmdevice?: dependency_21.com.keus.gateway.GMDevice;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("registered_device" in data && data.registered_device != undefined) {
                    this.registered_device = data.registered_device;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("registered_gmdevice" in data && data.registered_gmdevice != undefined) {
                    this.registered_gmdevice = data.registered_gmdevice;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get registered_device() {
            return pb_1.Message.getWrapperField(this, Device, 4) as Device;
        }
        set registered_device(value: Device) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_registered_device() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get registered_gmdevice() {
            return pb_1.Message.getWrapperField(this, dependency_21.com.keus.gateway.GMDevice, 6) as dependency_21.com.keus.gateway.GMDevice;
        }
        set registered_gmdevice(value: dependency_21.com.keus.gateway.GMDevice) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_registered_gmdevice() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            registered_device?: ReturnType<typeof Device.prototype.toObject>;
            ops_message?: string;
            registered_gmdevice?: ReturnType<typeof dependency_21.com.keus.gateway.GMDevice.prototype.toObject>;
        }): RegisterDeviceResponse {
            const message = new RegisterDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.registered_device != null) {
                message.registered_device = Device.fromObject(data.registered_device);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.registered_gmdevice != null) {
                message.registered_gmdevice = dependency_21.com.keus.gateway.GMDevice.fromObject(data.registered_gmdevice);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                registered_device?: ReturnType<typeof Device.prototype.toObject>;
                ops_message?: string;
                registered_gmdevice?: ReturnType<typeof dependency_21.com.keus.gateway.GMDevice.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.registered_device != null) {
                data.registered_device = this.registered_device.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.registered_gmdevice != null) {
                data.registered_gmdevice = this.registered_gmdevice.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_registered_device)
                writer.writeMessage(4, this.registered_device, () => this.registered_device.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (this.has_registered_gmdevice)
                writer.writeMessage(6, this.registered_gmdevice, () => this.registered_gmdevice.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.registered_device, () => message.registered_device = Device.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.registered_gmdevice, () => message.registered_gmdevice = dependency_21.com.keus.gateway.GMDevice.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterDeviceResponse {
            return RegisterDeviceResponse.deserialize(bytes);
        }
    }
    export class GetDevices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetDevices {
            const message = new GetDevices({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDevices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDevices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDevices {
            return GetDevices.deserialize(bytes);
        }
    }
    export class GetDevicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            devices?: Device[];
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("devices" in data && data.devices != undefined) {
                    this.devices = data.devices;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get devices() {
            return pb_1.Message.getRepeatedWrapperField(this, Device, 4) as Device[];
        }
        set devices(value: Device[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            devices?: ReturnType<typeof Device.prototype.toObject>[];
            ops_message?: string;
        }): GetDevicesResponse {
            const message = new GetDevicesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.devices != null) {
                message.devices = data.devices.map(item => Device.fromObject(item));
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                devices?: ReturnType<typeof Device.prototype.toObject>[];
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.devices != null) {
                data.devices = this.devices.map((item: Device) => item.toObject());
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.devices.length)
                writer.writeRepeatedMessage(4, this.devices, (item: Device) => item.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDevicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDevicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.devices, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Device.deserialize(reader), Device));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDevicesResponse {
            return GetDevicesResponse.deserialize(bytes);
        }
    }
    export class EnterPairMode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            duration?: number;
            gatewayId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("gatewayId" in data && data.gatewayId != undefined) {
                    this.gatewayId = data.gatewayId;
                }
            }
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get gatewayId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set gatewayId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            duration?: number;
            gatewayId?: string;
        }): EnterPairMode {
            const message = new EnterPairMode({});
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.gatewayId != null) {
                message.gatewayId = data.gatewayId;
            }
            return message;
        }
        toObject() {
            const data: {
                duration?: number;
                gatewayId?: string;
            } = {};
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.gatewayId != null) {
                data.gatewayId = this.gatewayId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.duration != 0)
                writer.writeInt32(1, this.duration);
            if (this.gatewayId.length)
                writer.writeString(2, this.gatewayId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnterPairMode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnterPairMode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.duration = reader.readInt32();
                        break;
                    case 2:
                        message.gatewayId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnterPairMode {
            return EnterPairMode.deserialize(bytes);
        }
    }
    export class EnterPairModeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EnterPairModeResponse {
            const message = new EnterPairModeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnterPairModeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnterPairModeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnterPairModeResponse {
            return EnterPairModeResponse.deserialize(bytes);
        }
    }
    export class MoveDeviceRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveDeviceRoom {
            const message = new MoveDeviceRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveDeviceRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveDeviceRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveDeviceRoom {
            return MoveDeviceRoom.deserialize(bytes);
        }
    }
    export class MoveDeviceRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveDeviceRoomResponse {
            const message = new MoveDeviceRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveDeviceRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveDeviceRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveDeviceRoomResponse {
            return MoveDeviceRoomResponse.deserialize(bytes);
        }
    }
    export class ResetDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            force_delete?: boolean;
            make_zigbee_call?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
                if ("make_zigbee_call" in data && data.make_zigbee_call != undefined) {
                    this.make_zigbee_call = data.make_zigbee_call;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get make_zigbee_call() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set make_zigbee_call(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            force_delete?: boolean;
            make_zigbee_call?: boolean;
        }): ResetDevice {
            const message = new ResetDevice({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            if (data.make_zigbee_call != null) {
                message.make_zigbee_call = data.make_zigbee_call;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                force_delete?: boolean;
                make_zigbee_call?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            if (this.make_zigbee_call != null) {
                data.make_zigbee_call = this.make_zigbee_call;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.force_delete != false)
                writer.writeBool(2, this.force_delete);
            if (this.make_zigbee_call != false)
                writer.writeBool(3, this.make_zigbee_call);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.force_delete = reader.readBool();
                        break;
                    case 3:
                        message.make_zigbee_call = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetDevice {
            return ResetDevice.deserialize(bytes);
        }
    }
    export class ResetDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetDeviceResponse {
            const message = new ResetDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetDeviceResponse {
            return ResetDeviceResponse.deserialize(bytes);
        }
    }
    export class ReplaceDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceDevice {
            const message = new ReplaceDevice({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDevice {
            return ReplaceDevice.deserialize(bytes);
        }
    }
    export class ReplaceDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceDeviceResponse {
            const message = new ReplaceDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDeviceResponse {
            return ReplaceDeviceResponse.deserialize(bytes);
        }
    }
    export class ReplaceDeviceBackend extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceDeviceBackend {
            const message = new ReplaceDeviceBackend({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDeviceBackend {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDeviceBackend();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDeviceBackend {
            return ReplaceDeviceBackend.deserialize(bytes);
        }
    }
    export class ReplaceDeviceBackendResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceDeviceBackendResponse {
            const message = new ReplaceDeviceBackendResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDeviceBackendResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDeviceBackendResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDeviceBackendResponse {
            return ReplaceDeviceBackendResponse.deserialize(bytes);
        }
    }
    export class UpdateDeviceBatteryStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            battery_percentage?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("battery_percentage" in data && data.battery_percentage != undefined) {
                    this.battery_percentage = data.battery_percentage;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get battery_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set battery_percentage(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            battery_percentage?: number;
        }): UpdateDeviceBatteryStatus {
            const message = new UpdateDeviceBatteryStatus({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.battery_percentage != null) {
                message.battery_percentage = data.battery_percentage;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                battery_percentage?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.battery_percentage != null) {
                data.battery_percentage = this.battery_percentage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.battery_percentage != 0)
                writer.writeInt32(2, this.battery_percentage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDeviceBatteryStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDeviceBatteryStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.battery_percentage = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDeviceBatteryStatus {
            return UpdateDeviceBatteryStatus.deserialize(bytes);
        }
    }
    export class UpdateDeviceBatteryStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateDeviceBatteryStatusResponse {
            const message = new UpdateDeviceBatteryStatusResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDeviceBatteryStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDeviceBatteryStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDeviceBatteryStatusResponse {
            return UpdateDeviceBatteryStatusResponse.deserialize(bytes);
        }
    }
    export class RegisterDeviceEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            registered_device?: Device;
            ops_message?: string;
            registered_gmdevice?: dependency_21.com.keus.gateway.GMDevice;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("registered_device" in data && data.registered_device != undefined) {
                    this.registered_device = data.registered_device;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("registered_gmdevice" in data && data.registered_gmdevice != undefined) {
                    this.registered_gmdevice = data.registered_gmdevice;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get registered_device() {
            return pb_1.Message.getWrapperField(this, Device, 4) as Device;
        }
        set registered_device(value: Device) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_registered_device() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get registered_gmdevice() {
            return pb_1.Message.getWrapperField(this, dependency_21.com.keus.gateway.GMDevice, 6) as dependency_21.com.keus.gateway.GMDevice;
        }
        set registered_gmdevice(value: dependency_21.com.keus.gateway.GMDevice) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_registered_gmdevice() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            registered_device?: ReturnType<typeof Device.prototype.toObject>;
            ops_message?: string;
            registered_gmdevice?: ReturnType<typeof dependency_21.com.keus.gateway.GMDevice.prototype.toObject>;
        }): RegisterDeviceEvent {
            const message = new RegisterDeviceEvent({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.registered_device != null) {
                message.registered_device = Device.fromObject(data.registered_device);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.registered_gmdevice != null) {
                message.registered_gmdevice = dependency_21.com.keus.gateway.GMDevice.fromObject(data.registered_gmdevice);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                registered_device?: ReturnType<typeof Device.prototype.toObject>;
                ops_message?: string;
                registered_gmdevice?: ReturnType<typeof dependency_21.com.keus.gateway.GMDevice.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.registered_device != null) {
                data.registered_device = this.registered_device.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.registered_gmdevice != null) {
                data.registered_gmdevice = this.registered_gmdevice.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_registered_device)
                writer.writeMessage(4, this.registered_device, () => this.registered_device.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (this.has_registered_gmdevice)
                writer.writeMessage(6, this.registered_gmdevice, () => this.registered_gmdevice.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterDeviceEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterDeviceEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.registered_device, () => message.registered_device = Device.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.registered_gmdevice, () => message.registered_gmdevice = dependency_21.com.keus.gateway.GMDevice.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterDeviceEvent {
            return RegisterDeviceEvent.deserialize(bytes);
        }
    }
}
