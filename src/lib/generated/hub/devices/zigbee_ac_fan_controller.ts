/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/zigbee_ac_fan_controller.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./device_constants";
import * as dependency_2 from "./../activity/activity_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum AC_FAN_CONTROLLER_STATES {
        AC_OFF = 0,
        AC_LOW = 1,
        AC_MED = 2,
        AC_HIGH = 3,
        AC_MAX = 4
    }
    export class ZigbeeACFanControllerProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            has_light?: boolean;
            has_swing?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("has_light" in data && data.has_light != undefined) {
                    this.has_light = data.has_light;
                }
                if ("has_swing" in data && data.has_swing != undefined) {
                    this.has_swing = data.has_swing;
                }
            }
        }
        get has_light() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set has_light(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_swing() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set has_swing(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            has_light?: boolean;
            has_swing?: boolean;
        }): ZigbeeACFanControllerProperties {
            const message = new ZigbeeACFanControllerProperties({});
            if (data.has_light != null) {
                message.has_light = data.has_light;
            }
            if (data.has_swing != null) {
                message.has_swing = data.has_swing;
            }
            return message;
        }
        toObject() {
            const data: {
                has_light?: boolean;
                has_swing?: boolean;
            } = {};
            if (this.has_light != null) {
                data.has_light = this.has_light;
            }
            if (this.has_swing != null) {
                data.has_swing = this.has_swing;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_light != false)
                writer.writeBool(1, this.has_light);
            if (this.has_swing != false)
                writer.writeBool(2, this.has_swing);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeACFanControllerProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeACFanControllerProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.has_light = reader.readBool();
                        break;
                    case 2:
                        message.has_swing = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeACFanControllerProperties {
            return ZigbeeACFanControllerProperties.deserialize(bytes);
        }
    }
    export class ZigbeeACFanControllerState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fan_state?: AC_FAN_CONTROLLER_STATES;
            light_state?: number;
            swing_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("swing_state" in data && data.swing_state != undefined) {
                    this.swing_state = data.swing_state;
                }
            }
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, AC_FAN_CONTROLLER_STATES.AC_OFF) as AC_FAN_CONTROLLER_STATES;
        }
        set fan_state(value: AC_FAN_CONTROLLER_STATES) {
            pb_1.Message.setField(this, 1, value);
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get swing_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set swing_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            fan_state?: AC_FAN_CONTROLLER_STATES;
            light_state?: number;
            swing_state?: number;
        }): ZigbeeACFanControllerState {
            const message = new ZigbeeACFanControllerState({});
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.swing_state != null) {
                message.swing_state = data.swing_state;
            }
            return message;
        }
        toObject() {
            const data: {
                fan_state?: AC_FAN_CONTROLLER_STATES;
                light_state?: number;
                swing_state?: number;
            } = {};
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.swing_state != null) {
                data.swing_state = this.swing_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fan_state != AC_FAN_CONTROLLER_STATES.AC_OFF)
                writer.writeEnum(1, this.fan_state);
            if (this.light_state != 0)
                writer.writeInt32(2, this.light_state);
            if (this.swing_state != 0)
                writer.writeInt32(3, this.swing_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeACFanControllerState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeACFanControllerState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fan_state = reader.readEnum();
                        break;
                    case 2:
                        message.light_state = reader.readInt32();
                        break;
                    case 3:
                        message.swing_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeACFanControllerState {
            return ZigbeeACFanControllerState.deserialize(bytes);
        }
    }
    export class ZigbeeACFanControllerAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: AC_FAN_CONTROLLER_STATES;
            light_state?: number;
            swing_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("swing_state" in data && data.swing_state != undefined) {
                    this.swing_state = data.swing_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE.AC_FAN_UPDATE) as dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 4, value);
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, AC_FAN_CONTROLLER_STATES.AC_OFF) as AC_FAN_CONTROLLER_STATES;
        }
        set fan_state(value: AC_FAN_CONTROLLER_STATES) {
            pb_1.Message.setField(this, 2, value);
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get swing_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set swing_state(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: AC_FAN_CONTROLLER_STATES;
            light_state?: number;
            swing_state?: number;
        }): ZigbeeACFanControllerAction {
            const message = new ZigbeeACFanControllerAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.swing_state != null) {
                message.swing_state = data.swing_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
                fan_state?: AC_FAN_CONTROLLER_STATES;
                light_state?: number;
                swing_state?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.swing_state != null) {
                data.swing_state = this.swing_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE.AC_FAN_UPDATE)
                writer.writeEnum(4, this.update_type);
            if (this.fan_state != AC_FAN_CONTROLLER_STATES.AC_OFF)
                writer.writeEnum(2, this.fan_state);
            if (this.light_state != 0)
                writer.writeInt32(3, this.light_state);
            if (this.swing_state != 0)
                writer.writeInt32(5, this.swing_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeACFanControllerAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeACFanControllerAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.fan_state = reader.readEnum();
                        break;
                    case 3:
                        message.light_state = reader.readInt32();
                        break;
                    case 5:
                        message.swing_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeACFanControllerAction {
            return ZigbeeACFanControllerAction.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeACFanController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            is_hidden?: boolean;
            has_light?: boolean;
            has_swing?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
                if ("has_light" in data && data.has_light != undefined) {
                    this.has_light = data.has_light;
                }
                if ("has_swing" in data && data.has_swing != undefined) {
                    this.has_swing = data.has_swing;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_light() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set has_light(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_swing() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set has_swing(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            is_hidden?: boolean;
            has_light?: boolean;
            has_swing?: boolean;
        }): ConfigureZigbeeACFanController {
            const message = new ConfigureZigbeeACFanController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            if (data.has_light != null) {
                message.has_light = data.has_light;
            }
            if (data.has_swing != null) {
                message.has_swing = data.has_swing;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
                is_hidden?: boolean;
                has_light?: boolean;
                has_swing?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            if (this.has_light != null) {
                data.has_light = this.has_light;
            }
            if (this.has_swing != null) {
                data.has_swing = this.has_swing;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_location.length)
                writer.writeString(3, this.device_location);
            if (this.is_hidden != false)
                writer.writeBool(4, this.is_hidden);
            if (this.has_light != false)
                writer.writeBool(5, this.has_light);
            if (this.has_swing != false)
                writer.writeBool(6, this.has_swing);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeACFanController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeACFanController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_location = reader.readString();
                        break;
                    case 4:
                        message.is_hidden = reader.readBool();
                        break;
                    case 5:
                        message.has_light = reader.readBool();
                        break;
                    case 6:
                        message.has_swing = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeACFanController {
            return ConfigureZigbeeACFanController.deserialize(bytes);
        }
    }
    export class ConfigureZigbeeACFanControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureZigbeeACFanControllerResponse {
            const message = new ConfigureZigbeeACFanControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureZigbeeACFanControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureZigbeeACFanControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureZigbeeACFanControllerResponse {
            return ConfigureZigbeeACFanControllerResponse.deserialize(bytes);
        }
    }
    export class UpdateZigbeeACFanControllerState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: AC_FAN_CONTROLLER_STATES;
            light_state?: number;
            swing_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("swing_state" in data && data.swing_state != undefined) {
                    this.swing_state = data.swing_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE.AC_FAN_UPDATE) as dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 10, AC_FAN_CONTROLLER_STATES.AC_OFF) as AC_FAN_CONTROLLER_STATES;
        }
        set fan_state(value: AC_FAN_CONTROLLER_STATES) {
            pb_1.Message.setField(this, 10, value);
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get swing_state() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set swing_state(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: AC_FAN_CONTROLLER_STATES;
            light_state?: number;
            swing_state?: number;
        }): UpdateZigbeeACFanControllerState {
            const message = new UpdateZigbeeACFanControllerState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.swing_state != null) {
                message.swing_state = data.swing_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
                fan_state?: AC_FAN_CONTROLLER_STATES;
                light_state?: number;
                swing_state?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.swing_state != null) {
                data.swing_state = this.swing_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE.AC_FAN_UPDATE)
                writer.writeEnum(2, this.update_type);
            if (this.fan_state != AC_FAN_CONTROLLER_STATES.AC_OFF)
                writer.writeEnum(10, this.fan_state);
            if (this.light_state != 0)
                writer.writeInt32(11, this.light_state);
            if (this.swing_state != 0)
                writer.writeInt32(12, this.swing_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeACFanControllerState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeACFanControllerState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.update_type = reader.readEnum();
                        break;
                    case 10:
                        message.fan_state = reader.readEnum();
                        break;
                    case 11:
                        message.light_state = reader.readInt32();
                        break;
                    case 12:
                        message.swing_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeACFanControllerState {
            return UpdateZigbeeACFanControllerState.deserialize(bytes);
        }
    }
    export class UpdateZigbeeACFanControllerStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateZigbeeACFanControllerStateResponse {
            const message = new UpdateZigbeeACFanControllerStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateZigbeeACFanControllerStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateZigbeeACFanControllerStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateZigbeeACFanControllerStateResponse {
            return UpdateZigbeeACFanControllerStateResponse.deserialize(bytes);
        }
    }
    export class MoveZigbeeACFanControllerRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveZigbeeACFanControllerRoom {
            const message = new MoveZigbeeACFanControllerRoom({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeACFanControllerRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeACFanControllerRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeACFanControllerRoom {
            return MoveZigbeeACFanControllerRoom.deserialize(bytes);
        }
    }
    export class MoveZigbeeACFanControllerRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveZigbeeACFanControllerRoomResponse {
            const message = new MoveZigbeeACFanControllerRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveZigbeeACFanControllerRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveZigbeeACFanControllerRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveZigbeeACFanControllerRoomResponse {
            return MoveZigbeeACFanControllerRoomResponse.deserialize(bytes);
        }
    }
    export class ResetZigbeeACFanController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): ResetZigbeeACFanController {
            const message = new ResetZigbeeACFanController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeACFanController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeACFanController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeACFanController {
            return ResetZigbeeACFanController.deserialize(bytes);
        }
    }
    export class ResetZigbeeACFanControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetZigbeeACFanControllerResponse {
            const message = new ResetZigbeeACFanControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeACFanControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeACFanControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeACFanControllerResponse {
            return ResetZigbeeACFanControllerResponse.deserialize(bytes);
        }
    }
    export class ReportZigbeeACFanControllerActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: AC_FAN_CONTROLLER_STATES;
            light_state?: number;
            swing_state?: number;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("fan_state" in data && data.fan_state != undefined) {
                    this.fan_state = data.fan_state;
                }
                if ("light_state" in data && data.light_state != undefined) {
                    this.light_state = data.light_state;
                }
                if ("swing_state" in data && data.swing_state != undefined) {
                    this.swing_state = data.swing_state;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE.AC_FAN_UPDATE) as dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
        }
        set update_type(value: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE) {
            pb_1.Message.setField(this, 2, value);
        }
        get fan_state() {
            return pb_1.Message.getFieldWithDefault(this, 10, AC_FAN_CONTROLLER_STATES.AC_OFF) as AC_FAN_CONTROLLER_STATES;
        }
        set fan_state(value: AC_FAN_CONTROLLER_STATES) {
            pb_1.Message.setField(this, 10, value);
        }
        get light_state() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set light_state(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get swing_state() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set swing_state(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            device_id?: string;
            update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
            fan_state?: AC_FAN_CONTROLLER_STATES;
            light_state?: number;
            swing_state?: number;
            activity_time?: number;
        }): ReportZigbeeACFanControllerActivity {
            const message = new ReportZigbeeACFanControllerActivity({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.fan_state != null) {
                message.fan_state = data.fan_state;
            }
            if (data.light_state != null) {
                message.light_state = data.light_state;
            }
            if (data.swing_state != null) {
                message.swing_state = data.swing_state;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                update_type?: dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE;
                fan_state?: AC_FAN_CONTROLLER_STATES;
                light_state?: number;
                swing_state?: number;
                activity_time?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.fan_state != null) {
                data.fan_state = this.fan_state;
            }
            if (this.light_state != null) {
                data.light_state = this.light_state;
            }
            if (this.swing_state != null) {
                data.swing_state = this.swing_state;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.update_type != dependency_1.com.keus.hub.AC_FAN_CONTROLLER_UPDATE_TYPE.AC_FAN_UPDATE)
                writer.writeEnum(2, this.update_type);
            if (this.fan_state != AC_FAN_CONTROLLER_STATES.AC_OFF)
                writer.writeEnum(10, this.fan_state);
            if (this.light_state != 0)
                writer.writeInt32(11, this.light_state);
            if (this.swing_state != 0)
                writer.writeInt32(12, this.swing_state);
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportZigbeeACFanControllerActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportZigbeeACFanControllerActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.update_type = reader.readEnum();
                        break;
                    case 10:
                        message.fan_state = reader.readEnum();
                        break;
                    case 11:
                        message.light_state = reader.readInt32();
                        break;
                    case 12:
                        message.swing_state = reader.readInt32();
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportZigbeeACFanControllerActivity {
            return ReportZigbeeACFanControllerActivity.deserialize(bytes);
        }
    }
    export class ZigbeeACFanControllerEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_state?: UpdateZigbeeACFanControllerState;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_state" in data && data.update_state != undefined) {
                    this.update_state = data.update_state;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get update_state() {
            return pb_1.Message.getWrapperField(this, UpdateZigbeeACFanControllerState, 1) as UpdateZigbeeACFanControllerState;
        }
        set update_state(value: UpdateZigbeeACFanControllerState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_update_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_state?: ReturnType<typeof UpdateZigbeeACFanControllerState.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): ZigbeeACFanControllerEvent {
            const message = new ZigbeeACFanControllerEvent({});
            if (data.update_state != null) {
                message.update_state = UpdateZigbeeACFanControllerState.fromObject(data.update_state);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                update_state?: ReturnType<typeof UpdateZigbeeACFanControllerState.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.update_state != null) {
                data.update_state = this.update_state.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_update_state)
                writer.writeMessage(1, this.update_state, () => this.update_state.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ZigbeeACFanControllerEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ZigbeeACFanControllerEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.update_state, () => message.update_state = UpdateZigbeeACFanControllerState.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ZigbeeACFanControllerEvent {
            return ZigbeeACFanControllerEvent.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeACFanController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceZigbeeACFanController {
            const message = new ReplaceZigbeeACFanController({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeACFanController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeACFanController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeACFanController {
            return ReplaceZigbeeACFanController.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeACFanControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceZigbeeACFanControllerResponse {
            const message = new ReplaceZigbeeACFanControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeACFanControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeACFanControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeACFanControllerResponse {
            return ReplaceZigbeeACFanControllerResponse.deserialize(bytes);
        }
    }
    export class RenameZigbeeACFanController extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
        }): RenameZigbeeACFanController {
            const message = new RenameZigbeeACFanController({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeACFanController {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeACFanController();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeACFanController {
            return RenameZigbeeACFanController.deserialize(bytes);
        }
    }
    export class RenameZigbeeACFanControllerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameZigbeeACFanControllerResponse {
            const message = new RenameZigbeeACFanControllerResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameZigbeeACFanControllerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameZigbeeACFanControllerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameZigbeeACFanControllerResponse {
            return RenameZigbeeACFanControllerResponse.deserialize(bytes);
        }
    }
}
