/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/zigbee_contact_sensor.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class ContactSensorProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            notifications_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("notifications_enabled" in data && data.notifications_enabled != undefined) {
                    this.notifications_enabled = data.notifications_enabled;
                }
            }
        }
        get notifications_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set notifications_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            notifications_enabled?: boolean;
        }): ContactSensorProperties {
            const message = new ContactSensorProperties({});
            if (data.notifications_enabled != null) {
                message.notifications_enabled = data.notifications_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                notifications_enabled?: boolean;
            } = {};
            if (this.notifications_enabled != null) {
                data.notifications_enabled = this.notifications_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.notifications_enabled != false)
                writer.writeBool(1, this.notifications_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactSensorProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactSensorProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.notifications_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContactSensorProperties {
            return ContactSensorProperties.deserialize(bytes);
        }
    }
    export class ContactSensorState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_state?: number;
            battery_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
                if ("battery_state" in data && data.battery_state != undefined) {
                    this.battery_state = data.battery_state;
                }
            }
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get battery_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set battery_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_state?: number;
            battery_state?: number;
        }): ContactSensorState {
            const message = new ContactSensorState({});
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            if (data.battery_state != null) {
                message.battery_state = data.battery_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_state?: number;
                battery_state?: number;
            } = {};
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            if (this.battery_state != null) {
                data.battery_state = this.battery_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_state != 0)
                writer.writeUint32(1, this.device_state);
            if (this.battery_state != 0)
                writer.writeUint32(2, this.battery_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactSensorState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactSensorState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_state = reader.readUint32();
                        break;
                    case 2:
                        message.battery_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContactSensorState {
            return ContactSensorState.deserialize(bytes);
        }
    }
    export class UpdateContactSensorState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_state?: number;
        }): UpdateContactSensorState {
            const message = new UpdateContactSensorState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_state?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_state != 0)
                writer.writeUint32(2, this.device_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContactSensorState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContactSensorState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContactSensorState {
            return UpdateContactSensorState.deserialize(bytes);
        }
    }
    export class UpdateContactSensorStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): UpdateContactSensorStateResponse {
            const message = new UpdateContactSensorStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContactSensorStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContactSensorStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContactSensorStateResponse {
            return UpdateContactSensorStateResponse.deserialize(bytes);
        }
    }
    export class UpdateContactSensorBatteryState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            battery_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("battery_state" in data && data.battery_state != undefined) {
                    this.battery_state = data.battery_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get battery_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set battery_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            battery_state?: number;
        }): UpdateContactSensorBatteryState {
            const message = new UpdateContactSensorBatteryState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.battery_state != null) {
                message.battery_state = data.battery_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                battery_state?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.battery_state != null) {
                data.battery_state = this.battery_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.battery_state != 0)
                writer.writeUint32(2, this.battery_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContactSensorBatteryState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContactSensorBatteryState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.battery_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContactSensorBatteryState {
            return UpdateContactSensorBatteryState.deserialize(bytes);
        }
    }
    export class UpdateContactSensorBatteryStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): UpdateContactSensorBatteryStateResponse {
            const message = new UpdateContactSensorBatteryStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContactSensorBatteryStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContactSensorBatteryStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContactSensorBatteryStateResponse {
            return UpdateContactSensorBatteryStateResponse.deserialize(bytes);
        }
    }
    export class MoveContactSensor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveContactSensor {
            const message = new MoveContactSensor({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveContactSensor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveContactSensor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveContactSensor {
            return MoveContactSensor.deserialize(bytes);
        }
    }
    export class MoveContactSensorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveContactSensorResponse {
            const message = new MoveContactSensorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveContactSensorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveContactSensorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveContactSensorResponse {
            return MoveContactSensorResponse.deserialize(bytes);
        }
    }
    export class SetContactSensorArmState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            status?: boolean;
        }): SetContactSensorArmState {
            const message = new SetContactSensorArmState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                status?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.status != false)
                writer.writeBool(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetContactSensorArmState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetContactSensorArmState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetContactSensorArmState {
            return SetContactSensorArmState.deserialize(bytes);
        }
    }
    export class SetContactSensorArmStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetContactSensorArmStateResponse {
            const message = new SetContactSensorArmStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetContactSensorArmStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetContactSensorArmStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetContactSensorArmStateResponse {
            return SetContactSensorArmStateResponse.deserialize(bytes);
        }
    }
    export class ConfigureContactSensor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
        }): ConfigureContactSensor {
            const message = new ConfigureContactSensor({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_location.length)
                writer.writeString(3, this.device_location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureContactSensor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureContactSensor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_location = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureContactSensor {
            return ConfigureContactSensor.deserialize(bytes);
        }
    }
    export class ConfigureContactSensorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureContactSensorResponse {
            const message = new ConfigureContactSensorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureContactSensorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureContactSensorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureContactSensorResponse {
            return ConfigureContactSensorResponse.deserialize(bytes);
        }
    }
    export class RenameContactSensor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
        }): RenameContactSensor {
            const message = new RenameContactSensor({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameContactSensor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameContactSensor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameContactSensor {
            return RenameContactSensor.deserialize(bytes);
        }
    }
    export class RenameContactSensorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameContactSensorResponse {
            const message = new RenameContactSensorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameContactSensorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameContactSensorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameContactSensorResponse {
            return RenameContactSensorResponse.deserialize(bytes);
        }
    }
    export class UpdateContactSensorStateEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set device_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_state?: number;
        }): UpdateContactSensorStateEvent {
            const message = new UpdateContactSensorStateEvent({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_state != null) {
                message.device_state = data.device_state;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_state?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_state != 0)
                writer.writeUint32(2, this.device_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContactSensorStateEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContactSensorStateEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_state = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContactSensorStateEvent {
            return UpdateContactSensorStateEvent.deserialize(bytes);
        }
    }
    export class SetContactSensorArmStateEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            status?: boolean;
        }): SetContactSensorArmStateEvent {
            const message = new SetContactSensorArmStateEvent({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                status?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.status != false)
                writer.writeBool(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetContactSensorArmStateEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetContactSensorArmStateEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetContactSensorArmStateEvent {
            return SetContactSensorArmStateEvent.deserialize(bytes);
        }
    }
    export class ContactSensorNotificationData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_type?: string;
            device_section?: string;
            device_room?: string;
            device_location?: string;
            device_category?: string;
            device_state?: ContactSensorState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("device_category" in data && data.device_category != undefined) {
                    this.device_category = data.device_category;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get device_category() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set device_category(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get device_state() {
            return pb_1.Message.getWrapperField(this, ContactSensorState, 9) as ContactSensorState;
        }
        set device_state(value: ContactSensorState) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_device_state() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_type?: string;
            device_section?: string;
            device_room?: string;
            device_location?: string;
            device_category?: string;
            device_state?: ReturnType<typeof ContactSensorState.prototype.toObject>;
        }): ContactSensorNotificationData {
            const message = new ContactSensorNotificationData({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.device_category != null) {
                message.device_category = data.device_category;
            }
            if (data.device_state != null) {
                message.device_state = ContactSensorState.fromObject(data.device_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_type?: string;
                device_section?: string;
                device_room?: string;
                device_location?: string;
                device_category?: string;
                device_state?: ReturnType<typeof ContactSensorState.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.device_category != null) {
                data.device_category = this.device_category;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_type.length)
                writer.writeString(3, this.device_type);
            if (this.device_section.length)
                writer.writeString(4, this.device_section);
            if (this.device_room.length)
                writer.writeString(5, this.device_room);
            if (this.device_location.length)
                writer.writeString(6, this.device_location);
            if (this.device_category.length)
                writer.writeString(7, this.device_category);
            if (this.has_device_state)
                writer.writeMessage(9, this.device_state, () => this.device_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactSensorNotificationData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactSensorNotificationData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_type = reader.readString();
                        break;
                    case 4:
                        message.device_section = reader.readString();
                        break;
                    case 5:
                        message.device_room = reader.readString();
                        break;
                    case 6:
                        message.device_location = reader.readString();
                        break;
                    case 7:
                        message.device_category = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.device_state, () => message.device_state = ContactSensorState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContactSensorNotificationData {
            return ContactSensorNotificationData.deserialize(bytes);
        }
    }
    export class ContactSensorScheduleAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            notifications_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("notifications_enabled" in data && data.notifications_enabled != undefined) {
                    this.notifications_enabled = data.notifications_enabled;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get notifications_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set notifications_enabled(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            notifications_enabled?: boolean;
        }): ContactSensorScheduleAction {
            const message = new ContactSensorScheduleAction({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.notifications_enabled != null) {
                message.notifications_enabled = data.notifications_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                notifications_enabled?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.notifications_enabled != null) {
                data.notifications_enabled = this.notifications_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.notifications_enabled != false)
                writer.writeBool(2, this.notifications_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactSensorScheduleAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactSensorScheduleAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.notifications_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContactSensorScheduleAction {
            return ContactSensorScheduleAction.deserialize(bytes);
        }
    }
    export class ResetZigbeeContactSensor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): ResetZigbeeContactSensor {
            const message = new ResetZigbeeContactSensor({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeContactSensor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeContactSensor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeContactSensor {
            return ResetZigbeeContactSensor.deserialize(bytes);
        }
    }
    export class ResetZigbeeContactSensorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ResetZigbeeContactSensorResponse {
            const message = new ResetZigbeeContactSensorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetZigbeeContactSensorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetZigbeeContactSensorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetZigbeeContactSensorResponse {
            return ResetZigbeeContactSensorResponse.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeContactSensor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceZigbeeContactSensor {
            const message = new ReplaceZigbeeContactSensor({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeContactSensor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeContactSensor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeContactSensor {
            return ReplaceZigbeeContactSensor.deserialize(bytes);
        }
    }
    export class ReplaceZigbeeContactSensorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceZigbeeContactSensorResponse {
            const message = new ReplaceZigbeeContactSensorResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceZigbeeContactSensorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceZigbeeContactSensorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceZigbeeContactSensorResponse {
            return ReplaceZigbeeContactSensorResponse.deserialize(bytes);
        }
    }
}
