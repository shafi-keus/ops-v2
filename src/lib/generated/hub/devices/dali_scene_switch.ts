/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/devices/dali_scene_switch.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export class DaliSceneSwitchGroupButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            group_id?: number;
            room_id?: string;
        }): DaliSceneSwitchGroupButtonProperties {
            const message = new DaliSceneSwitchGroupButtonProperties({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                room_id?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSceneSwitchGroupButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSceneSwitchGroupButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSceneSwitchGroupButtonProperties {
            return DaliSceneSwitchGroupButtonProperties.deserialize(bytes);
        }
    }
    export class DaliSceneSwitchSceneButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scene_id?: number;
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scene_id" in data && data.scene_id != undefined) {
                    this.scene_id = data.scene_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get scene_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set scene_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            scene_id?: number;
            room_id?: string;
        }): DaliSceneSwitchSceneButtonProperties {
            const message = new DaliSceneSwitchSceneButtonProperties({});
            if (data.scene_id != null) {
                message.scene_id = data.scene_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                scene_id?: number;
                room_id?: string;
            } = {};
            if (this.scene_id != null) {
                data.scene_id = this.scene_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scene_id != 0)
                writer.writeInt32(1, this.scene_id);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSceneSwitchSceneButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSceneSwitchSceneButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scene_id = reader.readInt32();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSceneSwitchSceneButtonProperties {
            return DaliSceneSwitchSceneButtonProperties.deserialize(bytes);
        }
    }
    export class DaliSceneSwitchCurtainButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set device_id(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string[];
        }): DaliSceneSwitchCurtainButtonProperties {
            const message = new DaliSceneSwitchCurtainButtonProperties({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string[];
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeRepeatedString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSceneSwitchCurtainButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSceneSwitchCurtainButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSceneSwitchCurtainButtonProperties {
            return DaliSceneSwitchCurtainButtonProperties.deserialize(bytes);
        }
    }
    export class DaliSceneSwitchFanButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): DaliSceneSwitchFanButtonProperties {
            const message = new DaliSceneSwitchFanButtonProperties({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSceneSwitchFanButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSceneSwitchFanButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSceneSwitchFanButtonProperties {
            return DaliSceneSwitchFanButtonProperties.deserialize(bytes);
        }
    }
    export class DaliSceneSwitchNoPropsButtonProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DaliSceneSwitchNoPropsButtonProperties {
            const message = new DaliSceneSwitchNoPropsButtonProperties({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSceneSwitchNoPropsButtonProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSceneSwitchNoPropsButtonProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSceneSwitchNoPropsButtonProperties {
            return DaliSceneSwitchNoPropsButtonProperties.deserialize(bytes);
        }
    }
    export class DaliSceneSwitchButton extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14]];
        constructor(data?: any[] | ({
            button_id?: number;
            button_type?: string;
        } & (({
            group_button_properties?: DaliSceneSwitchGroupButtonProperties;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            noprops_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: DaliSceneSwitchSceneButtonProperties;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            noprops_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: DaliSceneSwitchCurtainButtonProperties;
            fan_button_properties?: never;
            noprops_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: DaliSceneSwitchFanButtonProperties;
            noprops_button_properties?: never;
        } | {
            group_button_properties?: never;
            scene_button_properties?: never;
            curtain_button_properties?: never;
            fan_button_properties?: never;
            noprops_button_properties?: DaliSceneSwitchNoPropsButtonProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("button_id" in data && data.button_id != undefined) {
                    this.button_id = data.button_id;
                }
                if ("button_type" in data && data.button_type != undefined) {
                    this.button_type = data.button_type;
                }
                if ("group_button_properties" in data && data.group_button_properties != undefined) {
                    this.group_button_properties = data.group_button_properties;
                }
                if ("scene_button_properties" in data && data.scene_button_properties != undefined) {
                    this.scene_button_properties = data.scene_button_properties;
                }
                if ("curtain_button_properties" in data && data.curtain_button_properties != undefined) {
                    this.curtain_button_properties = data.curtain_button_properties;
                }
                if ("fan_button_properties" in data && data.fan_button_properties != undefined) {
                    this.fan_button_properties = data.fan_button_properties;
                }
                if ("noprops_button_properties" in data && data.noprops_button_properties != undefined) {
                    this.noprops_button_properties = data.noprops_button_properties;
                }
            }
        }
        get button_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set button_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get button_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set button_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_button_properties() {
            return pb_1.Message.getWrapperField(this, DaliSceneSwitchGroupButtonProperties, 10) as DaliSceneSwitchGroupButtonProperties;
        }
        set group_button_properties(value: DaliSceneSwitchGroupButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_group_button_properties() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get scene_button_properties() {
            return pb_1.Message.getWrapperField(this, DaliSceneSwitchSceneButtonProperties, 11) as DaliSceneSwitchSceneButtonProperties;
        }
        set scene_button_properties(value: DaliSceneSwitchSceneButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_scene_button_properties() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get curtain_button_properties() {
            return pb_1.Message.getWrapperField(this, DaliSceneSwitchCurtainButtonProperties, 12) as DaliSceneSwitchCurtainButtonProperties;
        }
        set curtain_button_properties(value: DaliSceneSwitchCurtainButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_curtain_button_properties() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get fan_button_properties() {
            return pb_1.Message.getWrapperField(this, DaliSceneSwitchFanButtonProperties, 13) as DaliSceneSwitchFanButtonProperties;
        }
        set fan_button_properties(value: DaliSceneSwitchFanButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_fan_button_properties() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get noprops_button_properties() {
            return pb_1.Message.getWrapperField(this, DaliSceneSwitchNoPropsButtonProperties, 14) as DaliSceneSwitchNoPropsButtonProperties;
        }
        set noprops_button_properties(value: DaliSceneSwitchNoPropsButtonProperties) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_noprops_button_properties() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get button_properties() {
            const cases: {
                [index: number]: "none" | "group_button_properties" | "scene_button_properties" | "curtain_button_properties" | "fan_button_properties" | "noprops_button_properties";
            } = {
                0: "none",
                10: "group_button_properties",
                11: "scene_button_properties",
                12: "curtain_button_properties",
                13: "fan_button_properties",
                14: "noprops_button_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14])];
        }
        static fromObject(data: {
            button_id?: number;
            button_type?: string;
            group_button_properties?: ReturnType<typeof DaliSceneSwitchGroupButtonProperties.prototype.toObject>;
            scene_button_properties?: ReturnType<typeof DaliSceneSwitchSceneButtonProperties.prototype.toObject>;
            curtain_button_properties?: ReturnType<typeof DaliSceneSwitchCurtainButtonProperties.prototype.toObject>;
            fan_button_properties?: ReturnType<typeof DaliSceneSwitchFanButtonProperties.prototype.toObject>;
            noprops_button_properties?: ReturnType<typeof DaliSceneSwitchNoPropsButtonProperties.prototype.toObject>;
        }): DaliSceneSwitchButton {
            const message = new DaliSceneSwitchButton({});
            if (data.button_id != null) {
                message.button_id = data.button_id;
            }
            if (data.button_type != null) {
                message.button_type = data.button_type;
            }
            if (data.group_button_properties != null) {
                message.group_button_properties = DaliSceneSwitchGroupButtonProperties.fromObject(data.group_button_properties);
            }
            if (data.scene_button_properties != null) {
                message.scene_button_properties = DaliSceneSwitchSceneButtonProperties.fromObject(data.scene_button_properties);
            }
            if (data.curtain_button_properties != null) {
                message.curtain_button_properties = DaliSceneSwitchCurtainButtonProperties.fromObject(data.curtain_button_properties);
            }
            if (data.fan_button_properties != null) {
                message.fan_button_properties = DaliSceneSwitchFanButtonProperties.fromObject(data.fan_button_properties);
            }
            if (data.noprops_button_properties != null) {
                message.noprops_button_properties = DaliSceneSwitchNoPropsButtonProperties.fromObject(data.noprops_button_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                button_id?: number;
                button_type?: string;
                group_button_properties?: ReturnType<typeof DaliSceneSwitchGroupButtonProperties.prototype.toObject>;
                scene_button_properties?: ReturnType<typeof DaliSceneSwitchSceneButtonProperties.prototype.toObject>;
                curtain_button_properties?: ReturnType<typeof DaliSceneSwitchCurtainButtonProperties.prototype.toObject>;
                fan_button_properties?: ReturnType<typeof DaliSceneSwitchFanButtonProperties.prototype.toObject>;
                noprops_button_properties?: ReturnType<typeof DaliSceneSwitchNoPropsButtonProperties.prototype.toObject>;
            } = {};
            if (this.button_id != null) {
                data.button_id = this.button_id;
            }
            if (this.button_type != null) {
                data.button_type = this.button_type;
            }
            if (this.group_button_properties != null) {
                data.group_button_properties = this.group_button_properties.toObject();
            }
            if (this.scene_button_properties != null) {
                data.scene_button_properties = this.scene_button_properties.toObject();
            }
            if (this.curtain_button_properties != null) {
                data.curtain_button_properties = this.curtain_button_properties.toObject();
            }
            if (this.fan_button_properties != null) {
                data.fan_button_properties = this.fan_button_properties.toObject();
            }
            if (this.noprops_button_properties != null) {
                data.noprops_button_properties = this.noprops_button_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.button_id != 0)
                writer.writeInt32(1, this.button_id);
            if (this.button_type.length)
                writer.writeString(2, this.button_type);
            if (this.has_group_button_properties)
                writer.writeMessage(10, this.group_button_properties, () => this.group_button_properties.serialize(writer));
            if (this.has_scene_button_properties)
                writer.writeMessage(11, this.scene_button_properties, () => this.scene_button_properties.serialize(writer));
            if (this.has_curtain_button_properties)
                writer.writeMessage(12, this.curtain_button_properties, () => this.curtain_button_properties.serialize(writer));
            if (this.has_fan_button_properties)
                writer.writeMessage(13, this.fan_button_properties, () => this.fan_button_properties.serialize(writer));
            if (this.has_noprops_button_properties)
                writer.writeMessage(14, this.noprops_button_properties, () => this.noprops_button_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSceneSwitchButton {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSceneSwitchButton();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.button_id = reader.readInt32();
                        break;
                    case 2:
                        message.button_type = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.group_button_properties, () => message.group_button_properties = DaliSceneSwitchGroupButtonProperties.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.scene_button_properties, () => message.scene_button_properties = DaliSceneSwitchSceneButtonProperties.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.curtain_button_properties, () => message.curtain_button_properties = DaliSceneSwitchCurtainButtonProperties.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.fan_button_properties, () => message.fan_button_properties = DaliSceneSwitchFanButtonProperties.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.noprops_button_properties, () => message.noprops_button_properties = DaliSceneSwitchNoPropsButtonProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSceneSwitchButton {
            return DaliSceneSwitchButton.deserialize(bytes);
        }
    }
    export class DaliSceneSwitchState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DaliSceneSwitchState {
            const message = new DaliSceneSwitchState({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSceneSwitchState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSceneSwitchState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSceneSwitchState {
            return DaliSceneSwitchState.deserialize(bytes);
        }
    }
    export class DaliSceneSwitchProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            button?: DaliSceneSwitchButton[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("button" in data && data.button != undefined) {
                    this.button = data.button;
                }
            }
        }
        get button() {
            return pb_1.Message.getRepeatedWrapperField(this, DaliSceneSwitchButton, 1) as DaliSceneSwitchButton[];
        }
        set button(value: DaliSceneSwitchButton[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            button?: ReturnType<typeof DaliSceneSwitchButton.prototype.toObject>[];
        }): DaliSceneSwitchProperties {
            const message = new DaliSceneSwitchProperties({});
            if (data.button != null) {
                message.button = data.button.map(item => DaliSceneSwitchButton.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                button?: ReturnType<typeof DaliSceneSwitchButton.prototype.toObject>[];
            } = {};
            if (this.button != null) {
                data.button = this.button.map((item: DaliSceneSwitchButton) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.button.length)
                writer.writeRepeatedMessage(1, this.button, (item: DaliSceneSwitchButton) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DaliSceneSwitchProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DaliSceneSwitchProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.button, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DaliSceneSwitchButton.deserialize(reader), DaliSceneSwitchButton));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DaliSceneSwitchProperties {
            return DaliSceneSwitchProperties.deserialize(bytes);
        }
    }
    export class FlashDaliSceneSwitchButtons extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): FlashDaliSceneSwitchButtons {
            const message = new FlashDaliSceneSwitchButtons({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlashDaliSceneSwitchButtons {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlashDaliSceneSwitchButtons();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlashDaliSceneSwitchButtons {
            return FlashDaliSceneSwitchButtons.deserialize(bytes);
        }
    }
    export class FlashDaliSceneSwitchButtonsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): FlashDaliSceneSwitchButtonsResponse {
            const message = new FlashDaliSceneSwitchButtonsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlashDaliSceneSwitchButtonsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlashDaliSceneSwitchButtonsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlashDaliSceneSwitchButtonsResponse {
            return FlashDaliSceneSwitchButtonsResponse.deserialize(bytes);
        }
    }
    export class ClearDaliSceneSwitchData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            force_clear?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("force_clear" in data && data.force_clear != undefined) {
                    this.force_clear = data.force_clear;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get force_clear() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set force_clear(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            force_clear?: boolean;
        }): ClearDaliSceneSwitchData {
            const message = new ClearDaliSceneSwitchData({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.force_clear != null) {
                message.force_clear = data.force_clear;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                force_clear?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.force_clear != null) {
                data.force_clear = this.force_clear;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.force_clear != false)
                writer.writeBool(2, this.force_clear);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearDaliSceneSwitchData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearDaliSceneSwitchData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.force_clear = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearDaliSceneSwitchData {
            return ClearDaliSceneSwitchData.deserialize(bytes);
        }
    }
    export class ClearDaliSceneSwitchDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ClearDaliSceneSwitchDataResponse {
            const message = new ClearDaliSceneSwitchDataResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearDaliSceneSwitchDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearDaliSceneSwitchDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearDaliSceneSwitchDataResponse {
            return ClearDaliSceneSwitchDataResponse.deserialize(bytes);
        }
    }
    export class ConfigureDaliSceneSwitchButtons extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            button?: DaliSceneSwitchButton[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("button" in data && data.button != undefined) {
                    this.button = data.button;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get button() {
            return pb_1.Message.getRepeatedWrapperField(this, DaliSceneSwitchButton, 2) as DaliSceneSwitchButton[];
        }
        set button(value: DaliSceneSwitchButton[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            button?: ReturnType<typeof DaliSceneSwitchButton.prototype.toObject>[];
        }): ConfigureDaliSceneSwitchButtons {
            const message = new ConfigureDaliSceneSwitchButtons({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.button != null) {
                message.button = data.button.map(item => DaliSceneSwitchButton.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                button?: ReturnType<typeof DaliSceneSwitchButton.prototype.toObject>[];
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.button != null) {
                data.button = this.button.map((item: DaliSceneSwitchButton) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.button.length)
                writer.writeRepeatedMessage(2, this.button, (item: DaliSceneSwitchButton) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureDaliSceneSwitchButtons {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureDaliSceneSwitchButtons();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.button, () => pb_1.Message.addToRepeatedWrapperField(message, 2, DaliSceneSwitchButton.deserialize(reader), DaliSceneSwitchButton));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureDaliSceneSwitchButtons {
            return ConfigureDaliSceneSwitchButtons.deserialize(bytes);
        }
    }
    export class ConfigureDaliSceneSwitchButtonsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureDaliSceneSwitchButtonsResponse {
            const message = new ConfigureDaliSceneSwitchButtonsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureDaliSceneSwitchButtonsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureDaliSceneSwitchButtonsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureDaliSceneSwitchButtonsResponse {
            return ConfigureDaliSceneSwitchButtonsResponse.deserialize(bytes);
        }
    }
    export class ReplaceDaliSceneSwitch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceDaliSceneSwitch {
            const message = new ReplaceDaliSceneSwitch({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDaliSceneSwitch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDaliSceneSwitch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDaliSceneSwitch {
            return ReplaceDaliSceneSwitch.deserialize(bytes);
        }
    }
    export class ReplaceDaliSceneSwitchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReplaceDaliSceneSwitchResponse {
            const message = new ReplaceDaliSceneSwitchResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDaliSceneSwitchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDaliSceneSwitchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDaliSceneSwitchResponse {
            return ReplaceDaliSceneSwitchResponse.deserialize(bytes);
        }
    }
}
