/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/groups/group_structures.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../devices/zigbee_curtain_controller";
import * as dependency_2 from "./../devices/zigbee_dimmable_driver";
import * as dependency_3 from "./../devices/zigbee_nondimmable_driver";
import * as dependency_4 from "./../devices/dali_dimmable_driver";
import * as dependency_5 from "./../devices/dali_color_tunable_driver";
import * as dependency_6 from "./../devices/dali_nondimmable_driver";
import * as dependency_7 from "./../devices/zigbee_inline_dimmer";
import * as dependency_8 from "./../devices/zigbee_rgbwwa_driver";
import * as dependency_9 from "./../devices/zigbee_embedded_switch";
import * as dependency_10 from "./../devices/device_constants";
import * as dependency_11 from "./../activity/activity_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.hub {
    export enum GROUP_TYPES {
        ZIGBEE_DIMMABLE = 0,
        DALI_DIMMABLE = 1,
        ZIGBEE_NON_DIMMABLE = 2,
        DALI_NON_DIMMABLE = 3,
        ZIGBEE_INLINE = 4,
        RGBWWA = 5,
        APPLIANCE_ON_OFF = 6,
        APPLIANCE_SINGLE_DIMMER = 7,
        APPLIANCE_FAN = 8,
        APPLIANCE_COLOR_TUNABLE = 9,
        DALI_COLOR_TUNABLE = 10
    }
    export enum GROUP_SYNC_STATES {
        GROUPINSYNC = 0,
        GROUPSYNCPENDING = 1,
        GROUPSYNCFAILED = 2
    }
    export enum GROUP_JOB_TYPES {
        GROUP_CONFIGURE = 0,
        GROUP_DELETE = 1
    }
    export class GroupIdentifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            area_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            group_id?: number;
            area_id?: number;
        }): GroupIdentifier {
            const message = new GroupIdentifier({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                area_id?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.area_id != 0)
                writer.writeUint32(2, this.area_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupIdentifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupIdentifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.area_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupIdentifier {
            return GroupIdentifier.deserialize(bytes);
        }
    }
    export class GroupState extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 12]];
        constructor(data?: any[] | ({
            group_identifier?: GroupIdentifier;
            group_type?: GROUP_TYPES;
        } & (({
            zdimmable_driver_state?: dependency_2.com.keus.hub.ZigbeeDimmableDriverState;
            ddimmable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            ddimmable_driver_state?: dependency_4.com.keus.hub.DaliDimmableDriverState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_identifier" in data && data.group_identifier != undefined) {
                    this.group_identifier = data.group_identifier;
                }
                if ("group_type" in data && data.group_type != undefined) {
                    this.group_type = data.group_type;
                }
                if ("zdimmable_driver_state" in data && data.zdimmable_driver_state != undefined) {
                    this.zdimmable_driver_state = data.zdimmable_driver_state;
                }
                if ("ddimmable_driver_state" in data && data.ddimmable_driver_state != undefined) {
                    this.ddimmable_driver_state = data.ddimmable_driver_state;
                }
            }
        }
        get group_identifier() {
            return pb_1.Message.getWrapperField(this, GroupIdentifier, 1) as GroupIdentifier;
        }
        set group_identifier(value: GroupIdentifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_group_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, GROUP_TYPES.ZIGBEE_DIMMABLE) as GROUP_TYPES;
        }
        set group_type(value: GROUP_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get zdimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverState, 10) as dependency_2.com.keus.hub.ZigbeeDimmableDriverState;
        }
        set zdimmable_driver_state(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_state() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get ddimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverState, 12) as dependency_4.com.keus.hub.DaliDimmableDriverState;
        }
        set ddimmable_driver_state(value: dependency_4.com.keus.hub.DaliDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_state() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get group_state() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_state" | "ddimmable_driver_state";
            } = {
                0: "none",
                10: "zdimmable_driver_state",
                12: "ddimmable_driver_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 12])];
        }
        static fromObject(data: {
            group_identifier?: ReturnType<typeof GroupIdentifier.prototype.toObject>;
            group_type?: GROUP_TYPES;
            zdimmable_driver_state?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverState.prototype.toObject>;
            ddimmable_driver_state?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverState.prototype.toObject>;
        }): GroupState {
            const message = new GroupState({});
            if (data.group_identifier != null) {
                message.group_identifier = GroupIdentifier.fromObject(data.group_identifier);
            }
            if (data.group_type != null) {
                message.group_type = data.group_type;
            }
            if (data.zdimmable_driver_state != null) {
                message.zdimmable_driver_state = dependency_2.com.keus.hub.ZigbeeDimmableDriverState.fromObject(data.zdimmable_driver_state);
            }
            if (data.ddimmable_driver_state != null) {
                message.ddimmable_driver_state = dependency_4.com.keus.hub.DaliDimmableDriverState.fromObject(data.ddimmable_driver_state);
            }
            return message;
        }
        toObject() {
            const data: {
                group_identifier?: ReturnType<typeof GroupIdentifier.prototype.toObject>;
                group_type?: GROUP_TYPES;
                zdimmable_driver_state?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverState.prototype.toObject>;
                ddimmable_driver_state?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverState.prototype.toObject>;
            } = {};
            if (this.group_identifier != null) {
                data.group_identifier = this.group_identifier.toObject();
            }
            if (this.group_type != null) {
                data.group_type = this.group_type;
            }
            if (this.zdimmable_driver_state != null) {
                data.zdimmable_driver_state = this.zdimmable_driver_state.toObject();
            }
            if (this.ddimmable_driver_state != null) {
                data.ddimmable_driver_state = this.ddimmable_driver_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group_identifier)
                writer.writeMessage(1, this.group_identifier, () => this.group_identifier.serialize(writer));
            if (this.group_type != GROUP_TYPES.ZIGBEE_DIMMABLE)
                writer.writeEnum(2, this.group_type);
            if (this.has_zdimmable_driver_state)
                writer.writeMessage(10, this.zdimmable_driver_state, () => this.zdimmable_driver_state.serialize(writer));
            if (this.has_ddimmable_driver_state)
                writer.writeMessage(12, this.ddimmable_driver_state, () => this.ddimmable_driver_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group_identifier, () => message.group_identifier = GroupIdentifier.deserialize(reader));
                        break;
                    case 2:
                        message.group_type = reader.readEnum();
                        break;
                    case 10:
                        reader.readMessage(message.zdimmable_driver_state, () => message.zdimmable_driver_state = dependency_2.com.keus.hub.ZigbeeDimmableDriverState.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.ddimmable_driver_state, () => message.ddimmable_driver_state = dependency_4.com.keus.hub.DaliDimmableDriverState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupState {
            return GroupState.deserialize(bytes);
        }
    }
    export class GroupSyncState extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11]];
        constructor(data?: any[] | ({
            sync_state?: GROUP_SYNC_STATES;
            last_request_id?: string;
            last_request_type?: GROUP_JOB_TYPES;
            last_request_time?: number;
            synced_devices?: string[];
            job_type_name?: dependency_11.com.keus.hub.JOB_TYPES_NAME;
            job_message?: string;
        } & (({
            config_params?: ConfigureGroupProperties;
            delete_params?: never;
        } | {
            config_params?: never;
            delete_params?: DeleteGroup;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sync_state" in data && data.sync_state != undefined) {
                    this.sync_state = data.sync_state;
                }
                if ("last_request_id" in data && data.last_request_id != undefined) {
                    this.last_request_id = data.last_request_id;
                }
                if ("last_request_type" in data && data.last_request_type != undefined) {
                    this.last_request_type = data.last_request_type;
                }
                if ("config_params" in data && data.config_params != undefined) {
                    this.config_params = data.config_params;
                }
                if ("delete_params" in data && data.delete_params != undefined) {
                    this.delete_params = data.delete_params;
                }
                if ("last_request_time" in data && data.last_request_time != undefined) {
                    this.last_request_time = data.last_request_time;
                }
                if ("synced_devices" in data && data.synced_devices != undefined) {
                    this.synced_devices = data.synced_devices;
                }
                if ("job_type_name" in data && data.job_type_name != undefined) {
                    this.job_type_name = data.job_type_name;
                }
                if ("job_message" in data && data.job_message != undefined) {
                    this.job_message = data.job_message;
                }
            }
        }
        get sync_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, GROUP_SYNC_STATES.GROUPINSYNC) as GROUP_SYNC_STATES;
        }
        set sync_state(value: GROUP_SYNC_STATES) {
            pb_1.Message.setField(this, 1, value);
        }
        get last_request_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set last_request_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_request_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, GROUP_JOB_TYPES.GROUP_CONFIGURE) as GROUP_JOB_TYPES;
        }
        set last_request_type(value: GROUP_JOB_TYPES) {
            pb_1.Message.setField(this, 3, value);
        }
        get config_params() {
            return pb_1.Message.getWrapperField(this, ConfigureGroupProperties, 10) as ConfigureGroupProperties;
        }
        set config_params(value: ConfigureGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_config_params() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get delete_params() {
            return pb_1.Message.getWrapperField(this, DeleteGroup, 11) as DeleteGroup;
        }
        set delete_params(value: DeleteGroup) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_delete_params() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get last_request_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set last_request_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get synced_devices() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set synced_devices(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get job_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_11.com.keus.hub.JOB_TYPES_NAME.NO_JOB_RUNNING) as dependency_11.com.keus.hub.JOB_TYPES_NAME;
        }
        set job_type_name(value: dependency_11.com.keus.hub.JOB_TYPES_NAME) {
            pb_1.Message.setField(this, 6, value);
        }
        get job_message() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set job_message(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get last_request_params() {
            const cases: {
                [index: number]: "none" | "config_params" | "delete_params";
            } = {
                0: "none",
                10: "config_params",
                11: "delete_params"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11])];
        }
        static fromObject(data: {
            sync_state?: GROUP_SYNC_STATES;
            last_request_id?: string;
            last_request_type?: GROUP_JOB_TYPES;
            config_params?: ReturnType<typeof ConfigureGroupProperties.prototype.toObject>;
            delete_params?: ReturnType<typeof DeleteGroup.prototype.toObject>;
            last_request_time?: number;
            synced_devices?: string[];
            job_type_name?: dependency_11.com.keus.hub.JOB_TYPES_NAME;
            job_message?: string;
        }): GroupSyncState {
            const message = new GroupSyncState({});
            if (data.sync_state != null) {
                message.sync_state = data.sync_state;
            }
            if (data.last_request_id != null) {
                message.last_request_id = data.last_request_id;
            }
            if (data.last_request_type != null) {
                message.last_request_type = data.last_request_type;
            }
            if (data.config_params != null) {
                message.config_params = ConfigureGroupProperties.fromObject(data.config_params);
            }
            if (data.delete_params != null) {
                message.delete_params = DeleteGroup.fromObject(data.delete_params);
            }
            if (data.last_request_time != null) {
                message.last_request_time = data.last_request_time;
            }
            if (data.synced_devices != null) {
                message.synced_devices = data.synced_devices;
            }
            if (data.job_type_name != null) {
                message.job_type_name = data.job_type_name;
            }
            if (data.job_message != null) {
                message.job_message = data.job_message;
            }
            return message;
        }
        toObject() {
            const data: {
                sync_state?: GROUP_SYNC_STATES;
                last_request_id?: string;
                last_request_type?: GROUP_JOB_TYPES;
                config_params?: ReturnType<typeof ConfigureGroupProperties.prototype.toObject>;
                delete_params?: ReturnType<typeof DeleteGroup.prototype.toObject>;
                last_request_time?: number;
                synced_devices?: string[];
                job_type_name?: dependency_11.com.keus.hub.JOB_TYPES_NAME;
                job_message?: string;
            } = {};
            if (this.sync_state != null) {
                data.sync_state = this.sync_state;
            }
            if (this.last_request_id != null) {
                data.last_request_id = this.last_request_id;
            }
            if (this.last_request_type != null) {
                data.last_request_type = this.last_request_type;
            }
            if (this.config_params != null) {
                data.config_params = this.config_params.toObject();
            }
            if (this.delete_params != null) {
                data.delete_params = this.delete_params.toObject();
            }
            if (this.last_request_time != null) {
                data.last_request_time = this.last_request_time;
            }
            if (this.synced_devices != null) {
                data.synced_devices = this.synced_devices;
            }
            if (this.job_type_name != null) {
                data.job_type_name = this.job_type_name;
            }
            if (this.job_message != null) {
                data.job_message = this.job_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sync_state != GROUP_SYNC_STATES.GROUPINSYNC)
                writer.writeEnum(1, this.sync_state);
            if (this.last_request_id.length)
                writer.writeString(2, this.last_request_id);
            if (this.last_request_type != GROUP_JOB_TYPES.GROUP_CONFIGURE)
                writer.writeEnum(3, this.last_request_type);
            if (this.has_config_params)
                writer.writeMessage(10, this.config_params, () => this.config_params.serialize(writer));
            if (this.has_delete_params)
                writer.writeMessage(11, this.delete_params, () => this.delete_params.serialize(writer));
            if (this.last_request_time != 0)
                writer.writeUint64(4, this.last_request_time);
            if (this.synced_devices.length)
                writer.writeRepeatedString(5, this.synced_devices);
            if (this.job_type_name != dependency_11.com.keus.hub.JOB_TYPES_NAME.NO_JOB_RUNNING)
                writer.writeEnum(6, this.job_type_name);
            if (this.job_message.length)
                writer.writeString(7, this.job_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupSyncState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupSyncState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sync_state = reader.readEnum();
                        break;
                    case 2:
                        message.last_request_id = reader.readString();
                        break;
                    case 3:
                        message.last_request_type = reader.readEnum();
                        break;
                    case 10:
                        reader.readMessage(message.config_params, () => message.config_params = ConfigureGroupProperties.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.delete_params, () => message.delete_params = DeleteGroup.deserialize(reader));
                        break;
                    case 4:
                        message.last_request_time = reader.readUint64();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.job_type_name = reader.readEnum();
                        break;
                    case 7:
                        message.job_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupSyncState {
            return GroupSyncState.deserialize(bytes);
        }
    }
    export class Group extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]];
        constructor(data?: any[] | ({
            group_id?: number;
            group_name?: string;
            group_type?: GROUP_TYPES;
            group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            group_section?: string;
            group_room?: string;
            is_hidden?: boolean;
            is_configured?: boolean;
            group_voice_name?: string;
            devices?: string[];
            group_sync_state?: GroupSyncState;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
        } & (({
            zdimmable_driver_state?: dependency_2.com.keus.hub.ZigbeeDimmableDriverState;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: dependency_4.com.keus.hub.DaliDimmableDriverState;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: dependency_6.com.keus.hub.DaliNonDimmableDriverState;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaState;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: dependency_7.com.keus.hub.ZigbeeInlineDimmerState;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: dependency_9.com.keus.hub.OnOffApplianceState;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: dependency_9.com.keus.hub.SingleDimmerApplianceState;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: dependency_9.com.keus.hub.FanApplianceState;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: dependency_9.com.keus.hub.ColorTunableApplianceState;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zrgbwwa_state?: never;
            zinline_dimmer_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: dependency_5.com.keus.hub.DaliColorTunableDriverState;
        }) | ({
            zdimmable_driver_properties?: dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: dependency_4.com.keus.hub.DaliDimmableDriverProperties;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: dependency_6.com.keus.hub.DaliNonDimmableDriverProperties;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: dependency_9.com.keus.hub.OnOffApplianceGroupProperties;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: dependency_9.com.keus.hub.FanApplianceGroupProperties;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zrgbwwa_properties?: never;
            zinline_dimmer_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("group_type" in data && data.group_type != undefined) {
                    this.group_type = data.group_type;
                }
                if ("group_icon_type" in data && data.group_icon_type != undefined) {
                    this.group_icon_type = data.group_icon_type;
                }
                if ("group_section" in data && data.group_section != undefined) {
                    this.group_section = data.group_section;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
                if ("is_configured" in data && data.is_configured != undefined) {
                    this.is_configured = data.is_configured;
                }
                if ("group_voice_name" in data && data.group_voice_name != undefined) {
                    this.group_voice_name = data.group_voice_name;
                }
                if ("devices" in data && data.devices != undefined) {
                    this.devices = data.devices;
                }
                if ("zdimmable_driver_state" in data && data.zdimmable_driver_state != undefined) {
                    this.zdimmable_driver_state = data.zdimmable_driver_state;
                }
                if ("znondimmable_driver_state" in data && data.znondimmable_driver_state != undefined) {
                    this.znondimmable_driver_state = data.znondimmable_driver_state;
                }
                if ("ddimmable_driver_state" in data && data.ddimmable_driver_state != undefined) {
                    this.ddimmable_driver_state = data.ddimmable_driver_state;
                }
                if ("dnondimmable_driver_state" in data && data.dnondimmable_driver_state != undefined) {
                    this.dnondimmable_driver_state = data.dnondimmable_driver_state;
                }
                if ("zrgbwwa_state" in data && data.zrgbwwa_state != undefined) {
                    this.zrgbwwa_state = data.zrgbwwa_state;
                }
                if ("zinline_dimmer_state" in data && data.zinline_dimmer_state != undefined) {
                    this.zinline_dimmer_state = data.zinline_dimmer_state;
                }
                if ("app_onff_state" in data && data.app_onff_state != undefined) {
                    this.app_onff_state = data.app_onff_state;
                }
                if ("app_single_dimmer_state" in data && data.app_single_dimmer_state != undefined) {
                    this.app_single_dimmer_state = data.app_single_dimmer_state;
                }
                if ("app_fan_state" in data && data.app_fan_state != undefined) {
                    this.app_fan_state = data.app_fan_state;
                }
                if ("app_color_tunable_state" in data && data.app_color_tunable_state != undefined) {
                    this.app_color_tunable_state = data.app_color_tunable_state;
                }
                if ("dcolortunable_driver_state" in data && data.dcolortunable_driver_state != undefined) {
                    this.dcolortunable_driver_state = data.dcolortunable_driver_state;
                }
                if ("zdimmable_driver_properties" in data && data.zdimmable_driver_properties != undefined) {
                    this.zdimmable_driver_properties = data.zdimmable_driver_properties;
                }
                if ("znondimmable_driver_properties" in data && data.znondimmable_driver_properties != undefined) {
                    this.znondimmable_driver_properties = data.znondimmable_driver_properties;
                }
                if ("ddimmable_driver_properties" in data && data.ddimmable_driver_properties != undefined) {
                    this.ddimmable_driver_properties = data.ddimmable_driver_properties;
                }
                if ("dnondimmable_driver_properties" in data && data.dnondimmable_driver_properties != undefined) {
                    this.dnondimmable_driver_properties = data.dnondimmable_driver_properties;
                }
                if ("zrgbwwa_properties" in data && data.zrgbwwa_properties != undefined) {
                    this.zrgbwwa_properties = data.zrgbwwa_properties;
                }
                if ("zinline_dimmer_properties" in data && data.zinline_dimmer_properties != undefined) {
                    this.zinline_dimmer_properties = data.zinline_dimmer_properties;
                }
                if ("onoff_appliance_properties" in data && data.onoff_appliance_properties != undefined) {
                    this.onoff_appliance_properties = data.onoff_appliance_properties;
                }
                if ("fan_appliance_properties" in data && data.fan_appliance_properties != undefined) {
                    this.fan_appliance_properties = data.fan_appliance_properties;
                }
                if ("single_dimmer_appliance_properties" in data && data.single_dimmer_appliance_properties != undefined) {
                    this.single_dimmer_appliance_properties = data.single_dimmer_appliance_properties;
                }
                if ("color_tunable_appliance_properties" in data && data.color_tunable_appliance_properties != undefined) {
                    this.color_tunable_appliance_properties = data.color_tunable_appliance_properties;
                }
                if ("dcolortunable_driver_properties" in data && data.dcolortunable_driver_properties != undefined) {
                    this.dcolortunable_driver_properties = data.dcolortunable_driver_properties;
                }
                if ("group_sync_state" in data && data.group_sync_state != undefined) {
                    this.group_sync_state = data.group_sync_state;
                }
                if ("last_update_time" in data && data.last_update_time != undefined) {
                    this.last_update_time = data.last_update_time;
                }
                if ("last_update_by" in data && data.last_update_by != undefined) {
                    this.last_update_by = data.last_update_by;
                }
                if ("last_update_user" in data && data.last_update_user != undefined) {
                    this.last_update_user = data.last_update_user;
                }
                if ("last_update_source" in data && data.last_update_source != undefined) {
                    this.last_update_source = data.last_update_source;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, GROUP_TYPES.ZIGBEE_DIMMABLE) as GROUP_TYPES;
        }
        set group_type(value: GROUP_TYPES) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_icon_type() {
            return pb_1.Message.getFieldWithDefault(this, 55, dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set group_icon_type(value: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 55, value);
        }
        get group_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set group_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get is_configured() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set is_configured(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get group_voice_name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set group_voice_name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get devices() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set devices(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get zdimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverState, 10) as dependency_2.com.keus.hub.ZigbeeDimmableDriverState;
        }
        set zdimmable_driver_state(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_state() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get znondimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState, 11) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState;
        }
        set znondimmable_driver_state(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_state() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get ddimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverState, 12) as dependency_4.com.keus.hub.DaliDimmableDriverState;
        }
        set ddimmable_driver_state(value: dependency_4.com.keus.hub.DaliDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_state() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get dnondimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverState, 13) as dependency_6.com.keus.hub.DaliNonDimmableDriverState;
        }
        set dnondimmable_driver_state(value: dependency_6.com.keus.hub.DaliNonDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_state() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zrgbwwa_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaState, 14) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaState;
        }
        set zrgbwwa_state(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaState) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zrgbwwa_state() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get zinline_dimmer_state() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.hub.ZigbeeInlineDimmerState, 15) as dependency_7.com.keus.hub.ZigbeeInlineDimmerState;
        }
        set zinline_dimmer_state(value: dependency_7.com.keus.hub.ZigbeeInlineDimmerState) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_zinline_dimmer_state() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get app_onff_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.OnOffApplianceState, 16) as dependency_9.com.keus.hub.OnOffApplianceState;
        }
        set app_onff_state(value: dependency_9.com.keus.hub.OnOffApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_app_onff_state() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get app_single_dimmer_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.SingleDimmerApplianceState, 17) as dependency_9.com.keus.hub.SingleDimmerApplianceState;
        }
        set app_single_dimmer_state(value: dependency_9.com.keus.hub.SingleDimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_app_single_dimmer_state() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get app_fan_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.FanApplianceState, 18) as dependency_9.com.keus.hub.FanApplianceState;
        }
        set app_fan_state(value: dependency_9.com.keus.hub.FanApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_app_fan_state() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get app_color_tunable_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.ColorTunableApplianceState, 19) as dependency_9.com.keus.hub.ColorTunableApplianceState;
        }
        set app_color_tunable_state(value: dependency_9.com.keus.hub.ColorTunableApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_app_color_tunable_state() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get dcolortunable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverState, 20) as dependency_5.com.keus.hub.DaliColorTunableDriverState;
        }
        set dcolortunable_driver_state(value: dependency_5.com.keus.hub.DaliColorTunableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_state() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get zdimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties, 30) as dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties;
        }
        set zdimmable_driver_properties(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[1], value);
        }
        get has_zdimmable_driver_properties() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get znondimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties, 31) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties;
        }
        set znondimmable_driver_properties(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 31, this.#one_of_decls[1], value);
        }
        get has_znondimmable_driver_properties() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get ddimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverProperties, 32) as dependency_4.com.keus.hub.DaliDimmableDriverProperties;
        }
        set ddimmable_driver_properties(value: dependency_4.com.keus.hub.DaliDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 32, this.#one_of_decls[1], value);
        }
        get has_ddimmable_driver_properties() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get dnondimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverProperties, 33) as dependency_6.com.keus.hub.DaliNonDimmableDriverProperties;
        }
        set dnondimmable_driver_properties(value: dependency_6.com.keus.hub.DaliNonDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 33, this.#one_of_decls[1], value);
        }
        get has_dnondimmable_driver_properties() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get zrgbwwa_properties() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties, 34) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties;
        }
        set zrgbwwa_properties(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties) {
            pb_1.Message.setOneofWrapperField(this, 34, this.#one_of_decls[1], value);
        }
        get has_zrgbwwa_properties() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get zinline_dimmer_properties() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties, 35) as dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties;
        }
        set zinline_dimmer_properties(value: dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties) {
            pb_1.Message.setOneofWrapperField(this, 35, this.#one_of_decls[1], value);
        }
        get has_zinline_dimmer_properties() {
            return pb_1.Message.getField(this, 35) != null;
        }
        get onoff_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.OnOffApplianceGroupProperties, 36) as dependency_9.com.keus.hub.OnOffApplianceGroupProperties;
        }
        set onoff_appliance_properties(value: dependency_9.com.keus.hub.OnOffApplianceGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 36, this.#one_of_decls[1], value);
        }
        get has_onoff_appliance_properties() {
            return pb_1.Message.getField(this, 36) != null;
        }
        get fan_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.FanApplianceGroupProperties, 37) as dependency_9.com.keus.hub.FanApplianceGroupProperties;
        }
        set fan_appliance_properties(value: dependency_9.com.keus.hub.FanApplianceGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 37, this.#one_of_decls[1], value);
        }
        get has_fan_appliance_properties() {
            return pb_1.Message.getField(this, 37) != null;
        }
        get single_dimmer_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties, 38) as dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties;
        }
        set single_dimmer_appliance_properties(value: dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 38, this.#one_of_decls[1], value);
        }
        get has_single_dimmer_appliance_properties() {
            return pb_1.Message.getField(this, 38) != null;
        }
        get color_tunable_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties, 39) as dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties;
        }
        set color_tunable_appliance_properties(value: dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 39, this.#one_of_decls[1], value);
        }
        get has_color_tunable_appliance_properties() {
            return pb_1.Message.getField(this, 39) != null;
        }
        get dcolortunable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties, 40) as dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties;
        }
        set dcolortunable_driver_properties(value: dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 40, this.#one_of_decls[1], value);
        }
        get has_dcolortunable_driver_properties() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get group_sync_state() {
            return pb_1.Message.getWrapperField(this, GroupSyncState, 54) as GroupSyncState;
        }
        set group_sync_state(value: GroupSyncState) {
            pb_1.Message.setWrapperField(this, 54, value);
        }
        get has_group_sync_state() {
            return pb_1.Message.getField(this, 54) != null;
        }
        get last_update_time() {
            return pb_1.Message.getFieldWithDefault(this, 50, 0) as number;
        }
        set last_update_time(value: number) {
            pb_1.Message.setField(this, 50, value);
        }
        get last_update_by() {
            return pb_1.Message.getFieldWithDefault(this, 51, "") as string;
        }
        set last_update_by(value: string) {
            pb_1.Message.setField(this, 51, value);
        }
        get last_update_user() {
            return pb_1.Message.getFieldWithDefault(this, 52, "") as string;
        }
        set last_update_user(value: string) {
            pb_1.Message.setField(this, 52, value);
        }
        get last_update_source() {
            return pb_1.Message.getFieldWithDefault(this, 53, "") as string;
        }
        set last_update_source(value: string) {
            pb_1.Message.setField(this, 53, value);
        }
        get group_state() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_state" | "znondimmable_driver_state" | "ddimmable_driver_state" | "dnondimmable_driver_state" | "zrgbwwa_state" | "zinline_dimmer_state" | "app_onff_state" | "app_single_dimmer_state" | "app_fan_state" | "app_color_tunable_state" | "dcolortunable_driver_state";
            } = {
                0: "none",
                10: "zdimmable_driver_state",
                11: "znondimmable_driver_state",
                12: "ddimmable_driver_state",
                13: "dnondimmable_driver_state",
                14: "zrgbwwa_state",
                15: "zinline_dimmer_state",
                16: "app_onff_state",
                17: "app_single_dimmer_state",
                18: "app_fan_state",
                19: "app_color_tunable_state",
                20: "dcolortunable_driver_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])];
        }
        get group_properties() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_properties" | "znondimmable_driver_properties" | "ddimmable_driver_properties" | "dnondimmable_driver_properties" | "zrgbwwa_properties" | "zinline_dimmer_properties" | "onoff_appliance_properties" | "fan_appliance_properties" | "single_dimmer_appliance_properties" | "color_tunable_appliance_properties" | "dcolortunable_driver_properties";
            } = {
                0: "none",
                30: "zdimmable_driver_properties",
                31: "znondimmable_driver_properties",
                32: "ddimmable_driver_properties",
                33: "dnondimmable_driver_properties",
                34: "zrgbwwa_properties",
                35: "zinline_dimmer_properties",
                36: "onoff_appliance_properties",
                37: "fan_appliance_properties",
                38: "single_dimmer_appliance_properties",
                39: "color_tunable_appliance_properties",
                40: "dcolortunable_driver_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])];
        }
        static fromObject(data: {
            group_id?: number;
            group_name?: string;
            group_type?: GROUP_TYPES;
            group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            group_section?: string;
            group_room?: string;
            is_hidden?: boolean;
            is_configured?: boolean;
            group_voice_name?: string;
            devices?: string[];
            zdimmable_driver_state?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverState.prototype.toObject>;
            znondimmable_driver_state?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.prototype.toObject>;
            ddimmable_driver_state?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverState.prototype.toObject>;
            dnondimmable_driver_state?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverState.prototype.toObject>;
            zrgbwwa_state?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaState.prototype.toObject>;
            zinline_dimmer_state?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerState.prototype.toObject>;
            app_onff_state?: ReturnType<typeof dependency_9.com.keus.hub.OnOffApplianceState.prototype.toObject>;
            app_single_dimmer_state?: ReturnType<typeof dependency_9.com.keus.hub.SingleDimmerApplianceState.prototype.toObject>;
            app_fan_state?: ReturnType<typeof dependency_9.com.keus.hub.FanApplianceState.prototype.toObject>;
            app_color_tunable_state?: ReturnType<typeof dependency_9.com.keus.hub.ColorTunableApplianceState.prototype.toObject>;
            dcolortunable_driver_state?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverState.prototype.toObject>;
            zdimmable_driver_properties?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.prototype.toObject>;
            znondimmable_driver_properties?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.prototype.toObject>;
            ddimmable_driver_properties?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
            dnondimmable_driver_properties?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.prototype.toObject>;
            zrgbwwa_properties?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties.prototype.toObject>;
            zinline_dimmer_properties?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.prototype.toObject>;
            onoff_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.OnOffApplianceGroupProperties.prototype.toObject>;
            fan_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.FanApplianceGroupProperties.prototype.toObject>;
            single_dimmer_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties.prototype.toObject>;
            color_tunable_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties.prototype.toObject>;
            dcolortunable_driver_properties?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties.prototype.toObject>;
            group_sync_state?: ReturnType<typeof GroupSyncState.prototype.toObject>;
            last_update_time?: number;
            last_update_by?: string;
            last_update_user?: string;
            last_update_source?: string;
        }): Group {
            const message = new Group({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.group_type != null) {
                message.group_type = data.group_type;
            }
            if (data.group_icon_type != null) {
                message.group_icon_type = data.group_icon_type;
            }
            if (data.group_section != null) {
                message.group_section = data.group_section;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            if (data.is_configured != null) {
                message.is_configured = data.is_configured;
            }
            if (data.group_voice_name != null) {
                message.group_voice_name = data.group_voice_name;
            }
            if (data.devices != null) {
                message.devices = data.devices;
            }
            if (data.zdimmable_driver_state != null) {
                message.zdimmable_driver_state = dependency_2.com.keus.hub.ZigbeeDimmableDriverState.fromObject(data.zdimmable_driver_state);
            }
            if (data.znondimmable_driver_state != null) {
                message.znondimmable_driver_state = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.fromObject(data.znondimmable_driver_state);
            }
            if (data.ddimmable_driver_state != null) {
                message.ddimmable_driver_state = dependency_4.com.keus.hub.DaliDimmableDriverState.fromObject(data.ddimmable_driver_state);
            }
            if (data.dnondimmable_driver_state != null) {
                message.dnondimmable_driver_state = dependency_6.com.keus.hub.DaliNonDimmableDriverState.fromObject(data.dnondimmable_driver_state);
            }
            if (data.zrgbwwa_state != null) {
                message.zrgbwwa_state = dependency_8.com.keus.hub.GroupZigbeeRgbwwaState.fromObject(data.zrgbwwa_state);
            }
            if (data.zinline_dimmer_state != null) {
                message.zinline_dimmer_state = dependency_7.com.keus.hub.ZigbeeInlineDimmerState.fromObject(data.zinline_dimmer_state);
            }
            if (data.app_onff_state != null) {
                message.app_onff_state = dependency_9.com.keus.hub.OnOffApplianceState.fromObject(data.app_onff_state);
            }
            if (data.app_single_dimmer_state != null) {
                message.app_single_dimmer_state = dependency_9.com.keus.hub.SingleDimmerApplianceState.fromObject(data.app_single_dimmer_state);
            }
            if (data.app_fan_state != null) {
                message.app_fan_state = dependency_9.com.keus.hub.FanApplianceState.fromObject(data.app_fan_state);
            }
            if (data.app_color_tunable_state != null) {
                message.app_color_tunable_state = dependency_9.com.keus.hub.ColorTunableApplianceState.fromObject(data.app_color_tunable_state);
            }
            if (data.dcolortunable_driver_state != null) {
                message.dcolortunable_driver_state = dependency_5.com.keus.hub.DaliColorTunableDriverState.fromObject(data.dcolortunable_driver_state);
            }
            if (data.zdimmable_driver_properties != null) {
                message.zdimmable_driver_properties = dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.fromObject(data.zdimmable_driver_properties);
            }
            if (data.znondimmable_driver_properties != null) {
                message.znondimmable_driver_properties = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.fromObject(data.znondimmable_driver_properties);
            }
            if (data.ddimmable_driver_properties != null) {
                message.ddimmable_driver_properties = dependency_4.com.keus.hub.DaliDimmableDriverProperties.fromObject(data.ddimmable_driver_properties);
            }
            if (data.dnondimmable_driver_properties != null) {
                message.dnondimmable_driver_properties = dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.fromObject(data.dnondimmable_driver_properties);
            }
            if (data.zrgbwwa_properties != null) {
                message.zrgbwwa_properties = dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties.fromObject(data.zrgbwwa_properties);
            }
            if (data.zinline_dimmer_properties != null) {
                message.zinline_dimmer_properties = dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.fromObject(data.zinline_dimmer_properties);
            }
            if (data.onoff_appliance_properties != null) {
                message.onoff_appliance_properties = dependency_9.com.keus.hub.OnOffApplianceGroupProperties.fromObject(data.onoff_appliance_properties);
            }
            if (data.fan_appliance_properties != null) {
                message.fan_appliance_properties = dependency_9.com.keus.hub.FanApplianceGroupProperties.fromObject(data.fan_appliance_properties);
            }
            if (data.single_dimmer_appliance_properties != null) {
                message.single_dimmer_appliance_properties = dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties.fromObject(data.single_dimmer_appliance_properties);
            }
            if (data.color_tunable_appliance_properties != null) {
                message.color_tunable_appliance_properties = dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties.fromObject(data.color_tunable_appliance_properties);
            }
            if (data.dcolortunable_driver_properties != null) {
                message.dcolortunable_driver_properties = dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties.fromObject(data.dcolortunable_driver_properties);
            }
            if (data.group_sync_state != null) {
                message.group_sync_state = GroupSyncState.fromObject(data.group_sync_state);
            }
            if (data.last_update_time != null) {
                message.last_update_time = data.last_update_time;
            }
            if (data.last_update_by != null) {
                message.last_update_by = data.last_update_by;
            }
            if (data.last_update_user != null) {
                message.last_update_user = data.last_update_user;
            }
            if (data.last_update_source != null) {
                message.last_update_source = data.last_update_source;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_name?: string;
                group_type?: GROUP_TYPES;
                group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
                group_section?: string;
                group_room?: string;
                is_hidden?: boolean;
                is_configured?: boolean;
                group_voice_name?: string;
                devices?: string[];
                zdimmable_driver_state?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverState.prototype.toObject>;
                znondimmable_driver_state?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.prototype.toObject>;
                ddimmable_driver_state?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverState.prototype.toObject>;
                dnondimmable_driver_state?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverState.prototype.toObject>;
                zrgbwwa_state?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaState.prototype.toObject>;
                zinline_dimmer_state?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerState.prototype.toObject>;
                app_onff_state?: ReturnType<typeof dependency_9.com.keus.hub.OnOffApplianceState.prototype.toObject>;
                app_single_dimmer_state?: ReturnType<typeof dependency_9.com.keus.hub.SingleDimmerApplianceState.prototype.toObject>;
                app_fan_state?: ReturnType<typeof dependency_9.com.keus.hub.FanApplianceState.prototype.toObject>;
                app_color_tunable_state?: ReturnType<typeof dependency_9.com.keus.hub.ColorTunableApplianceState.prototype.toObject>;
                dcolortunable_driver_state?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverState.prototype.toObject>;
                zdimmable_driver_properties?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.prototype.toObject>;
                znondimmable_driver_properties?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.prototype.toObject>;
                ddimmable_driver_properties?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
                dnondimmable_driver_properties?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.prototype.toObject>;
                zrgbwwa_properties?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties.prototype.toObject>;
                zinline_dimmer_properties?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.prototype.toObject>;
                onoff_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.OnOffApplianceGroupProperties.prototype.toObject>;
                fan_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.FanApplianceGroupProperties.prototype.toObject>;
                single_dimmer_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties.prototype.toObject>;
                color_tunable_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties.prototype.toObject>;
                dcolortunable_driver_properties?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties.prototype.toObject>;
                group_sync_state?: ReturnType<typeof GroupSyncState.prototype.toObject>;
                last_update_time?: number;
                last_update_by?: string;
                last_update_user?: string;
                last_update_source?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.group_type != null) {
                data.group_type = this.group_type;
            }
            if (this.group_icon_type != null) {
                data.group_icon_type = this.group_icon_type;
            }
            if (this.group_section != null) {
                data.group_section = this.group_section;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            if (this.is_configured != null) {
                data.is_configured = this.is_configured;
            }
            if (this.group_voice_name != null) {
                data.group_voice_name = this.group_voice_name;
            }
            if (this.devices != null) {
                data.devices = this.devices;
            }
            if (this.zdimmable_driver_state != null) {
                data.zdimmable_driver_state = this.zdimmable_driver_state.toObject();
            }
            if (this.znondimmable_driver_state != null) {
                data.znondimmable_driver_state = this.znondimmable_driver_state.toObject();
            }
            if (this.ddimmable_driver_state != null) {
                data.ddimmable_driver_state = this.ddimmable_driver_state.toObject();
            }
            if (this.dnondimmable_driver_state != null) {
                data.dnondimmable_driver_state = this.dnondimmable_driver_state.toObject();
            }
            if (this.zrgbwwa_state != null) {
                data.zrgbwwa_state = this.zrgbwwa_state.toObject();
            }
            if (this.zinline_dimmer_state != null) {
                data.zinline_dimmer_state = this.zinline_dimmer_state.toObject();
            }
            if (this.app_onff_state != null) {
                data.app_onff_state = this.app_onff_state.toObject();
            }
            if (this.app_single_dimmer_state != null) {
                data.app_single_dimmer_state = this.app_single_dimmer_state.toObject();
            }
            if (this.app_fan_state != null) {
                data.app_fan_state = this.app_fan_state.toObject();
            }
            if (this.app_color_tunable_state != null) {
                data.app_color_tunable_state = this.app_color_tunable_state.toObject();
            }
            if (this.dcolortunable_driver_state != null) {
                data.dcolortunable_driver_state = this.dcolortunable_driver_state.toObject();
            }
            if (this.zdimmable_driver_properties != null) {
                data.zdimmable_driver_properties = this.zdimmable_driver_properties.toObject();
            }
            if (this.znondimmable_driver_properties != null) {
                data.znondimmable_driver_properties = this.znondimmable_driver_properties.toObject();
            }
            if (this.ddimmable_driver_properties != null) {
                data.ddimmable_driver_properties = this.ddimmable_driver_properties.toObject();
            }
            if (this.dnondimmable_driver_properties != null) {
                data.dnondimmable_driver_properties = this.dnondimmable_driver_properties.toObject();
            }
            if (this.zrgbwwa_properties != null) {
                data.zrgbwwa_properties = this.zrgbwwa_properties.toObject();
            }
            if (this.zinline_dimmer_properties != null) {
                data.zinline_dimmer_properties = this.zinline_dimmer_properties.toObject();
            }
            if (this.onoff_appliance_properties != null) {
                data.onoff_appliance_properties = this.onoff_appliance_properties.toObject();
            }
            if (this.fan_appliance_properties != null) {
                data.fan_appliance_properties = this.fan_appliance_properties.toObject();
            }
            if (this.single_dimmer_appliance_properties != null) {
                data.single_dimmer_appliance_properties = this.single_dimmer_appliance_properties.toObject();
            }
            if (this.color_tunable_appliance_properties != null) {
                data.color_tunable_appliance_properties = this.color_tunable_appliance_properties.toObject();
            }
            if (this.dcolortunable_driver_properties != null) {
                data.dcolortunable_driver_properties = this.dcolortunable_driver_properties.toObject();
            }
            if (this.group_sync_state != null) {
                data.group_sync_state = this.group_sync_state.toObject();
            }
            if (this.last_update_time != null) {
                data.last_update_time = this.last_update_time;
            }
            if (this.last_update_by != null) {
                data.last_update_by = this.last_update_by;
            }
            if (this.last_update_user != null) {
                data.last_update_user = this.last_update_user;
            }
            if (this.last_update_source != null) {
                data.last_update_source = this.last_update_source;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_name.length)
                writer.writeString(2, this.group_name);
            if (this.group_type != GROUP_TYPES.ZIGBEE_DIMMABLE)
                writer.writeEnum(3, this.group_type);
            if (this.group_icon_type != dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(55, this.group_icon_type);
            if (this.group_section.length)
                writer.writeString(4, this.group_section);
            if (this.group_room.length)
                writer.writeString(5, this.group_room);
            if (this.is_hidden != false)
                writer.writeBool(6, this.is_hidden);
            if (this.is_configured != false)
                writer.writeBool(7, this.is_configured);
            if (this.group_voice_name.length)
                writer.writeString(8, this.group_voice_name);
            if (this.devices.length)
                writer.writeRepeatedString(9, this.devices);
            if (this.has_zdimmable_driver_state)
                writer.writeMessage(10, this.zdimmable_driver_state, () => this.zdimmable_driver_state.serialize(writer));
            if (this.has_znondimmable_driver_state)
                writer.writeMessage(11, this.znondimmable_driver_state, () => this.znondimmable_driver_state.serialize(writer));
            if (this.has_ddimmable_driver_state)
                writer.writeMessage(12, this.ddimmable_driver_state, () => this.ddimmable_driver_state.serialize(writer));
            if (this.has_dnondimmable_driver_state)
                writer.writeMessage(13, this.dnondimmable_driver_state, () => this.dnondimmable_driver_state.serialize(writer));
            if (this.has_zrgbwwa_state)
                writer.writeMessage(14, this.zrgbwwa_state, () => this.zrgbwwa_state.serialize(writer));
            if (this.has_zinline_dimmer_state)
                writer.writeMessage(15, this.zinline_dimmer_state, () => this.zinline_dimmer_state.serialize(writer));
            if (this.has_app_onff_state)
                writer.writeMessage(16, this.app_onff_state, () => this.app_onff_state.serialize(writer));
            if (this.has_app_single_dimmer_state)
                writer.writeMessage(17, this.app_single_dimmer_state, () => this.app_single_dimmer_state.serialize(writer));
            if (this.has_app_fan_state)
                writer.writeMessage(18, this.app_fan_state, () => this.app_fan_state.serialize(writer));
            if (this.has_app_color_tunable_state)
                writer.writeMessage(19, this.app_color_tunable_state, () => this.app_color_tunable_state.serialize(writer));
            if (this.has_dcolortunable_driver_state)
                writer.writeMessage(20, this.dcolortunable_driver_state, () => this.dcolortunable_driver_state.serialize(writer));
            if (this.has_zdimmable_driver_properties)
                writer.writeMessage(30, this.zdimmable_driver_properties, () => this.zdimmable_driver_properties.serialize(writer));
            if (this.has_znondimmable_driver_properties)
                writer.writeMessage(31, this.znondimmable_driver_properties, () => this.znondimmable_driver_properties.serialize(writer));
            if (this.has_ddimmable_driver_properties)
                writer.writeMessage(32, this.ddimmable_driver_properties, () => this.ddimmable_driver_properties.serialize(writer));
            if (this.has_dnondimmable_driver_properties)
                writer.writeMessage(33, this.dnondimmable_driver_properties, () => this.dnondimmable_driver_properties.serialize(writer));
            if (this.has_zrgbwwa_properties)
                writer.writeMessage(34, this.zrgbwwa_properties, () => this.zrgbwwa_properties.serialize(writer));
            if (this.has_zinline_dimmer_properties)
                writer.writeMessage(35, this.zinline_dimmer_properties, () => this.zinline_dimmer_properties.serialize(writer));
            if (this.has_onoff_appliance_properties)
                writer.writeMessage(36, this.onoff_appliance_properties, () => this.onoff_appliance_properties.serialize(writer));
            if (this.has_fan_appliance_properties)
                writer.writeMessage(37, this.fan_appliance_properties, () => this.fan_appliance_properties.serialize(writer));
            if (this.has_single_dimmer_appliance_properties)
                writer.writeMessage(38, this.single_dimmer_appliance_properties, () => this.single_dimmer_appliance_properties.serialize(writer));
            if (this.has_color_tunable_appliance_properties)
                writer.writeMessage(39, this.color_tunable_appliance_properties, () => this.color_tunable_appliance_properties.serialize(writer));
            if (this.has_dcolortunable_driver_properties)
                writer.writeMessage(40, this.dcolortunable_driver_properties, () => this.dcolortunable_driver_properties.serialize(writer));
            if (this.has_group_sync_state)
                writer.writeMessage(54, this.group_sync_state, () => this.group_sync_state.serialize(writer));
            if (this.last_update_time != 0)
                writer.writeUint64(50, this.last_update_time);
            if (this.last_update_by.length)
                writer.writeString(51, this.last_update_by);
            if (this.last_update_user.length)
                writer.writeString(52, this.last_update_user);
            if (this.last_update_source.length)
                writer.writeString(53, this.last_update_source);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Group {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Group();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_name = reader.readString();
                        break;
                    case 3:
                        message.group_type = reader.readEnum();
                        break;
                    case 55:
                        message.group_icon_type = reader.readEnum();
                        break;
                    case 4:
                        message.group_section = reader.readString();
                        break;
                    case 5:
                        message.group_room = reader.readString();
                        break;
                    case 6:
                        message.is_hidden = reader.readBool();
                        break;
                    case 7:
                        message.is_configured = reader.readBool();
                        break;
                    case 8:
                        message.group_voice_name = reader.readString();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        reader.readMessage(message.zdimmable_driver_state, () => message.zdimmable_driver_state = dependency_2.com.keus.hub.ZigbeeDimmableDriverState.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.znondimmable_driver_state, () => message.znondimmable_driver_state = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.ddimmable_driver_state, () => message.ddimmable_driver_state = dependency_4.com.keus.hub.DaliDimmableDriverState.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.dnondimmable_driver_state, () => message.dnondimmable_driver_state = dependency_6.com.keus.hub.DaliNonDimmableDriverState.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zrgbwwa_state, () => message.zrgbwwa_state = dependency_8.com.keus.hub.GroupZigbeeRgbwwaState.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.zinline_dimmer_state, () => message.zinline_dimmer_state = dependency_7.com.keus.hub.ZigbeeInlineDimmerState.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.app_onff_state, () => message.app_onff_state = dependency_9.com.keus.hub.OnOffApplianceState.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.app_single_dimmer_state, () => message.app_single_dimmer_state = dependency_9.com.keus.hub.SingleDimmerApplianceState.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.app_fan_state, () => message.app_fan_state = dependency_9.com.keus.hub.FanApplianceState.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.app_color_tunable_state, () => message.app_color_tunable_state = dependency_9.com.keus.hub.ColorTunableApplianceState.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.dcolortunable_driver_state, () => message.dcolortunable_driver_state = dependency_5.com.keus.hub.DaliColorTunableDriverState.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.zdimmable_driver_properties, () => message.zdimmable_driver_properties = dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.deserialize(reader));
                        break;
                    case 31:
                        reader.readMessage(message.znondimmable_driver_properties, () => message.znondimmable_driver_properties = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.ddimmable_driver_properties, () => message.ddimmable_driver_properties = dependency_4.com.keus.hub.DaliDimmableDriverProperties.deserialize(reader));
                        break;
                    case 33:
                        reader.readMessage(message.dnondimmable_driver_properties, () => message.dnondimmable_driver_properties = dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.deserialize(reader));
                        break;
                    case 34:
                        reader.readMessage(message.zrgbwwa_properties, () => message.zrgbwwa_properties = dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties.deserialize(reader));
                        break;
                    case 35:
                        reader.readMessage(message.zinline_dimmer_properties, () => message.zinline_dimmer_properties = dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.deserialize(reader));
                        break;
                    case 36:
                        reader.readMessage(message.onoff_appliance_properties, () => message.onoff_appliance_properties = dependency_9.com.keus.hub.OnOffApplianceGroupProperties.deserialize(reader));
                        break;
                    case 37:
                        reader.readMessage(message.fan_appliance_properties, () => message.fan_appliance_properties = dependency_9.com.keus.hub.FanApplianceGroupProperties.deserialize(reader));
                        break;
                    case 38:
                        reader.readMessage(message.single_dimmer_appliance_properties, () => message.single_dimmer_appliance_properties = dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties.deserialize(reader));
                        break;
                    case 39:
                        reader.readMessage(message.color_tunable_appliance_properties, () => message.color_tunable_appliance_properties = dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties.deserialize(reader));
                        break;
                    case 40:
                        reader.readMessage(message.dcolortunable_driver_properties, () => message.dcolortunable_driver_properties = dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties.deserialize(reader));
                        break;
                    case 54:
                        reader.readMessage(message.group_sync_state, () => message.group_sync_state = GroupSyncState.deserialize(reader));
                        break;
                    case 50:
                        message.last_update_time = reader.readUint64();
                        break;
                    case 51:
                        message.last_update_by = reader.readString();
                        break;
                    case 52:
                        message.last_update_user = reader.readString();
                        break;
                    case 53:
                        message.last_update_source = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Group {
            return Group.deserialize(bytes);
        }
    }
    export class CreateGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_name?: string;
            group_type?: GROUP_TYPES;
            group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            group_section?: string;
            group_room?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("group_type" in data && data.group_type != undefined) {
                    this.group_type = data.group_type;
                }
                if ("group_icon_type" in data && data.group_icon_type != undefined) {
                    this.group_icon_type = data.group_icon_type;
                }
                if ("group_section" in data && data.group_section != undefined) {
                    this.group_section = data.group_section;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
            }
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, GROUP_TYPES.ZIGBEE_DIMMABLE) as GROUP_TYPES;
        }
        set group_type(value: GROUP_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_icon_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set group_icon_type(value: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set group_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            group_name?: string;
            group_type?: GROUP_TYPES;
            group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            group_section?: string;
            group_room?: string;
        }): CreateGroup {
            const message = new CreateGroup({});
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.group_type != null) {
                message.group_type = data.group_type;
            }
            if (data.group_icon_type != null) {
                message.group_icon_type = data.group_icon_type;
            }
            if (data.group_section != null) {
                message.group_section = data.group_section;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            return message;
        }
        toObject() {
            const data: {
                group_name?: string;
                group_type?: GROUP_TYPES;
                group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
                group_section?: string;
                group_room?: string;
            } = {};
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.group_type != null) {
                data.group_type = this.group_type;
            }
            if (this.group_icon_type != null) {
                data.group_icon_type = this.group_icon_type;
            }
            if (this.group_section != null) {
                data.group_section = this.group_section;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_name.length)
                writer.writeString(1, this.group_name);
            if (this.group_type != GROUP_TYPES.ZIGBEE_DIMMABLE)
                writer.writeEnum(2, this.group_type);
            if (this.group_icon_type != dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(3, this.group_icon_type);
            if (this.group_section.length)
                writer.writeString(4, this.group_section);
            if (this.group_room.length)
                writer.writeString(5, this.group_room);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_name = reader.readString();
                        break;
                    case 2:
                        message.group_type = reader.readEnum();
                        break;
                    case 3:
                        message.group_icon_type = reader.readEnum();
                        break;
                    case 4:
                        message.group_section = reader.readString();
                        break;
                    case 5:
                        message.group_room = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGroup {
            return CreateGroup.deserialize(bytes);
        }
    }
    export class CreateGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            group?: Group;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group() {
            return pb_1.Message.getWrapperField(this, Group, 4) as Group;
        }
        set group(value: Group) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            group?: ReturnType<typeof Group.prototype.toObject>;
            ops_message?: string;
        }): CreateGroupResponse {
            const message = new CreateGroupResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.group != null) {
                message.group = Group.fromObject(data.group);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                group?: ReturnType<typeof Group.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_group)
                writer.writeMessage(4, this.group, () => this.group.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.group, () => message.group = Group.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGroupResponse {
            return CreateGroupResponse.deserialize(bytes);
        }
    }
    export class DeleteGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
            force_delete?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            force_delete?: boolean;
        }): DeleteGroup {
            const message = new DeleteGroup({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                force_delete?: boolean;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.force_delete != false)
                writer.writeBool(3, this.force_delete);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        message.force_delete = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteGroup {
            return DeleteGroup.deserialize(bytes);
        }
    }
    export class DeleteGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }): DeleteGroupResponse {
            const message = new DeleteGroupResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                request_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.request_id.length)
                writer.writeString(4, this.request_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.request_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteGroupResponse {
            return DeleteGroupResponse.deserialize(bytes);
        }
    }
    export class AddDeviceToGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
            device_id?: string;
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            device_id?: string;
            appliance_id?: string;
        }): AddDeviceToGroup {
            const message = new AddDeviceToGroup({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                device_id?: string;
                appliance_id?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.device_id.length)
                writer.writeString(3, this.device_id);
            if (this.appliance_id.length)
                writer.writeString(4, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddDeviceToGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddDeviceToGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddDeviceToGroup {
            return AddDeviceToGroup.deserialize(bytes);
        }
    }
    export class AddDeviceToGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            group?: Group;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group() {
            return pb_1.Message.getWrapperField(this, Group, 4) as Group;
        }
        set group(value: Group) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            group?: ReturnType<typeof Group.prototype.toObject>;
            ops_message?: string;
        }): AddDeviceToGroupResponse {
            const message = new AddDeviceToGroupResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.group != null) {
                message.group = Group.fromObject(data.group);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                group?: ReturnType<typeof Group.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_group)
                writer.writeMessage(4, this.group, () => this.group.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddDeviceToGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddDeviceToGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.group, () => message.group = Group.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddDeviceToGroupResponse {
            return AddDeviceToGroupResponse.deserialize(bytes);
        }
    }
    export class RemoveDeviceFromGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
            device_id?: string;
            force_delete?: boolean;
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            device_id?: string;
            force_delete?: boolean;
            appliance_id?: string;
        }): RemoveDeviceFromGroup {
            const message = new RemoveDeviceFromGroup({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                device_id?: string;
                force_delete?: boolean;
                appliance_id?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.device_id.length)
                writer.writeString(3, this.device_id);
            if (this.force_delete != false)
                writer.writeBool(4, this.force_delete);
            if (this.appliance_id.length)
                writer.writeString(5, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveDeviceFromGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveDeviceFromGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.force_delete = reader.readBool();
                        break;
                    case 5:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveDeviceFromGroup {
            return RemoveDeviceFromGroup.deserialize(bytes);
        }
    }
    export class RemoveDeviceFromGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            group?: Group;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group() {
            return pb_1.Message.getWrapperField(this, Group, 4) as Group;
        }
        set group(value: Group) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            group?: ReturnType<typeof Group.prototype.toObject>;
            ops_message?: string;
        }): RemoveDeviceFromGroupResponse {
            const message = new RemoveDeviceFromGroupResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.group != null) {
                message.group = Group.fromObject(data.group);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                group?: ReturnType<typeof Group.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_group)
                writer.writeMessage(4, this.group, () => this.group.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveDeviceFromGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveDeviceFromGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.group, () => message.group = Group.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveDeviceFromGroupResponse {
            return RemoveDeviceFromGroupResponse.deserialize(bytes);
        }
    }
    export class ConfigureGroupProperties extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]];
        constructor(data?: any[] | ({
            group_id?: number;
            group_room?: string;
            is_hidden?: boolean;
        } & (({
            zdimmable_driver_properties?: dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: dependency_4.com.keus.hub.DaliDimmableDriverProperties;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: dependency_6.com.keus.hub.DaliNonDimmableDriverProperties;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: dependency_9.com.keus.hub.OnOffApplianceGroupProperties;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: dependency_9.com.keus.hub.FanApplianceGroupProperties;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties;
            dcolortunable_driver_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
            onoff_appliance_properties?: never;
            fan_appliance_properties?: never;
            single_dimmer_appliance_properties?: never;
            color_tunable_appliance_properties?: never;
            dcolortunable_driver_properties?: dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
                if ("zdimmable_driver_properties" in data && data.zdimmable_driver_properties != undefined) {
                    this.zdimmable_driver_properties = data.zdimmable_driver_properties;
                }
                if ("znondimmable_driver_properties" in data && data.znondimmable_driver_properties != undefined) {
                    this.znondimmable_driver_properties = data.znondimmable_driver_properties;
                }
                if ("ddimmable_driver_properties" in data && data.ddimmable_driver_properties != undefined) {
                    this.ddimmable_driver_properties = data.ddimmable_driver_properties;
                }
                if ("dnondimmable_driver_properties" in data && data.dnondimmable_driver_properties != undefined) {
                    this.dnondimmable_driver_properties = data.dnondimmable_driver_properties;
                }
                if ("zinline_dimmer_properties" in data && data.zinline_dimmer_properties != undefined) {
                    this.zinline_dimmer_properties = data.zinline_dimmer_properties;
                }
                if ("zrgbwwa_properties" in data && data.zrgbwwa_properties != undefined) {
                    this.zrgbwwa_properties = data.zrgbwwa_properties;
                }
                if ("onoff_appliance_properties" in data && data.onoff_appliance_properties != undefined) {
                    this.onoff_appliance_properties = data.onoff_appliance_properties;
                }
                if ("fan_appliance_properties" in data && data.fan_appliance_properties != undefined) {
                    this.fan_appliance_properties = data.fan_appliance_properties;
                }
                if ("single_dimmer_appliance_properties" in data && data.single_dimmer_appliance_properties != undefined) {
                    this.single_dimmer_appliance_properties = data.single_dimmer_appliance_properties;
                }
                if ("color_tunable_appliance_properties" in data && data.color_tunable_appliance_properties != undefined) {
                    this.color_tunable_appliance_properties = data.color_tunable_appliance_properties;
                }
                if ("dcolortunable_driver_properties" in data && data.dcolortunable_driver_properties != undefined) {
                    this.dcolortunable_driver_properties = data.dcolortunable_driver_properties;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get zdimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties, 10) as dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties;
        }
        set zdimmable_driver_properties(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_properties() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get znondimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties, 11) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties;
        }
        set znondimmable_driver_properties(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_properties() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get ddimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverProperties, 12) as dependency_4.com.keus.hub.DaliDimmableDriverProperties;
        }
        set ddimmable_driver_properties(value: dependency_4.com.keus.hub.DaliDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_properties() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get dnondimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverProperties, 13) as dependency_6.com.keus.hub.DaliNonDimmableDriverProperties;
        }
        set dnondimmable_driver_properties(value: dependency_6.com.keus.hub.DaliNonDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_properties() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zinline_dimmer_properties() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties, 14) as dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties;
        }
        set zinline_dimmer_properties(value: dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zinline_dimmer_properties() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get zrgbwwa_properties() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties, 15) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties;
        }
        set zrgbwwa_properties(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_zrgbwwa_properties() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get onoff_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.OnOffApplianceGroupProperties, 16) as dependency_9.com.keus.hub.OnOffApplianceGroupProperties;
        }
        set onoff_appliance_properties(value: dependency_9.com.keus.hub.OnOffApplianceGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_onoff_appliance_properties() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get fan_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.FanApplianceGroupProperties, 17) as dependency_9.com.keus.hub.FanApplianceGroupProperties;
        }
        set fan_appliance_properties(value: dependency_9.com.keus.hub.FanApplianceGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_fan_appliance_properties() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get single_dimmer_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties, 18) as dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties;
        }
        set single_dimmer_appliance_properties(value: dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_single_dimmer_appliance_properties() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get color_tunable_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties, 19) as dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties;
        }
        set color_tunable_appliance_properties(value: dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_color_tunable_appliance_properties() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get dcolortunable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties, 20) as dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties;
        }
        set dcolortunable_driver_properties(value: dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_properties() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get group_properties() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_properties" | "znondimmable_driver_properties" | "ddimmable_driver_properties" | "dnondimmable_driver_properties" | "zinline_dimmer_properties" | "zrgbwwa_properties" | "onoff_appliance_properties" | "fan_appliance_properties" | "single_dimmer_appliance_properties" | "color_tunable_appliance_properties" | "dcolortunable_driver_properties";
            } = {
                0: "none",
                10: "zdimmable_driver_properties",
                11: "znondimmable_driver_properties",
                12: "ddimmable_driver_properties",
                13: "dnondimmable_driver_properties",
                14: "zinline_dimmer_properties",
                15: "zrgbwwa_properties",
                16: "onoff_appliance_properties",
                17: "fan_appliance_properties",
                18: "single_dimmer_appliance_properties",
                19: "color_tunable_appliance_properties",
                20: "dcolortunable_driver_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])];
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            is_hidden?: boolean;
            zdimmable_driver_properties?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.prototype.toObject>;
            znondimmable_driver_properties?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.prototype.toObject>;
            ddimmable_driver_properties?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
            dnondimmable_driver_properties?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.prototype.toObject>;
            zinline_dimmer_properties?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.prototype.toObject>;
            zrgbwwa_properties?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties.prototype.toObject>;
            onoff_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.OnOffApplianceGroupProperties.prototype.toObject>;
            fan_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.FanApplianceGroupProperties.prototype.toObject>;
            single_dimmer_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties.prototype.toObject>;
            color_tunable_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties.prototype.toObject>;
            dcolortunable_driver_properties?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties.prototype.toObject>;
        }): ConfigureGroupProperties {
            const message = new ConfigureGroupProperties({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            if (data.zdimmable_driver_properties != null) {
                message.zdimmable_driver_properties = dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.fromObject(data.zdimmable_driver_properties);
            }
            if (data.znondimmable_driver_properties != null) {
                message.znondimmable_driver_properties = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.fromObject(data.znondimmable_driver_properties);
            }
            if (data.ddimmable_driver_properties != null) {
                message.ddimmable_driver_properties = dependency_4.com.keus.hub.DaliDimmableDriverProperties.fromObject(data.ddimmable_driver_properties);
            }
            if (data.dnondimmable_driver_properties != null) {
                message.dnondimmable_driver_properties = dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.fromObject(data.dnondimmable_driver_properties);
            }
            if (data.zinline_dimmer_properties != null) {
                message.zinline_dimmer_properties = dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.fromObject(data.zinline_dimmer_properties);
            }
            if (data.zrgbwwa_properties != null) {
                message.zrgbwwa_properties = dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties.fromObject(data.zrgbwwa_properties);
            }
            if (data.onoff_appliance_properties != null) {
                message.onoff_appliance_properties = dependency_9.com.keus.hub.OnOffApplianceGroupProperties.fromObject(data.onoff_appliance_properties);
            }
            if (data.fan_appliance_properties != null) {
                message.fan_appliance_properties = dependency_9.com.keus.hub.FanApplianceGroupProperties.fromObject(data.fan_appliance_properties);
            }
            if (data.single_dimmer_appliance_properties != null) {
                message.single_dimmer_appliance_properties = dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties.fromObject(data.single_dimmer_appliance_properties);
            }
            if (data.color_tunable_appliance_properties != null) {
                message.color_tunable_appliance_properties = dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties.fromObject(data.color_tunable_appliance_properties);
            }
            if (data.dcolortunable_driver_properties != null) {
                message.dcolortunable_driver_properties = dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties.fromObject(data.dcolortunable_driver_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                is_hidden?: boolean;
                zdimmable_driver_properties?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.prototype.toObject>;
                znondimmable_driver_properties?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.prototype.toObject>;
                ddimmable_driver_properties?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
                dnondimmable_driver_properties?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.prototype.toObject>;
                zinline_dimmer_properties?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.prototype.toObject>;
                zrgbwwa_properties?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties.prototype.toObject>;
                onoff_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.OnOffApplianceGroupProperties.prototype.toObject>;
                fan_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.FanApplianceGroupProperties.prototype.toObject>;
                single_dimmer_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties.prototype.toObject>;
                color_tunable_appliance_properties?: ReturnType<typeof dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties.prototype.toObject>;
                dcolortunable_driver_properties?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            if (this.zdimmable_driver_properties != null) {
                data.zdimmable_driver_properties = this.zdimmable_driver_properties.toObject();
            }
            if (this.znondimmable_driver_properties != null) {
                data.znondimmable_driver_properties = this.znondimmable_driver_properties.toObject();
            }
            if (this.ddimmable_driver_properties != null) {
                data.ddimmable_driver_properties = this.ddimmable_driver_properties.toObject();
            }
            if (this.dnondimmable_driver_properties != null) {
                data.dnondimmable_driver_properties = this.dnondimmable_driver_properties.toObject();
            }
            if (this.zinline_dimmer_properties != null) {
                data.zinline_dimmer_properties = this.zinline_dimmer_properties.toObject();
            }
            if (this.zrgbwwa_properties != null) {
                data.zrgbwwa_properties = this.zrgbwwa_properties.toObject();
            }
            if (this.onoff_appliance_properties != null) {
                data.onoff_appliance_properties = this.onoff_appliance_properties.toObject();
            }
            if (this.fan_appliance_properties != null) {
                data.fan_appliance_properties = this.fan_appliance_properties.toObject();
            }
            if (this.single_dimmer_appliance_properties != null) {
                data.single_dimmer_appliance_properties = this.single_dimmer_appliance_properties.toObject();
            }
            if (this.color_tunable_appliance_properties != null) {
                data.color_tunable_appliance_properties = this.color_tunable_appliance_properties.toObject();
            }
            if (this.dcolortunable_driver_properties != null) {
                data.dcolortunable_driver_properties = this.dcolortunable_driver_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.is_hidden != false)
                writer.writeBool(3, this.is_hidden);
            if (this.has_zdimmable_driver_properties)
                writer.writeMessage(10, this.zdimmable_driver_properties, () => this.zdimmable_driver_properties.serialize(writer));
            if (this.has_znondimmable_driver_properties)
                writer.writeMessage(11, this.znondimmable_driver_properties, () => this.znondimmable_driver_properties.serialize(writer));
            if (this.has_ddimmable_driver_properties)
                writer.writeMessage(12, this.ddimmable_driver_properties, () => this.ddimmable_driver_properties.serialize(writer));
            if (this.has_dnondimmable_driver_properties)
                writer.writeMessage(13, this.dnondimmable_driver_properties, () => this.dnondimmable_driver_properties.serialize(writer));
            if (this.has_zinline_dimmer_properties)
                writer.writeMessage(14, this.zinline_dimmer_properties, () => this.zinline_dimmer_properties.serialize(writer));
            if (this.has_zrgbwwa_properties)
                writer.writeMessage(15, this.zrgbwwa_properties, () => this.zrgbwwa_properties.serialize(writer));
            if (this.has_onoff_appliance_properties)
                writer.writeMessage(16, this.onoff_appliance_properties, () => this.onoff_appliance_properties.serialize(writer));
            if (this.has_fan_appliance_properties)
                writer.writeMessage(17, this.fan_appliance_properties, () => this.fan_appliance_properties.serialize(writer));
            if (this.has_single_dimmer_appliance_properties)
                writer.writeMessage(18, this.single_dimmer_appliance_properties, () => this.single_dimmer_appliance_properties.serialize(writer));
            if (this.has_color_tunable_appliance_properties)
                writer.writeMessage(19, this.color_tunable_appliance_properties, () => this.color_tunable_appliance_properties.serialize(writer));
            if (this.has_dcolortunable_driver_properties)
                writer.writeMessage(20, this.dcolortunable_driver_properties, () => this.dcolortunable_driver_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureGroupProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureGroupProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        message.is_hidden = reader.readBool();
                        break;
                    case 10:
                        reader.readMessage(message.zdimmable_driver_properties, () => message.zdimmable_driver_properties = dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.znondimmable_driver_properties, () => message.znondimmable_driver_properties = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.ddimmable_driver_properties, () => message.ddimmable_driver_properties = dependency_4.com.keus.hub.DaliDimmableDriverProperties.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.dnondimmable_driver_properties, () => message.dnondimmable_driver_properties = dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zinline_dimmer_properties, () => message.zinline_dimmer_properties = dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.zrgbwwa_properties, () => message.zrgbwwa_properties = dependency_8.com.keus.hub.GroupZigbeeRgbwwaProperties.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.onoff_appliance_properties, () => message.onoff_appliance_properties = dependency_9.com.keus.hub.OnOffApplianceGroupProperties.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.fan_appliance_properties, () => message.fan_appliance_properties = dependency_9.com.keus.hub.FanApplianceGroupProperties.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.single_dimmer_appliance_properties, () => message.single_dimmer_appliance_properties = dependency_9.com.keus.hub.SingleDimmerApplianceGroupProperties.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.color_tunable_appliance_properties, () => message.color_tunable_appliance_properties = dependency_9.com.keus.hub.ColorTunableApplianceGroupProperties.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.dcolortunable_driver_properties, () => message.dcolortunable_driver_properties = dependency_5.com.keus.hub.DaliColorTunableDriverGroupProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureGroupProperties {
            return ConfigureGroupProperties.deserialize(bytes);
        }
    }
    export class ConfigureGroupPropertiesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            request_id?: string;
            ops_message?: string;
        }): ConfigureGroupPropertiesResponse {
            const message = new ConfigureGroupPropertiesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                request_id?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.request_id.length)
                writer.writeString(4, this.request_id);
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureGroupPropertiesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureGroupPropertiesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.request_id = reader.readString();
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureGroupPropertiesResponse {
            return ConfigureGroupPropertiesResponse.deserialize(bytes);
        }
    }
    export class ConfigureDeviceInGroup extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15]];
        constructor(data?: any[] | ({
            device_id?: string;
        } & (({
            zdimmable_driver_properties?: dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: dependency_4.com.keus.hub.DaliDimmableDriverProperties;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: dependency_6.com.keus.hub.DaliNonDimmableDriverProperties;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties;
            zrgbwwa_properties?: never;
        } | {
            zdimmable_driver_properties?: never;
            znondimmable_driver_properties?: never;
            ddimmable_driver_properties?: never;
            dnondimmable_driver_properties?: never;
            zinline_dimmer_properties?: never;
            zrgbwwa_properties?: dependency_8.com.keus.hub.ZigbeeRgbwwaProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("zdimmable_driver_properties" in data && data.zdimmable_driver_properties != undefined) {
                    this.zdimmable_driver_properties = data.zdimmable_driver_properties;
                }
                if ("znondimmable_driver_properties" in data && data.znondimmable_driver_properties != undefined) {
                    this.znondimmable_driver_properties = data.znondimmable_driver_properties;
                }
                if ("ddimmable_driver_properties" in data && data.ddimmable_driver_properties != undefined) {
                    this.ddimmable_driver_properties = data.ddimmable_driver_properties;
                }
                if ("dnondimmable_driver_properties" in data && data.dnondimmable_driver_properties != undefined) {
                    this.dnondimmable_driver_properties = data.dnondimmable_driver_properties;
                }
                if ("zinline_dimmer_properties" in data && data.zinline_dimmer_properties != undefined) {
                    this.zinline_dimmer_properties = data.zinline_dimmer_properties;
                }
                if ("zrgbwwa_properties" in data && data.zrgbwwa_properties != undefined) {
                    this.zrgbwwa_properties = data.zrgbwwa_properties;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get zdimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties, 10) as dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties;
        }
        set zdimmable_driver_properties(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_properties() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get znondimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties, 11) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties;
        }
        set znondimmable_driver_properties(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_properties() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get ddimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverProperties, 12) as dependency_4.com.keus.hub.DaliDimmableDriverProperties;
        }
        set ddimmable_driver_properties(value: dependency_4.com.keus.hub.DaliDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_properties() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get dnondimmable_driver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverProperties, 13) as dependency_6.com.keus.hub.DaliNonDimmableDriverProperties;
        }
        set dnondimmable_driver_properties(value: dependency_6.com.keus.hub.DaliNonDimmableDriverProperties) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_properties() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zinline_dimmer_properties() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties, 14) as dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties;
        }
        set zinline_dimmer_properties(value: dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zinline_dimmer_properties() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get zrgbwwa_properties() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.ZigbeeRgbwwaProperties, 15) as dependency_8.com.keus.hub.ZigbeeRgbwwaProperties;
        }
        set zrgbwwa_properties(value: dependency_8.com.keus.hub.ZigbeeRgbwwaProperties) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_zrgbwwa_properties() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get group_properties() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_properties" | "znondimmable_driver_properties" | "ddimmable_driver_properties" | "dnondimmable_driver_properties" | "zinline_dimmer_properties" | "zrgbwwa_properties";
            } = {
                0: "none",
                10: "zdimmable_driver_properties",
                11: "znondimmable_driver_properties",
                12: "ddimmable_driver_properties",
                13: "dnondimmable_driver_properties",
                14: "zinline_dimmer_properties",
                15: "zrgbwwa_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15])];
        }
        static fromObject(data: {
            device_id?: string;
            zdimmable_driver_properties?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.prototype.toObject>;
            znondimmable_driver_properties?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.prototype.toObject>;
            ddimmable_driver_properties?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
            dnondimmable_driver_properties?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.prototype.toObject>;
            zinline_dimmer_properties?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.prototype.toObject>;
            zrgbwwa_properties?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaProperties.prototype.toObject>;
        }): ConfigureDeviceInGroup {
            const message = new ConfigureDeviceInGroup({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.zdimmable_driver_properties != null) {
                message.zdimmable_driver_properties = dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.fromObject(data.zdimmable_driver_properties);
            }
            if (data.znondimmable_driver_properties != null) {
                message.znondimmable_driver_properties = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.fromObject(data.znondimmable_driver_properties);
            }
            if (data.ddimmable_driver_properties != null) {
                message.ddimmable_driver_properties = dependency_4.com.keus.hub.DaliDimmableDriverProperties.fromObject(data.ddimmable_driver_properties);
            }
            if (data.dnondimmable_driver_properties != null) {
                message.dnondimmable_driver_properties = dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.fromObject(data.dnondimmable_driver_properties);
            }
            if (data.zinline_dimmer_properties != null) {
                message.zinline_dimmer_properties = dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.fromObject(data.zinline_dimmer_properties);
            }
            if (data.zrgbwwa_properties != null) {
                message.zrgbwwa_properties = dependency_8.com.keus.hub.ZigbeeRgbwwaProperties.fromObject(data.zrgbwwa_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                zdimmable_driver_properties?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.prototype.toObject>;
                znondimmable_driver_properties?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.prototype.toObject>;
                ddimmable_driver_properties?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverProperties.prototype.toObject>;
                dnondimmable_driver_properties?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.prototype.toObject>;
                zinline_dimmer_properties?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.prototype.toObject>;
                zrgbwwa_properties?: ReturnType<typeof dependency_8.com.keus.hub.ZigbeeRgbwwaProperties.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.zdimmable_driver_properties != null) {
                data.zdimmable_driver_properties = this.zdimmable_driver_properties.toObject();
            }
            if (this.znondimmable_driver_properties != null) {
                data.znondimmable_driver_properties = this.znondimmable_driver_properties.toObject();
            }
            if (this.ddimmable_driver_properties != null) {
                data.ddimmable_driver_properties = this.ddimmable_driver_properties.toObject();
            }
            if (this.dnondimmable_driver_properties != null) {
                data.dnondimmable_driver_properties = this.dnondimmable_driver_properties.toObject();
            }
            if (this.zinline_dimmer_properties != null) {
                data.zinline_dimmer_properties = this.zinline_dimmer_properties.toObject();
            }
            if (this.zrgbwwa_properties != null) {
                data.zrgbwwa_properties = this.zrgbwwa_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.has_zdimmable_driver_properties)
                writer.writeMessage(10, this.zdimmable_driver_properties, () => this.zdimmable_driver_properties.serialize(writer));
            if (this.has_znondimmable_driver_properties)
                writer.writeMessage(11, this.znondimmable_driver_properties, () => this.znondimmable_driver_properties.serialize(writer));
            if (this.has_ddimmable_driver_properties)
                writer.writeMessage(12, this.ddimmable_driver_properties, () => this.ddimmable_driver_properties.serialize(writer));
            if (this.has_dnondimmable_driver_properties)
                writer.writeMessage(13, this.dnondimmable_driver_properties, () => this.dnondimmable_driver_properties.serialize(writer));
            if (this.has_zinline_dimmer_properties)
                writer.writeMessage(14, this.zinline_dimmer_properties, () => this.zinline_dimmer_properties.serialize(writer));
            if (this.has_zrgbwwa_properties)
                writer.writeMessage(15, this.zrgbwwa_properties, () => this.zrgbwwa_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureDeviceInGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureDeviceInGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.zdimmable_driver_properties, () => message.zdimmable_driver_properties = dependency_2.com.keus.hub.ZigbeeDimmableDriverProperties.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.znondimmable_driver_properties, () => message.znondimmable_driver_properties = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverProperties.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.ddimmable_driver_properties, () => message.ddimmable_driver_properties = dependency_4.com.keus.hub.DaliDimmableDriverProperties.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.dnondimmable_driver_properties, () => message.dnondimmable_driver_properties = dependency_6.com.keus.hub.DaliNonDimmableDriverProperties.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zinline_dimmer_properties, () => message.zinline_dimmer_properties = dependency_7.com.keus.hub.ZigbeeInlineDimmerProperties.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.zrgbwwa_properties, () => message.zrgbwwa_properties = dependency_8.com.keus.hub.ZigbeeRgbwwaProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureDeviceInGroup {
            return ConfigureDeviceInGroup.deserialize(bytes);
        }
    }
    export class ConfigureDeviceInGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureDeviceInGroupResponse {
            const message = new ConfigureDeviceInGroupResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureDeviceInGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureDeviceInGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureDeviceInGroupResponse {
            return ConfigureDeviceInGroupResponse.deserialize(bytes);
        }
    }
    export class ChangeGroupName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
            group_name?: string;
            group_voice_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("group_voice_name" in data && data.group_voice_name != undefined) {
                    this.group_voice_name = data.group_voice_name;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_voice_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set group_voice_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            group_name?: string;
            group_voice_name?: string;
        }): ChangeGroupName {
            const message = new ChangeGroupName({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.group_voice_name != null) {
                message.group_voice_name = data.group_voice_name;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                group_name?: string;
                group_voice_name?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.group_voice_name != null) {
                data.group_voice_name = this.group_voice_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.group_name.length)
                writer.writeString(3, this.group_name);
            if (this.group_voice_name.length)
                writer.writeString(4, this.group_voice_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeGroupName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeGroupName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        message.group_name = reader.readString();
                        break;
                    case 4:
                        message.group_voice_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeGroupName {
            return ChangeGroupName.deserialize(bytes);
        }
    }
    export class ChangeGroupNameResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            group?: Group;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group() {
            return pb_1.Message.getWrapperField(this, Group, 4) as Group;
        }
        set group(value: Group) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            group?: ReturnType<typeof Group.prototype.toObject>;
            ops_message?: string;
        }): ChangeGroupNameResponse {
            const message = new ChangeGroupNameResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.group != null) {
                message.group = Group.fromObject(data.group);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                group?: ReturnType<typeof Group.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_group)
                writer.writeMessage(4, this.group, () => this.group.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeGroupNameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeGroupNameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.group, () => message.group = Group.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeGroupNameResponse {
            return ChangeGroupNameResponse.deserialize(bytes);
        }
    }
    export class UpdateGroupState extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]];
        constructor(data?: any[] | ({
            group_id?: number;
            group_room?: string;
        } & (({
            zdimmable_driver_state?: dependency_2.com.keus.hub.ZigbeeDimmableDriverState;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: dependency_4.com.keus.hub.DaliDimmableDriverState;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: dependency_6.com.keus.hub.DaliNonDimmableDriverState;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: dependency_1.com.keus.hub.ZigbeeCurtainControllerState;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: dependency_7.com.keus.hub.ZigbeeInlineDimmerState;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: dependency_8.com.keus.hub.GroupZigbeeRgbwwaState;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: dependency_9.com.keus.hub.OnOffApplianceState;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: dependency_9.com.keus.hub.SingleDimmerApplianceState;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: dependency_9.com.keus.hub.FanApplianceState;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: dependency_9.com.keus.hub.ColorTunableApplianceState;
            dcolortunable_driver_state?: never;
        } | {
            zdimmable_driver_state?: never;
            znondimmable_driver_state?: never;
            ddimmable_driver_state?: never;
            dnondimmable_driver_state?: never;
            zcurtain_controller_state?: never;
            zinline_dimmer_state?: never;
            zrgbwwa_state?: never;
            app_onff_state?: never;
            app_single_dimmer_state?: never;
            app_fan_state?: never;
            app_color_tunable_state?: never;
            dcolortunable_driver_state?: dependency_5.com.keus.hub.DaliColorTunableDriverState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("zdimmable_driver_state" in data && data.zdimmable_driver_state != undefined) {
                    this.zdimmable_driver_state = data.zdimmable_driver_state;
                }
                if ("znondimmable_driver_state" in data && data.znondimmable_driver_state != undefined) {
                    this.znondimmable_driver_state = data.znondimmable_driver_state;
                }
                if ("ddimmable_driver_state" in data && data.ddimmable_driver_state != undefined) {
                    this.ddimmable_driver_state = data.ddimmable_driver_state;
                }
                if ("dnondimmable_driver_state" in data && data.dnondimmable_driver_state != undefined) {
                    this.dnondimmable_driver_state = data.dnondimmable_driver_state;
                }
                if ("zcurtain_controller_state" in data && data.zcurtain_controller_state != undefined) {
                    this.zcurtain_controller_state = data.zcurtain_controller_state;
                }
                if ("zinline_dimmer_state" in data && data.zinline_dimmer_state != undefined) {
                    this.zinline_dimmer_state = data.zinline_dimmer_state;
                }
                if ("zrgbwwa_state" in data && data.zrgbwwa_state != undefined) {
                    this.zrgbwwa_state = data.zrgbwwa_state;
                }
                if ("app_onff_state" in data && data.app_onff_state != undefined) {
                    this.app_onff_state = data.app_onff_state;
                }
                if ("app_single_dimmer_state" in data && data.app_single_dimmer_state != undefined) {
                    this.app_single_dimmer_state = data.app_single_dimmer_state;
                }
                if ("app_fan_state" in data && data.app_fan_state != undefined) {
                    this.app_fan_state = data.app_fan_state;
                }
                if ("app_color_tunable_state" in data && data.app_color_tunable_state != undefined) {
                    this.app_color_tunable_state = data.app_color_tunable_state;
                }
                if ("dcolortunable_driver_state" in data && data.dcolortunable_driver_state != undefined) {
                    this.dcolortunable_driver_state = data.dcolortunable_driver_state;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get zdimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.hub.ZigbeeDimmableDriverState, 10) as dependency_2.com.keus.hub.ZigbeeDimmableDriverState;
        }
        set zdimmable_driver_state(value: dependency_2.com.keus.hub.ZigbeeDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_zdimmable_driver_state() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get znondimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState, 11) as dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState;
        }
        set znondimmable_driver_state(value: dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_znondimmable_driver_state() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get ddimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.hub.DaliDimmableDriverState, 12) as dependency_4.com.keus.hub.DaliDimmableDriverState;
        }
        set ddimmable_driver_state(value: dependency_4.com.keus.hub.DaliDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_ddimmable_driver_state() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get dnondimmable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.hub.DaliNonDimmableDriverState, 13) as dependency_6.com.keus.hub.DaliNonDimmableDriverState;
        }
        set dnondimmable_driver_state(value: dependency_6.com.keus.hub.DaliNonDimmableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_dnondimmable_driver_state() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get zcurtain_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.hub.ZigbeeCurtainControllerState, 14) as dependency_1.com.keus.hub.ZigbeeCurtainControllerState;
        }
        set zcurtain_controller_state(value: dependency_1.com.keus.hub.ZigbeeCurtainControllerState) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_zcurtain_controller_state() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get zinline_dimmer_state() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.hub.ZigbeeInlineDimmerState, 15) as dependency_7.com.keus.hub.ZigbeeInlineDimmerState;
        }
        set zinline_dimmer_state(value: dependency_7.com.keus.hub.ZigbeeInlineDimmerState) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_zinline_dimmer_state() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get zrgbwwa_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.hub.GroupZigbeeRgbwwaState, 16) as dependency_8.com.keus.hub.GroupZigbeeRgbwwaState;
        }
        set zrgbwwa_state(value: dependency_8.com.keus.hub.GroupZigbeeRgbwwaState) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_zrgbwwa_state() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get app_onff_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.OnOffApplianceState, 17) as dependency_9.com.keus.hub.OnOffApplianceState;
        }
        set app_onff_state(value: dependency_9.com.keus.hub.OnOffApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_app_onff_state() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get app_single_dimmer_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.SingleDimmerApplianceState, 18) as dependency_9.com.keus.hub.SingleDimmerApplianceState;
        }
        set app_single_dimmer_state(value: dependency_9.com.keus.hub.SingleDimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_app_single_dimmer_state() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get app_fan_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.FanApplianceState, 19) as dependency_9.com.keus.hub.FanApplianceState;
        }
        set app_fan_state(value: dependency_9.com.keus.hub.FanApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_app_fan_state() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get app_color_tunable_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.hub.ColorTunableApplianceState, 20) as dependency_9.com.keus.hub.ColorTunableApplianceState;
        }
        set app_color_tunable_state(value: dependency_9.com.keus.hub.ColorTunableApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_app_color_tunable_state() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get dcolortunable_driver_state() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.hub.DaliColorTunableDriverState, 21) as dependency_5.com.keus.hub.DaliColorTunableDriverState;
        }
        set dcolortunable_driver_state(value: dependency_5.com.keus.hub.DaliColorTunableDriverState) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_dcolortunable_driver_state() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get group_state() {
            const cases: {
                [index: number]: "none" | "zdimmable_driver_state" | "znondimmable_driver_state" | "ddimmable_driver_state" | "dnondimmable_driver_state" | "zcurtain_controller_state" | "zinline_dimmer_state" | "zrgbwwa_state" | "app_onff_state" | "app_single_dimmer_state" | "app_fan_state" | "app_color_tunable_state" | "dcolortunable_driver_state";
            } = {
                0: "none",
                10: "zdimmable_driver_state",
                11: "znondimmable_driver_state",
                12: "ddimmable_driver_state",
                13: "dnondimmable_driver_state",
                14: "zcurtain_controller_state",
                15: "zinline_dimmer_state",
                16: "zrgbwwa_state",
                17: "app_onff_state",
                18: "app_single_dimmer_state",
                19: "app_fan_state",
                20: "app_color_tunable_state",
                21: "dcolortunable_driver_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])];
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            zdimmable_driver_state?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverState.prototype.toObject>;
            znondimmable_driver_state?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.prototype.toObject>;
            ddimmable_driver_state?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverState.prototype.toObject>;
            dnondimmable_driver_state?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverState.prototype.toObject>;
            zcurtain_controller_state?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerState.prototype.toObject>;
            zinline_dimmer_state?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerState.prototype.toObject>;
            zrgbwwa_state?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaState.prototype.toObject>;
            app_onff_state?: ReturnType<typeof dependency_9.com.keus.hub.OnOffApplianceState.prototype.toObject>;
            app_single_dimmer_state?: ReturnType<typeof dependency_9.com.keus.hub.SingleDimmerApplianceState.prototype.toObject>;
            app_fan_state?: ReturnType<typeof dependency_9.com.keus.hub.FanApplianceState.prototype.toObject>;
            app_color_tunable_state?: ReturnType<typeof dependency_9.com.keus.hub.ColorTunableApplianceState.prototype.toObject>;
            dcolortunable_driver_state?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverState.prototype.toObject>;
        }): UpdateGroupState {
            const message = new UpdateGroupState({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.zdimmable_driver_state != null) {
                message.zdimmable_driver_state = dependency_2.com.keus.hub.ZigbeeDimmableDriverState.fromObject(data.zdimmable_driver_state);
            }
            if (data.znondimmable_driver_state != null) {
                message.znondimmable_driver_state = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.fromObject(data.znondimmable_driver_state);
            }
            if (data.ddimmable_driver_state != null) {
                message.ddimmable_driver_state = dependency_4.com.keus.hub.DaliDimmableDriverState.fromObject(data.ddimmable_driver_state);
            }
            if (data.dnondimmable_driver_state != null) {
                message.dnondimmable_driver_state = dependency_6.com.keus.hub.DaliNonDimmableDriverState.fromObject(data.dnondimmable_driver_state);
            }
            if (data.zcurtain_controller_state != null) {
                message.zcurtain_controller_state = dependency_1.com.keus.hub.ZigbeeCurtainControllerState.fromObject(data.zcurtain_controller_state);
            }
            if (data.zinline_dimmer_state != null) {
                message.zinline_dimmer_state = dependency_7.com.keus.hub.ZigbeeInlineDimmerState.fromObject(data.zinline_dimmer_state);
            }
            if (data.zrgbwwa_state != null) {
                message.zrgbwwa_state = dependency_8.com.keus.hub.GroupZigbeeRgbwwaState.fromObject(data.zrgbwwa_state);
            }
            if (data.app_onff_state != null) {
                message.app_onff_state = dependency_9.com.keus.hub.OnOffApplianceState.fromObject(data.app_onff_state);
            }
            if (data.app_single_dimmer_state != null) {
                message.app_single_dimmer_state = dependency_9.com.keus.hub.SingleDimmerApplianceState.fromObject(data.app_single_dimmer_state);
            }
            if (data.app_fan_state != null) {
                message.app_fan_state = dependency_9.com.keus.hub.FanApplianceState.fromObject(data.app_fan_state);
            }
            if (data.app_color_tunable_state != null) {
                message.app_color_tunable_state = dependency_9.com.keus.hub.ColorTunableApplianceState.fromObject(data.app_color_tunable_state);
            }
            if (data.dcolortunable_driver_state != null) {
                message.dcolortunable_driver_state = dependency_5.com.keus.hub.DaliColorTunableDriverState.fromObject(data.dcolortunable_driver_state);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                zdimmable_driver_state?: ReturnType<typeof dependency_2.com.keus.hub.ZigbeeDimmableDriverState.prototype.toObject>;
                znondimmable_driver_state?: ReturnType<typeof dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.prototype.toObject>;
                ddimmable_driver_state?: ReturnType<typeof dependency_4.com.keus.hub.DaliDimmableDriverState.prototype.toObject>;
                dnondimmable_driver_state?: ReturnType<typeof dependency_6.com.keus.hub.DaliNonDimmableDriverState.prototype.toObject>;
                zcurtain_controller_state?: ReturnType<typeof dependency_1.com.keus.hub.ZigbeeCurtainControllerState.prototype.toObject>;
                zinline_dimmer_state?: ReturnType<typeof dependency_7.com.keus.hub.ZigbeeInlineDimmerState.prototype.toObject>;
                zrgbwwa_state?: ReturnType<typeof dependency_8.com.keus.hub.GroupZigbeeRgbwwaState.prototype.toObject>;
                app_onff_state?: ReturnType<typeof dependency_9.com.keus.hub.OnOffApplianceState.prototype.toObject>;
                app_single_dimmer_state?: ReturnType<typeof dependency_9.com.keus.hub.SingleDimmerApplianceState.prototype.toObject>;
                app_fan_state?: ReturnType<typeof dependency_9.com.keus.hub.FanApplianceState.prototype.toObject>;
                app_color_tunable_state?: ReturnType<typeof dependency_9.com.keus.hub.ColorTunableApplianceState.prototype.toObject>;
                dcolortunable_driver_state?: ReturnType<typeof dependency_5.com.keus.hub.DaliColorTunableDriverState.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.zdimmable_driver_state != null) {
                data.zdimmable_driver_state = this.zdimmable_driver_state.toObject();
            }
            if (this.znondimmable_driver_state != null) {
                data.znondimmable_driver_state = this.znondimmable_driver_state.toObject();
            }
            if (this.ddimmable_driver_state != null) {
                data.ddimmable_driver_state = this.ddimmable_driver_state.toObject();
            }
            if (this.dnondimmable_driver_state != null) {
                data.dnondimmable_driver_state = this.dnondimmable_driver_state.toObject();
            }
            if (this.zcurtain_controller_state != null) {
                data.zcurtain_controller_state = this.zcurtain_controller_state.toObject();
            }
            if (this.zinline_dimmer_state != null) {
                data.zinline_dimmer_state = this.zinline_dimmer_state.toObject();
            }
            if (this.zrgbwwa_state != null) {
                data.zrgbwwa_state = this.zrgbwwa_state.toObject();
            }
            if (this.app_onff_state != null) {
                data.app_onff_state = this.app_onff_state.toObject();
            }
            if (this.app_single_dimmer_state != null) {
                data.app_single_dimmer_state = this.app_single_dimmer_state.toObject();
            }
            if (this.app_fan_state != null) {
                data.app_fan_state = this.app_fan_state.toObject();
            }
            if (this.app_color_tunable_state != null) {
                data.app_color_tunable_state = this.app_color_tunable_state.toObject();
            }
            if (this.dcolortunable_driver_state != null) {
                data.dcolortunable_driver_state = this.dcolortunable_driver_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.has_zdimmable_driver_state)
                writer.writeMessage(10, this.zdimmable_driver_state, () => this.zdimmable_driver_state.serialize(writer));
            if (this.has_znondimmable_driver_state)
                writer.writeMessage(11, this.znondimmable_driver_state, () => this.znondimmable_driver_state.serialize(writer));
            if (this.has_ddimmable_driver_state)
                writer.writeMessage(12, this.ddimmable_driver_state, () => this.ddimmable_driver_state.serialize(writer));
            if (this.has_dnondimmable_driver_state)
                writer.writeMessage(13, this.dnondimmable_driver_state, () => this.dnondimmable_driver_state.serialize(writer));
            if (this.has_zcurtain_controller_state)
                writer.writeMessage(14, this.zcurtain_controller_state, () => this.zcurtain_controller_state.serialize(writer));
            if (this.has_zinline_dimmer_state)
                writer.writeMessage(15, this.zinline_dimmer_state, () => this.zinline_dimmer_state.serialize(writer));
            if (this.has_zrgbwwa_state)
                writer.writeMessage(16, this.zrgbwwa_state, () => this.zrgbwwa_state.serialize(writer));
            if (this.has_app_onff_state)
                writer.writeMessage(17, this.app_onff_state, () => this.app_onff_state.serialize(writer));
            if (this.has_app_single_dimmer_state)
                writer.writeMessage(18, this.app_single_dimmer_state, () => this.app_single_dimmer_state.serialize(writer));
            if (this.has_app_fan_state)
                writer.writeMessage(19, this.app_fan_state, () => this.app_fan_state.serialize(writer));
            if (this.has_app_color_tunable_state)
                writer.writeMessage(20, this.app_color_tunable_state, () => this.app_color_tunable_state.serialize(writer));
            if (this.has_dcolortunable_driver_state)
                writer.writeMessage(21, this.dcolortunable_driver_state, () => this.dcolortunable_driver_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGroupState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGroupState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.zdimmable_driver_state, () => message.zdimmable_driver_state = dependency_2.com.keus.hub.ZigbeeDimmableDriverState.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.znondimmable_driver_state, () => message.znondimmable_driver_state = dependency_3.com.keus.hub.ZigbeeNonDimmableDriverState.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.ddimmable_driver_state, () => message.ddimmable_driver_state = dependency_4.com.keus.hub.DaliDimmableDriverState.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.dnondimmable_driver_state, () => message.dnondimmable_driver_state = dependency_6.com.keus.hub.DaliNonDimmableDriverState.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.zcurtain_controller_state, () => message.zcurtain_controller_state = dependency_1.com.keus.hub.ZigbeeCurtainControllerState.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.zinline_dimmer_state, () => message.zinline_dimmer_state = dependency_7.com.keus.hub.ZigbeeInlineDimmerState.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.zrgbwwa_state, () => message.zrgbwwa_state = dependency_8.com.keus.hub.GroupZigbeeRgbwwaState.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.app_onff_state, () => message.app_onff_state = dependency_9.com.keus.hub.OnOffApplianceState.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.app_single_dimmer_state, () => message.app_single_dimmer_state = dependency_9.com.keus.hub.SingleDimmerApplianceState.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.app_fan_state, () => message.app_fan_state = dependency_9.com.keus.hub.FanApplianceState.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.app_color_tunable_state, () => message.app_color_tunable_state = dependency_9.com.keus.hub.ColorTunableApplianceState.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.dcolortunable_driver_state, () => message.dcolortunable_driver_state = dependency_5.com.keus.hub.DaliColorTunableDriverState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGroupState {
            return UpdateGroupState.deserialize(bytes);
        }
    }
    export class UpdateGroupStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            group?: Group;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group() {
            return pb_1.Message.getWrapperField(this, Group, 4) as Group;
        }
        set group(value: Group) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            group?: ReturnType<typeof Group.prototype.toObject>;
            ops_message?: string;
        }): UpdateGroupStateResponse {
            const message = new UpdateGroupStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.group != null) {
                message.group = Group.fromObject(data.group);
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                group?: ReturnType<typeof Group.prototype.toObject>;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_group)
                writer.writeMessage(4, this.group, () => this.group.serialize(writer));
            if (this.ops_message.length)
                writer.writeString(5, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGroupStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGroupStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.group, () => message.group = Group.deserialize(reader));
                        break;
                    case 5:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGroupStateResponse {
            return UpdateGroupStateResponse.deserialize(bytes);
        }
    }
    export class MoveGroupToRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            current_group_room?: string;
            new_group_room?: string;
            new_group_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("current_group_room" in data && data.current_group_room != undefined) {
                    this.current_group_room = data.current_group_room;
                }
                if ("new_group_room" in data && data.new_group_room != undefined) {
                    this.new_group_room = data.new_group_room;
                }
                if ("new_group_section" in data && data.new_group_section != undefined) {
                    this.new_group_section = data.new_group_section;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get current_group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set current_group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_group_room() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_group_room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get new_group_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set new_group_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            group_id?: number;
            current_group_room?: string;
            new_group_room?: string;
            new_group_section?: string;
        }): MoveGroupToRoom {
            const message = new MoveGroupToRoom({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.current_group_room != null) {
                message.current_group_room = data.current_group_room;
            }
            if (data.new_group_room != null) {
                message.new_group_room = data.new_group_room;
            }
            if (data.new_group_section != null) {
                message.new_group_section = data.new_group_section;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                current_group_room?: string;
                new_group_room?: string;
                new_group_section?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.current_group_room != null) {
                data.current_group_room = this.current_group_room;
            }
            if (this.new_group_room != null) {
                data.new_group_room = this.new_group_room;
            }
            if (this.new_group_section != null) {
                data.new_group_section = this.new_group_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.current_group_room.length)
                writer.writeString(2, this.current_group_room);
            if (this.new_group_room.length)
                writer.writeString(3, this.new_group_room);
            if (this.new_group_section.length)
                writer.writeString(4, this.new_group_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveGroupToRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveGroupToRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.current_group_room = reader.readString();
                        break;
                    case 3:
                        message.new_group_room = reader.readString();
                        break;
                    case 4:
                        message.new_group_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveGroupToRoom {
            return MoveGroupToRoom.deserialize(bytes);
        }
    }
    export class MoveGroupToRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveGroupToRoomResponse {
            const message = new MoveGroupToRoomResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveGroupToRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveGroupToRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveGroupToRoomResponse {
            return MoveGroupToRoomResponse.deserialize(bytes);
        }
    }
    export class ReportUpdateGroupActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_identifier?: GroupIdentifier;
            group_state?: number;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_identifier" in data && data.group_identifier != undefined) {
                    this.group_identifier = data.group_identifier;
                }
                if ("group_state" in data && data.group_state != undefined) {
                    this.group_state = data.group_state;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get group_identifier() {
            return pb_1.Message.getWrapperField(this, GroupIdentifier, 1) as GroupIdentifier;
        }
        set group_identifier(value: GroupIdentifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_group_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            group_identifier?: ReturnType<typeof GroupIdentifier.prototype.toObject>;
            group_state?: number;
            activity_time?: number;
        }): ReportUpdateGroupActivity {
            const message = new ReportUpdateGroupActivity({});
            if (data.group_identifier != null) {
                message.group_identifier = GroupIdentifier.fromObject(data.group_identifier);
            }
            if (data.group_state != null) {
                message.group_state = data.group_state;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                group_identifier?: ReturnType<typeof GroupIdentifier.prototype.toObject>;
                group_state?: number;
                activity_time?: number;
            } = {};
            if (this.group_identifier != null) {
                data.group_identifier = this.group_identifier.toObject();
            }
            if (this.group_state != null) {
                data.group_state = this.group_state;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group_identifier)
                writer.writeMessage(1, this.group_identifier, () => this.group_identifier.serialize(writer));
            if (this.group_state != 0)
                writer.writeUint32(2, this.group_state);
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportUpdateGroupActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportUpdateGroupActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group_identifier, () => message.group_identifier = GroupIdentifier.deserialize(reader));
                        break;
                    case 2:
                        message.group_state = reader.readUint32();
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportUpdateGroupActivity {
            return ReportUpdateGroupActivity.deserialize(bytes);
        }
    }
    export class UpdateGroupEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_state?: UpdateGroupState;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_state" in data && data.update_state != undefined) {
                    this.update_state = data.update_state;
                }
                if ("activity_source" in data && data.activity_source != undefined) {
                    this.activity_source = data.activity_source;
                }
                if ("activity_user" in data && data.activity_user != undefined) {
                    this.activity_user = data.activity_user;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get update_state() {
            return pb_1.Message.getWrapperField(this, UpdateGroupState, 1) as UpdateGroupState;
        }
        set update_state(value: UpdateGroupState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_update_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set activity_source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activity_user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set activity_user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_state?: ReturnType<typeof UpdateGroupState.prototype.toObject>;
            activity_source?: string;
            activity_user?: string;
            activity_time?: number;
        }): UpdateGroupEvent {
            const message = new UpdateGroupEvent({});
            if (data.update_state != null) {
                message.update_state = UpdateGroupState.fromObject(data.update_state);
            }
            if (data.activity_source != null) {
                message.activity_source = data.activity_source;
            }
            if (data.activity_user != null) {
                message.activity_user = data.activity_user;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                update_state?: ReturnType<typeof UpdateGroupState.prototype.toObject>;
                activity_source?: string;
                activity_user?: string;
                activity_time?: number;
            } = {};
            if (this.update_state != null) {
                data.update_state = this.update_state.toObject();
            }
            if (this.activity_source != null) {
                data.activity_source = this.activity_source;
            }
            if (this.activity_user != null) {
                data.activity_user = this.activity_user;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_update_state)
                writer.writeMessage(1, this.update_state, () => this.update_state.serialize(writer));
            if (this.activity_source.length)
                writer.writeString(3, this.activity_source);
            if (this.activity_user.length)
                writer.writeString(4, this.activity_user);
            if (this.activity_time != 0)
                writer.writeUint64(5, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGroupEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGroupEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.update_state, () => message.update_state = UpdateGroupState.deserialize(reader));
                        break;
                    case 3:
                        message.activity_source = reader.readString();
                        break;
                    case 4:
                        message.activity_user = reader.readString();
                        break;
                    case 5:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGroupEvent {
            return UpdateGroupEvent.deserialize(bytes);
        }
    }
    export class ChangeGroupIconType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            group_room?: string;
            group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_room" in data && data.group_room != undefined) {
                    this.group_room = data.group_room;
                }
                if ("group_icon_type" in data && data.group_icon_type != undefined) {
                    this.group_icon_type = data.group_icon_type;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_icon_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT) as dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }
        set group_icon_type(value: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            group_room?: string;
            group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
        }): ChangeGroupIconType {
            const message = new ChangeGroupIconType({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_room != null) {
                message.group_room = data.group_room;
            }
            if (data.group_icon_type != null) {
                message.group_icon_type = data.group_icon_type;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                group_room?: string;
                group_icon_type?: dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_room != null) {
                data.group_room = this.group_room;
            }
            if (this.group_icon_type != null) {
                data.group_icon_type = this.group_icon_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint32(1, this.group_id);
            if (this.group_room.length)
                writer.writeString(2, this.group_room);
            if (this.group_icon_type != dependency_10.com.keus.hub.EMBEDDED_SWITCH_ICONS.DOWN_LIGHT)
                writer.writeEnum(3, this.group_icon_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeGroupIconType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeGroupIconType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint32();
                        break;
                    case 2:
                        message.group_room = reader.readString();
                        break;
                    case 3:
                        message.group_icon_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeGroupIconType {
            return ChangeGroupIconType.deserialize(bytes);
        }
    }
    export class ChangeGroupIconTypeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ChangeGroupIconTypeResponse {
            const message = new ChangeGroupIconTypeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeUint32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeGroupIconTypeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeGroupIconTypeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeGroupIconTypeResponse {
            return ChangeGroupIconTypeResponse.deserialize(bytes);
        }
    }
}
