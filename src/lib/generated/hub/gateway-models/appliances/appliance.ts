/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/appliances/appliance.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./appliance-types/switch";
import * as dependency_2 from "./appliance-types/dimmer";
import * as dependency_3 from "./appliance-types/rgbcolor";
import * as dependency_4 from "./appliance-types/rgbaddr";
import * as dependency_5 from "./appliance-types/wwmixer";
import * as dependency_6 from "./appliance-types/airconditioner";
import * as dependency_7 from "./appliance-types/push_trigger";
import * as dependency_8 from "./appliance-types/blinds";
import * as dependency_9 from "./appliance-types/blindspercent";
import * as dependency_10 from "./appliance-types/blindstilt";
import * as dependency_11 from "./appliance-types/blindsrelay";
import * as dependency_12 from "./appliance-types/blindspercentrelay";
import * as dependency_13 from "./appliance-types/blindstiltrelay";
import * as dependency_14 from "./../protocols/keus-zigbee/appliance/keuszigbee_appliance";
import * as dependency_15 from "./../protocols/Ip/appliance/ip-appliance";
import * as dependency_16 from "./appliance_constants";
import * as dependency_17 from "./../../activity/gmactivity";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class GMApplianceHomeInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_room?: string;
            appliance_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_room" in data && data.appliance_room != undefined) {
                    this.appliance_room = data.appliance_room;
                }
                if ("appliance_section" in data && data.appliance_section != undefined) {
                    this.appliance_section = data.appliance_section;
                }
            }
        }
        get appliance_room() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_room(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_section() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_section(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_room?: string;
            appliance_section?: string;
        }): GMApplianceHomeInfo {
            const message = new GMApplianceHomeInfo({});
            if (data.appliance_room != null) {
                message.appliance_room = data.appliance_room;
            }
            if (data.appliance_section != null) {
                message.appliance_section = data.appliance_section;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_room?: string;
                appliance_section?: string;
            } = {};
            if (this.appliance_room != null) {
                data.appliance_room = this.appliance_room;
            }
            if (this.appliance_section != null) {
                data.appliance_section = this.appliance_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_room.length)
                writer.writeString(1, this.appliance_room);
            if (this.appliance_section.length)
                writer.writeString(2, this.appliance_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceHomeInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceHomeInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_room = reader.readString();
                        break;
                    case 2:
                        message.appliance_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceHomeInfo {
            return GMApplianceHomeInfo.deserialize(bytes);
        }
    }
    export class GMApplianceGroupInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            in_group?: boolean;
            group_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("in_group" in data && data.in_group != undefined) {
                    this.in_group = data.in_group;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get in_group() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set in_group(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            in_group?: boolean;
            group_id?: string;
        }): GMApplianceGroupInfo {
            const message = new GMApplianceGroupInfo({});
            if (data.in_group != null) {
                message.in_group = data.in_group;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                in_group?: boolean;
                group_id?: string;
            } = {};
            if (this.in_group != null) {
                data.in_group = this.in_group;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.in_group != false)
                writer.writeBool(1, this.in_group);
            if (this.group_id.length)
                writer.writeString(2, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceGroupInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceGroupInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.in_group = reader.readBool();
                        break;
                    case 2:
                        message.group_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceGroupInfo {
            return GMApplianceGroupInfo.deserialize(bytes);
        }
    }
    export class GMApplianceSyncInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sync_status?: dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_STATES;
            sync_request_type?: dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_REQUEST_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            sync_request_params?: string;
            job_type_name?: string;
            job_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sync_status" in data && data.sync_status != undefined) {
                    this.sync_status = data.sync_status;
                }
                if ("sync_request_type" in data && data.sync_request_type != undefined) {
                    this.sync_request_type = data.sync_request_type;
                }
                if ("sync_request_id" in data && data.sync_request_id != undefined) {
                    this.sync_request_id = data.sync_request_id;
                }
                if ("sync_request_time" in data && data.sync_request_time != undefined) {
                    this.sync_request_time = data.sync_request_time;
                }
                if ("sync_request_params" in data && data.sync_request_params != undefined) {
                    this.sync_request_params = data.sync_request_params;
                }
                if ("job_type_name" in data && data.job_type_name != undefined) {
                    this.job_type_name = data.job_type_name;
                }
                if ("job_message" in data && data.job_message != undefined) {
                    this.job_message = data.job_message;
                }
            }
        }
        get sync_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_STATES.GMASS_INSYNC) as dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_STATES;
        }
        set sync_status(value: dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_STATES) {
            pb_1.Message.setField(this, 1, value);
        }
        get sync_request_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_REQUEST_TYPES.GMASRT_NONE) as dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_REQUEST_TYPES;
        }
        set sync_request_type(value: dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_REQUEST_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get sync_request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sync_request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sync_request_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sync_request_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get sync_request_params() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set sync_request_params(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get job_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set job_type_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get job_message() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set job_message(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            sync_status?: dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_STATES;
            sync_request_type?: dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_REQUEST_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            sync_request_params?: string;
            job_type_name?: string;
            job_message?: string;
        }): GMApplianceSyncInfo {
            const message = new GMApplianceSyncInfo({});
            if (data.sync_status != null) {
                message.sync_status = data.sync_status;
            }
            if (data.sync_request_type != null) {
                message.sync_request_type = data.sync_request_type;
            }
            if (data.sync_request_id != null) {
                message.sync_request_id = data.sync_request_id;
            }
            if (data.sync_request_time != null) {
                message.sync_request_time = data.sync_request_time;
            }
            if (data.sync_request_params != null) {
                message.sync_request_params = data.sync_request_params;
            }
            if (data.job_type_name != null) {
                message.job_type_name = data.job_type_name;
            }
            if (data.job_message != null) {
                message.job_message = data.job_message;
            }
            return message;
        }
        toObject() {
            const data: {
                sync_status?: dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_STATES;
                sync_request_type?: dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_REQUEST_TYPES;
                sync_request_id?: string;
                sync_request_time?: number;
                sync_request_params?: string;
                job_type_name?: string;
                job_message?: string;
            } = {};
            if (this.sync_status != null) {
                data.sync_status = this.sync_status;
            }
            if (this.sync_request_type != null) {
                data.sync_request_type = this.sync_request_type;
            }
            if (this.sync_request_id != null) {
                data.sync_request_id = this.sync_request_id;
            }
            if (this.sync_request_time != null) {
                data.sync_request_time = this.sync_request_time;
            }
            if (this.sync_request_params != null) {
                data.sync_request_params = this.sync_request_params;
            }
            if (this.job_type_name != null) {
                data.job_type_name = this.job_type_name;
            }
            if (this.job_message != null) {
                data.job_message = this.job_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sync_status != dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_STATES.GMASS_INSYNC)
                writer.writeEnum(1, this.sync_status);
            if (this.sync_request_type != dependency_16.com.keus.gateway.GMAPPLIANCE_SYNC_REQUEST_TYPES.GMASRT_NONE)
                writer.writeEnum(2, this.sync_request_type);
            if (this.sync_request_id.length)
                writer.writeString(3, this.sync_request_id);
            if (this.sync_request_time != 0)
                writer.writeUint64(4, this.sync_request_time);
            if (this.sync_request_params.length)
                writer.writeString(5, this.sync_request_params);
            if (this.job_type_name.length)
                writer.writeString(6, this.job_type_name);
            if (this.job_message.length)
                writer.writeString(7, this.job_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceSyncInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceSyncInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sync_status = reader.readEnum();
                        break;
                    case 2:
                        message.sync_request_type = reader.readEnum();
                        break;
                    case 3:
                        message.sync_request_id = reader.readString();
                        break;
                    case 4:
                        message.sync_request_time = reader.readUint64();
                        break;
                    case 5:
                        message.sync_request_params = reader.readString();
                        break;
                    case 6:
                        message.job_type_name = reader.readString();
                        break;
                    case 7:
                        message.job_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceSyncInfo {
            return GMApplianceSyncInfo.deserialize(bytes);
        }
    }
    export class GMApplianceVoiceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            discover_appliance?: boolean;
            appliance_voice_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("discover_appliance" in data && data.discover_appliance != undefined) {
                    this.discover_appliance = data.discover_appliance;
                }
                if ("appliance_voice_name" in data && data.appliance_voice_name != undefined) {
                    this.appliance_voice_name = data.appliance_voice_name;
                }
            }
        }
        get discover_appliance() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set discover_appliance(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_voice_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_voice_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            discover_appliance?: boolean;
            appliance_voice_name?: string;
        }): GMApplianceVoiceInfo {
            const message = new GMApplianceVoiceInfo({});
            if (data.discover_appliance != null) {
                message.discover_appliance = data.discover_appliance;
            }
            if (data.appliance_voice_name != null) {
                message.appliance_voice_name = data.appliance_voice_name;
            }
            return message;
        }
        toObject() {
            const data: {
                discover_appliance?: boolean;
                appliance_voice_name?: string;
            } = {};
            if (this.discover_appliance != null) {
                data.discover_appliance = this.discover_appliance;
            }
            if (this.appliance_voice_name != null) {
                data.appliance_voice_name = this.appliance_voice_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.discover_appliance != false)
                writer.writeBool(1, this.discover_appliance);
            if (this.appliance_voice_name.length)
                writer.writeString(2, this.appliance_voice_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceVoiceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceVoiceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.discover_appliance = reader.readBool();
                        break;
                    case 2:
                        message.appliance_voice_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceVoiceInfo {
            return GMApplianceVoiceInfo.deserialize(bytes);
        }
    }
    export class GMApplianceStatusInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_configured?: boolean;
            is_hidden?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_configured" in data && data.is_configured != undefined) {
                    this.is_configured = data.is_configured;
                }
                if ("is_hidden" in data && data.is_hidden != undefined) {
                    this.is_hidden = data.is_hidden;
                }
            }
        }
        get is_configured() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_configured(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_hidden(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            is_configured?: boolean;
            is_hidden?: boolean;
        }): GMApplianceStatusInfo {
            const message = new GMApplianceStatusInfo({});
            if (data.is_configured != null) {
                message.is_configured = data.is_configured;
            }
            if (data.is_hidden != null) {
                message.is_hidden = data.is_hidden;
            }
            return message;
        }
        toObject() {
            const data: {
                is_configured?: boolean;
                is_hidden?: boolean;
            } = {};
            if (this.is_configured != null) {
                data.is_configured = this.is_configured;
            }
            if (this.is_hidden != null) {
                data.is_hidden = this.is_hidden;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_configured != false)
                writer.writeBool(1, this.is_configured);
            if (this.is_hidden != false)
                writer.writeBool(2, this.is_hidden);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceStatusInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceStatusInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_configured = reader.readBool();
                        break;
                    case 2:
                        message.is_hidden = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceStatusInfo {
            return GMApplianceStatusInfo.deserialize(bytes);
        }
    }
    export class GMApplianceStateInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[101, 102, 103, 104, 105, 106, 113, 107, 108, 109, 110, 111, 112]];
        constructor(data?: any[] | ({} & (({
            switch_appliance_state?: dependency_1.com.keus.gateway.SwitchApplianceState;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: dependency_2.com.keus.gateway.DimmerApplianceState;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: dependency_3.com.keus.gateway.RGBColorApplianceState;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: dependency_5.com.keus.gateway.WWMixerApplianceState;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: dependency_6.com.keus.gateway.AirConditionerApplianceState;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: dependency_7.com.keus.gateway.PushTriggerApplianceState;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: dependency_4.com.keus.gateway.RGBAddrApplianceState;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: dependency_8.com.keus.gateway.BlindsApplianceState;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: dependency_9.com.keus.gateway.BlindsPercentApplianceState;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: dependency_10.com.keus.gateway.BlindsTiltApplianceState;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: dependency_11.com.keus.gateway.BlindsRelayApplianceState;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: dependency_12.com.keus.gateway.BlindsPercentRelayApplianceState;
            blinds_tilt_relay_appliance_state?: never;
        } | {
            switch_appliance_state?: never;
            dimmer_appliance_state?: never;
            rgbcolor_appliance_state?: never;
            wwmixer_appliance_state?: never;
            airconditioner_appliance_state?: never;
            push_trigger_appliance_state?: never;
            rgbaddr_appliance_state?: never;
            blinds_appliance_state?: never;
            blinds_percent_appliance_state?: never;
            blinds_tilt_appliance_state?: never;
            blinds_relay_appliance_state?: never;
            blinds_percent_relay_appliance_state?: never;
            blinds_tilt_relay_appliance_state?: dependency_13.com.keus.gateway.BlindsTiltRelayApplianceState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("switch_appliance_state" in data && data.switch_appliance_state != undefined) {
                    this.switch_appliance_state = data.switch_appliance_state;
                }
                if ("dimmer_appliance_state" in data && data.dimmer_appliance_state != undefined) {
                    this.dimmer_appliance_state = data.dimmer_appliance_state;
                }
                if ("rgbcolor_appliance_state" in data && data.rgbcolor_appliance_state != undefined) {
                    this.rgbcolor_appliance_state = data.rgbcolor_appliance_state;
                }
                if ("wwmixer_appliance_state" in data && data.wwmixer_appliance_state != undefined) {
                    this.wwmixer_appliance_state = data.wwmixer_appliance_state;
                }
                if ("airconditioner_appliance_state" in data && data.airconditioner_appliance_state != undefined) {
                    this.airconditioner_appliance_state = data.airconditioner_appliance_state;
                }
                if ("push_trigger_appliance_state" in data && data.push_trigger_appliance_state != undefined) {
                    this.push_trigger_appliance_state = data.push_trigger_appliance_state;
                }
                if ("rgbaddr_appliance_state" in data && data.rgbaddr_appliance_state != undefined) {
                    this.rgbaddr_appliance_state = data.rgbaddr_appliance_state;
                }
                if ("blinds_appliance_state" in data && data.blinds_appliance_state != undefined) {
                    this.blinds_appliance_state = data.blinds_appliance_state;
                }
                if ("blinds_percent_appliance_state" in data && data.blinds_percent_appliance_state != undefined) {
                    this.blinds_percent_appliance_state = data.blinds_percent_appliance_state;
                }
                if ("blinds_tilt_appliance_state" in data && data.blinds_tilt_appliance_state != undefined) {
                    this.blinds_tilt_appliance_state = data.blinds_tilt_appliance_state;
                }
                if ("blinds_relay_appliance_state" in data && data.blinds_relay_appliance_state != undefined) {
                    this.blinds_relay_appliance_state = data.blinds_relay_appliance_state;
                }
                if ("blinds_percent_relay_appliance_state" in data && data.blinds_percent_relay_appliance_state != undefined) {
                    this.blinds_percent_relay_appliance_state = data.blinds_percent_relay_appliance_state;
                }
                if ("blinds_tilt_relay_appliance_state" in data && data.blinds_tilt_relay_appliance_state != undefined) {
                    this.blinds_tilt_relay_appliance_state = data.blinds_tilt_relay_appliance_state;
                }
            }
        }
        get switch_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.SwitchApplianceState, 101) as dependency_1.com.keus.gateway.SwitchApplianceState;
        }
        set switch_appliance_state(value: dependency_1.com.keus.gateway.SwitchApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
        }
        get has_switch_appliance_state() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get dimmer_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.DimmerApplianceState, 102) as dependency_2.com.keus.gateway.DimmerApplianceState;
        }
        set dimmer_appliance_state(value: dependency_2.com.keus.gateway.DimmerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 102, this.#one_of_decls[0], value);
        }
        get has_dimmer_appliance_state() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get rgbcolor_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.RGBColorApplianceState, 103) as dependency_3.com.keus.gateway.RGBColorApplianceState;
        }
        set rgbcolor_appliance_state(value: dependency_3.com.keus.gateway.RGBColorApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 103, this.#one_of_decls[0], value);
        }
        get has_rgbcolor_appliance_state() {
            return pb_1.Message.getField(this, 103) != null;
        }
        get wwmixer_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.gateway.WWMixerApplianceState, 104) as dependency_5.com.keus.gateway.WWMixerApplianceState;
        }
        set wwmixer_appliance_state(value: dependency_5.com.keus.gateway.WWMixerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 104, this.#one_of_decls[0], value);
        }
        get has_wwmixer_appliance_state() {
            return pb_1.Message.getField(this, 104) != null;
        }
        get airconditioner_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.gateway.AirConditionerApplianceState, 105) as dependency_6.com.keus.gateway.AirConditionerApplianceState;
        }
        set airconditioner_appliance_state(value: dependency_6.com.keus.gateway.AirConditionerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 105, this.#one_of_decls[0], value);
        }
        get has_airconditioner_appliance_state() {
            return pb_1.Message.getField(this, 105) != null;
        }
        get push_trigger_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.gateway.PushTriggerApplianceState, 106) as dependency_7.com.keus.gateway.PushTriggerApplianceState;
        }
        set push_trigger_appliance_state(value: dependency_7.com.keus.gateway.PushTriggerApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 106, this.#one_of_decls[0], value);
        }
        get has_push_trigger_appliance_state() {
            return pb_1.Message.getField(this, 106) != null;
        }
        get rgbaddr_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.gateway.RGBAddrApplianceState, 113) as dependency_4.com.keus.gateway.RGBAddrApplianceState;
        }
        set rgbaddr_appliance_state(value: dependency_4.com.keus.gateway.RGBAddrApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 113, this.#one_of_decls[0], value);
        }
        get has_rgbaddr_appliance_state() {
            return pb_1.Message.getField(this, 113) != null;
        }
        get blinds_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.gateway.BlindsApplianceState, 107) as dependency_8.com.keus.gateway.BlindsApplianceState;
        }
        set blinds_appliance_state(value: dependency_8.com.keus.gateway.BlindsApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 107, this.#one_of_decls[0], value);
        }
        get has_blinds_appliance_state() {
            return pb_1.Message.getField(this, 107) != null;
        }
        get blinds_percent_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.gateway.BlindsPercentApplianceState, 108) as dependency_9.com.keus.gateway.BlindsPercentApplianceState;
        }
        set blinds_percent_appliance_state(value: dependency_9.com.keus.gateway.BlindsPercentApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 108, this.#one_of_decls[0], value);
        }
        get has_blinds_percent_appliance_state() {
            return pb_1.Message.getField(this, 108) != null;
        }
        get blinds_tilt_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.gateway.BlindsTiltApplianceState, 109) as dependency_10.com.keus.gateway.BlindsTiltApplianceState;
        }
        set blinds_tilt_appliance_state(value: dependency_10.com.keus.gateway.BlindsTiltApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 109, this.#one_of_decls[0], value);
        }
        get has_blinds_tilt_appliance_state() {
            return pb_1.Message.getField(this, 109) != null;
        }
        get blinds_relay_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.gateway.BlindsRelayApplianceState, 110) as dependency_11.com.keus.gateway.BlindsRelayApplianceState;
        }
        set blinds_relay_appliance_state(value: dependency_11.com.keus.gateway.BlindsRelayApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 110, this.#one_of_decls[0], value);
        }
        get has_blinds_relay_appliance_state() {
            return pb_1.Message.getField(this, 110) != null;
        }
        get blinds_percent_relay_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.gateway.BlindsPercentRelayApplianceState, 111) as dependency_12.com.keus.gateway.BlindsPercentRelayApplianceState;
        }
        set blinds_percent_relay_appliance_state(value: dependency_12.com.keus.gateway.BlindsPercentRelayApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 111, this.#one_of_decls[0], value);
        }
        get has_blinds_percent_relay_appliance_state() {
            return pb_1.Message.getField(this, 111) != null;
        }
        get blinds_tilt_relay_appliance_state() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.gateway.BlindsTiltRelayApplianceState, 112) as dependency_13.com.keus.gateway.BlindsTiltRelayApplianceState;
        }
        set blinds_tilt_relay_appliance_state(value: dependency_13.com.keus.gateway.BlindsTiltRelayApplianceState) {
            pb_1.Message.setOneofWrapperField(this, 112, this.#one_of_decls[0], value);
        }
        get has_blinds_tilt_relay_appliance_state() {
            return pb_1.Message.getField(this, 112) != null;
        }
        get appliance_state() {
            const cases: {
                [index: number]: "none" | "switch_appliance_state" | "dimmer_appliance_state" | "rgbcolor_appliance_state" | "wwmixer_appliance_state" | "airconditioner_appliance_state" | "push_trigger_appliance_state" | "rgbaddr_appliance_state" | "blinds_appliance_state" | "blinds_percent_appliance_state" | "blinds_tilt_appliance_state" | "blinds_relay_appliance_state" | "blinds_percent_relay_appliance_state" | "blinds_tilt_relay_appliance_state";
            } = {
                0: "none",
                101: "switch_appliance_state",
                102: "dimmer_appliance_state",
                103: "rgbcolor_appliance_state",
                104: "wwmixer_appliance_state",
                105: "airconditioner_appliance_state",
                106: "push_trigger_appliance_state",
                113: "rgbaddr_appliance_state",
                107: "blinds_appliance_state",
                108: "blinds_percent_appliance_state",
                109: "blinds_tilt_appliance_state",
                110: "blinds_relay_appliance_state",
                111: "blinds_percent_relay_appliance_state",
                112: "blinds_tilt_relay_appliance_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101, 102, 103, 104, 105, 106, 113, 107, 108, 109, 110, 111, 112])];
        }
        static fromObject(data: {
            switch_appliance_state?: ReturnType<typeof dependency_1.com.keus.gateway.SwitchApplianceState.prototype.toObject>;
            dimmer_appliance_state?: ReturnType<typeof dependency_2.com.keus.gateway.DimmerApplianceState.prototype.toObject>;
            rgbcolor_appliance_state?: ReturnType<typeof dependency_3.com.keus.gateway.RGBColorApplianceState.prototype.toObject>;
            wwmixer_appliance_state?: ReturnType<typeof dependency_5.com.keus.gateway.WWMixerApplianceState.prototype.toObject>;
            airconditioner_appliance_state?: ReturnType<typeof dependency_6.com.keus.gateway.AirConditionerApplianceState.prototype.toObject>;
            push_trigger_appliance_state?: ReturnType<typeof dependency_7.com.keus.gateway.PushTriggerApplianceState.prototype.toObject>;
            rgbaddr_appliance_state?: ReturnType<typeof dependency_4.com.keus.gateway.RGBAddrApplianceState.prototype.toObject>;
            blinds_appliance_state?: ReturnType<typeof dependency_8.com.keus.gateway.BlindsApplianceState.prototype.toObject>;
            blinds_percent_appliance_state?: ReturnType<typeof dependency_9.com.keus.gateway.BlindsPercentApplianceState.prototype.toObject>;
            blinds_tilt_appliance_state?: ReturnType<typeof dependency_10.com.keus.gateway.BlindsTiltApplianceState.prototype.toObject>;
            blinds_relay_appliance_state?: ReturnType<typeof dependency_11.com.keus.gateway.BlindsRelayApplianceState.prototype.toObject>;
            blinds_percent_relay_appliance_state?: ReturnType<typeof dependency_12.com.keus.gateway.BlindsPercentRelayApplianceState.prototype.toObject>;
            blinds_tilt_relay_appliance_state?: ReturnType<typeof dependency_13.com.keus.gateway.BlindsTiltRelayApplianceState.prototype.toObject>;
        }): GMApplianceStateInfo {
            const message = new GMApplianceStateInfo({});
            if (data.switch_appliance_state != null) {
                message.switch_appliance_state = dependency_1.com.keus.gateway.SwitchApplianceState.fromObject(data.switch_appliance_state);
            }
            if (data.dimmer_appliance_state != null) {
                message.dimmer_appliance_state = dependency_2.com.keus.gateway.DimmerApplianceState.fromObject(data.dimmer_appliance_state);
            }
            if (data.rgbcolor_appliance_state != null) {
                message.rgbcolor_appliance_state = dependency_3.com.keus.gateway.RGBColorApplianceState.fromObject(data.rgbcolor_appliance_state);
            }
            if (data.wwmixer_appliance_state != null) {
                message.wwmixer_appliance_state = dependency_5.com.keus.gateway.WWMixerApplianceState.fromObject(data.wwmixer_appliance_state);
            }
            if (data.airconditioner_appliance_state != null) {
                message.airconditioner_appliance_state = dependency_6.com.keus.gateway.AirConditionerApplianceState.fromObject(data.airconditioner_appliance_state);
            }
            if (data.push_trigger_appliance_state != null) {
                message.push_trigger_appliance_state = dependency_7.com.keus.gateway.PushTriggerApplianceState.fromObject(data.push_trigger_appliance_state);
            }
            if (data.rgbaddr_appliance_state != null) {
                message.rgbaddr_appliance_state = dependency_4.com.keus.gateway.RGBAddrApplianceState.fromObject(data.rgbaddr_appliance_state);
            }
            if (data.blinds_appliance_state != null) {
                message.blinds_appliance_state = dependency_8.com.keus.gateway.BlindsApplianceState.fromObject(data.blinds_appliance_state);
            }
            if (data.blinds_percent_appliance_state != null) {
                message.blinds_percent_appliance_state = dependency_9.com.keus.gateway.BlindsPercentApplianceState.fromObject(data.blinds_percent_appliance_state);
            }
            if (data.blinds_tilt_appliance_state != null) {
                message.blinds_tilt_appliance_state = dependency_10.com.keus.gateway.BlindsTiltApplianceState.fromObject(data.blinds_tilt_appliance_state);
            }
            if (data.blinds_relay_appliance_state != null) {
                message.blinds_relay_appliance_state = dependency_11.com.keus.gateway.BlindsRelayApplianceState.fromObject(data.blinds_relay_appliance_state);
            }
            if (data.blinds_percent_relay_appliance_state != null) {
                message.blinds_percent_relay_appliance_state = dependency_12.com.keus.gateway.BlindsPercentRelayApplianceState.fromObject(data.blinds_percent_relay_appliance_state);
            }
            if (data.blinds_tilt_relay_appliance_state != null) {
                message.blinds_tilt_relay_appliance_state = dependency_13.com.keus.gateway.BlindsTiltRelayApplianceState.fromObject(data.blinds_tilt_relay_appliance_state);
            }
            return message;
        }
        toObject() {
            const data: {
                switch_appliance_state?: ReturnType<typeof dependency_1.com.keus.gateway.SwitchApplianceState.prototype.toObject>;
                dimmer_appliance_state?: ReturnType<typeof dependency_2.com.keus.gateway.DimmerApplianceState.prototype.toObject>;
                rgbcolor_appliance_state?: ReturnType<typeof dependency_3.com.keus.gateway.RGBColorApplianceState.prototype.toObject>;
                wwmixer_appliance_state?: ReturnType<typeof dependency_5.com.keus.gateway.WWMixerApplianceState.prototype.toObject>;
                airconditioner_appliance_state?: ReturnType<typeof dependency_6.com.keus.gateway.AirConditionerApplianceState.prototype.toObject>;
                push_trigger_appliance_state?: ReturnType<typeof dependency_7.com.keus.gateway.PushTriggerApplianceState.prototype.toObject>;
                rgbaddr_appliance_state?: ReturnType<typeof dependency_4.com.keus.gateway.RGBAddrApplianceState.prototype.toObject>;
                blinds_appliance_state?: ReturnType<typeof dependency_8.com.keus.gateway.BlindsApplianceState.prototype.toObject>;
                blinds_percent_appliance_state?: ReturnType<typeof dependency_9.com.keus.gateway.BlindsPercentApplianceState.prototype.toObject>;
                blinds_tilt_appliance_state?: ReturnType<typeof dependency_10.com.keus.gateway.BlindsTiltApplianceState.prototype.toObject>;
                blinds_relay_appliance_state?: ReturnType<typeof dependency_11.com.keus.gateway.BlindsRelayApplianceState.prototype.toObject>;
                blinds_percent_relay_appliance_state?: ReturnType<typeof dependency_12.com.keus.gateway.BlindsPercentRelayApplianceState.prototype.toObject>;
                blinds_tilt_relay_appliance_state?: ReturnType<typeof dependency_13.com.keus.gateway.BlindsTiltRelayApplianceState.prototype.toObject>;
            } = {};
            if (this.switch_appliance_state != null) {
                data.switch_appliance_state = this.switch_appliance_state.toObject();
            }
            if (this.dimmer_appliance_state != null) {
                data.dimmer_appliance_state = this.dimmer_appliance_state.toObject();
            }
            if (this.rgbcolor_appliance_state != null) {
                data.rgbcolor_appliance_state = this.rgbcolor_appliance_state.toObject();
            }
            if (this.wwmixer_appliance_state != null) {
                data.wwmixer_appliance_state = this.wwmixer_appliance_state.toObject();
            }
            if (this.airconditioner_appliance_state != null) {
                data.airconditioner_appliance_state = this.airconditioner_appliance_state.toObject();
            }
            if (this.push_trigger_appliance_state != null) {
                data.push_trigger_appliance_state = this.push_trigger_appliance_state.toObject();
            }
            if (this.rgbaddr_appliance_state != null) {
                data.rgbaddr_appliance_state = this.rgbaddr_appliance_state.toObject();
            }
            if (this.blinds_appliance_state != null) {
                data.blinds_appliance_state = this.blinds_appliance_state.toObject();
            }
            if (this.blinds_percent_appliance_state != null) {
                data.blinds_percent_appliance_state = this.blinds_percent_appliance_state.toObject();
            }
            if (this.blinds_tilt_appliance_state != null) {
                data.blinds_tilt_appliance_state = this.blinds_tilt_appliance_state.toObject();
            }
            if (this.blinds_relay_appliance_state != null) {
                data.blinds_relay_appliance_state = this.blinds_relay_appliance_state.toObject();
            }
            if (this.blinds_percent_relay_appliance_state != null) {
                data.blinds_percent_relay_appliance_state = this.blinds_percent_relay_appliance_state.toObject();
            }
            if (this.blinds_tilt_relay_appliance_state != null) {
                data.blinds_tilt_relay_appliance_state = this.blinds_tilt_relay_appliance_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_switch_appliance_state)
                writer.writeMessage(101, this.switch_appliance_state, () => this.switch_appliance_state.serialize(writer));
            if (this.has_dimmer_appliance_state)
                writer.writeMessage(102, this.dimmer_appliance_state, () => this.dimmer_appliance_state.serialize(writer));
            if (this.has_rgbcolor_appliance_state)
                writer.writeMessage(103, this.rgbcolor_appliance_state, () => this.rgbcolor_appliance_state.serialize(writer));
            if (this.has_wwmixer_appliance_state)
                writer.writeMessage(104, this.wwmixer_appliance_state, () => this.wwmixer_appliance_state.serialize(writer));
            if (this.has_airconditioner_appliance_state)
                writer.writeMessage(105, this.airconditioner_appliance_state, () => this.airconditioner_appliance_state.serialize(writer));
            if (this.has_push_trigger_appliance_state)
                writer.writeMessage(106, this.push_trigger_appliance_state, () => this.push_trigger_appliance_state.serialize(writer));
            if (this.has_rgbaddr_appliance_state)
                writer.writeMessage(113, this.rgbaddr_appliance_state, () => this.rgbaddr_appliance_state.serialize(writer));
            if (this.has_blinds_appliance_state)
                writer.writeMessage(107, this.blinds_appliance_state, () => this.blinds_appliance_state.serialize(writer));
            if (this.has_blinds_percent_appliance_state)
                writer.writeMessage(108, this.blinds_percent_appliance_state, () => this.blinds_percent_appliance_state.serialize(writer));
            if (this.has_blinds_tilt_appliance_state)
                writer.writeMessage(109, this.blinds_tilt_appliance_state, () => this.blinds_tilt_appliance_state.serialize(writer));
            if (this.has_blinds_relay_appliance_state)
                writer.writeMessage(110, this.blinds_relay_appliance_state, () => this.blinds_relay_appliance_state.serialize(writer));
            if (this.has_blinds_percent_relay_appliance_state)
                writer.writeMessage(111, this.blinds_percent_relay_appliance_state, () => this.blinds_percent_relay_appliance_state.serialize(writer));
            if (this.has_blinds_tilt_relay_appliance_state)
                writer.writeMessage(112, this.blinds_tilt_relay_appliance_state, () => this.blinds_tilt_relay_appliance_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceStateInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceStateInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 101:
                        reader.readMessage(message.switch_appliance_state, () => message.switch_appliance_state = dependency_1.com.keus.gateway.SwitchApplianceState.deserialize(reader));
                        break;
                    case 102:
                        reader.readMessage(message.dimmer_appliance_state, () => message.dimmer_appliance_state = dependency_2.com.keus.gateway.DimmerApplianceState.deserialize(reader));
                        break;
                    case 103:
                        reader.readMessage(message.rgbcolor_appliance_state, () => message.rgbcolor_appliance_state = dependency_3.com.keus.gateway.RGBColorApplianceState.deserialize(reader));
                        break;
                    case 104:
                        reader.readMessage(message.wwmixer_appliance_state, () => message.wwmixer_appliance_state = dependency_5.com.keus.gateway.WWMixerApplianceState.deserialize(reader));
                        break;
                    case 105:
                        reader.readMessage(message.airconditioner_appliance_state, () => message.airconditioner_appliance_state = dependency_6.com.keus.gateway.AirConditionerApplianceState.deserialize(reader));
                        break;
                    case 106:
                        reader.readMessage(message.push_trigger_appliance_state, () => message.push_trigger_appliance_state = dependency_7.com.keus.gateway.PushTriggerApplianceState.deserialize(reader));
                        break;
                    case 113:
                        reader.readMessage(message.rgbaddr_appliance_state, () => message.rgbaddr_appliance_state = dependency_4.com.keus.gateway.RGBAddrApplianceState.deserialize(reader));
                        break;
                    case 107:
                        reader.readMessage(message.blinds_appliance_state, () => message.blinds_appliance_state = dependency_8.com.keus.gateway.BlindsApplianceState.deserialize(reader));
                        break;
                    case 108:
                        reader.readMessage(message.blinds_percent_appliance_state, () => message.blinds_percent_appliance_state = dependency_9.com.keus.gateway.BlindsPercentApplianceState.deserialize(reader));
                        break;
                    case 109:
                        reader.readMessage(message.blinds_tilt_appliance_state, () => message.blinds_tilt_appliance_state = dependency_10.com.keus.gateway.BlindsTiltApplianceState.deserialize(reader));
                        break;
                    case 110:
                        reader.readMessage(message.blinds_relay_appliance_state, () => message.blinds_relay_appliance_state = dependency_11.com.keus.gateway.BlindsRelayApplianceState.deserialize(reader));
                        break;
                    case 111:
                        reader.readMessage(message.blinds_percent_relay_appliance_state, () => message.blinds_percent_relay_appliance_state = dependency_12.com.keus.gateway.BlindsPercentRelayApplianceState.deserialize(reader));
                        break;
                    case 112:
                        reader.readMessage(message.blinds_tilt_relay_appliance_state, () => message.blinds_tilt_relay_appliance_state = dependency_13.com.keus.gateway.BlindsTiltRelayApplianceState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceStateInfo {
            return GMApplianceStateInfo.deserialize(bytes);
        }
    }
    export class GMAppliancePropertiesInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[201, 202, 203, 204, 205, 206, 213, 207, 208, 209, 210, 211, 212]];
        constructor(data?: any[] | ({} & (({
            switch_appliance_properties?: dependency_1.com.keus.gateway.SwitchApplianceProperties;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: dependency_2.com.keus.gateway.DimmerApplianceProperties;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: dependency_3.com.keus.gateway.RGBColorApplianceProperties;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: dependency_5.com.keus.gateway.WWMixerApplianceProperties;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: dependency_6.com.keus.gateway.AirConditionerApplianceProperties;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: dependency_7.com.keus.gateway.PushTriggerApplianceProperties;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: dependency_4.com.keus.gateway.RGBAddrApplianceProperties;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: dependency_8.com.keus.gateway.BlindsApplianceProperties;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: dependency_9.com.keus.gateway.BlindsPercentApplianceProperties;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: dependency_10.com.keus.gateway.BlindsTiltApplianceProperties;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: dependency_11.com.keus.gateway.BlindsRelayApplianceProperties;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: dependency_12.com.keus.gateway.BlindsPercentRelayApplianceProperties;
            blinds_tilt_relay_appliance_properties?: never;
        } | {
            switch_appliance_properties?: never;
            dimmer_appliance_properties?: never;
            rgbcolor_appliance_properties?: never;
            wwmixer_appliance_properties?: never;
            airconditioner_appliance_properties?: never;
            push_trigger_appliance_properties?: never;
            rgbaddr_appliance_properties?: never;
            blinds_appliance_properties?: never;
            blinds_percent_appliance_properties?: never;
            blinds_tilt_appliance_properties?: never;
            blinds_relay_appliance_properties?: never;
            blinds_percent_relay_appliance_properties?: never;
            blinds_tilt_relay_appliance_properties?: dependency_13.com.keus.gateway.BlindsTiltRelayApplianceProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("switch_appliance_properties" in data && data.switch_appliance_properties != undefined) {
                    this.switch_appliance_properties = data.switch_appliance_properties;
                }
                if ("dimmer_appliance_properties" in data && data.dimmer_appliance_properties != undefined) {
                    this.dimmer_appliance_properties = data.dimmer_appliance_properties;
                }
                if ("rgbcolor_appliance_properties" in data && data.rgbcolor_appliance_properties != undefined) {
                    this.rgbcolor_appliance_properties = data.rgbcolor_appliance_properties;
                }
                if ("wwmixer_appliance_properties" in data && data.wwmixer_appliance_properties != undefined) {
                    this.wwmixer_appliance_properties = data.wwmixer_appliance_properties;
                }
                if ("airconditioner_appliance_properties" in data && data.airconditioner_appliance_properties != undefined) {
                    this.airconditioner_appliance_properties = data.airconditioner_appliance_properties;
                }
                if ("push_trigger_appliance_properties" in data && data.push_trigger_appliance_properties != undefined) {
                    this.push_trigger_appliance_properties = data.push_trigger_appliance_properties;
                }
                if ("rgbaddr_appliance_properties" in data && data.rgbaddr_appliance_properties != undefined) {
                    this.rgbaddr_appliance_properties = data.rgbaddr_appliance_properties;
                }
                if ("blinds_appliance_properties" in data && data.blinds_appliance_properties != undefined) {
                    this.blinds_appliance_properties = data.blinds_appliance_properties;
                }
                if ("blinds_percent_appliance_properties" in data && data.blinds_percent_appliance_properties != undefined) {
                    this.blinds_percent_appliance_properties = data.blinds_percent_appliance_properties;
                }
                if ("blinds_tilt_appliance_properties" in data && data.blinds_tilt_appliance_properties != undefined) {
                    this.blinds_tilt_appliance_properties = data.blinds_tilt_appliance_properties;
                }
                if ("blinds_relay_appliance_properties" in data && data.blinds_relay_appliance_properties != undefined) {
                    this.blinds_relay_appliance_properties = data.blinds_relay_appliance_properties;
                }
                if ("blinds_percent_relay_appliance_properties" in data && data.blinds_percent_relay_appliance_properties != undefined) {
                    this.blinds_percent_relay_appliance_properties = data.blinds_percent_relay_appliance_properties;
                }
                if ("blinds_tilt_relay_appliance_properties" in data && data.blinds_tilt_relay_appliance_properties != undefined) {
                    this.blinds_tilt_relay_appliance_properties = data.blinds_tilt_relay_appliance_properties;
                }
            }
        }
        get switch_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.SwitchApplianceProperties, 201) as dependency_1.com.keus.gateway.SwitchApplianceProperties;
        }
        set switch_appliance_properties(value: dependency_1.com.keus.gateway.SwitchApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 201, this.#one_of_decls[0], value);
        }
        get has_switch_appliance_properties() {
            return pb_1.Message.getField(this, 201) != null;
        }
        get dimmer_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.DimmerApplianceProperties, 202) as dependency_2.com.keus.gateway.DimmerApplianceProperties;
        }
        set dimmer_appliance_properties(value: dependency_2.com.keus.gateway.DimmerApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 202, this.#one_of_decls[0], value);
        }
        get has_dimmer_appliance_properties() {
            return pb_1.Message.getField(this, 202) != null;
        }
        get rgbcolor_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.RGBColorApplianceProperties, 203) as dependency_3.com.keus.gateway.RGBColorApplianceProperties;
        }
        set rgbcolor_appliance_properties(value: dependency_3.com.keus.gateway.RGBColorApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 203, this.#one_of_decls[0], value);
        }
        get has_rgbcolor_appliance_properties() {
            return pb_1.Message.getField(this, 203) != null;
        }
        get wwmixer_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.gateway.WWMixerApplianceProperties, 204) as dependency_5.com.keus.gateway.WWMixerApplianceProperties;
        }
        set wwmixer_appliance_properties(value: dependency_5.com.keus.gateway.WWMixerApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 204, this.#one_of_decls[0], value);
        }
        get has_wwmixer_appliance_properties() {
            return pb_1.Message.getField(this, 204) != null;
        }
        get airconditioner_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.gateway.AirConditionerApplianceProperties, 205) as dependency_6.com.keus.gateway.AirConditionerApplianceProperties;
        }
        set airconditioner_appliance_properties(value: dependency_6.com.keus.gateway.AirConditionerApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 205, this.#one_of_decls[0], value);
        }
        get has_airconditioner_appliance_properties() {
            return pb_1.Message.getField(this, 205) != null;
        }
        get push_trigger_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_7.com.keus.gateway.PushTriggerApplianceProperties, 206) as dependency_7.com.keus.gateway.PushTriggerApplianceProperties;
        }
        set push_trigger_appliance_properties(value: dependency_7.com.keus.gateway.PushTriggerApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 206, this.#one_of_decls[0], value);
        }
        get has_push_trigger_appliance_properties() {
            return pb_1.Message.getField(this, 206) != null;
        }
        get rgbaddr_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.gateway.RGBAddrApplianceProperties, 213) as dependency_4.com.keus.gateway.RGBAddrApplianceProperties;
        }
        set rgbaddr_appliance_properties(value: dependency_4.com.keus.gateway.RGBAddrApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 213, this.#one_of_decls[0], value);
        }
        get has_rgbaddr_appliance_properties() {
            return pb_1.Message.getField(this, 213) != null;
        }
        get blinds_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_8.com.keus.gateway.BlindsApplianceProperties, 207) as dependency_8.com.keus.gateway.BlindsApplianceProperties;
        }
        set blinds_appliance_properties(value: dependency_8.com.keus.gateway.BlindsApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 207, this.#one_of_decls[0], value);
        }
        get has_blinds_appliance_properties() {
            return pb_1.Message.getField(this, 207) != null;
        }
        get blinds_percent_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_9.com.keus.gateway.BlindsPercentApplianceProperties, 208) as dependency_9.com.keus.gateway.BlindsPercentApplianceProperties;
        }
        set blinds_percent_appliance_properties(value: dependency_9.com.keus.gateway.BlindsPercentApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 208, this.#one_of_decls[0], value);
        }
        get has_blinds_percent_appliance_properties() {
            return pb_1.Message.getField(this, 208) != null;
        }
        get blinds_tilt_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_10.com.keus.gateway.BlindsTiltApplianceProperties, 209) as dependency_10.com.keus.gateway.BlindsTiltApplianceProperties;
        }
        set blinds_tilt_appliance_properties(value: dependency_10.com.keus.gateway.BlindsTiltApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 209, this.#one_of_decls[0], value);
        }
        get has_blinds_tilt_appliance_properties() {
            return pb_1.Message.getField(this, 209) != null;
        }
        get blinds_relay_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_11.com.keus.gateway.BlindsRelayApplianceProperties, 210) as dependency_11.com.keus.gateway.BlindsRelayApplianceProperties;
        }
        set blinds_relay_appliance_properties(value: dependency_11.com.keus.gateway.BlindsRelayApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 210, this.#one_of_decls[0], value);
        }
        get has_blinds_relay_appliance_properties() {
            return pb_1.Message.getField(this, 210) != null;
        }
        get blinds_percent_relay_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_12.com.keus.gateway.BlindsPercentRelayApplianceProperties, 211) as dependency_12.com.keus.gateway.BlindsPercentRelayApplianceProperties;
        }
        set blinds_percent_relay_appliance_properties(value: dependency_12.com.keus.gateway.BlindsPercentRelayApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 211, this.#one_of_decls[0], value);
        }
        get has_blinds_percent_relay_appliance_properties() {
            return pb_1.Message.getField(this, 211) != null;
        }
        get blinds_tilt_relay_appliance_properties() {
            return pb_1.Message.getWrapperField(this, dependency_13.com.keus.gateway.BlindsTiltRelayApplianceProperties, 212) as dependency_13.com.keus.gateway.BlindsTiltRelayApplianceProperties;
        }
        set blinds_tilt_relay_appliance_properties(value: dependency_13.com.keus.gateway.BlindsTiltRelayApplianceProperties) {
            pb_1.Message.setOneofWrapperField(this, 212, this.#one_of_decls[0], value);
        }
        get has_blinds_tilt_relay_appliance_properties() {
            return pb_1.Message.getField(this, 212) != null;
        }
        get appliance_properties() {
            const cases: {
                [index: number]: "none" | "switch_appliance_properties" | "dimmer_appliance_properties" | "rgbcolor_appliance_properties" | "wwmixer_appliance_properties" | "airconditioner_appliance_properties" | "push_trigger_appliance_properties" | "rgbaddr_appliance_properties" | "blinds_appliance_properties" | "blinds_percent_appliance_properties" | "blinds_tilt_appliance_properties" | "blinds_relay_appliance_properties" | "blinds_percent_relay_appliance_properties" | "blinds_tilt_relay_appliance_properties";
            } = {
                0: "none",
                201: "switch_appliance_properties",
                202: "dimmer_appliance_properties",
                203: "rgbcolor_appliance_properties",
                204: "wwmixer_appliance_properties",
                205: "airconditioner_appliance_properties",
                206: "push_trigger_appliance_properties",
                213: "rgbaddr_appliance_properties",
                207: "blinds_appliance_properties",
                208: "blinds_percent_appliance_properties",
                209: "blinds_tilt_appliance_properties",
                210: "blinds_relay_appliance_properties",
                211: "blinds_percent_relay_appliance_properties",
                212: "blinds_tilt_relay_appliance_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [201, 202, 203, 204, 205, 206, 213, 207, 208, 209, 210, 211, 212])];
        }
        static fromObject(data: {
            switch_appliance_properties?: ReturnType<typeof dependency_1.com.keus.gateway.SwitchApplianceProperties.prototype.toObject>;
            dimmer_appliance_properties?: ReturnType<typeof dependency_2.com.keus.gateway.DimmerApplianceProperties.prototype.toObject>;
            rgbcolor_appliance_properties?: ReturnType<typeof dependency_3.com.keus.gateway.RGBColorApplianceProperties.prototype.toObject>;
            wwmixer_appliance_properties?: ReturnType<typeof dependency_5.com.keus.gateway.WWMixerApplianceProperties.prototype.toObject>;
            airconditioner_appliance_properties?: ReturnType<typeof dependency_6.com.keus.gateway.AirConditionerApplianceProperties.prototype.toObject>;
            push_trigger_appliance_properties?: ReturnType<typeof dependency_7.com.keus.gateway.PushTriggerApplianceProperties.prototype.toObject>;
            rgbaddr_appliance_properties?: ReturnType<typeof dependency_4.com.keus.gateway.RGBAddrApplianceProperties.prototype.toObject>;
            blinds_appliance_properties?: ReturnType<typeof dependency_8.com.keus.gateway.BlindsApplianceProperties.prototype.toObject>;
            blinds_percent_appliance_properties?: ReturnType<typeof dependency_9.com.keus.gateway.BlindsPercentApplianceProperties.prototype.toObject>;
            blinds_tilt_appliance_properties?: ReturnType<typeof dependency_10.com.keus.gateway.BlindsTiltApplianceProperties.prototype.toObject>;
            blinds_relay_appliance_properties?: ReturnType<typeof dependency_11.com.keus.gateway.BlindsRelayApplianceProperties.prototype.toObject>;
            blinds_percent_relay_appliance_properties?: ReturnType<typeof dependency_12.com.keus.gateway.BlindsPercentRelayApplianceProperties.prototype.toObject>;
            blinds_tilt_relay_appliance_properties?: ReturnType<typeof dependency_13.com.keus.gateway.BlindsTiltRelayApplianceProperties.prototype.toObject>;
        }): GMAppliancePropertiesInfo {
            const message = new GMAppliancePropertiesInfo({});
            if (data.switch_appliance_properties != null) {
                message.switch_appliance_properties = dependency_1.com.keus.gateway.SwitchApplianceProperties.fromObject(data.switch_appliance_properties);
            }
            if (data.dimmer_appliance_properties != null) {
                message.dimmer_appliance_properties = dependency_2.com.keus.gateway.DimmerApplianceProperties.fromObject(data.dimmer_appliance_properties);
            }
            if (data.rgbcolor_appliance_properties != null) {
                message.rgbcolor_appliance_properties = dependency_3.com.keus.gateway.RGBColorApplianceProperties.fromObject(data.rgbcolor_appliance_properties);
            }
            if (data.wwmixer_appliance_properties != null) {
                message.wwmixer_appliance_properties = dependency_5.com.keus.gateway.WWMixerApplianceProperties.fromObject(data.wwmixer_appliance_properties);
            }
            if (data.airconditioner_appliance_properties != null) {
                message.airconditioner_appliance_properties = dependency_6.com.keus.gateway.AirConditionerApplianceProperties.fromObject(data.airconditioner_appliance_properties);
            }
            if (data.push_trigger_appliance_properties != null) {
                message.push_trigger_appliance_properties = dependency_7.com.keus.gateway.PushTriggerApplianceProperties.fromObject(data.push_trigger_appliance_properties);
            }
            if (data.rgbaddr_appliance_properties != null) {
                message.rgbaddr_appliance_properties = dependency_4.com.keus.gateway.RGBAddrApplianceProperties.fromObject(data.rgbaddr_appliance_properties);
            }
            if (data.blinds_appliance_properties != null) {
                message.blinds_appliance_properties = dependency_8.com.keus.gateway.BlindsApplianceProperties.fromObject(data.blinds_appliance_properties);
            }
            if (data.blinds_percent_appliance_properties != null) {
                message.blinds_percent_appliance_properties = dependency_9.com.keus.gateway.BlindsPercentApplianceProperties.fromObject(data.blinds_percent_appliance_properties);
            }
            if (data.blinds_tilt_appliance_properties != null) {
                message.blinds_tilt_appliance_properties = dependency_10.com.keus.gateway.BlindsTiltApplianceProperties.fromObject(data.blinds_tilt_appliance_properties);
            }
            if (data.blinds_relay_appliance_properties != null) {
                message.blinds_relay_appliance_properties = dependency_11.com.keus.gateway.BlindsRelayApplianceProperties.fromObject(data.blinds_relay_appliance_properties);
            }
            if (data.blinds_percent_relay_appliance_properties != null) {
                message.blinds_percent_relay_appliance_properties = dependency_12.com.keus.gateway.BlindsPercentRelayApplianceProperties.fromObject(data.blinds_percent_relay_appliance_properties);
            }
            if (data.blinds_tilt_relay_appliance_properties != null) {
                message.blinds_tilt_relay_appliance_properties = dependency_13.com.keus.gateway.BlindsTiltRelayApplianceProperties.fromObject(data.blinds_tilt_relay_appliance_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                switch_appliance_properties?: ReturnType<typeof dependency_1.com.keus.gateway.SwitchApplianceProperties.prototype.toObject>;
                dimmer_appliance_properties?: ReturnType<typeof dependency_2.com.keus.gateway.DimmerApplianceProperties.prototype.toObject>;
                rgbcolor_appliance_properties?: ReturnType<typeof dependency_3.com.keus.gateway.RGBColorApplianceProperties.prototype.toObject>;
                wwmixer_appliance_properties?: ReturnType<typeof dependency_5.com.keus.gateway.WWMixerApplianceProperties.prototype.toObject>;
                airconditioner_appliance_properties?: ReturnType<typeof dependency_6.com.keus.gateway.AirConditionerApplianceProperties.prototype.toObject>;
                push_trigger_appliance_properties?: ReturnType<typeof dependency_7.com.keus.gateway.PushTriggerApplianceProperties.prototype.toObject>;
                rgbaddr_appliance_properties?: ReturnType<typeof dependency_4.com.keus.gateway.RGBAddrApplianceProperties.prototype.toObject>;
                blinds_appliance_properties?: ReturnType<typeof dependency_8.com.keus.gateway.BlindsApplianceProperties.prototype.toObject>;
                blinds_percent_appliance_properties?: ReturnType<typeof dependency_9.com.keus.gateway.BlindsPercentApplianceProperties.prototype.toObject>;
                blinds_tilt_appliance_properties?: ReturnType<typeof dependency_10.com.keus.gateway.BlindsTiltApplianceProperties.prototype.toObject>;
                blinds_relay_appliance_properties?: ReturnType<typeof dependency_11.com.keus.gateway.BlindsRelayApplianceProperties.prototype.toObject>;
                blinds_percent_relay_appliance_properties?: ReturnType<typeof dependency_12.com.keus.gateway.BlindsPercentRelayApplianceProperties.prototype.toObject>;
                blinds_tilt_relay_appliance_properties?: ReturnType<typeof dependency_13.com.keus.gateway.BlindsTiltRelayApplianceProperties.prototype.toObject>;
            } = {};
            if (this.switch_appliance_properties != null) {
                data.switch_appliance_properties = this.switch_appliance_properties.toObject();
            }
            if (this.dimmer_appliance_properties != null) {
                data.dimmer_appliance_properties = this.dimmer_appliance_properties.toObject();
            }
            if (this.rgbcolor_appliance_properties != null) {
                data.rgbcolor_appliance_properties = this.rgbcolor_appliance_properties.toObject();
            }
            if (this.wwmixer_appliance_properties != null) {
                data.wwmixer_appliance_properties = this.wwmixer_appliance_properties.toObject();
            }
            if (this.airconditioner_appliance_properties != null) {
                data.airconditioner_appliance_properties = this.airconditioner_appliance_properties.toObject();
            }
            if (this.push_trigger_appliance_properties != null) {
                data.push_trigger_appliance_properties = this.push_trigger_appliance_properties.toObject();
            }
            if (this.rgbaddr_appliance_properties != null) {
                data.rgbaddr_appliance_properties = this.rgbaddr_appliance_properties.toObject();
            }
            if (this.blinds_appliance_properties != null) {
                data.blinds_appliance_properties = this.blinds_appliance_properties.toObject();
            }
            if (this.blinds_percent_appliance_properties != null) {
                data.blinds_percent_appliance_properties = this.blinds_percent_appliance_properties.toObject();
            }
            if (this.blinds_tilt_appliance_properties != null) {
                data.blinds_tilt_appliance_properties = this.blinds_tilt_appliance_properties.toObject();
            }
            if (this.blinds_relay_appliance_properties != null) {
                data.blinds_relay_appliance_properties = this.blinds_relay_appliance_properties.toObject();
            }
            if (this.blinds_percent_relay_appliance_properties != null) {
                data.blinds_percent_relay_appliance_properties = this.blinds_percent_relay_appliance_properties.toObject();
            }
            if (this.blinds_tilt_relay_appliance_properties != null) {
                data.blinds_tilt_relay_appliance_properties = this.blinds_tilt_relay_appliance_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_switch_appliance_properties)
                writer.writeMessage(201, this.switch_appliance_properties, () => this.switch_appliance_properties.serialize(writer));
            if (this.has_dimmer_appliance_properties)
                writer.writeMessage(202, this.dimmer_appliance_properties, () => this.dimmer_appliance_properties.serialize(writer));
            if (this.has_rgbcolor_appliance_properties)
                writer.writeMessage(203, this.rgbcolor_appliance_properties, () => this.rgbcolor_appliance_properties.serialize(writer));
            if (this.has_wwmixer_appliance_properties)
                writer.writeMessage(204, this.wwmixer_appliance_properties, () => this.wwmixer_appliance_properties.serialize(writer));
            if (this.has_airconditioner_appliance_properties)
                writer.writeMessage(205, this.airconditioner_appliance_properties, () => this.airconditioner_appliance_properties.serialize(writer));
            if (this.has_push_trigger_appliance_properties)
                writer.writeMessage(206, this.push_trigger_appliance_properties, () => this.push_trigger_appliance_properties.serialize(writer));
            if (this.has_rgbaddr_appliance_properties)
                writer.writeMessage(213, this.rgbaddr_appliance_properties, () => this.rgbaddr_appliance_properties.serialize(writer));
            if (this.has_blinds_appliance_properties)
                writer.writeMessage(207, this.blinds_appliance_properties, () => this.blinds_appliance_properties.serialize(writer));
            if (this.has_blinds_percent_appliance_properties)
                writer.writeMessage(208, this.blinds_percent_appliance_properties, () => this.blinds_percent_appliance_properties.serialize(writer));
            if (this.has_blinds_tilt_appliance_properties)
                writer.writeMessage(209, this.blinds_tilt_appliance_properties, () => this.blinds_tilt_appliance_properties.serialize(writer));
            if (this.has_blinds_relay_appliance_properties)
                writer.writeMessage(210, this.blinds_relay_appliance_properties, () => this.blinds_relay_appliance_properties.serialize(writer));
            if (this.has_blinds_percent_relay_appliance_properties)
                writer.writeMessage(211, this.blinds_percent_relay_appliance_properties, () => this.blinds_percent_relay_appliance_properties.serialize(writer));
            if (this.has_blinds_tilt_relay_appliance_properties)
                writer.writeMessage(212, this.blinds_tilt_relay_appliance_properties, () => this.blinds_tilt_relay_appliance_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMAppliancePropertiesInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMAppliancePropertiesInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 201:
                        reader.readMessage(message.switch_appliance_properties, () => message.switch_appliance_properties = dependency_1.com.keus.gateway.SwitchApplianceProperties.deserialize(reader));
                        break;
                    case 202:
                        reader.readMessage(message.dimmer_appliance_properties, () => message.dimmer_appliance_properties = dependency_2.com.keus.gateway.DimmerApplianceProperties.deserialize(reader));
                        break;
                    case 203:
                        reader.readMessage(message.rgbcolor_appliance_properties, () => message.rgbcolor_appliance_properties = dependency_3.com.keus.gateway.RGBColorApplianceProperties.deserialize(reader));
                        break;
                    case 204:
                        reader.readMessage(message.wwmixer_appliance_properties, () => message.wwmixer_appliance_properties = dependency_5.com.keus.gateway.WWMixerApplianceProperties.deserialize(reader));
                        break;
                    case 205:
                        reader.readMessage(message.airconditioner_appliance_properties, () => message.airconditioner_appliance_properties = dependency_6.com.keus.gateway.AirConditionerApplianceProperties.deserialize(reader));
                        break;
                    case 206:
                        reader.readMessage(message.push_trigger_appliance_properties, () => message.push_trigger_appliance_properties = dependency_7.com.keus.gateway.PushTriggerApplianceProperties.deserialize(reader));
                        break;
                    case 213:
                        reader.readMessage(message.rgbaddr_appliance_properties, () => message.rgbaddr_appliance_properties = dependency_4.com.keus.gateway.RGBAddrApplianceProperties.deserialize(reader));
                        break;
                    case 207:
                        reader.readMessage(message.blinds_appliance_properties, () => message.blinds_appliance_properties = dependency_8.com.keus.gateway.BlindsApplianceProperties.deserialize(reader));
                        break;
                    case 208:
                        reader.readMessage(message.blinds_percent_appliance_properties, () => message.blinds_percent_appliance_properties = dependency_9.com.keus.gateway.BlindsPercentApplianceProperties.deserialize(reader));
                        break;
                    case 209:
                        reader.readMessage(message.blinds_tilt_appliance_properties, () => message.blinds_tilt_appliance_properties = dependency_10.com.keus.gateway.BlindsTiltApplianceProperties.deserialize(reader));
                        break;
                    case 210:
                        reader.readMessage(message.blinds_relay_appliance_properties, () => message.blinds_relay_appliance_properties = dependency_11.com.keus.gateway.BlindsRelayApplianceProperties.deserialize(reader));
                        break;
                    case 211:
                        reader.readMessage(message.blinds_percent_relay_appliance_properties, () => message.blinds_percent_relay_appliance_properties = dependency_12.com.keus.gateway.BlindsPercentRelayApplianceProperties.deserialize(reader));
                        break;
                    case 212:
                        reader.readMessage(message.blinds_tilt_relay_appliance_properties, () => message.blinds_tilt_relay_appliance_properties = dependency_13.com.keus.gateway.BlindsTiltRelayApplianceProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMAppliancePropertiesInfo {
            return GMAppliancePropertiesInfo.deserialize(bytes);
        }
    }
    export class ApplianceProtocolControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[501, 502]];
        constructor(data?: any[] | ({} & (({
            kz_appliance_control_info?: dependency_14.com.keus.gateway.KeusZigbeeApplianceControlInfo;
            ip_appliance_control_info?: never;
        } | {
            kz_appliance_control_info?: never;
            ip_appliance_control_info?: dependency_15.com.keus.gateway.IpApplianceControlInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kz_appliance_control_info" in data && data.kz_appliance_control_info != undefined) {
                    this.kz_appliance_control_info = data.kz_appliance_control_info;
                }
                if ("ip_appliance_control_info" in data && data.ip_appliance_control_info != undefined) {
                    this.ip_appliance_control_info = data.ip_appliance_control_info;
                }
            }
        }
        get kz_appliance_control_info() {
            return pb_1.Message.getWrapperField(this, dependency_14.com.keus.gateway.KeusZigbeeApplianceControlInfo, 501) as dependency_14.com.keus.gateway.KeusZigbeeApplianceControlInfo;
        }
        set kz_appliance_control_info(value: dependency_14.com.keus.gateway.KeusZigbeeApplianceControlInfo) {
            pb_1.Message.setOneofWrapperField(this, 501, this.#one_of_decls[0], value);
        }
        get has_kz_appliance_control_info() {
            return pb_1.Message.getField(this, 501) != null;
        }
        get ip_appliance_control_info() {
            return pb_1.Message.getWrapperField(this, dependency_15.com.keus.gateway.IpApplianceControlInfo, 502) as dependency_15.com.keus.gateway.IpApplianceControlInfo;
        }
        set ip_appliance_control_info(value: dependency_15.com.keus.gateway.IpApplianceControlInfo) {
            pb_1.Message.setOneofWrapperField(this, 502, this.#one_of_decls[0], value);
        }
        get has_ip_appliance_control_info() {
            return pb_1.Message.getField(this, 502) != null;
        }
        get control_info() {
            const cases: {
                [index: number]: "none" | "kz_appliance_control_info" | "ip_appliance_control_info";
            } = {
                0: "none",
                501: "kz_appliance_control_info",
                502: "ip_appliance_control_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [501, 502])];
        }
        static fromObject(data: {
            kz_appliance_control_info?: ReturnType<typeof dependency_14.com.keus.gateway.KeusZigbeeApplianceControlInfo.prototype.toObject>;
            ip_appliance_control_info?: ReturnType<typeof dependency_15.com.keus.gateway.IpApplianceControlInfo.prototype.toObject>;
        }): ApplianceProtocolControlInfo {
            const message = new ApplianceProtocolControlInfo({});
            if (data.kz_appliance_control_info != null) {
                message.kz_appliance_control_info = dependency_14.com.keus.gateway.KeusZigbeeApplianceControlInfo.fromObject(data.kz_appliance_control_info);
            }
            if (data.ip_appliance_control_info != null) {
                message.ip_appliance_control_info = dependency_15.com.keus.gateway.IpApplianceControlInfo.fromObject(data.ip_appliance_control_info);
            }
            return message;
        }
        toObject() {
            const data: {
                kz_appliance_control_info?: ReturnType<typeof dependency_14.com.keus.gateway.KeusZigbeeApplianceControlInfo.prototype.toObject>;
                ip_appliance_control_info?: ReturnType<typeof dependency_15.com.keus.gateway.IpApplianceControlInfo.prototype.toObject>;
            } = {};
            if (this.kz_appliance_control_info != null) {
                data.kz_appliance_control_info = this.kz_appliance_control_info.toObject();
            }
            if (this.ip_appliance_control_info != null) {
                data.ip_appliance_control_info = this.ip_appliance_control_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_kz_appliance_control_info)
                writer.writeMessage(501, this.kz_appliance_control_info, () => this.kz_appliance_control_info.serialize(writer));
            if (this.has_ip_appliance_control_info)
                writer.writeMessage(502, this.ip_appliance_control_info, () => this.ip_appliance_control_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplianceProtocolControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplianceProtocolControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 501:
                        reader.readMessage(message.kz_appliance_control_info, () => message.kz_appliance_control_info = dependency_14.com.keus.gateway.KeusZigbeeApplianceControlInfo.deserialize(reader));
                        break;
                    case 502:
                        reader.readMessage(message.ip_appliance_control_info, () => message.ip_appliance_control_info = dependency_15.com.keus.gateway.IpApplianceControlInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApplianceProtocolControlInfo {
            return ApplianceProtocolControlInfo.deserialize(bytes);
        }
    }
    export class GMApplianceControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_control_type?: string;
            appliance_protocol_control_info?: ApplianceProtocolControlInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_control_type" in data && data.appliance_control_type != undefined) {
                    this.appliance_control_type = data.appliance_control_type;
                }
                if ("appliance_protocol_control_info" in data && data.appliance_protocol_control_info != undefined) {
                    this.appliance_protocol_control_info = data.appliance_protocol_control_info;
                }
            }
        }
        get appliance_control_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_control_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_protocol_control_info() {
            return pb_1.Message.getWrapperField(this, ApplianceProtocolControlInfo, 2) as ApplianceProtocolControlInfo;
        }
        set appliance_protocol_control_info(value: ApplianceProtocolControlInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_protocol_control_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            appliance_control_type?: string;
            appliance_protocol_control_info?: ReturnType<typeof ApplianceProtocolControlInfo.prototype.toObject>;
        }): GMApplianceControlInfo {
            const message = new GMApplianceControlInfo({});
            if (data.appliance_control_type != null) {
                message.appliance_control_type = data.appliance_control_type;
            }
            if (data.appliance_protocol_control_info != null) {
                message.appliance_protocol_control_info = ApplianceProtocolControlInfo.fromObject(data.appliance_protocol_control_info);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_control_type?: string;
                appliance_protocol_control_info?: ReturnType<typeof ApplianceProtocolControlInfo.prototype.toObject>;
            } = {};
            if (this.appliance_control_type != null) {
                data.appliance_control_type = this.appliance_control_type;
            }
            if (this.appliance_protocol_control_info != null) {
                data.appliance_protocol_control_info = this.appliance_protocol_control_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_control_type.length)
                writer.writeString(1, this.appliance_control_type);
            if (this.has_appliance_protocol_control_info)
                writer.writeMessage(2, this.appliance_protocol_control_info, () => this.appliance_protocol_control_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_control_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_protocol_control_info, () => message.appliance_protocol_control_info = ApplianceProtocolControlInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceControlInfo {
            return GMApplianceControlInfo.deserialize(bytes);
        }
    }
    export class GMApplianceIdentifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            appliance_id?: string;
        }): GMApplianceIdentifier {
            const message = new GMApplianceIdentifier({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceIdentifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceIdentifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceIdentifier {
            return GMApplianceIdentifier.deserialize(bytes);
        }
    }
    export class GMApplianceSceneAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_type?: string;
            appliance_identifier?: GMApplianceIdentifier;
            appliance_state?: GMApplianceStateInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
                if ("appliance_identifier" in data && data.appliance_identifier != undefined) {
                    this.appliance_identifier = data.appliance_identifier;
                }
                if ("appliance_state" in data && data.appliance_state != undefined) {
                    this.appliance_state = data.appliance_state;
                }
            }
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_identifier() {
            return pb_1.Message.getWrapperField(this, GMApplianceIdentifier, 2) as GMApplianceIdentifier;
        }
        set appliance_identifier(value: GMApplianceIdentifier) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get appliance_state() {
            return pb_1.Message.getWrapperField(this, GMApplianceStateInfo, 3) as GMApplianceStateInfo;
        }
        set appliance_state(value: GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_appliance_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            appliance_type?: string;
            appliance_identifier?: ReturnType<typeof GMApplianceIdentifier.prototype.toObject>;
            appliance_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
        }): GMApplianceSceneAction {
            const message = new GMApplianceSceneAction({});
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            if (data.appliance_identifier != null) {
                message.appliance_identifier = GMApplianceIdentifier.fromObject(data.appliance_identifier);
            }
            if (data.appliance_state != null) {
                message.appliance_state = GMApplianceStateInfo.fromObject(data.appliance_state);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_type?: string;
                appliance_identifier?: ReturnType<typeof GMApplianceIdentifier.prototype.toObject>;
                appliance_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
            } = {};
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            if (this.appliance_identifier != null) {
                data.appliance_identifier = this.appliance_identifier.toObject();
            }
            if (this.appliance_state != null) {
                data.appliance_state = this.appliance_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_type.length)
                writer.writeString(1, this.appliance_type);
            if (this.has_appliance_identifier)
                writer.writeMessage(2, this.appliance_identifier, () => this.appliance_identifier.serialize(writer));
            if (this.has_appliance_state)
                writer.writeMessage(3, this.appliance_state, () => this.appliance_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceSceneAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceSceneAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_identifier, () => message.appliance_identifier = GMApplianceIdentifier.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.appliance_state, () => message.appliance_state = GMApplianceStateInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceSceneAction {
            return GMApplianceSceneAction.deserialize(bytes);
        }
    }
    export class GMApplianceScheduleAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_type?: string;
            appliance_identifier?: GMApplianceIdentifier;
            appliance_state?: GMApplianceStateInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
                if ("appliance_identifier" in data && data.appliance_identifier != undefined) {
                    this.appliance_identifier = data.appliance_identifier;
                }
                if ("appliance_state" in data && data.appliance_state != undefined) {
                    this.appliance_state = data.appliance_state;
                }
            }
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_identifier() {
            return pb_1.Message.getWrapperField(this, GMApplianceIdentifier, 2) as GMApplianceIdentifier;
        }
        set appliance_identifier(value: GMApplianceIdentifier) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get appliance_state() {
            return pb_1.Message.getWrapperField(this, GMApplianceStateInfo, 3) as GMApplianceStateInfo;
        }
        set appliance_state(value: GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_appliance_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            appliance_type?: string;
            appliance_identifier?: ReturnType<typeof GMApplianceIdentifier.prototype.toObject>;
            appliance_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
        }): GMApplianceScheduleAction {
            const message = new GMApplianceScheduleAction({});
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            if (data.appliance_identifier != null) {
                message.appliance_identifier = GMApplianceIdentifier.fromObject(data.appliance_identifier);
            }
            if (data.appliance_state != null) {
                message.appliance_state = GMApplianceStateInfo.fromObject(data.appliance_state);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_type?: string;
                appliance_identifier?: ReturnType<typeof GMApplianceIdentifier.prototype.toObject>;
                appliance_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
            } = {};
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            if (this.appliance_identifier != null) {
                data.appliance_identifier = this.appliance_identifier.toObject();
            }
            if (this.appliance_state != null) {
                data.appliance_state = this.appliance_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_type.length)
                writer.writeString(1, this.appliance_type);
            if (this.has_appliance_identifier)
                writer.writeMessage(2, this.appliance_identifier, () => this.appliance_identifier.serialize(writer));
            if (this.has_appliance_state)
                writer.writeMessage(3, this.appliance_state, () => this.appliance_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceScheduleAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceScheduleAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_identifier, () => message.appliance_identifier = GMApplianceIdentifier.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.appliance_state, () => message.appliance_state = GMApplianceStateInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceScheduleAction {
            return GMApplianceScheduleAction.deserialize(bytes);
        }
    }
    export class GMApplianceSavedStateAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            SavedState_id?: string;
            SavedState_name?: string;
            SavedState_state?: GMApplianceStateInfo;
            created_by?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("SavedState_id" in data && data.SavedState_id != undefined) {
                    this.SavedState_id = data.SavedState_id;
                }
                if ("SavedState_name" in data && data.SavedState_name != undefined) {
                    this.SavedState_name = data.SavedState_name;
                }
                if ("SavedState_state" in data && data.SavedState_state != undefined) {
                    this.SavedState_state = data.SavedState_state;
                }
                if ("created_by" in data && data.created_by != undefined) {
                    this.created_by = data.created_by;
                }
            }
        }
        get SavedState_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set SavedState_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get SavedState_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set SavedState_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get SavedState_state() {
            return pb_1.Message.getWrapperField(this, GMApplianceStateInfo, 3) as GMApplianceStateInfo;
        }
        set SavedState_state(value: GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_SavedState_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get created_by() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set created_by(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            SavedState_id?: string;
            SavedState_name?: string;
            SavedState_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
            created_by?: string;
        }): GMApplianceSavedStateAction {
            const message = new GMApplianceSavedStateAction({});
            if (data.SavedState_id != null) {
                message.SavedState_id = data.SavedState_id;
            }
            if (data.SavedState_name != null) {
                message.SavedState_name = data.SavedState_name;
            }
            if (data.SavedState_state != null) {
                message.SavedState_state = GMApplianceStateInfo.fromObject(data.SavedState_state);
            }
            if (data.created_by != null) {
                message.created_by = data.created_by;
            }
            return message;
        }
        toObject() {
            const data: {
                SavedState_id?: string;
                SavedState_name?: string;
                SavedState_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
                created_by?: string;
            } = {};
            if (this.SavedState_id != null) {
                data.SavedState_id = this.SavedState_id;
            }
            if (this.SavedState_name != null) {
                data.SavedState_name = this.SavedState_name;
            }
            if (this.SavedState_state != null) {
                data.SavedState_state = this.SavedState_state.toObject();
            }
            if (this.created_by != null) {
                data.created_by = this.created_by;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.SavedState_id.length)
                writer.writeString(1, this.SavedState_id);
            if (this.SavedState_name.length)
                writer.writeString(2, this.SavedState_name);
            if (this.has_SavedState_state)
                writer.writeMessage(3, this.SavedState_state, () => this.SavedState_state.serialize(writer));
            if (this.created_by.length)
                writer.writeString(4, this.created_by);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceSavedStateAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceSavedStateAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.SavedState_id = reader.readString();
                        break;
                    case 2:
                        message.SavedState_name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.SavedState_state, () => message.SavedState_state = GMApplianceStateInfo.deserialize(reader));
                        break;
                    case 4:
                        message.created_by = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceSavedStateAction {
            return GMApplianceSavedStateAction.deserialize(bytes);
        }
    }
    export class GMApplianceAdditionalInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_saved_state?: GMApplianceSavedStateAction[];
            recalibration_time?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_saved_state" in data && data.appliance_saved_state != undefined) {
                    this.appliance_saved_state = data.appliance_saved_state;
                }
                if ("recalibration_time" in data && data.recalibration_time != undefined) {
                    this.recalibration_time = data.recalibration_time;
                }
            }
        }
        get appliance_saved_state() {
            return pb_1.Message.getRepeatedWrapperField(this, GMApplianceSavedStateAction, 1) as GMApplianceSavedStateAction[];
        }
        set appliance_saved_state(value: GMApplianceSavedStateAction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get recalibration_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set recalibration_time(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_saved_state?: ReturnType<typeof GMApplianceSavedStateAction.prototype.toObject>[];
            recalibration_time?: number[];
        }): GMApplianceAdditionalInfo {
            const message = new GMApplianceAdditionalInfo({});
            if (data.appliance_saved_state != null) {
                message.appliance_saved_state = data.appliance_saved_state.map(item => GMApplianceSavedStateAction.fromObject(item));
            }
            if (data.recalibration_time != null) {
                message.recalibration_time = data.recalibration_time;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_saved_state?: ReturnType<typeof GMApplianceSavedStateAction.prototype.toObject>[];
                recalibration_time?: number[];
            } = {};
            if (this.appliance_saved_state != null) {
                data.appliance_saved_state = this.appliance_saved_state.map((item: GMApplianceSavedStateAction) => item.toObject());
            }
            if (this.recalibration_time != null) {
                data.recalibration_time = this.recalibration_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_saved_state.length)
                writer.writeRepeatedMessage(1, this.appliance_saved_state, (item: GMApplianceSavedStateAction) => item.serialize(writer));
            if (this.recalibration_time.length)
                writer.writePackedUint64(2, this.recalibration_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceAdditionalInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceAdditionalInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.appliance_saved_state, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GMApplianceSavedStateAction.deserialize(reader), GMApplianceSavedStateAction));
                        break;
                    case 2:
                        message.recalibration_time = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceAdditionalInfo {
            return GMApplianceAdditionalInfo.deserialize(bytes);
        }
    }
    export class GMAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_type?: string;
            appliance_category?: string;
            appliance_name?: string;
            appliance_home_info?: GMApplianceHomeInfo;
            appliance_sync_info?: GMApplianceSyncInfo;
            appliance_status_info?: GMApplianceStatusInfo;
            appliance_group_info?: GMApplianceGroupInfo;
            appliance_activity_info?: dependency_17.com.keus.gateway.ActivitySourceInfo;
            appliance_voice_info?: GMApplianceVoiceInfo;
            appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
            appliance_state?: GMApplianceStateInfo;
            appliance_properties?: GMAppliancePropertiesInfo;
            appliance_control_info?: GMApplianceControlInfo;
            appliance_additional_info?: GMApplianceAdditionalInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
                if ("appliance_category" in data && data.appliance_category != undefined) {
                    this.appliance_category = data.appliance_category;
                }
                if ("appliance_name" in data && data.appliance_name != undefined) {
                    this.appliance_name = data.appliance_name;
                }
                if ("appliance_home_info" in data && data.appliance_home_info != undefined) {
                    this.appliance_home_info = data.appliance_home_info;
                }
                if ("appliance_sync_info" in data && data.appliance_sync_info != undefined) {
                    this.appliance_sync_info = data.appliance_sync_info;
                }
                if ("appliance_status_info" in data && data.appliance_status_info != undefined) {
                    this.appliance_status_info = data.appliance_status_info;
                }
                if ("appliance_group_info" in data && data.appliance_group_info != undefined) {
                    this.appliance_group_info = data.appliance_group_info;
                }
                if ("appliance_activity_info" in data && data.appliance_activity_info != undefined) {
                    this.appliance_activity_info = data.appliance_activity_info;
                }
                if ("appliance_voice_info" in data && data.appliance_voice_info != undefined) {
                    this.appliance_voice_info = data.appliance_voice_info;
                }
                if ("appliance_icon" in data && data.appliance_icon != undefined) {
                    this.appliance_icon = data.appliance_icon;
                }
                if ("appliance_state" in data && data.appliance_state != undefined) {
                    this.appliance_state = data.appliance_state;
                }
                if ("appliance_properties" in data && data.appliance_properties != undefined) {
                    this.appliance_properties = data.appliance_properties;
                }
                if ("appliance_control_info" in data && data.appliance_control_info != undefined) {
                    this.appliance_control_info = data.appliance_control_info;
                }
                if ("appliance_additional_info" in data && data.appliance_additional_info != undefined) {
                    this.appliance_additional_info = data.appliance_additional_info;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appliance_category() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set appliance_category(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get appliance_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set appliance_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get appliance_home_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceHomeInfo, 5) as GMApplianceHomeInfo;
        }
        set appliance_home_info(value: GMApplianceHomeInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_appliance_home_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get appliance_sync_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceSyncInfo, 6) as GMApplianceSyncInfo;
        }
        set appliance_sync_info(value: GMApplianceSyncInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_appliance_sync_info() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get appliance_status_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceStatusInfo, 7) as GMApplianceStatusInfo;
        }
        set appliance_status_info(value: GMApplianceStatusInfo) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_appliance_status_info() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get appliance_group_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceGroupInfo, 8) as GMApplianceGroupInfo;
        }
        set appliance_group_info(value: GMApplianceGroupInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_appliance_group_info() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get appliance_activity_info() {
            return pb_1.Message.getWrapperField(this, dependency_17.com.keus.gateway.ActivitySourceInfo, 9) as dependency_17.com.keus.gateway.ActivitySourceInfo;
        }
        set appliance_activity_info(value: dependency_17.com.keus.gateway.ActivitySourceInfo) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_appliance_activity_info() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get appliance_voice_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceVoiceInfo, 10) as GMApplianceVoiceInfo;
        }
        set appliance_voice_info(value: GMApplianceVoiceInfo) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_appliance_voice_info() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get appliance_icon() {
            return pb_1.Message.getFieldWithDefault(this, 11, dependency_16.com.keus.gateway.APPLIANCE_ICONS.DOWN_LIGHT) as dependency_16.com.keus.gateway.APPLIANCE_ICONS;
        }
        set appliance_icon(value: dependency_16.com.keus.gateway.APPLIANCE_ICONS) {
            pb_1.Message.setField(this, 11, value);
        }
        get appliance_state() {
            return pb_1.Message.getWrapperField(this, GMApplianceStateInfo, 12) as GMApplianceStateInfo;
        }
        set appliance_state(value: GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_appliance_state() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get appliance_properties() {
            return pb_1.Message.getWrapperField(this, GMAppliancePropertiesInfo, 13) as GMAppliancePropertiesInfo;
        }
        set appliance_properties(value: GMAppliancePropertiesInfo) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_appliance_properties() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get appliance_control_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceControlInfo, 14) as GMApplianceControlInfo;
        }
        set appliance_control_info(value: GMApplianceControlInfo) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_appliance_control_info() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get appliance_additional_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceAdditionalInfo, 15) as GMApplianceAdditionalInfo;
        }
        set appliance_additional_info(value: GMApplianceAdditionalInfo) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_appliance_additional_info() {
            return pb_1.Message.getField(this, 15) != null;
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_type?: string;
            appliance_category?: string;
            appliance_name?: string;
            appliance_home_info?: ReturnType<typeof GMApplianceHomeInfo.prototype.toObject>;
            appliance_sync_info?: ReturnType<typeof GMApplianceSyncInfo.prototype.toObject>;
            appliance_status_info?: ReturnType<typeof GMApplianceStatusInfo.prototype.toObject>;
            appliance_group_info?: ReturnType<typeof GMApplianceGroupInfo.prototype.toObject>;
            appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
            appliance_voice_info?: ReturnType<typeof GMApplianceVoiceInfo.prototype.toObject>;
            appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
            appliance_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
            appliance_properties?: ReturnType<typeof GMAppliancePropertiesInfo.prototype.toObject>;
            appliance_control_info?: ReturnType<typeof GMApplianceControlInfo.prototype.toObject>;
            appliance_additional_info?: ReturnType<typeof GMApplianceAdditionalInfo.prototype.toObject>;
        }): GMAppliance {
            const message = new GMAppliance({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            if (data.appliance_category != null) {
                message.appliance_category = data.appliance_category;
            }
            if (data.appliance_name != null) {
                message.appliance_name = data.appliance_name;
            }
            if (data.appliance_home_info != null) {
                message.appliance_home_info = GMApplianceHomeInfo.fromObject(data.appliance_home_info);
            }
            if (data.appliance_sync_info != null) {
                message.appliance_sync_info = GMApplianceSyncInfo.fromObject(data.appliance_sync_info);
            }
            if (data.appliance_status_info != null) {
                message.appliance_status_info = GMApplianceStatusInfo.fromObject(data.appliance_status_info);
            }
            if (data.appliance_group_info != null) {
                message.appliance_group_info = GMApplianceGroupInfo.fromObject(data.appliance_group_info);
            }
            if (data.appliance_activity_info != null) {
                message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.fromObject(data.appliance_activity_info);
            }
            if (data.appliance_voice_info != null) {
                message.appliance_voice_info = GMApplianceVoiceInfo.fromObject(data.appliance_voice_info);
            }
            if (data.appliance_icon != null) {
                message.appliance_icon = data.appliance_icon;
            }
            if (data.appliance_state != null) {
                message.appliance_state = GMApplianceStateInfo.fromObject(data.appliance_state);
            }
            if (data.appliance_properties != null) {
                message.appliance_properties = GMAppliancePropertiesInfo.fromObject(data.appliance_properties);
            }
            if (data.appliance_control_info != null) {
                message.appliance_control_info = GMApplianceControlInfo.fromObject(data.appliance_control_info);
            }
            if (data.appliance_additional_info != null) {
                message.appliance_additional_info = GMApplianceAdditionalInfo.fromObject(data.appliance_additional_info);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_type?: string;
                appliance_category?: string;
                appliance_name?: string;
                appliance_home_info?: ReturnType<typeof GMApplianceHomeInfo.prototype.toObject>;
                appliance_sync_info?: ReturnType<typeof GMApplianceSyncInfo.prototype.toObject>;
                appliance_status_info?: ReturnType<typeof GMApplianceStatusInfo.prototype.toObject>;
                appliance_group_info?: ReturnType<typeof GMApplianceGroupInfo.prototype.toObject>;
                appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
                appliance_voice_info?: ReturnType<typeof GMApplianceVoiceInfo.prototype.toObject>;
                appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
                appliance_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
                appliance_properties?: ReturnType<typeof GMAppliancePropertiesInfo.prototype.toObject>;
                appliance_control_info?: ReturnType<typeof GMApplianceControlInfo.prototype.toObject>;
                appliance_additional_info?: ReturnType<typeof GMApplianceAdditionalInfo.prototype.toObject>;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            if (this.appliance_category != null) {
                data.appliance_category = this.appliance_category;
            }
            if (this.appliance_name != null) {
                data.appliance_name = this.appliance_name;
            }
            if (this.appliance_home_info != null) {
                data.appliance_home_info = this.appliance_home_info.toObject();
            }
            if (this.appliance_sync_info != null) {
                data.appliance_sync_info = this.appliance_sync_info.toObject();
            }
            if (this.appliance_status_info != null) {
                data.appliance_status_info = this.appliance_status_info.toObject();
            }
            if (this.appliance_group_info != null) {
                data.appliance_group_info = this.appliance_group_info.toObject();
            }
            if (this.appliance_activity_info != null) {
                data.appliance_activity_info = this.appliance_activity_info.toObject();
            }
            if (this.appliance_voice_info != null) {
                data.appliance_voice_info = this.appliance_voice_info.toObject();
            }
            if (this.appliance_icon != null) {
                data.appliance_icon = this.appliance_icon;
            }
            if (this.appliance_state != null) {
                data.appliance_state = this.appliance_state.toObject();
            }
            if (this.appliance_properties != null) {
                data.appliance_properties = this.appliance_properties.toObject();
            }
            if (this.appliance_control_info != null) {
                data.appliance_control_info = this.appliance_control_info.toObject();
            }
            if (this.appliance_additional_info != null) {
                data.appliance_additional_info = this.appliance_additional_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.appliance_type.length)
                writer.writeString(2, this.appliance_type);
            if (this.appliance_category.length)
                writer.writeString(3, this.appliance_category);
            if (this.appliance_name.length)
                writer.writeString(4, this.appliance_name);
            if (this.has_appliance_home_info)
                writer.writeMessage(5, this.appliance_home_info, () => this.appliance_home_info.serialize(writer));
            if (this.has_appliance_sync_info)
                writer.writeMessage(6, this.appliance_sync_info, () => this.appliance_sync_info.serialize(writer));
            if (this.has_appliance_status_info)
                writer.writeMessage(7, this.appliance_status_info, () => this.appliance_status_info.serialize(writer));
            if (this.has_appliance_group_info)
                writer.writeMessage(8, this.appliance_group_info, () => this.appliance_group_info.serialize(writer));
            if (this.has_appliance_activity_info)
                writer.writeMessage(9, this.appliance_activity_info, () => this.appliance_activity_info.serialize(writer));
            if (this.has_appliance_voice_info)
                writer.writeMessage(10, this.appliance_voice_info, () => this.appliance_voice_info.serialize(writer));
            if (this.appliance_icon != dependency_16.com.keus.gateway.APPLIANCE_ICONS.DOWN_LIGHT)
                writer.writeEnum(11, this.appliance_icon);
            if (this.has_appliance_state)
                writer.writeMessage(12, this.appliance_state, () => this.appliance_state.serialize(writer));
            if (this.has_appliance_properties)
                writer.writeMessage(13, this.appliance_properties, () => this.appliance_properties.serialize(writer));
            if (this.has_appliance_control_info)
                writer.writeMessage(14, this.appliance_control_info, () => this.appliance_control_info.serialize(writer));
            if (this.has_appliance_additional_info)
                writer.writeMessage(15, this.appliance_additional_info, () => this.appliance_additional_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_type = reader.readString();
                        break;
                    case 3:
                        message.appliance_category = reader.readString();
                        break;
                    case 4:
                        message.appliance_name = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.appliance_home_info, () => message.appliance_home_info = GMApplianceHomeInfo.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.appliance_sync_info, () => message.appliance_sync_info = GMApplianceSyncInfo.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.appliance_status_info, () => message.appliance_status_info = GMApplianceStatusInfo.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.appliance_group_info, () => message.appliance_group_info = GMApplianceGroupInfo.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.appliance_activity_info, () => message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.appliance_voice_info, () => message.appliance_voice_info = GMApplianceVoiceInfo.deserialize(reader));
                        break;
                    case 11:
                        message.appliance_icon = reader.readEnum();
                        break;
                    case 12:
                        reader.readMessage(message.appliance_state, () => message.appliance_state = GMApplianceStateInfo.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.appliance_properties, () => message.appliance_properties = GMAppliancePropertiesInfo.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.appliance_control_info, () => message.appliance_control_info = GMApplianceControlInfo.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.appliance_additional_info, () => message.appliance_additional_info = GMApplianceAdditionalInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMAppliance {
            return GMAppliance.deserialize(bytes);
        }
    }
    export class CreateAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_name?: string;
            appliance_type?: string;
            device_id?: string;
            appliance_section?: string;
            appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
            appliance_control_info?: GMApplianceControlInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_name" in data && data.appliance_name != undefined) {
                    this.appliance_name = data.appliance_name;
                }
                if ("appliance_type" in data && data.appliance_type != undefined) {
                    this.appliance_type = data.appliance_type;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("appliance_section" in data && data.appliance_section != undefined) {
                    this.appliance_section = data.appliance_section;
                }
                if ("appliance_icon" in data && data.appliance_icon != undefined) {
                    this.appliance_icon = data.appliance_icon;
                }
                if ("appliance_control_info" in data && data.appliance_control_info != undefined) {
                    this.appliance_control_info = data.appliance_control_info;
                }
            }
        }
        get appliance_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get appliance_section() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set appliance_section(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get appliance_icon() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_16.com.keus.gateway.APPLIANCE_ICONS.DOWN_LIGHT) as dependency_16.com.keus.gateway.APPLIANCE_ICONS;
        }
        set appliance_icon(value: dependency_16.com.keus.gateway.APPLIANCE_ICONS) {
            pb_1.Message.setField(this, 5, value);
        }
        get appliance_control_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceControlInfo, 14) as GMApplianceControlInfo;
        }
        set appliance_control_info(value: GMApplianceControlInfo) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_appliance_control_info() {
            return pb_1.Message.getField(this, 14) != null;
        }
        static fromObject(data: {
            appliance_name?: string;
            appliance_type?: string;
            device_id?: string;
            appliance_section?: string;
            appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
            appliance_control_info?: ReturnType<typeof GMApplianceControlInfo.prototype.toObject>;
        }): CreateAppliance {
            const message = new CreateAppliance({});
            if (data.appliance_name != null) {
                message.appliance_name = data.appliance_name;
            }
            if (data.appliance_type != null) {
                message.appliance_type = data.appliance_type;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.appliance_section != null) {
                message.appliance_section = data.appliance_section;
            }
            if (data.appliance_icon != null) {
                message.appliance_icon = data.appliance_icon;
            }
            if (data.appliance_control_info != null) {
                message.appliance_control_info = GMApplianceControlInfo.fromObject(data.appliance_control_info);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_name?: string;
                appliance_type?: string;
                device_id?: string;
                appliance_section?: string;
                appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
                appliance_control_info?: ReturnType<typeof GMApplianceControlInfo.prototype.toObject>;
            } = {};
            if (this.appliance_name != null) {
                data.appliance_name = this.appliance_name;
            }
            if (this.appliance_type != null) {
                data.appliance_type = this.appliance_type;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.appliance_section != null) {
                data.appliance_section = this.appliance_section;
            }
            if (this.appliance_icon != null) {
                data.appliance_icon = this.appliance_icon;
            }
            if (this.appliance_control_info != null) {
                data.appliance_control_info = this.appliance_control_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_name.length)
                writer.writeString(1, this.appliance_name);
            if (this.appliance_type.length)
                writer.writeString(2, this.appliance_type);
            if (this.device_id.length)
                writer.writeString(3, this.device_id);
            if (this.appliance_section.length)
                writer.writeString(4, this.appliance_section);
            if (this.appliance_icon != dependency_16.com.keus.gateway.APPLIANCE_ICONS.DOWN_LIGHT)
                writer.writeEnum(5, this.appliance_icon);
            if (this.has_appliance_control_info)
                writer.writeMessage(14, this.appliance_control_info, () => this.appliance_control_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_name = reader.readString();
                        break;
                    case 2:
                        message.appliance_type = reader.readString();
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 4:
                        message.appliance_section = reader.readString();
                        break;
                    case 5:
                        message.appliance_icon = reader.readEnum();
                        break;
                    case 14:
                        reader.readMessage(message.appliance_control_info, () => message.appliance_control_info = GMApplianceControlInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAppliance {
            return CreateAppliance.deserialize(bytes);
        }
    }
    export class CreateApplianceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            appliance?: GMAppliance;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("appliance" in data && data.appliance != undefined) {
                    this.appliance = data.appliance;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get appliance() {
            return pb_1.Message.getWrapperField(this, GMAppliance, 5) as GMAppliance;
        }
        set appliance(value: GMAppliance) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_appliance() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            appliance?: ReturnType<typeof GMAppliance.prototype.toObject>;
        }): CreateApplianceResponse {
            const message = new CreateApplianceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.appliance != null) {
                message.appliance = GMAppliance.fromObject(data.appliance);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                appliance?: ReturnType<typeof GMAppliance.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.appliance != null) {
                data.appliance = this.appliance.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.has_appliance)
                writer.writeMessage(5, this.appliance, () => this.appliance.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateApplianceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateApplianceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.appliance, () => message.appliance = GMAppliance.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateApplianceResponse {
            return CreateApplianceResponse.deserialize(bytes);
        }
    }
    export class RenameAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_name" in data && data.appliance_name != undefined) {
                    this.appliance_name = data.appliance_name;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_name?: string;
        }): RenameAppliance {
            const message = new RenameAppliance({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_name != null) {
                message.appliance_name = data.appliance_name;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_name?: string;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_name != null) {
                data.appliance_name = this.appliance_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.appliance_name.length)
                writer.writeString(2, this.appliance_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameAppliance {
            return RenameAppliance.deserialize(bytes);
        }
    }
    export class RenameApplianceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameApplianceResponse {
            const message = new RenameApplianceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameApplianceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameApplianceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameApplianceResponse {
            return RenameApplianceResponse.deserialize(bytes);
        }
    }
    export class MoveAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_room?: string;
            appliance_section?: string;
            force_move?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_room" in data && data.appliance_room != undefined) {
                    this.appliance_room = data.appliance_room;
                }
                if ("appliance_section" in data && data.appliance_section != undefined) {
                    this.appliance_section = data.appliance_section;
                }
                if ("force_move" in data && data.force_move != undefined) {
                    this.force_move = data.force_move;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appliance_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set appliance_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get force_move() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set force_move(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_room?: string;
            appliance_section?: string;
            force_move?: boolean;
        }): MoveAppliance {
            const message = new MoveAppliance({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_room != null) {
                message.appliance_room = data.appliance_room;
            }
            if (data.appliance_section != null) {
                message.appliance_section = data.appliance_section;
            }
            if (data.force_move != null) {
                message.force_move = data.force_move;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_room?: string;
                appliance_section?: string;
                force_move?: boolean;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_room != null) {
                data.appliance_room = this.appliance_room;
            }
            if (this.appliance_section != null) {
                data.appliance_section = this.appliance_section;
            }
            if (this.force_move != null) {
                data.force_move = this.force_move;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.appliance_room.length)
                writer.writeString(2, this.appliance_room);
            if (this.appliance_section.length)
                writer.writeString(3, this.appliance_section);
            if (this.force_move != false)
                writer.writeBool(4, this.force_move);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_room = reader.readString();
                        break;
                    case 3:
                        message.appliance_section = reader.readString();
                        break;
                    case 4:
                        message.force_move = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveAppliance {
            return MoveAppliance.deserialize(bytes);
        }
    }
    export class MoveApplianceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveApplianceResponse {
            const message = new MoveApplianceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveApplianceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveApplianceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveApplianceResponse {
            return MoveApplianceResponse.deserialize(bytes);
        }
    }
    export class ConfigureApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_properties?: GMAppliancePropertiesInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_properties" in data && data.appliance_properties != undefined) {
                    this.appliance_properties = data.appliance_properties;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_properties() {
            return pb_1.Message.getWrapperField(this, GMAppliancePropertiesInfo, 2) as GMAppliancePropertiesInfo;
        }
        set appliance_properties(value: GMAppliancePropertiesInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_properties() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_properties?: ReturnType<typeof GMAppliancePropertiesInfo.prototype.toObject>;
        }): ConfigureApplianceProperties {
            const message = new ConfigureApplianceProperties({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_properties != null) {
                message.appliance_properties = GMAppliancePropertiesInfo.fromObject(data.appliance_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_properties?: ReturnType<typeof GMAppliancePropertiesInfo.prototype.toObject>;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_properties != null) {
                data.appliance_properties = this.appliance_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.has_appliance_properties)
                writer.writeMessage(2, this.appliance_properties, () => this.appliance_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_properties, () => message.appliance_properties = GMAppliancePropertiesInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureApplianceProperties {
            return ConfigureApplianceProperties.deserialize(bytes);
        }
    }
    export class ConfigureAppliancePropertiesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureAppliancePropertiesResponse {
            const message = new ConfigureAppliancePropertiesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureAppliancePropertiesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureAppliancePropertiesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureAppliancePropertiesResponse {
            return ConfigureAppliancePropertiesResponse.deserialize(bytes);
        }
    }
    export class SetApplianceDefaultState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_properties?: GMAppliancePropertiesInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_properties" in data && data.appliance_properties != undefined) {
                    this.appliance_properties = data.appliance_properties;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_properties() {
            return pb_1.Message.getWrapperField(this, GMAppliancePropertiesInfo, 2) as GMAppliancePropertiesInfo;
        }
        set appliance_properties(value: GMAppliancePropertiesInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_properties() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_properties?: ReturnType<typeof GMAppliancePropertiesInfo.prototype.toObject>;
        }): SetApplianceDefaultState {
            const message = new SetApplianceDefaultState({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_properties != null) {
                message.appliance_properties = GMAppliancePropertiesInfo.fromObject(data.appliance_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_properties?: ReturnType<typeof GMAppliancePropertiesInfo.prototype.toObject>;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_properties != null) {
                data.appliance_properties = this.appliance_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.has_appliance_properties)
                writer.writeMessage(2, this.appliance_properties, () => this.appliance_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceDefaultState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceDefaultState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_properties, () => message.appliance_properties = GMAppliancePropertiesInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceDefaultState {
            return SetApplianceDefaultState.deserialize(bytes);
        }
    }
    export class SetApplianceDefaultStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetApplianceDefaultStateResponse {
            const message = new SetApplianceDefaultStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceDefaultStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceDefaultStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceDefaultStateResponse {
            return SetApplianceDefaultStateResponse.deserialize(bytes);
        }
    }
    export class SetApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_state?: GMApplianceStateInfo;
            appliance_activity_info?: dependency_17.com.keus.gateway.ActivitySourceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_state" in data && data.appliance_state != undefined) {
                    this.appliance_state = data.appliance_state;
                }
                if ("appliance_activity_info" in data && data.appliance_activity_info != undefined) {
                    this.appliance_activity_info = data.appliance_activity_info;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_state() {
            return pb_1.Message.getWrapperField(this, GMApplianceStateInfo, 2) as GMApplianceStateInfo;
        }
        set appliance_state(value: GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get appliance_activity_info() {
            return pb_1.Message.getWrapperField(this, dependency_17.com.keus.gateway.ActivitySourceInfo, 3) as dependency_17.com.keus.gateway.ActivitySourceInfo;
        }
        set appliance_activity_info(value: dependency_17.com.keus.gateway.ActivitySourceInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_appliance_activity_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
            appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
        }): SetApplianceState {
            const message = new SetApplianceState({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_state != null) {
                message.appliance_state = GMApplianceStateInfo.fromObject(data.appliance_state);
            }
            if (data.appliance_activity_info != null) {
                message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.fromObject(data.appliance_activity_info);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_state?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
                appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_state != null) {
                data.appliance_state = this.appliance_state.toObject();
            }
            if (this.appliance_activity_info != null) {
                data.appliance_activity_info = this.appliance_activity_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.has_appliance_state)
                writer.writeMessage(2, this.appliance_state, () => this.appliance_state.serialize(writer));
            if (this.has_appliance_activity_info)
                writer.writeMessage(3, this.appliance_activity_info, () => this.appliance_activity_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_state, () => message.appliance_state = GMApplianceStateInfo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.appliance_activity_info, () => message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceState {
            return SetApplianceState.deserialize(bytes);
        }
    }
    export class SetApplianceStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetApplianceStateResponse {
            const message = new SetApplianceStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceStateResponse {
            return SetApplianceStateResponse.deserialize(bytes);
        }
    }
    export class GMApplianceControlEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_identifier?: GMApplianceIdentifier;
            appliance_state_info?: GMApplianceStateInfo;
            appliance_activity_info?: dependency_17.com.keus.gateway.ActivitySourceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_identifier" in data && data.appliance_identifier != undefined) {
                    this.appliance_identifier = data.appliance_identifier;
                }
                if ("appliance_state_info" in data && data.appliance_state_info != undefined) {
                    this.appliance_state_info = data.appliance_state_info;
                }
                if ("appliance_activity_info" in data && data.appliance_activity_info != undefined) {
                    this.appliance_activity_info = data.appliance_activity_info;
                }
            }
        }
        get appliance_identifier() {
            return pb_1.Message.getWrapperField(this, GMApplianceIdentifier, 1) as GMApplianceIdentifier;
        }
        set appliance_identifier(value: GMApplianceIdentifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_appliance_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get appliance_state_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceStateInfo, 2) as GMApplianceStateInfo;
        }
        set appliance_state_info(value: GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_state_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get appliance_activity_info() {
            return pb_1.Message.getWrapperField(this, dependency_17.com.keus.gateway.ActivitySourceInfo, 3) as dependency_17.com.keus.gateway.ActivitySourceInfo;
        }
        set appliance_activity_info(value: dependency_17.com.keus.gateway.ActivitySourceInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_appliance_activity_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            appliance_identifier?: ReturnType<typeof GMApplianceIdentifier.prototype.toObject>;
            appliance_state_info?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
            appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
        }): GMApplianceControlEvent {
            const message = new GMApplianceControlEvent({});
            if (data.appliance_identifier != null) {
                message.appliance_identifier = GMApplianceIdentifier.fromObject(data.appliance_identifier);
            }
            if (data.appliance_state_info != null) {
                message.appliance_state_info = GMApplianceStateInfo.fromObject(data.appliance_state_info);
            }
            if (data.appliance_activity_info != null) {
                message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.fromObject(data.appliance_activity_info);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_identifier?: ReturnType<typeof GMApplianceIdentifier.prototype.toObject>;
                appliance_state_info?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
                appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
            } = {};
            if (this.appliance_identifier != null) {
                data.appliance_identifier = this.appliance_identifier.toObject();
            }
            if (this.appliance_state_info != null) {
                data.appliance_state_info = this.appliance_state_info.toObject();
            }
            if (this.appliance_activity_info != null) {
                data.appliance_activity_info = this.appliance_activity_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_appliance_identifier)
                writer.writeMessage(1, this.appliance_identifier, () => this.appliance_identifier.serialize(writer));
            if (this.has_appliance_state_info)
                writer.writeMessage(2, this.appliance_state_info, () => this.appliance_state_info.serialize(writer));
            if (this.has_appliance_activity_info)
                writer.writeMessage(3, this.appliance_activity_info, () => this.appliance_activity_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMApplianceControlEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMApplianceControlEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.appliance_identifier, () => message.appliance_identifier = GMApplianceIdentifier.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.appliance_state_info, () => message.appliance_state_info = GMApplianceStateInfo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.appliance_activity_info, () => message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMApplianceControlEvent {
            return GMApplianceControlEvent.deserialize(bytes);
        }
    }
    export class SetApplianceControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_control_info?: GMApplianceControlInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_control_info" in data && data.appliance_control_info != undefined) {
                    this.appliance_control_info = data.appliance_control_info;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_control_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceControlInfo, 2) as GMApplianceControlInfo;
        }
        set appliance_control_info(value: GMApplianceControlInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_control_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_control_info?: ReturnType<typeof GMApplianceControlInfo.prototype.toObject>;
        }): SetApplianceControlInfo {
            const message = new SetApplianceControlInfo({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_control_info != null) {
                message.appliance_control_info = GMApplianceControlInfo.fromObject(data.appliance_control_info);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_control_info?: ReturnType<typeof GMApplianceControlInfo.prototype.toObject>;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_control_info != null) {
                data.appliance_control_info = this.appliance_control_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.has_appliance_control_info)
                writer.writeMessage(2, this.appliance_control_info, () => this.appliance_control_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_control_info, () => message.appliance_control_info = GMApplianceControlInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceControlInfo {
            return SetApplianceControlInfo.deserialize(bytes);
        }
    }
    export class SetApplianceControlInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetApplianceControlInfoResponse {
            const message = new SetApplianceControlInfoResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceControlInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceControlInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceControlInfoResponse {
            return SetApplianceControlInfoResponse.deserialize(bytes);
        }
    }
    export class SetApplianceVoiceName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_voice_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_voice_name" in data && data.appliance_voice_name != undefined) {
                    this.appliance_voice_name = data.appliance_voice_name;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_voice_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_voice_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_voice_name?: string;
        }): SetApplianceVoiceName {
            const message = new SetApplianceVoiceName({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_voice_name != null) {
                message.appliance_voice_name = data.appliance_voice_name;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_voice_name?: string;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_voice_name != null) {
                data.appliance_voice_name = this.appliance_voice_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.appliance_voice_name.length)
                writer.writeString(2, this.appliance_voice_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceVoiceName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceVoiceName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_voice_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceVoiceName {
            return SetApplianceVoiceName.deserialize(bytes);
        }
    }
    export class SetApplianceVoiceNameResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetApplianceVoiceNameResponse {
            const message = new SetApplianceVoiceNameResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceVoiceNameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceVoiceNameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceVoiceNameResponse {
            return SetApplianceVoiceNameResponse.deserialize(bytes);
        }
    }
    export class SetApplianceVoiceDiscoverable extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            discover_appliance?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("discover_appliance" in data && data.discover_appliance != undefined) {
                    this.discover_appliance = data.discover_appliance;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get discover_appliance() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set discover_appliance(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_id?: string;
            discover_appliance?: boolean;
        }): SetApplianceVoiceDiscoverable {
            const message = new SetApplianceVoiceDiscoverable({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.discover_appliance != null) {
                message.discover_appliance = data.discover_appliance;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                discover_appliance?: boolean;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.discover_appliance != null) {
                data.discover_appliance = this.discover_appliance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.discover_appliance != false)
                writer.writeBool(2, this.discover_appliance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceVoiceDiscoverable {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceVoiceDiscoverable();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        message.discover_appliance = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceVoiceDiscoverable {
            return SetApplianceVoiceDiscoverable.deserialize(bytes);
        }
    }
    export class SetApplianceVoiceDiscoverableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetApplianceVoiceDiscoverableResponse {
            const message = new SetApplianceVoiceDiscoverableResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceVoiceDiscoverableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceVoiceDiscoverableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceVoiceDiscoverableResponse {
            return SetApplianceVoiceDiscoverableResponse.deserialize(bytes);
        }
    }
    export class DeleteAppliance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            force_delete?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_id?: string;
            force_delete?: boolean;
        }): DeleteAppliance {
            const message = new DeleteAppliance({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                force_delete?: boolean;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.force_delete != false)
                writer.writeBool(2, this.force_delete);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAppliance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAppliance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        message.force_delete = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAppliance {
            return DeleteAppliance.deserialize(bytes);
        }
    }
    export class DeleteApplianceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            job_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("job_id" in data && data.job_id != undefined) {
                    this.job_id = data.job_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get job_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set job_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            job_id?: string;
        }): DeleteApplianceResponse {
            const message = new DeleteApplianceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.job_id != null) {
                message.job_id = data.job_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                job_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.job_id != null) {
                data.job_id = this.job_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.job_id.length)
                writer.writeString(5, this.job_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApplianceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApplianceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        message.job_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApplianceResponse {
            return DeleteApplianceResponse.deserialize(bytes);
        }
    }
    export class DeleteApplianceJobEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            appliance?: GMAppliance;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("appliance" in data && data.appliance != undefined) {
                    this.appliance = data.appliance;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get appliance() {
            return pb_1.Message.getWrapperField(this, GMAppliance, 5) as GMAppliance;
        }
        set appliance(value: GMAppliance) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_appliance() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            appliance?: ReturnType<typeof GMAppliance.prototype.toObject>;
        }): DeleteApplianceJobEvent {
            const message = new DeleteApplianceJobEvent({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.appliance != null) {
                message.appliance = GMAppliance.fromObject(data.appliance);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                appliance?: ReturnType<typeof GMAppliance.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.appliance != null) {
                data.appliance = this.appliance.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.has_appliance)
                writer.writeMessage(5, this.appliance, () => this.appliance.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApplianceJobEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApplianceJobEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.appliance, () => message.appliance = GMAppliance.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApplianceJobEvent {
            return DeleteApplianceJobEvent.deserialize(bytes);
        }
    }
    export class SetApplianceIcon extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_icon" in data && data.appliance_icon != undefined) {
                    this.appliance_icon = data.appliance_icon;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_icon() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_16.com.keus.gateway.APPLIANCE_ICONS.DOWN_LIGHT) as dependency_16.com.keus.gateway.APPLIANCE_ICONS;
        }
        set appliance_icon(value: dependency_16.com.keus.gateway.APPLIANCE_ICONS) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
        }): SetApplianceIcon {
            const message = new SetApplianceIcon({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_icon != null) {
                message.appliance_icon = data.appliance_icon;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_icon?: dependency_16.com.keus.gateway.APPLIANCE_ICONS;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_icon != null) {
                data.appliance_icon = this.appliance_icon;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.appliance_icon != dependency_16.com.keus.gateway.APPLIANCE_ICONS.DOWN_LIGHT)
                writer.writeEnum(2, this.appliance_icon);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceIcon {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceIcon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_icon = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceIcon {
            return SetApplianceIcon.deserialize(bytes);
        }
    }
    export class SetApplianceIconResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetApplianceIconResponse {
            const message = new SetApplianceIconResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetApplianceIconResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetApplianceIconResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetApplianceIconResponse {
            return SetApplianceIconResponse.deserialize(bytes);
        }
    }
    export class ReportApplianceActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_state_info?: GMApplianceStateInfo;
            appliance_activity_info?: dependency_17.com.keus.gateway.ActivitySourceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_state_info" in data && data.appliance_state_info != undefined) {
                    this.appliance_state_info = data.appliance_state_info;
                }
                if ("appliance_activity_info" in data && data.appliance_activity_info != undefined) {
                    this.appliance_activity_info = data.appliance_activity_info;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_state_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceStateInfo, 2) as GMApplianceStateInfo;
        }
        set appliance_state_info(value: GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_state_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get appliance_activity_info() {
            return pb_1.Message.getWrapperField(this, dependency_17.com.keus.gateway.ActivitySourceInfo, 3) as dependency_17.com.keus.gateway.ActivitySourceInfo;
        }
        set appliance_activity_info(value: dependency_17.com.keus.gateway.ActivitySourceInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_appliance_activity_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_state_info?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
            appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
        }): ReportApplianceActivity {
            const message = new ReportApplianceActivity({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_state_info != null) {
                message.appliance_state_info = GMApplianceStateInfo.fromObject(data.appliance_state_info);
            }
            if (data.appliance_activity_info != null) {
                message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.fromObject(data.appliance_activity_info);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_state_info?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
                appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_state_info != null) {
                data.appliance_state_info = this.appliance_state_info.toObject();
            }
            if (this.appliance_activity_info != null) {
                data.appliance_activity_info = this.appliance_activity_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.has_appliance_state_info)
                writer.writeMessage(2, this.appliance_state_info, () => this.appliance_state_info.serialize(writer));
            if (this.has_appliance_activity_info)
                writer.writeMessage(3, this.appliance_activity_info, () => this.appliance_activity_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportApplianceActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportApplianceActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_state_info, () => message.appliance_state_info = GMApplianceStateInfo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.appliance_activity_info, () => message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportApplianceActivity {
            return ReportApplianceActivity.deserialize(bytes);
        }
    }
    export class ReportApplianceActivityResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ReportApplianceActivityResponse {
            const message = new ReportApplianceActivityResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportApplianceActivityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportApplianceActivityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportApplianceActivityResponse {
            return ReportApplianceActivityResponse.deserialize(bytes);
        }
    }
    export class ApplianceControlEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: string;
            appliance_state_info?: GMApplianceStateInfo;
            appliance_activity_info?: dependency_17.com.keus.gateway.ActivitySourceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_state_info" in data && data.appliance_state_info != undefined) {
                    this.appliance_state_info = data.appliance_state_info;
                }
                if ("appliance_activity_info" in data && data.appliance_activity_info != undefined) {
                    this.appliance_activity_info = data.appliance_activity_info;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_state_info() {
            return pb_1.Message.getWrapperField(this, GMApplianceStateInfo, 2) as GMApplianceStateInfo;
        }
        set appliance_state_info(value: GMApplianceStateInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_appliance_state_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get appliance_activity_info() {
            return pb_1.Message.getWrapperField(this, dependency_17.com.keus.gateway.ActivitySourceInfo, 3) as dependency_17.com.keus.gateway.ActivitySourceInfo;
        }
        set appliance_activity_info(value: dependency_17.com.keus.gateway.ActivitySourceInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_appliance_activity_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            appliance_id?: string;
            appliance_state_info?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
            appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
        }): ApplianceControlEvent {
            const message = new ApplianceControlEvent({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_state_info != null) {
                message.appliance_state_info = GMApplianceStateInfo.fromObject(data.appliance_state_info);
            }
            if (data.appliance_activity_info != null) {
                message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.fromObject(data.appliance_activity_info);
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: string;
                appliance_state_info?: ReturnType<typeof GMApplianceStateInfo.prototype.toObject>;
                appliance_activity_info?: ReturnType<typeof dependency_17.com.keus.gateway.ActivitySourceInfo.prototype.toObject>;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_state_info != null) {
                data.appliance_state_info = this.appliance_state_info.toObject();
            }
            if (this.appliance_activity_info != null) {
                data.appliance_activity_info = this.appliance_activity_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id.length)
                writer.writeString(1, this.appliance_id);
            if (this.has_appliance_state_info)
                writer.writeMessage(2, this.appliance_state_info, () => this.appliance_state_info.serialize(writer));
            if (this.has_appliance_activity_info)
                writer.writeMessage(3, this.appliance_activity_info, () => this.appliance_activity_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplianceControlEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplianceControlEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.appliance_state_info, () => message.appliance_state_info = GMApplianceStateInfo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.appliance_activity_info, () => message.appliance_activity_info = dependency_17.com.keus.gateway.ActivitySourceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApplianceControlEvent {
            return ApplianceControlEvent.deserialize(bytes);
        }
    }
    export class AddApplianceSavedState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_saved_state_action?: GMApplianceSavedStateAction;
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_saved_state_action" in data && data.appliance_saved_state_action != undefined) {
                    this.appliance_saved_state_action = data.appliance_saved_state_action;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get appliance_saved_state_action() {
            return pb_1.Message.getWrapperField(this, GMApplianceSavedStateAction, 1) as GMApplianceSavedStateAction;
        }
        set appliance_saved_state_action(value: GMApplianceSavedStateAction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_appliance_saved_state_action() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_saved_state_action?: ReturnType<typeof GMApplianceSavedStateAction.prototype.toObject>;
            appliance_id?: string;
        }): AddApplianceSavedState {
            const message = new AddApplianceSavedState({});
            if (data.appliance_saved_state_action != null) {
                message.appliance_saved_state_action = GMApplianceSavedStateAction.fromObject(data.appliance_saved_state_action);
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_saved_state_action?: ReturnType<typeof GMApplianceSavedStateAction.prototype.toObject>;
                appliance_id?: string;
            } = {};
            if (this.appliance_saved_state_action != null) {
                data.appliance_saved_state_action = this.appliance_saved_state_action.toObject();
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_appliance_saved_state_action)
                writer.writeMessage(1, this.appliance_saved_state_action, () => this.appliance_saved_state_action.serialize(writer));
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddApplianceSavedState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddApplianceSavedState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.appliance_saved_state_action, () => message.appliance_saved_state_action = GMApplianceSavedStateAction.deserialize(reader));
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddApplianceSavedState {
            return AddApplianceSavedState.deserialize(bytes);
        }
    }
    export class AddApplianceSavedStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            saved_state_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("saved_state_id" in data && data.saved_state_id != undefined) {
                    this.saved_state_id = data.saved_state_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get saved_state_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set saved_state_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            saved_state_id?: string;
        }): AddApplianceSavedStateResponse {
            const message = new AddApplianceSavedStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.saved_state_id != null) {
                message.saved_state_id = data.saved_state_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                saved_state_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.saved_state_id != null) {
                data.saved_state_id = this.saved_state_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.saved_state_id.length)
                writer.writeString(5, this.saved_state_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddApplianceSavedStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddApplianceSavedStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        message.saved_state_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddApplianceSavedStateResponse {
            return AddApplianceSavedStateResponse.deserialize(bytes);
        }
    }
    export class DeleteApplianceSavedState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            saved_state_id?: string;
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("saved_state_id" in data && data.saved_state_id != undefined) {
                    this.saved_state_id = data.saved_state_id;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get saved_state_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set saved_state_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            saved_state_id?: string;
            appliance_id?: string;
        }): DeleteApplianceSavedState {
            const message = new DeleteApplianceSavedState({});
            if (data.saved_state_id != null) {
                message.saved_state_id = data.saved_state_id;
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                saved_state_id?: string;
                appliance_id?: string;
            } = {};
            if (this.saved_state_id != null) {
                data.saved_state_id = this.saved_state_id;
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.saved_state_id.length)
                writer.writeString(1, this.saved_state_id);
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApplianceSavedState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApplianceSavedState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.saved_state_id = reader.readString();
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApplianceSavedState {
            return DeleteApplianceSavedState.deserialize(bytes);
        }
    }
    export class DeleteApplianceSavedStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): DeleteApplianceSavedStateResponse {
            const message = new DeleteApplianceSavedStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApplianceSavedStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApplianceSavedStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApplianceSavedStateResponse {
            return DeleteApplianceSavedStateResponse.deserialize(bytes);
        }
    }
    export class EditApplianceSavedState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_saved_state_action?: GMApplianceSavedStateAction;
            appliance_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_saved_state_action" in data && data.appliance_saved_state_action != undefined) {
                    this.appliance_saved_state_action = data.appliance_saved_state_action;
                }
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
            }
        }
        get appliance_saved_state_action() {
            return pb_1.Message.getWrapperField(this, GMApplianceSavedStateAction, 1) as GMApplianceSavedStateAction;
        }
        set appliance_saved_state_action(value: GMApplianceSavedStateAction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_appliance_saved_state_action() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set appliance_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            appliance_saved_state_action?: ReturnType<typeof GMApplianceSavedStateAction.prototype.toObject>;
            appliance_id?: string;
        }): EditApplianceSavedState {
            const message = new EditApplianceSavedState({});
            if (data.appliance_saved_state_action != null) {
                message.appliance_saved_state_action = GMApplianceSavedStateAction.fromObject(data.appliance_saved_state_action);
            }
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_saved_state_action?: ReturnType<typeof GMApplianceSavedStateAction.prototype.toObject>;
                appliance_id?: string;
            } = {};
            if (this.appliance_saved_state_action != null) {
                data.appliance_saved_state_action = this.appliance_saved_state_action.toObject();
            }
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_appliance_saved_state_action)
                writer.writeMessage(1, this.appliance_saved_state_action, () => this.appliance_saved_state_action.serialize(writer));
            if (this.appliance_id.length)
                writer.writeString(2, this.appliance_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditApplianceSavedState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditApplianceSavedState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.appliance_saved_state_action, () => message.appliance_saved_state_action = GMApplianceSavedStateAction.deserialize(reader));
                        break;
                    case 2:
                        message.appliance_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditApplianceSavedState {
            return EditApplianceSavedState.deserialize(bytes);
        }
    }
    export class EditApplianceSavedStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): EditApplianceSavedStateResponse {
            const message = new EditApplianceSavedStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditApplianceSavedStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditApplianceSavedStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditApplianceSavedStateResponse {
            return EditApplianceSavedStateResponse.deserialize(bytes);
        }
    }
    export class ReportGmApplianceSystemActivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appliance_id?: number;
            appliance_states?: number[];
            activity_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appliance_id" in data && data.appliance_id != undefined) {
                    this.appliance_id = data.appliance_id;
                }
                if ("appliance_states" in data && data.appliance_states != undefined) {
                    this.appliance_states = data.appliance_states;
                }
                if ("activity_time" in data && data.activity_time != undefined) {
                    this.activity_time = data.activity_time;
                }
            }
        }
        get appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set appliance_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get appliance_states() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set appliance_states(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get activity_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set activity_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            appliance_id?: number;
            appliance_states?: number[];
            activity_time?: number;
        }): ReportGmApplianceSystemActivity {
            const message = new ReportGmApplianceSystemActivity({});
            if (data.appliance_id != null) {
                message.appliance_id = data.appliance_id;
            }
            if (data.appliance_states != null) {
                message.appliance_states = data.appliance_states;
            }
            if (data.activity_time != null) {
                message.activity_time = data.activity_time;
            }
            return message;
        }
        toObject() {
            const data: {
                appliance_id?: number;
                appliance_states?: number[];
                activity_time?: number;
            } = {};
            if (this.appliance_id != null) {
                data.appliance_id = this.appliance_id;
            }
            if (this.appliance_states != null) {
                data.appliance_states = this.appliance_states;
            }
            if (this.activity_time != null) {
                data.activity_time = this.activity_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appliance_id != 0)
                writer.writeUint32(1, this.appliance_id);
            if (this.appliance_states.length)
                writer.writePackedUint32(2, this.appliance_states);
            if (this.activity_time != 0)
                writer.writeUint64(4, this.activity_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportGmApplianceSystemActivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportGmApplianceSystemActivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appliance_id = reader.readUint32();
                        break;
                    case 2:
                        message.appliance_states = reader.readPackedUint32();
                        break;
                    case 4:
                        message.activity_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportGmApplianceSystemActivity {
            return ReportGmApplianceSystemActivity.deserialize(bytes);
        }
    }
}
