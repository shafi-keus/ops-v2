/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/appliances/appliance-types/switch.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../traits/onoff_trait";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class SwitchApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            onoff_state?: dependency_1.com.keus.gateway.OnOffTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onoff_state" in data && data.onoff_state != undefined) {
                    this.onoff_state = data.onoff_state;
                }
            }
        }
        get onoff_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.OnOffTraitState, 1) as dependency_1.com.keus.gateway.OnOffTraitState;
        }
        set onoff_state(value: dependency_1.com.keus.gateway.OnOffTraitState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_onoff_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            onoff_state?: ReturnType<typeof dependency_1.com.keus.gateway.OnOffTraitState.prototype.toObject>;
        }): SwitchApplianceState {
            const message = new SwitchApplianceState({});
            if (data.onoff_state != null) {
                message.onoff_state = dependency_1.com.keus.gateway.OnOffTraitState.fromObject(data.onoff_state);
            }
            return message;
        }
        toObject() {
            const data: {
                onoff_state?: ReturnType<typeof dependency_1.com.keus.gateway.OnOffTraitState.prototype.toObject>;
            } = {};
            if (this.onoff_state != null) {
                data.onoff_state = this.onoff_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_onoff_state)
                writer.writeMessage(1, this.onoff_state, () => this.onoff_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwitchApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwitchApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.onoff_state, () => message.onoff_state = dependency_1.com.keus.gateway.OnOffTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwitchApplianceState {
            return SwitchApplianceState.deserialize(bytes);
        }
    }
    export class SwitchApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            onoff_properties?: dependency_1.com.keus.gateway.OnOffTraitProperties;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onoff_properties" in data && data.onoff_properties != undefined) {
                    this.onoff_properties = data.onoff_properties;
                }
            }
        }
        get onoff_properties() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.OnOffTraitProperties, 1) as dependency_1.com.keus.gateway.OnOffTraitProperties;
        }
        set onoff_properties(value: dependency_1.com.keus.gateway.OnOffTraitProperties) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_onoff_properties() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            onoff_properties?: ReturnType<typeof dependency_1.com.keus.gateway.OnOffTraitProperties.prototype.toObject>;
        }): SwitchApplianceProperties {
            const message = new SwitchApplianceProperties({});
            if (data.onoff_properties != null) {
                message.onoff_properties = dependency_1.com.keus.gateway.OnOffTraitProperties.fromObject(data.onoff_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                onoff_properties?: ReturnType<typeof dependency_1.com.keus.gateway.OnOffTraitProperties.prototype.toObject>;
            } = {};
            if (this.onoff_properties != null) {
                data.onoff_properties = this.onoff_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_onoff_properties)
                writer.writeMessage(1, this.onoff_properties, () => this.onoff_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwitchApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwitchApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.onoff_properties, () => message.onoff_properties = dependency_1.com.keus.gateway.OnOffTraitProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwitchApplianceProperties {
            return SwitchApplianceProperties.deserialize(bytes);
        }
    }
}
