/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/appliances/appliance-types/blindstilt.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../traits/openclose_trait";
import * as dependency_2 from "./../../traits/percentopen_trait";
import * as dependency_3 from "./../../traits/angulartilt_trait";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class BlindsTiltApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            open_close_state?: dependency_1.com.keus.gateway.OpenCloseTraitState;
            percent_open_state?: dependency_2.com.keus.gateway.PercentOpenTraitState;
            angular_tilt_state?: dependency_3.com.keus.gateway.AngularTiltTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("open_close_state" in data && data.open_close_state != undefined) {
                    this.open_close_state = data.open_close_state;
                }
                if ("percent_open_state" in data && data.percent_open_state != undefined) {
                    this.percent_open_state = data.percent_open_state;
                }
                if ("angular_tilt_state" in data && data.angular_tilt_state != undefined) {
                    this.angular_tilt_state = data.angular_tilt_state;
                }
            }
        }
        get open_close_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.OpenCloseTraitState, 1) as dependency_1.com.keus.gateway.OpenCloseTraitState;
        }
        set open_close_state(value: dependency_1.com.keus.gateway.OpenCloseTraitState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_open_close_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get percent_open_state() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.PercentOpenTraitState, 2) as dependency_2.com.keus.gateway.PercentOpenTraitState;
        }
        set percent_open_state(value: dependency_2.com.keus.gateway.PercentOpenTraitState) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_percent_open_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get angular_tilt_state() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.AngularTiltTraitState, 3) as dependency_3.com.keus.gateway.AngularTiltTraitState;
        }
        set angular_tilt_state(value: dependency_3.com.keus.gateway.AngularTiltTraitState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_angular_tilt_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            open_close_state?: ReturnType<typeof dependency_1.com.keus.gateway.OpenCloseTraitState.prototype.toObject>;
            percent_open_state?: ReturnType<typeof dependency_2.com.keus.gateway.PercentOpenTraitState.prototype.toObject>;
            angular_tilt_state?: ReturnType<typeof dependency_3.com.keus.gateway.AngularTiltTraitState.prototype.toObject>;
        }): BlindsTiltApplianceState {
            const message = new BlindsTiltApplianceState({});
            if (data.open_close_state != null) {
                message.open_close_state = dependency_1.com.keus.gateway.OpenCloseTraitState.fromObject(data.open_close_state);
            }
            if (data.percent_open_state != null) {
                message.percent_open_state = dependency_2.com.keus.gateway.PercentOpenTraitState.fromObject(data.percent_open_state);
            }
            if (data.angular_tilt_state != null) {
                message.angular_tilt_state = dependency_3.com.keus.gateway.AngularTiltTraitState.fromObject(data.angular_tilt_state);
            }
            return message;
        }
        toObject() {
            const data: {
                open_close_state?: ReturnType<typeof dependency_1.com.keus.gateway.OpenCloseTraitState.prototype.toObject>;
                percent_open_state?: ReturnType<typeof dependency_2.com.keus.gateway.PercentOpenTraitState.prototype.toObject>;
                angular_tilt_state?: ReturnType<typeof dependency_3.com.keus.gateway.AngularTiltTraitState.prototype.toObject>;
            } = {};
            if (this.open_close_state != null) {
                data.open_close_state = this.open_close_state.toObject();
            }
            if (this.percent_open_state != null) {
                data.percent_open_state = this.percent_open_state.toObject();
            }
            if (this.angular_tilt_state != null) {
                data.angular_tilt_state = this.angular_tilt_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_open_close_state)
                writer.writeMessage(1, this.open_close_state, () => this.open_close_state.serialize(writer));
            if (this.has_percent_open_state)
                writer.writeMessage(2, this.percent_open_state, () => this.percent_open_state.serialize(writer));
            if (this.has_angular_tilt_state)
                writer.writeMessage(3, this.angular_tilt_state, () => this.angular_tilt_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlindsTiltApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlindsTiltApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.open_close_state, () => message.open_close_state = dependency_1.com.keus.gateway.OpenCloseTraitState.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.percent_open_state, () => message.percent_open_state = dependency_2.com.keus.gateway.PercentOpenTraitState.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.angular_tilt_state, () => message.angular_tilt_state = dependency_3.com.keus.gateway.AngularTiltTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlindsTiltApplianceState {
            return BlindsTiltApplianceState.deserialize(bytes);
        }
    }
    export class BlindsTiltApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            open_close_properties?: dependency_1.com.keus.gateway.OpenCloseTraitProperties;
            percent_open_properties?: dependency_2.com.keus.gateway.PercentOpenTraitProperties;
            angular_tilt_properties?: dependency_3.com.keus.gateway.AngularTiltTraitProperties;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("open_close_properties" in data && data.open_close_properties != undefined) {
                    this.open_close_properties = data.open_close_properties;
                }
                if ("percent_open_properties" in data && data.percent_open_properties != undefined) {
                    this.percent_open_properties = data.percent_open_properties;
                }
                if ("angular_tilt_properties" in data && data.angular_tilt_properties != undefined) {
                    this.angular_tilt_properties = data.angular_tilt_properties;
                }
            }
        }
        get open_close_properties() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.OpenCloseTraitProperties, 1) as dependency_1.com.keus.gateway.OpenCloseTraitProperties;
        }
        set open_close_properties(value: dependency_1.com.keus.gateway.OpenCloseTraitProperties) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_open_close_properties() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get percent_open_properties() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.PercentOpenTraitProperties, 2) as dependency_2.com.keus.gateway.PercentOpenTraitProperties;
        }
        set percent_open_properties(value: dependency_2.com.keus.gateway.PercentOpenTraitProperties) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_percent_open_properties() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get angular_tilt_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.AngularTiltTraitProperties, 3) as dependency_3.com.keus.gateway.AngularTiltTraitProperties;
        }
        set angular_tilt_properties(value: dependency_3.com.keus.gateway.AngularTiltTraitProperties) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_angular_tilt_properties() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            open_close_properties?: ReturnType<typeof dependency_1.com.keus.gateway.OpenCloseTraitProperties.prototype.toObject>;
            percent_open_properties?: ReturnType<typeof dependency_2.com.keus.gateway.PercentOpenTraitProperties.prototype.toObject>;
            angular_tilt_properties?: ReturnType<typeof dependency_3.com.keus.gateway.AngularTiltTraitProperties.prototype.toObject>;
        }): BlindsTiltApplianceProperties {
            const message = new BlindsTiltApplianceProperties({});
            if (data.open_close_properties != null) {
                message.open_close_properties = dependency_1.com.keus.gateway.OpenCloseTraitProperties.fromObject(data.open_close_properties);
            }
            if (data.percent_open_properties != null) {
                message.percent_open_properties = dependency_2.com.keus.gateway.PercentOpenTraitProperties.fromObject(data.percent_open_properties);
            }
            if (data.angular_tilt_properties != null) {
                message.angular_tilt_properties = dependency_3.com.keus.gateway.AngularTiltTraitProperties.fromObject(data.angular_tilt_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                open_close_properties?: ReturnType<typeof dependency_1.com.keus.gateway.OpenCloseTraitProperties.prototype.toObject>;
                percent_open_properties?: ReturnType<typeof dependency_2.com.keus.gateway.PercentOpenTraitProperties.prototype.toObject>;
                angular_tilt_properties?: ReturnType<typeof dependency_3.com.keus.gateway.AngularTiltTraitProperties.prototype.toObject>;
            } = {};
            if (this.open_close_properties != null) {
                data.open_close_properties = this.open_close_properties.toObject();
            }
            if (this.percent_open_properties != null) {
                data.percent_open_properties = this.percent_open_properties.toObject();
            }
            if (this.angular_tilt_properties != null) {
                data.angular_tilt_properties = this.angular_tilt_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_open_close_properties)
                writer.writeMessage(1, this.open_close_properties, () => this.open_close_properties.serialize(writer));
            if (this.has_percent_open_properties)
                writer.writeMessage(2, this.percent_open_properties, () => this.percent_open_properties.serialize(writer));
            if (this.has_angular_tilt_properties)
                writer.writeMessage(3, this.angular_tilt_properties, () => this.angular_tilt_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlindsTiltApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlindsTiltApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.open_close_properties, () => message.open_close_properties = dependency_1.com.keus.gateway.OpenCloseTraitProperties.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.percent_open_properties, () => message.percent_open_properties = dependency_2.com.keus.gateway.PercentOpenTraitProperties.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.angular_tilt_properties, () => message.angular_tilt_properties = dependency_3.com.keus.gateway.AngularTiltTraitProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlindsTiltApplianceProperties {
            return BlindsTiltApplianceProperties.deserialize(bytes);
        }
    }
}
