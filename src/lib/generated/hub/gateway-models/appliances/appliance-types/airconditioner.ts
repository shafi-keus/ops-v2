/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/appliances/appliance-types/airconditioner.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../traits/onoff_trait";
import * as dependency_2 from "./../../traits/fanspeedcontrol_trait";
import * as dependency_3 from "./../../traits/modecontrol_trait";
import * as dependency_4 from "./../../traits/swingcontrol_trait";
import * as dependency_5 from "./../../traits/temperaturecontrol_trait";
import * as dependency_6 from "./../../traits/louvercontrol_trait";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class AirConditionerApplianceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            onoff_state?: dependency_1.com.keus.gateway.OnOffTraitState;
            fan_speed_state?: dependency_2.com.keus.gateway.FanSpeedControlTraitState;
            mode_state?: dependency_3.com.keus.gateway.ModeControlTraitState;
            louver_state?: dependency_6.com.keus.gateway.LouverControlTraitState;
            temperature_state?: dependency_5.com.keus.gateway.TemperatureControlTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onoff_state" in data && data.onoff_state != undefined) {
                    this.onoff_state = data.onoff_state;
                }
                if ("fan_speed_state" in data && data.fan_speed_state != undefined) {
                    this.fan_speed_state = data.fan_speed_state;
                }
                if ("mode_state" in data && data.mode_state != undefined) {
                    this.mode_state = data.mode_state;
                }
                if ("louver_state" in data && data.louver_state != undefined) {
                    this.louver_state = data.louver_state;
                }
                if ("temperature_state" in data && data.temperature_state != undefined) {
                    this.temperature_state = data.temperature_state;
                }
            }
        }
        get onoff_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.OnOffTraitState, 1) as dependency_1.com.keus.gateway.OnOffTraitState;
        }
        set onoff_state(value: dependency_1.com.keus.gateway.OnOffTraitState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_onoff_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get fan_speed_state() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.FanSpeedControlTraitState, 2) as dependency_2.com.keus.gateway.FanSpeedControlTraitState;
        }
        set fan_speed_state(value: dependency_2.com.keus.gateway.FanSpeedControlTraitState) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_fan_speed_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get mode_state() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.ModeControlTraitState, 3) as dependency_3.com.keus.gateway.ModeControlTraitState;
        }
        set mode_state(value: dependency_3.com.keus.gateway.ModeControlTraitState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_mode_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get louver_state() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.gateway.LouverControlTraitState, 4) as dependency_6.com.keus.gateway.LouverControlTraitState;
        }
        set louver_state(value: dependency_6.com.keus.gateway.LouverControlTraitState) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_louver_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get temperature_state() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.gateway.TemperatureControlTraitState, 5) as dependency_5.com.keus.gateway.TemperatureControlTraitState;
        }
        set temperature_state(value: dependency_5.com.keus.gateway.TemperatureControlTraitState) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_temperature_state() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            onoff_state?: ReturnType<typeof dependency_1.com.keus.gateway.OnOffTraitState.prototype.toObject>;
            fan_speed_state?: ReturnType<typeof dependency_2.com.keus.gateway.FanSpeedControlTraitState.prototype.toObject>;
            mode_state?: ReturnType<typeof dependency_3.com.keus.gateway.ModeControlTraitState.prototype.toObject>;
            louver_state?: ReturnType<typeof dependency_6.com.keus.gateway.LouverControlTraitState.prototype.toObject>;
            temperature_state?: ReturnType<typeof dependency_5.com.keus.gateway.TemperatureControlTraitState.prototype.toObject>;
        }): AirConditionerApplianceState {
            const message = new AirConditionerApplianceState({});
            if (data.onoff_state != null) {
                message.onoff_state = dependency_1.com.keus.gateway.OnOffTraitState.fromObject(data.onoff_state);
            }
            if (data.fan_speed_state != null) {
                message.fan_speed_state = dependency_2.com.keus.gateway.FanSpeedControlTraitState.fromObject(data.fan_speed_state);
            }
            if (data.mode_state != null) {
                message.mode_state = dependency_3.com.keus.gateway.ModeControlTraitState.fromObject(data.mode_state);
            }
            if (data.louver_state != null) {
                message.louver_state = dependency_6.com.keus.gateway.LouverControlTraitState.fromObject(data.louver_state);
            }
            if (data.temperature_state != null) {
                message.temperature_state = dependency_5.com.keus.gateway.TemperatureControlTraitState.fromObject(data.temperature_state);
            }
            return message;
        }
        toObject() {
            const data: {
                onoff_state?: ReturnType<typeof dependency_1.com.keus.gateway.OnOffTraitState.prototype.toObject>;
                fan_speed_state?: ReturnType<typeof dependency_2.com.keus.gateway.FanSpeedControlTraitState.prototype.toObject>;
                mode_state?: ReturnType<typeof dependency_3.com.keus.gateway.ModeControlTraitState.prototype.toObject>;
                louver_state?: ReturnType<typeof dependency_6.com.keus.gateway.LouverControlTraitState.prototype.toObject>;
                temperature_state?: ReturnType<typeof dependency_5.com.keus.gateway.TemperatureControlTraitState.prototype.toObject>;
            } = {};
            if (this.onoff_state != null) {
                data.onoff_state = this.onoff_state.toObject();
            }
            if (this.fan_speed_state != null) {
                data.fan_speed_state = this.fan_speed_state.toObject();
            }
            if (this.mode_state != null) {
                data.mode_state = this.mode_state.toObject();
            }
            if (this.louver_state != null) {
                data.louver_state = this.louver_state.toObject();
            }
            if (this.temperature_state != null) {
                data.temperature_state = this.temperature_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_onoff_state)
                writer.writeMessage(1, this.onoff_state, () => this.onoff_state.serialize(writer));
            if (this.has_fan_speed_state)
                writer.writeMessage(2, this.fan_speed_state, () => this.fan_speed_state.serialize(writer));
            if (this.has_mode_state)
                writer.writeMessage(3, this.mode_state, () => this.mode_state.serialize(writer));
            if (this.has_louver_state)
                writer.writeMessage(4, this.louver_state, () => this.louver_state.serialize(writer));
            if (this.has_temperature_state)
                writer.writeMessage(5, this.temperature_state, () => this.temperature_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AirConditionerApplianceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AirConditionerApplianceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.onoff_state, () => message.onoff_state = dependency_1.com.keus.gateway.OnOffTraitState.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.fan_speed_state, () => message.fan_speed_state = dependency_2.com.keus.gateway.FanSpeedControlTraitState.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.mode_state, () => message.mode_state = dependency_3.com.keus.gateway.ModeControlTraitState.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.louver_state, () => message.louver_state = dependency_6.com.keus.gateway.LouverControlTraitState.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.temperature_state, () => message.temperature_state = dependency_5.com.keus.gateway.TemperatureControlTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AirConditionerApplianceState {
            return AirConditionerApplianceState.deserialize(bytes);
        }
    }
    export class AirConditionerApplianceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            onoff_properties?: dependency_1.com.keus.gateway.OnOffTraitProperties;
            fan_speed_properties?: dependency_2.com.keus.gateway.FanSpeedControlTraitProperties;
            mode_properties?: dependency_3.com.keus.gateway.ModeControlTraitProperties;
            louver_properties?: dependency_6.com.keus.gateway.LouverControlTraitProperties;
            temperature_control_properties?: dependency_5.com.keus.gateway.TemperatureControlTraitProperties;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onoff_properties" in data && data.onoff_properties != undefined) {
                    this.onoff_properties = data.onoff_properties;
                }
                if ("fan_speed_properties" in data && data.fan_speed_properties != undefined) {
                    this.fan_speed_properties = data.fan_speed_properties;
                }
                if ("mode_properties" in data && data.mode_properties != undefined) {
                    this.mode_properties = data.mode_properties;
                }
                if ("louver_properties" in data && data.louver_properties != undefined) {
                    this.louver_properties = data.louver_properties;
                }
                if ("temperature_control_properties" in data && data.temperature_control_properties != undefined) {
                    this.temperature_control_properties = data.temperature_control_properties;
                }
            }
        }
        get onoff_properties() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.OnOffTraitProperties, 1) as dependency_1.com.keus.gateway.OnOffTraitProperties;
        }
        set onoff_properties(value: dependency_1.com.keus.gateway.OnOffTraitProperties) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_onoff_properties() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get fan_speed_properties() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.FanSpeedControlTraitProperties, 2) as dependency_2.com.keus.gateway.FanSpeedControlTraitProperties;
        }
        set fan_speed_properties(value: dependency_2.com.keus.gateway.FanSpeedControlTraitProperties) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_fan_speed_properties() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get mode_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.ModeControlTraitProperties, 3) as dependency_3.com.keus.gateway.ModeControlTraitProperties;
        }
        set mode_properties(value: dependency_3.com.keus.gateway.ModeControlTraitProperties) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_mode_properties() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get louver_properties() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.gateway.LouverControlTraitProperties, 4) as dependency_6.com.keus.gateway.LouverControlTraitProperties;
        }
        set louver_properties(value: dependency_6.com.keus.gateway.LouverControlTraitProperties) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_louver_properties() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get temperature_control_properties() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.gateway.TemperatureControlTraitProperties, 5) as dependency_5.com.keus.gateway.TemperatureControlTraitProperties;
        }
        set temperature_control_properties(value: dependency_5.com.keus.gateway.TemperatureControlTraitProperties) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_temperature_control_properties() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            onoff_properties?: ReturnType<typeof dependency_1.com.keus.gateway.OnOffTraitProperties.prototype.toObject>;
            fan_speed_properties?: ReturnType<typeof dependency_2.com.keus.gateway.FanSpeedControlTraitProperties.prototype.toObject>;
            mode_properties?: ReturnType<typeof dependency_3.com.keus.gateway.ModeControlTraitProperties.prototype.toObject>;
            louver_properties?: ReturnType<typeof dependency_6.com.keus.gateway.LouverControlTraitProperties.prototype.toObject>;
            temperature_control_properties?: ReturnType<typeof dependency_5.com.keus.gateway.TemperatureControlTraitProperties.prototype.toObject>;
        }): AirConditionerApplianceProperties {
            const message = new AirConditionerApplianceProperties({});
            if (data.onoff_properties != null) {
                message.onoff_properties = dependency_1.com.keus.gateway.OnOffTraitProperties.fromObject(data.onoff_properties);
            }
            if (data.fan_speed_properties != null) {
                message.fan_speed_properties = dependency_2.com.keus.gateway.FanSpeedControlTraitProperties.fromObject(data.fan_speed_properties);
            }
            if (data.mode_properties != null) {
                message.mode_properties = dependency_3.com.keus.gateway.ModeControlTraitProperties.fromObject(data.mode_properties);
            }
            if (data.louver_properties != null) {
                message.louver_properties = dependency_6.com.keus.gateway.LouverControlTraitProperties.fromObject(data.louver_properties);
            }
            if (data.temperature_control_properties != null) {
                message.temperature_control_properties = dependency_5.com.keus.gateway.TemperatureControlTraitProperties.fromObject(data.temperature_control_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                onoff_properties?: ReturnType<typeof dependency_1.com.keus.gateway.OnOffTraitProperties.prototype.toObject>;
                fan_speed_properties?: ReturnType<typeof dependency_2.com.keus.gateway.FanSpeedControlTraitProperties.prototype.toObject>;
                mode_properties?: ReturnType<typeof dependency_3.com.keus.gateway.ModeControlTraitProperties.prototype.toObject>;
                louver_properties?: ReturnType<typeof dependency_6.com.keus.gateway.LouverControlTraitProperties.prototype.toObject>;
                temperature_control_properties?: ReturnType<typeof dependency_5.com.keus.gateway.TemperatureControlTraitProperties.prototype.toObject>;
            } = {};
            if (this.onoff_properties != null) {
                data.onoff_properties = this.onoff_properties.toObject();
            }
            if (this.fan_speed_properties != null) {
                data.fan_speed_properties = this.fan_speed_properties.toObject();
            }
            if (this.mode_properties != null) {
                data.mode_properties = this.mode_properties.toObject();
            }
            if (this.louver_properties != null) {
                data.louver_properties = this.louver_properties.toObject();
            }
            if (this.temperature_control_properties != null) {
                data.temperature_control_properties = this.temperature_control_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_onoff_properties)
                writer.writeMessage(1, this.onoff_properties, () => this.onoff_properties.serialize(writer));
            if (this.has_fan_speed_properties)
                writer.writeMessage(2, this.fan_speed_properties, () => this.fan_speed_properties.serialize(writer));
            if (this.has_mode_properties)
                writer.writeMessage(3, this.mode_properties, () => this.mode_properties.serialize(writer));
            if (this.has_louver_properties)
                writer.writeMessage(4, this.louver_properties, () => this.louver_properties.serialize(writer));
            if (this.has_temperature_control_properties)
                writer.writeMessage(5, this.temperature_control_properties, () => this.temperature_control_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AirConditionerApplianceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AirConditionerApplianceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.onoff_properties, () => message.onoff_properties = dependency_1.com.keus.gateway.OnOffTraitProperties.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.fan_speed_properties, () => message.fan_speed_properties = dependency_2.com.keus.gateway.FanSpeedControlTraitProperties.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.mode_properties, () => message.mode_properties = dependency_3.com.keus.gateway.ModeControlTraitProperties.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.louver_properties, () => message.louver_properties = dependency_6.com.keus.gateway.LouverControlTraitProperties.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.temperature_control_properties, () => message.temperature_control_properties = dependency_5.com.keus.gateway.TemperatureControlTraitProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AirConditionerApplianceProperties {
            return AirConditionerApplianceProperties.deserialize(bytes);
        }
    }
    export class AirConditionerApplianceRemote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_id?: string;
            remote_brand?: string;
            remote_model?: string;
            remote_properties?: AirConditionerApplianceProperties;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_id" in data && data.remote_id != undefined) {
                    this.remote_id = data.remote_id;
                }
                if ("remote_brand" in data && data.remote_brand != undefined) {
                    this.remote_brand = data.remote_brand;
                }
                if ("remote_model" in data && data.remote_model != undefined) {
                    this.remote_model = data.remote_model;
                }
                if ("remote_properties" in data && data.remote_properties != undefined) {
                    this.remote_properties = data.remote_properties;
                }
            }
        }
        get remote_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set remote_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get remote_brand() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set remote_brand(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get remote_model() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set remote_model(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get remote_properties() {
            return pb_1.Message.getWrapperField(this, AirConditionerApplianceProperties, 4) as AirConditionerApplianceProperties;
        }
        set remote_properties(value: AirConditionerApplianceProperties) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_remote_properties() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            remote_id?: string;
            remote_brand?: string;
            remote_model?: string;
            remote_properties?: ReturnType<typeof AirConditionerApplianceProperties.prototype.toObject>;
        }): AirConditionerApplianceRemote {
            const message = new AirConditionerApplianceRemote({});
            if (data.remote_id != null) {
                message.remote_id = data.remote_id;
            }
            if (data.remote_brand != null) {
                message.remote_brand = data.remote_brand;
            }
            if (data.remote_model != null) {
                message.remote_model = data.remote_model;
            }
            if (data.remote_properties != null) {
                message.remote_properties = AirConditionerApplianceProperties.fromObject(data.remote_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                remote_id?: string;
                remote_brand?: string;
                remote_model?: string;
                remote_properties?: ReturnType<typeof AirConditionerApplianceProperties.prototype.toObject>;
            } = {};
            if (this.remote_id != null) {
                data.remote_id = this.remote_id;
            }
            if (this.remote_brand != null) {
                data.remote_brand = this.remote_brand;
            }
            if (this.remote_model != null) {
                data.remote_model = this.remote_model;
            }
            if (this.remote_properties != null) {
                data.remote_properties = this.remote_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_id.length)
                writer.writeString(1, this.remote_id);
            if (this.remote_brand.length)
                writer.writeString(2, this.remote_brand);
            if (this.remote_model.length)
                writer.writeString(3, this.remote_model);
            if (this.has_remote_properties)
                writer.writeMessage(4, this.remote_properties, () => this.remote_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AirConditionerApplianceRemote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AirConditionerApplianceRemote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_id = reader.readString();
                        break;
                    case 2:
                        message.remote_brand = reader.readString();
                        break;
                    case 3:
                        message.remote_model = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.remote_properties, () => message.remote_properties = AirConditionerApplianceProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AirConditionerApplianceRemote {
            return AirConditionerApplianceRemote.deserialize(bytes);
        }
    }
}
