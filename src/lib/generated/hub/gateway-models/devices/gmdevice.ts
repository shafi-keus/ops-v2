/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/devices/gmdevice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
// import * as dependency_1 from "./../../../google/protobuf/struct";
import * as dependency_2 from "./../protocols/keus-zigbee/device/keuszigbee_device";
import * as dependency_3 from "./../protocols/Ip/device/ip_device";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export enum GMDEVICE_SYNC_STATES {
        GMDSS_INSYNC = 0,
        GMDSS_SYNCPENDING = 1,
        GMDSS_SYNCFAILED = 2
    }
    export enum GMDEVICE_SYNC_REQUEST_TYPES {
        GMDSRT_NOREQ = 0,
        GMDSRT_REPLACE = 1,
        GMDSRT_MOVE = 2,
        GMDSRT_DEL = 3
    }
    export class GMDeviceHomeInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_room?: string;
            device_section?: string;
        }): GMDeviceHomeInfo {
            const message = new GMDeviceHomeInfo({});
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_room.length)
                writer.writeString(1, this.device_room);
            if (this.device_section.length)
                writer.writeString(2, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMDeviceHomeInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMDeviceHomeInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_room = reader.readString();
                        break;
                    case 2:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMDeviceHomeInfo {
            return GMDeviceHomeInfo.deserialize(bytes);
        }
    }
    export class ProtocolControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[101, 102]];
        constructor(data?: any[] | ({} & (({
            kz_device_contol_info?: dependency_2.com.keus.gateway.KeusZigbeeDeviceControlInfo;
            ip_device_control_info?: never;
        } | {
            kz_device_contol_info?: never;
            ip_device_control_info?: dependency_3.com.keus.gateway.IpDeviceControlInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kz_device_contol_info" in data && data.kz_device_contol_info != undefined) {
                    this.kz_device_contol_info = data.kz_device_contol_info;
                }
                if ("ip_device_control_info" in data && data.ip_device_control_info != undefined) {
                    this.ip_device_control_info = data.ip_device_control_info;
                }
            }
        }
        get kz_device_contol_info() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.KeusZigbeeDeviceControlInfo, 101) as dependency_2.com.keus.gateway.KeusZigbeeDeviceControlInfo;
        }
        set kz_device_contol_info(value: dependency_2.com.keus.gateway.KeusZigbeeDeviceControlInfo) {
            pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
        }
        get has_kz_device_contol_info() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get ip_device_control_info() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.IpDeviceControlInfo, 102) as dependency_3.com.keus.gateway.IpDeviceControlInfo;
        }
        set ip_device_control_info(value: dependency_3.com.keus.gateway.IpDeviceControlInfo) {
            pb_1.Message.setOneofWrapperField(this, 102, this.#one_of_decls[0], value);
        }
        get has_ip_device_control_info() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get device_control_info() {
            const cases: {
                [index: number]: "none" | "kz_device_contol_info" | "ip_device_control_info";
            } = {
                0: "none",
                101: "kz_device_contol_info",
                102: "ip_device_control_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101, 102])];
        }
        static fromObject(data: {
            kz_device_contol_info?: ReturnType<typeof dependency_2.com.keus.gateway.KeusZigbeeDeviceControlInfo.prototype.toObject>;
            ip_device_control_info?: ReturnType<typeof dependency_3.com.keus.gateway.IpDeviceControlInfo.prototype.toObject>;
        }): ProtocolControlInfo {
            const message = new ProtocolControlInfo({});
            if (data.kz_device_contol_info != null) {
                message.kz_device_contol_info = dependency_2.com.keus.gateway.KeusZigbeeDeviceControlInfo.fromObject(data.kz_device_contol_info);
            }
            if (data.ip_device_control_info != null) {
                message.ip_device_control_info = dependency_3.com.keus.gateway.IpDeviceControlInfo.fromObject(data.ip_device_control_info);
            }
            return message;
        }
        toObject() {
            const data: {
                kz_device_contol_info?: ReturnType<typeof dependency_2.com.keus.gateway.KeusZigbeeDeviceControlInfo.prototype.toObject>;
                ip_device_control_info?: ReturnType<typeof dependency_3.com.keus.gateway.IpDeviceControlInfo.prototype.toObject>;
            } = {};
            if (this.kz_device_contol_info != null) {
                data.kz_device_contol_info = this.kz_device_contol_info.toObject();
            }
            if (this.ip_device_control_info != null) {
                data.ip_device_control_info = this.ip_device_control_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_kz_device_contol_info)
                writer.writeMessage(101, this.kz_device_contol_info, () => this.kz_device_contol_info.serialize(writer));
            if (this.has_ip_device_control_info)
                writer.writeMessage(102, this.ip_device_control_info, () => this.ip_device_control_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 101:
                        reader.readMessage(message.kz_device_contol_info, () => message.kz_device_contol_info = dependency_2.com.keus.gateway.KeusZigbeeDeviceControlInfo.deserialize(reader));
                        break;
                    case 102:
                        reader.readMessage(message.ip_device_control_info, () => message.ip_device_control_info = dependency_3.com.keus.gateway.IpDeviceControlInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolControlInfo {
            return ProtocolControlInfo.deserialize(bytes);
        }
    }
    export class GMDeviceControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_control_type?: string;
            protocol_control_info?: ProtocolControlInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_control_type" in data && data.device_control_type != undefined) {
                    this.device_control_type = data.device_control_type;
                }
                if ("protocol_control_info" in data && data.protocol_control_info != undefined) {
                    this.protocol_control_info = data.protocol_control_info;
                }
            }
        }
        get device_control_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_control_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get protocol_control_info() {
            return pb_1.Message.getWrapperField(this, ProtocolControlInfo, 2) as ProtocolControlInfo;
        }
        set protocol_control_info(value: ProtocolControlInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_protocol_control_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_control_type?: string;
            protocol_control_info?: ReturnType<typeof ProtocolControlInfo.prototype.toObject>;
        }): GMDeviceControlInfo {
            const message = new GMDeviceControlInfo({});
            if (data.device_control_type != null) {
                message.device_control_type = data.device_control_type;
            }
            if (data.protocol_control_info != null) {
                message.protocol_control_info = ProtocolControlInfo.fromObject(data.protocol_control_info);
            }
            return message;
        }
        toObject() {
            const data: {
                device_control_type?: string;
                protocol_control_info?: ReturnType<typeof ProtocolControlInfo.prototype.toObject>;
            } = {};
            if (this.device_control_type != null) {
                data.device_control_type = this.device_control_type;
            }
            if (this.protocol_control_info != null) {
                data.protocol_control_info = this.protocol_control_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_control_type.length)
                writer.writeString(1, this.device_control_type);
            if (this.has_protocol_control_info)
                writer.writeMessage(2, this.protocol_control_info, () => this.protocol_control_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMDeviceControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMDeviceControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_control_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.protocol_control_info, () => message.protocol_control_info = ProtocolControlInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMDeviceControlInfo {
            return GMDeviceControlInfo.deserialize(bytes);
        }
    }
    export class GMDeviceMaintenanceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            firmware_version?: string;
            manufacturer_name?: string;
            registered_at?: number;
            serial_number?: string;
            device_pin?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("firmware_version" in data && data.firmware_version != undefined) {
                    this.firmware_version = data.firmware_version;
                }
                if ("manufacturer_name" in data && data.manufacturer_name != undefined) {
                    this.manufacturer_name = data.manufacturer_name;
                }
                if ("registered_at" in data && data.registered_at != undefined) {
                    this.registered_at = data.registered_at;
                }
                if ("serial_number" in data && data.serial_number != undefined) {
                    this.serial_number = data.serial_number;
                }
                if ("device_pin" in data && data.device_pin != undefined) {
                    this.device_pin = data.device_pin;
                }
            }
        }
        get firmware_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set firmware_version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get manufacturer_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set manufacturer_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get registered_at() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set registered_at(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get serial_number() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set serial_number(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_pin() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_pin(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            firmware_version?: string;
            manufacturer_name?: string;
            registered_at?: number;
            serial_number?: string;
            device_pin?: string;
        }): GMDeviceMaintenanceInfo {
            const message = new GMDeviceMaintenanceInfo({});
            if (data.firmware_version != null) {
                message.firmware_version = data.firmware_version;
            }
            if (data.manufacturer_name != null) {
                message.manufacturer_name = data.manufacturer_name;
            }
            if (data.registered_at != null) {
                message.registered_at = data.registered_at;
            }
            if (data.serial_number != null) {
                message.serial_number = data.serial_number;
            }
            if (data.device_pin != null) {
                message.device_pin = data.device_pin;
            }
            return message;
        }
        toObject() {
            const data: {
                firmware_version?: string;
                manufacturer_name?: string;
                registered_at?: number;
                serial_number?: string;
                device_pin?: string;
            } = {};
            if (this.firmware_version != null) {
                data.firmware_version = this.firmware_version;
            }
            if (this.manufacturer_name != null) {
                data.manufacturer_name = this.manufacturer_name;
            }
            if (this.registered_at != null) {
                data.registered_at = this.registered_at;
            }
            if (this.serial_number != null) {
                data.serial_number = this.serial_number;
            }
            if (this.device_pin != null) {
                data.device_pin = this.device_pin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.firmware_version.length)
                writer.writeString(1, this.firmware_version);
            if (this.manufacturer_name.length)
                writer.writeString(2, this.manufacturer_name);
            if (this.registered_at != 0)
                writer.writeInt64(3, this.registered_at);
            if (this.serial_number.length)
                writer.writeString(4, this.serial_number);
            if (this.device_pin.length)
                writer.writeString(5, this.device_pin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMDeviceMaintenanceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMDeviceMaintenanceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.firmware_version = reader.readString();
                        break;
                    case 2:
                        message.manufacturer_name = reader.readString();
                        break;
                    case 3:
                        message.registered_at = reader.readInt64();
                        break;
                    case 4:
                        message.serial_number = reader.readString();
                        break;
                    case 5:
                        message.device_pin = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMDeviceMaintenanceInfo {
            return GMDeviceMaintenanceInfo.deserialize(bytes);
        }
    }
    export class GMDeviceSyncInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sync_status?: GMDEVICE_SYNC_STATES;
            sync_request_type?: GMDEVICE_SYNC_REQUEST_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            sync_request_params?: string;
            job_type_name?: string;
            job_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sync_status" in data && data.sync_status != undefined) {
                    this.sync_status = data.sync_status;
                }
                if ("sync_request_type" in data && data.sync_request_type != undefined) {
                    this.sync_request_type = data.sync_request_type;
                }
                if ("sync_request_id" in data && data.sync_request_id != undefined) {
                    this.sync_request_id = data.sync_request_id;
                }
                if ("sync_request_time" in data && data.sync_request_time != undefined) {
                    this.sync_request_time = data.sync_request_time;
                }
                if ("sync_request_params" in data && data.sync_request_params != undefined) {
                    this.sync_request_params = data.sync_request_params;
                }
                if ("job_type_name" in data && data.job_type_name != undefined) {
                    this.job_type_name = data.job_type_name;
                }
                if ("job_message" in data && data.job_message != undefined) {
                    this.job_message = data.job_message;
                }
            }
        }
        get sync_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, GMDEVICE_SYNC_STATES.GMDSS_INSYNC) as GMDEVICE_SYNC_STATES;
        }
        set sync_status(value: GMDEVICE_SYNC_STATES) {
            pb_1.Message.setField(this, 1, value);
        }
        get sync_request_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, GMDEVICE_SYNC_REQUEST_TYPES.GMDSRT_NOREQ) as GMDEVICE_SYNC_REQUEST_TYPES;
        }
        set sync_request_type(value: GMDEVICE_SYNC_REQUEST_TYPES) {
            pb_1.Message.setField(this, 2, value);
        }
        get sync_request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sync_request_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sync_request_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sync_request_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get sync_request_params() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set sync_request_params(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get job_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set job_type_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get job_message() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set job_message(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            sync_status?: GMDEVICE_SYNC_STATES;
            sync_request_type?: GMDEVICE_SYNC_REQUEST_TYPES;
            sync_request_id?: string;
            sync_request_time?: number;
            sync_request_params?: string;
            job_type_name?: string;
            job_message?: string;
        }): GMDeviceSyncInfo {
            const message = new GMDeviceSyncInfo({});
            if (data.sync_status != null) {
                message.sync_status = data.sync_status;
            }
            if (data.sync_request_type != null) {
                message.sync_request_type = data.sync_request_type;
            }
            if (data.sync_request_id != null) {
                message.sync_request_id = data.sync_request_id;
            }
            if (data.sync_request_time != null) {
                message.sync_request_time = data.sync_request_time;
            }
            if (data.sync_request_params != null) {
                message.sync_request_params = data.sync_request_params;
            }
            if (data.job_type_name != null) {
                message.job_type_name = data.job_type_name;
            }
            if (data.job_message != null) {
                message.job_message = data.job_message;
            }
            return message;
        }
        toObject() {
            const data: {
                sync_status?: GMDEVICE_SYNC_STATES;
                sync_request_type?: GMDEVICE_SYNC_REQUEST_TYPES;
                sync_request_id?: string;
                sync_request_time?: number;
                sync_request_params?: string;
                job_type_name?: string;
                job_message?: string;
            } = {};
            if (this.sync_status != null) {
                data.sync_status = this.sync_status;
            }
            if (this.sync_request_type != null) {
                data.sync_request_type = this.sync_request_type;
            }
            if (this.sync_request_id != null) {
                data.sync_request_id = this.sync_request_id;
            }
            if (this.sync_request_time != null) {
                data.sync_request_time = this.sync_request_time;
            }
            if (this.sync_request_params != null) {
                data.sync_request_params = this.sync_request_params;
            }
            if (this.job_type_name != null) {
                data.job_type_name = this.job_type_name;
            }
            if (this.job_message != null) {
                data.job_message = this.job_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sync_status != GMDEVICE_SYNC_STATES.GMDSS_INSYNC)
                writer.writeEnum(1, this.sync_status);
            if (this.sync_request_type != GMDEVICE_SYNC_REQUEST_TYPES.GMDSRT_NOREQ)
                writer.writeEnum(2, this.sync_request_type);
            if (this.sync_request_id.length)
                writer.writeString(3, this.sync_request_id);
            if (this.sync_request_time != 0)
                writer.writeUint64(4, this.sync_request_time);
            if (this.sync_request_params.length)
                writer.writeString(5, this.sync_request_params);
            if (this.job_type_name.length)
                writer.writeString(6, this.job_type_name);
            if (this.job_message.length)
                writer.writeString(7, this.job_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMDeviceSyncInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMDeviceSyncInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sync_status = reader.readEnum();
                        break;
                    case 2:
                        message.sync_request_type = reader.readEnum();
                        break;
                    case 3:
                        message.sync_request_id = reader.readString();
                        break;
                    case 4:
                        message.sync_request_time = reader.readUint64();
                        break;
                    case 5:
                        message.sync_request_params = reader.readString();
                        break;
                    case 6:
                        message.job_type_name = reader.readString();
                        break;
                    case 7:
                        message.job_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMDeviceSyncInfo {
            return GMDeviceSyncInfo.deserialize(bytes);
        }
    }
    export class GMDeviceStatusInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            marked_for_delete?: boolean;
            online_status?: boolean;
            last_seen_online?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("marked_for_delete" in data && data.marked_for_delete != undefined) {
                    this.marked_for_delete = data.marked_for_delete;
                }
                if ("online_status" in data && data.online_status != undefined) {
                    this.online_status = data.online_status;
                }
                if ("last_seen_online" in data && data.last_seen_online != undefined) {
                    this.last_seen_online = data.last_seen_online;
                }
            }
        }
        get marked_for_delete() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set marked_for_delete(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get online_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set online_status(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_seen_online() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set last_seen_online(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            marked_for_delete?: boolean;
            online_status?: boolean;
            last_seen_online?: number;
        }): GMDeviceStatusInfo {
            const message = new GMDeviceStatusInfo({});
            if (data.marked_for_delete != null) {
                message.marked_for_delete = data.marked_for_delete;
            }
            if (data.online_status != null) {
                message.online_status = data.online_status;
            }
            if (data.last_seen_online != null) {
                message.last_seen_online = data.last_seen_online;
            }
            return message;
        }
        toObject() {
            const data: {
                marked_for_delete?: boolean;
                online_status?: boolean;
                last_seen_online?: number;
            } = {};
            if (this.marked_for_delete != null) {
                data.marked_for_delete = this.marked_for_delete;
            }
            if (this.online_status != null) {
                data.online_status = this.online_status;
            }
            if (this.last_seen_online != null) {
                data.last_seen_online = this.last_seen_online;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.marked_for_delete != false)
                writer.writeBool(1, this.marked_for_delete);
            if (this.online_status != false)
                writer.writeBool(2, this.online_status);
            if (this.last_seen_online != 0)
                writer.writeUint64(3, this.last_seen_online);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMDeviceStatusInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMDeviceStatusInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.marked_for_delete = reader.readBool();
                        break;
                    case 2:
                        message.online_status = reader.readBool();
                        break;
                    case 3:
                        message.last_seen_online = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMDeviceStatusInfo {
            return GMDeviceStatusInfo.deserialize(bytes);
        }
    }
    export class GMDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[201, 203]];
        constructor(data?: any[] | ({} & (({
            kz_device_info?: dependency_2.com.keus.gateway.KeusZigbeeDeviceInfo;
            ip_device_info?: never;
        } | {
            kz_device_info?: never;
            ip_device_info?: dependency_3.com.keus.gateway.IpDeviceInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kz_device_info" in data && data.kz_device_info != undefined) {
                    this.kz_device_info = data.kz_device_info;
                }
                if ("ip_device_info" in data && data.ip_device_info != undefined) {
                    this.ip_device_info = data.ip_device_info;
                }
            }
        }
        get kz_device_info() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.KeusZigbeeDeviceInfo, 201) as dependency_2.com.keus.gateway.KeusZigbeeDeviceInfo;
        }
        set kz_device_info(value: dependency_2.com.keus.gateway.KeusZigbeeDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 201, this.#one_of_decls[0], value);
        }
        get has_kz_device_info() {
            return pb_1.Message.getField(this, 201) != null;
        }
        get ip_device_info() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.IpDeviceInfo, 203) as dependency_3.com.keus.gateway.IpDeviceInfo;
        }
        set ip_device_info(value: dependency_3.com.keus.gateway.IpDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 203, this.#one_of_decls[0], value);
        }
        get has_ip_device_info() {
            return pb_1.Message.getField(this, 203) != null;
        }
        get protocol_device_info() {
            const cases: {
                [index: number]: "none" | "kz_device_info" | "ip_device_info";
            } = {
                0: "none",
                201: "kz_device_info",
                203: "ip_device_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [201, 203])];
        }
        static fromObject(data: {
            kz_device_info?: ReturnType<typeof dependency_2.com.keus.gateway.KeusZigbeeDeviceInfo.prototype.toObject>;
            ip_device_info?: ReturnType<typeof dependency_3.com.keus.gateway.IpDeviceInfo.prototype.toObject>;
        }): GMDeviceInfo {
            const message = new GMDeviceInfo({});
            if (data.kz_device_info != null) {
                message.kz_device_info = dependency_2.com.keus.gateway.KeusZigbeeDeviceInfo.fromObject(data.kz_device_info);
            }
            if (data.ip_device_info != null) {
                message.ip_device_info = dependency_3.com.keus.gateway.IpDeviceInfo.fromObject(data.ip_device_info);
            }
            return message;
        }
        toObject() {
            const data: {
                kz_device_info?: ReturnType<typeof dependency_2.com.keus.gateway.KeusZigbeeDeviceInfo.prototype.toObject>;
                ip_device_info?: ReturnType<typeof dependency_3.com.keus.gateway.IpDeviceInfo.prototype.toObject>;
            } = {};
            if (this.kz_device_info != null) {
                data.kz_device_info = this.kz_device_info.toObject();
            }
            if (this.ip_device_info != null) {
                data.ip_device_info = this.ip_device_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_kz_device_info)
                writer.writeMessage(201, this.kz_device_info, () => this.kz_device_info.serialize(writer));
            if (this.has_ip_device_info)
                writer.writeMessage(203, this.ip_device_info, () => this.ip_device_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 201:
                        reader.readMessage(message.kz_device_info, () => message.kz_device_info = dependency_2.com.keus.gateway.KeusZigbeeDeviceInfo.deserialize(reader));
                        break;
                    case 203:
                        reader.readMessage(message.ip_device_info, () => message.ip_device_info = dependency_3.com.keus.gateway.IpDeviceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMDeviceInfo {
            return GMDeviceInfo.deserialize(bytes);
        }
    }
    export class GMDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            device_control_info?: GMDeviceControlInfo;
            device_home_info?: GMDeviceHomeInfo;
            device_maintenance_info?: GMDeviceMaintenanceInfo;
            device_sync_info?: GMDeviceSyncInfo;
            device_status_info?: GMDeviceStatusInfo;
            gm_device_info?: GMDeviceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
                if ("device_control_info" in data && data.device_control_info != undefined) {
                    this.device_control_info = data.device_control_info;
                }
                if ("device_home_info" in data && data.device_home_info != undefined) {
                    this.device_home_info = data.device_home_info;
                }
                if ("device_maintenance_info" in data && data.device_maintenance_info != undefined) {
                    this.device_maintenance_info = data.device_maintenance_info;
                }
                if ("device_sync_info" in data && data.device_sync_info != undefined) {
                    this.device_sync_info = data.device_sync_info;
                }
                if ("device_status_info" in data && data.device_status_info != undefined) {
                    this.device_status_info = data.device_status_info;
                }
                if ("gm_device_info" in data && data.gm_device_info != undefined) {
                    this.gm_device_info = data.gm_device_info;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_control_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceControlInfo, 4) as GMDeviceControlInfo;
        }
        set device_control_info(value: GMDeviceControlInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_device_control_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get device_home_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceHomeInfo, 5) as GMDeviceHomeInfo;
        }
        set device_home_info(value: GMDeviceHomeInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_device_home_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get device_maintenance_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceMaintenanceInfo, 6) as GMDeviceMaintenanceInfo;
        }
        set device_maintenance_info(value: GMDeviceMaintenanceInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_device_maintenance_info() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get device_sync_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceSyncInfo, 7) as GMDeviceSyncInfo;
        }
        set device_sync_info(value: GMDeviceSyncInfo) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_device_sync_info() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get device_status_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceStatusInfo, 8) as GMDeviceStatusInfo;
        }
        set device_status_info(value: GMDeviceStatusInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_device_status_info() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get gm_device_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceInfo, 9) as GMDeviceInfo;
        }
        set gm_device_info(value: GMDeviceInfo) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_gm_device_info() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
            device_location?: string;
            device_control_info?: ReturnType<typeof GMDeviceControlInfo.prototype.toObject>;
            device_home_info?: ReturnType<typeof GMDeviceHomeInfo.prototype.toObject>;
            device_maintenance_info?: ReturnType<typeof GMDeviceMaintenanceInfo.prototype.toObject>;
            device_sync_info?: ReturnType<typeof GMDeviceSyncInfo.prototype.toObject>;
            device_status_info?: ReturnType<typeof GMDeviceStatusInfo.prototype.toObject>;
            gm_device_info?: ReturnType<typeof GMDeviceInfo.prototype.toObject>;
        }): GMDevice {
            const message = new GMDevice({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            if (data.device_control_info != null) {
                message.device_control_info = GMDeviceControlInfo.fromObject(data.device_control_info);
            }
            if (data.device_home_info != null) {
                message.device_home_info = GMDeviceHomeInfo.fromObject(data.device_home_info);
            }
            if (data.device_maintenance_info != null) {
                message.device_maintenance_info = GMDeviceMaintenanceInfo.fromObject(data.device_maintenance_info);
            }
            if (data.device_sync_info != null) {
                message.device_sync_info = GMDeviceSyncInfo.fromObject(data.device_sync_info);
            }
            if (data.device_status_info != null) {
                message.device_status_info = GMDeviceStatusInfo.fromObject(data.device_status_info);
            }
            if (data.gm_device_info != null) {
                message.gm_device_info = GMDeviceInfo.fromObject(data.gm_device_info);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
                device_location?: string;
                device_control_info?: ReturnType<typeof GMDeviceControlInfo.prototype.toObject>;
                device_home_info?: ReturnType<typeof GMDeviceHomeInfo.prototype.toObject>;
                device_maintenance_info?: ReturnType<typeof GMDeviceMaintenanceInfo.prototype.toObject>;
                device_sync_info?: ReturnType<typeof GMDeviceSyncInfo.prototype.toObject>;
                device_status_info?: ReturnType<typeof GMDeviceStatusInfo.prototype.toObject>;
                gm_device_info?: ReturnType<typeof GMDeviceInfo.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            if (this.device_control_info != null) {
                data.device_control_info = this.device_control_info.toObject();
            }
            if (this.device_home_info != null) {
                data.device_home_info = this.device_home_info.toObject();
            }
            if (this.device_maintenance_info != null) {
                data.device_maintenance_info = this.device_maintenance_info.toObject();
            }
            if (this.device_sync_info != null) {
                data.device_sync_info = this.device_sync_info.toObject();
            }
            if (this.device_status_info != null) {
                data.device_status_info = this.device_status_info.toObject();
            }
            if (this.gm_device_info != null) {
                data.gm_device_info = this.gm_device_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (this.device_location.length)
                writer.writeString(3, this.device_location);
            if (this.has_device_control_info)
                writer.writeMessage(4, this.device_control_info, () => this.device_control_info.serialize(writer));
            if (this.has_device_home_info)
                writer.writeMessage(5, this.device_home_info, () => this.device_home_info.serialize(writer));
            if (this.has_device_maintenance_info)
                writer.writeMessage(6, this.device_maintenance_info, () => this.device_maintenance_info.serialize(writer));
            if (this.has_device_sync_info)
                writer.writeMessage(7, this.device_sync_info, () => this.device_sync_info.serialize(writer));
            if (this.has_device_status_info)
                writer.writeMessage(8, this.device_status_info, () => this.device_status_info.serialize(writer));
            if (this.has_gm_device_info)
                writer.writeMessage(9, this.gm_device_info, () => this.gm_device_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GMDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GMDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    case 3:
                        message.device_location = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.device_control_info, () => message.device_control_info = GMDeviceControlInfo.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.device_home_info, () => message.device_home_info = GMDeviceHomeInfo.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.device_maintenance_info, () => message.device_maintenance_info = GMDeviceMaintenanceInfo.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.device_sync_info, () => message.device_sync_info = GMDeviceSyncInfo.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.device_status_info, () => message.device_status_info = GMDeviceStatusInfo.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.gm_device_info, () => message.gm_device_info = GMDeviceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GMDevice {
            return GMDevice.deserialize(bytes);
        }
    }
    export class MoveDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_room" in data && data.device_room != undefined) {
                    this.device_room = data.device_room;
                }
                if ("device_section" in data && data.device_section != undefined) {
                    this.device_section = data.device_section;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_room() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_room(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_section() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_section(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_room?: string;
            device_section?: string;
        }): MoveDevice {
            const message = new MoveDevice({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_room != null) {
                message.device_room = data.device_room;
            }
            if (data.device_section != null) {
                message.device_section = data.device_section;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_room?: string;
                device_section?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_room != null) {
                data.device_room = this.device_room;
            }
            if (this.device_section != null) {
                data.device_section = this.device_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_room.length)
                writer.writeString(2, this.device_room);
            if (this.device_section.length)
                writer.writeString(3, this.device_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_room = reader.readString();
                        break;
                    case 3:
                        message.device_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveDevice {
            return MoveDevice.deserialize(bytes);
        }
    }
    export class MoveDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): MoveDeviceResponse {
            const message = new MoveDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveDeviceResponse {
            return MoveDeviceResponse.deserialize(bytes);
        }
    }
    export class MoveDeviceEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            ops_message?: string;
            device_id?: string;
            device_home_info?: GMDeviceHomeInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_home_info" in data && data.device_home_info != undefined) {
                    this.device_home_info = data.device_home_info;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_home_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceHomeInfo, 5) as GMDeviceHomeInfo;
        }
        set device_home_info(value: GMDeviceHomeInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_device_home_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            ops_message?: string;
            device_id?: string;
            device_home_info?: ReturnType<typeof GMDeviceHomeInfo.prototype.toObject>;
        }): MoveDeviceEvent {
            const message = new MoveDeviceEvent({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_home_info != null) {
                message.device_home_info = GMDeviceHomeInfo.fromObject(data.device_home_info);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                ops_message?: string;
                device_id?: string;
                device_home_info?: ReturnType<typeof GMDeviceHomeInfo.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_home_info != null) {
                data.device_home_info = this.device_home_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.ops_message.length)
                writer.writeString(3, this.ops_message);
            if (this.device_id.length)
                writer.writeString(4, this.device_id);
            if (this.has_device_home_info)
                writer.writeMessage(5, this.device_home_info, () => this.device_home_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveDeviceEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveDeviceEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.ops_message = reader.readString();
                        break;
                    case 4:
                        message.device_id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.device_home_info, () => message.device_home_info = GMDeviceHomeInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveDeviceEvent {
            return MoveDeviceEvent.deserialize(bytes);
        }
    }
    export class RenameDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_name?: string;
        }): RenameDevice {
            const message = new RenameDevice({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_name.length)
                writer.writeString(2, this.device_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameDevice {
            return RenameDevice.deserialize(bytes);
        }
    }
    export class RenameDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameDeviceResponse {
            const message = new RenameDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameDeviceResponse {
            return RenameDeviceResponse.deserialize(bytes);
        }
    }
    export class SetDeviceLocation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_location?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_location" in data && data.device_location != undefined) {
                    this.device_location = data.device_location;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_location() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_location(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_location?: string;
        }): SetDeviceLocation {
            const message = new SetDeviceLocation({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_location != null) {
                message.device_location = data.device_location;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_location?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_location != null) {
                data.device_location = this.device_location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_location.length)
                writer.writeString(2, this.device_location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDeviceLocation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDeviceLocation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_location = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDeviceLocation {
            return SetDeviceLocation.deserialize(bytes);
        }
    }
    export class SetDeviceLocationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetDeviceLocationResponse {
            const message = new SetDeviceLocationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDeviceLocationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDeviceLocationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDeviceLocationResponse {
            return SetDeviceLocationResponse.deserialize(bytes);
        }
    }
    export class IdentifyDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            identify_on?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("identify_on" in data && data.identify_on != undefined) {
                    this.identify_on = data.identify_on;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get identify_on() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set identify_on(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_id?: string;
            identify_on?: boolean;
        }): IdentifyDevice {
            const message = new IdentifyDevice({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.identify_on != null) {
                message.identify_on = data.identify_on;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                identify_on?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.identify_on != null) {
                data.identify_on = this.identify_on;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.identify_on != false)
                writer.writeBool(2, this.identify_on);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentifyDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdentifyDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.identify_on = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdentifyDevice {
            return IdentifyDevice.deserialize(bytes);
        }
    }
    export class IdentifyDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): IdentifyDeviceResponse {
            const message = new IdentifyDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentifyDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdentifyDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdentifyDeviceResponse {
            return IdentifyDeviceResponse.deserialize(bytes);
        }
    }
    export class DeleteDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            force_delete?: boolean;
            make_device_call?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
                if ("make_device_call" in data && data.make_device_call != undefined) {
                    this.make_device_call = data.make_device_call;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get make_device_call() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set make_device_call(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            force_delete?: boolean;
            make_device_call?: boolean;
        }): DeleteDevice {
            const message = new DeleteDevice({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            if (data.make_device_call != null) {
                message.make_device_call = data.make_device_call;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                force_delete?: boolean;
                make_device_call?: boolean;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            if (this.make_device_call != null) {
                data.make_device_call = this.make_device_call;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.force_delete != false)
                writer.writeBool(2, this.force_delete);
            if (this.make_device_call != false)
                writer.writeBool(3, this.make_device_call);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.force_delete = reader.readBool();
                        break;
                    case 3:
                        message.make_device_call = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteDevice {
            return DeleteDevice.deserialize(bytes);
        }
    }
    export class DeleteDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            job_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("job_id" in data && data.job_id != undefined) {
                    this.job_id = data.job_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get job_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set job_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            job_id?: string;
        }): DeleteDeviceResponse {
            const message = new DeleteDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.job_id != null) {
                message.job_id = data.job_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                job_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.job_id != null) {
                data.job_id = this.job_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.job_id.length)
                writer.writeString(5, this.job_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        message.job_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteDeviceResponse {
            return DeleteDeviceResponse.deserialize(bytes);
        }
    }
    export class DeleteDeviceEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            ops_message?: string;
            device_id?: string;
            force_reset?: boolean;
            make_device_call?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("force_reset" in data && data.force_reset != undefined) {
                    this.force_reset = data.force_reset;
                }
                if ("make_device_call" in data && data.make_device_call != undefined) {
                    this.make_device_call = data.make_device_call;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get force_reset() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set force_reset(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get make_device_call() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set make_device_call(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            ops_message?: string;
            device_id?: string;
            force_reset?: boolean;
            make_device_call?: boolean;
        }): DeleteDeviceEvent {
            const message = new DeleteDeviceEvent({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.force_reset != null) {
                message.force_reset = data.force_reset;
            }
            if (data.make_device_call != null) {
                message.make_device_call = data.make_device_call;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                ops_message?: string;
                device_id?: string;
                force_reset?: boolean;
                make_device_call?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.force_reset != null) {
                data.force_reset = this.force_reset;
            }
            if (this.make_device_call != null) {
                data.make_device_call = this.make_device_call;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.ops_message.length)
                writer.writeString(3, this.ops_message);
            if (this.device_id.length)
                writer.writeString(4, this.device_id);
            if (this.force_reset != false)
                writer.writeBool(5, this.force_reset);
            if (this.make_device_call != false)
                writer.writeBool(6, this.make_device_call);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteDeviceEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteDeviceEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.ops_message = reader.readString();
                        break;
                    case 4:
                        message.device_id = reader.readString();
                        break;
                    case 5:
                        message.force_reset = reader.readBool();
                        break;
                    case 6:
                        message.make_device_call = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteDeviceEvent {
            return DeleteDeviceEvent.deserialize(bytes);
        }
    }
    export class ReplaceDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_device_id?: string;
            new_device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_device_id" in data && data.old_device_id != undefined) {
                    this.old_device_id = data.old_device_id;
                }
                if ("new_device_id" in data && data.new_device_id != undefined) {
                    this.new_device_id = data.new_device_id;
                }
            }
        }
        get old_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_device_id?: string;
            new_device_id?: string;
        }): ReplaceDevice {
            const message = new ReplaceDevice({});
            if (data.old_device_id != null) {
                message.old_device_id = data.old_device_id;
            }
            if (data.new_device_id != null) {
                message.new_device_id = data.new_device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                old_device_id?: string;
                new_device_id?: string;
            } = {};
            if (this.old_device_id != null) {
                data.old_device_id = this.old_device_id;
            }
            if (this.new_device_id != null) {
                data.new_device_id = this.new_device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_device_id.length)
                writer.writeString(1, this.old_device_id);
            if (this.new_device_id.length)
                writer.writeString(2, this.new_device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_device_id = reader.readString();
                        break;
                    case 2:
                        message.new_device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDevice {
            return ReplaceDevice.deserialize(bytes);
        }
    }
    export class ReplaceDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            job_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("job_id" in data && data.job_id != undefined) {
                    this.job_id = data.job_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get job_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set job_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            job_id?: string;
        }): ReplaceDeviceResponse {
            const message = new ReplaceDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.job_id != null) {
                message.job_id = data.job_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                job_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.job_id != null) {
                data.job_id = this.job_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.job_id.length)
                writer.writeString(5, this.job_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaceDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaceDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        message.job_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaceDeviceResponse {
            return ReplaceDeviceResponse.deserialize(bytes);
        }
    }
    export class DeviceState extends pb_1.Message {
        #one_of_decls: number[][] = [[101, 102]];
        constructor(data?: any[] | ({} & (({
            kz_device_state_info?: dependency_2.com.keus.gateway.KeusZigbeeDeviceStateInfo;
            ip_device_state_info?: never;
        } | {
            kz_device_state_info?: never;
            ip_device_state_info?: dependency_3.com.keus.gateway.IpDeviceStateInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kz_device_state_info" in data && data.kz_device_state_info != undefined) {
                    this.kz_device_state_info = data.kz_device_state_info;
                }
                if ("ip_device_state_info" in data && data.ip_device_state_info != undefined) {
                    this.ip_device_state_info = data.ip_device_state_info;
                }
            }
        }
        get kz_device_state_info() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.KeusZigbeeDeviceStateInfo, 101) as dependency_2.com.keus.gateway.KeusZigbeeDeviceStateInfo;
        }
        set kz_device_state_info(value: dependency_2.com.keus.gateway.KeusZigbeeDeviceStateInfo) {
            pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
        }
        get has_kz_device_state_info() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get ip_device_state_info() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.IpDeviceStateInfo, 102) as dependency_3.com.keus.gateway.IpDeviceStateInfo;
        }
        set ip_device_state_info(value: dependency_3.com.keus.gateway.IpDeviceStateInfo) {
            pb_1.Message.setOneofWrapperField(this, 102, this.#one_of_decls[0], value);
        }
        get has_ip_device_state_info() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get device_state() {
            const cases: {
                [index: number]: "none" | "kz_device_state_info" | "ip_device_state_info";
            } = {
                0: "none",
                101: "kz_device_state_info",
                102: "ip_device_state_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101, 102])];
        }
        static fromObject(data: {
            kz_device_state_info?: ReturnType<typeof dependency_2.com.keus.gateway.KeusZigbeeDeviceStateInfo.prototype.toObject>;
            ip_device_state_info?: ReturnType<typeof dependency_3.com.keus.gateway.IpDeviceStateInfo.prototype.toObject>;
        }): DeviceState {
            const message = new DeviceState({});
            if (data.kz_device_state_info != null) {
                message.kz_device_state_info = dependency_2.com.keus.gateway.KeusZigbeeDeviceStateInfo.fromObject(data.kz_device_state_info);
            }
            if (data.ip_device_state_info != null) {
                message.ip_device_state_info = dependency_3.com.keus.gateway.IpDeviceStateInfo.fromObject(data.ip_device_state_info);
            }
            return message;
        }
        toObject() {
            const data: {
                kz_device_state_info?: ReturnType<typeof dependency_2.com.keus.gateway.KeusZigbeeDeviceStateInfo.prototype.toObject>;
                ip_device_state_info?: ReturnType<typeof dependency_3.com.keus.gateway.IpDeviceStateInfo.prototype.toObject>;
            } = {};
            if (this.kz_device_state_info != null) {
                data.kz_device_state_info = this.kz_device_state_info.toObject();
            }
            if (this.ip_device_state_info != null) {
                data.ip_device_state_info = this.ip_device_state_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_kz_device_state_info)
                writer.writeMessage(101, this.kz_device_state_info, () => this.kz_device_state_info.serialize(writer));
            if (this.has_ip_device_state_info)
                writer.writeMessage(102, this.ip_device_state_info, () => this.ip_device_state_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 101:
                        reader.readMessage(message.kz_device_state_info, () => message.kz_device_state_info = dependency_2.com.keus.gateway.KeusZigbeeDeviceStateInfo.deserialize(reader));
                        break;
                    case 102:
                        reader.readMessage(message.ip_device_state_info, () => message.ip_device_state_info = dependency_3.com.keus.gateway.IpDeviceStateInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceState {
            return DeviceState.deserialize(bytes);
        }
    }
    export class DeviceStateInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_control_type?: string;
            device_state?: DeviceState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_control_type" in data && data.device_control_type != undefined) {
                    this.device_control_type = data.device_control_type;
                }
                if ("device_state" in data && data.device_state != undefined) {
                    this.device_state = data.device_state;
                }
            }
        }
        get device_control_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_control_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_state() {
            return pb_1.Message.getWrapperField(this, DeviceState, 2) as DeviceState;
        }
        set device_state(value: DeviceState) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_device_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_control_type?: string;
            device_state?: ReturnType<typeof DeviceState.prototype.toObject>;
        }): DeviceStateInfo {
            const message = new DeviceStateInfo({});
            if (data.device_control_type != null) {
                message.device_control_type = data.device_control_type;
            }
            if (data.device_state != null) {
                message.device_state = DeviceState.fromObject(data.device_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_control_type?: string;
                device_state?: ReturnType<typeof DeviceState.prototype.toObject>;
            } = {};
            if (this.device_control_type != null) {
                data.device_control_type = this.device_control_type;
            }
            if (this.device_state != null) {
                data.device_state = this.device_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_control_type.length)
                writer.writeString(1, this.device_control_type);
            if (this.has_device_state)
                writer.writeMessage(2, this.device_state, () => this.device_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceStateInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceStateInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_control_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.device_state, () => message.device_state = DeviceState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceStateInfo {
            return DeviceStateInfo.deserialize(bytes);
        }
    }
    export class SetDeviceState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_state_info?: DeviceStateInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_state_info" in data && data.device_state_info != undefined) {
                    this.device_state_info = data.device_state_info;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_state_info() {
            return pb_1.Message.getWrapperField(this, DeviceStateInfo, 2) as DeviceStateInfo;
        }
        set device_state_info(value: DeviceStateInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_device_state_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_id?: string;
            device_state_info?: ReturnType<typeof DeviceStateInfo.prototype.toObject>;
        }): SetDeviceState {
            const message = new SetDeviceState({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_state_info != null) {
                message.device_state_info = DeviceStateInfo.fromObject(data.device_state_info);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_state_info?: ReturnType<typeof DeviceStateInfo.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_state_info != null) {
                data.device_state_info = this.device_state_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.has_device_state_info)
                writer.writeMessage(2, this.device_state_info, () => this.device_state_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDeviceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDeviceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.device_state_info, () => message.device_state_info = DeviceStateInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDeviceState {
            return SetDeviceState.deserialize(bytes);
        }
    }
    export class SetDeviceStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): SetDeviceStateResponse {
            const message = new SetDeviceStateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetDeviceStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetDeviceStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetDeviceStateResponse {
            return SetDeviceStateResponse.deserialize(bytes);
        }
    }
    export class DiscoverGMDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_control_info?: GMDeviceControlInfo;
            device_maintainence_info?: GMDeviceMaintenanceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_control_info" in data && data.device_control_info != undefined) {
                    this.device_control_info = data.device_control_info;
                }
                if ("device_maintainence_info" in data && data.device_maintainence_info != undefined) {
                    this.device_maintainence_info = data.device_maintainence_info;
                }
            }
        }
        get device_control_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceControlInfo, 1) as GMDeviceControlInfo;
        }
        set device_control_info(value: GMDeviceControlInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_device_control_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get device_maintainence_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceMaintenanceInfo, 2) as GMDeviceMaintenanceInfo;
        }
        set device_maintainence_info(value: GMDeviceMaintenanceInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_device_maintainence_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_control_info?: ReturnType<typeof GMDeviceControlInfo.prototype.toObject>;
            device_maintainence_info?: ReturnType<typeof GMDeviceMaintenanceInfo.prototype.toObject>;
        }): DiscoverGMDevice {
            const message = new DiscoverGMDevice({});
            if (data.device_control_info != null) {
                message.device_control_info = GMDeviceControlInfo.fromObject(data.device_control_info);
            }
            if (data.device_maintainence_info != null) {
                message.device_maintainence_info = GMDeviceMaintenanceInfo.fromObject(data.device_maintainence_info);
            }
            return message;
        }
        toObject() {
            const data: {
                device_control_info?: ReturnType<typeof GMDeviceControlInfo.prototype.toObject>;
                device_maintainence_info?: ReturnType<typeof GMDeviceMaintenanceInfo.prototype.toObject>;
            } = {};
            if (this.device_control_info != null) {
                data.device_control_info = this.device_control_info.toObject();
            }
            if (this.device_maintainence_info != null) {
                data.device_maintainence_info = this.device_maintainence_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_device_control_info)
                writer.writeMessage(1, this.device_control_info, () => this.device_control_info.serialize(writer));
            if (this.has_device_maintainence_info)
                writer.writeMessage(2, this.device_maintainence_info, () => this.device_maintainence_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscoverGMDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscoverGMDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.device_control_info, () => message.device_control_info = GMDeviceControlInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.device_maintainence_info, () => message.device_maintainence_info = GMDeviceMaintenanceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscoverGMDevice {
            return DiscoverGMDevice.deserialize(bytes);
        }
    }
    export class DiscoverGMDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            device?: GMDevice;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("device" in data && data.device != undefined) {
                    this.device = data.device;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device() {
            return pb_1.Message.getWrapperField(this, GMDevice, 5) as GMDevice;
        }
        set device(value: GMDevice) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_device() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            device?: ReturnType<typeof GMDevice.prototype.toObject>;
        }): DiscoverGMDeviceResponse {
            const message = new DiscoverGMDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.device != null) {
                message.device = GMDevice.fromObject(data.device);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                device?: ReturnType<typeof GMDevice.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.device != null) {
                data.device = this.device.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.has_device)
                writer.writeMessage(5, this.device, () => this.device.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscoverGMDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscoverGMDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.device, () => message.device = GMDevice.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscoverGMDeviceResponse {
            return DiscoverGMDeviceResponse.deserialize(bytes);
        }
    }
    export class UpdateGMDeviceControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_control_info?: GMDeviceControlInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_control_info" in data && data.device_control_info != undefined) {
                    this.device_control_info = data.device_control_info;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_control_info() {
            return pb_1.Message.getWrapperField(this, GMDeviceControlInfo, 2) as GMDeviceControlInfo;
        }
        set device_control_info(value: GMDeviceControlInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_device_control_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_id?: string;
            device_control_info?: ReturnType<typeof GMDeviceControlInfo.prototype.toObject>;
        }): UpdateGMDeviceControlInfo {
            const message = new UpdateGMDeviceControlInfo({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_control_info != null) {
                message.device_control_info = GMDeviceControlInfo.fromObject(data.device_control_info);
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_control_info?: ReturnType<typeof GMDeviceControlInfo.prototype.toObject>;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_control_info != null) {
                data.device_control_info = this.device_control_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.has_device_control_info)
                writer.writeMessage(2, this.device_control_info, () => this.device_control_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGMDeviceControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGMDeviceControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.device_control_info, () => message.device_control_info = GMDeviceControlInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGMDeviceControlInfo {
            return UpdateGMDeviceControlInfo.deserialize(bytes);
        }
    }
    export class UpdateGMDeviceControlInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): UpdateGMDeviceControlInfoResponse {
            const message = new UpdateGMDeviceControlInfoResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGMDeviceControlInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGMDeviceControlInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGMDeviceControlInfoResponse {
            return UpdateGMDeviceControlInfoResponse.deserialize(bytes);
        }
    }
}
