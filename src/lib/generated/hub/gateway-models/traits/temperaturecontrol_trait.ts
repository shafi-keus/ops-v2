/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/temperaturecontrol_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class TemperatureControlTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            temperature_value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("temperature_value" in data && data.temperature_value != undefined) {
                    this.temperature_value = data.temperature_value;
                }
            }
        }
        get temperature_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set temperature_value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            temperature_value?: number;
        }): TemperatureControlTraitState {
            const message = new TemperatureControlTraitState({});
            if (data.temperature_value != null) {
                message.temperature_value = data.temperature_value;
            }
            return message;
        }
        toObject() {
            const data: {
                temperature_value?: number;
            } = {};
            if (this.temperature_value != null) {
                data.temperature_value = this.temperature_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.temperature_value != 0)
                writer.writeInt32(1, this.temperature_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TemperatureControlTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TemperatureControlTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.temperature_value = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TemperatureControlTraitState {
            return TemperatureControlTraitState.deserialize(bytes);
        }
    }
    export class TemperatureControlTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            min_temperature?: number;
            max_temperature?: number;
            default_temperature_state?: TemperatureControlTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("min_temperature" in data && data.min_temperature != undefined) {
                    this.min_temperature = data.min_temperature;
                }
                if ("max_temperature" in data && data.max_temperature != undefined) {
                    this.max_temperature = data.max_temperature;
                }
                if ("default_temperature_state" in data && data.default_temperature_state != undefined) {
                    this.default_temperature_state = data.default_temperature_state;
                }
            }
        }
        get min_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set min_temperature(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_temperature() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_temperature(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get default_temperature_state() {
            return pb_1.Message.getWrapperField(this, TemperatureControlTraitState, 3) as TemperatureControlTraitState;
        }
        set default_temperature_state(value: TemperatureControlTraitState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_default_temperature_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            min_temperature?: number;
            max_temperature?: number;
            default_temperature_state?: ReturnType<typeof TemperatureControlTraitState.prototype.toObject>;
        }): TemperatureControlTraitProperties {
            const message = new TemperatureControlTraitProperties({});
            if (data.min_temperature != null) {
                message.min_temperature = data.min_temperature;
            }
            if (data.max_temperature != null) {
                message.max_temperature = data.max_temperature;
            }
            if (data.default_temperature_state != null) {
                message.default_temperature_state = TemperatureControlTraitState.fromObject(data.default_temperature_state);
            }
            return message;
        }
        toObject() {
            const data: {
                min_temperature?: number;
                max_temperature?: number;
                default_temperature_state?: ReturnType<typeof TemperatureControlTraitState.prototype.toObject>;
            } = {};
            if (this.min_temperature != null) {
                data.min_temperature = this.min_temperature;
            }
            if (this.max_temperature != null) {
                data.max_temperature = this.max_temperature;
            }
            if (this.default_temperature_state != null) {
                data.default_temperature_state = this.default_temperature_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.min_temperature != 0)
                writer.writeInt32(1, this.min_temperature);
            if (this.max_temperature != 0)
                writer.writeInt32(2, this.max_temperature);
            if (this.has_default_temperature_state)
                writer.writeMessage(3, this.default_temperature_state, () => this.default_temperature_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TemperatureControlTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TemperatureControlTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.min_temperature = reader.readInt32();
                        break;
                    case 2:
                        message.max_temperature = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.default_temperature_state, () => message.default_temperature_state = TemperatureControlTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TemperatureControlTraitProperties {
            return TemperatureControlTraitProperties.deserialize(bytes);
        }
    }
}
