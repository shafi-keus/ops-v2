/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/wwmixer_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class WWMixerTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            warm_white_percentage?: number;
            cool_white_percentage?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("warm_white_percentage" in data && data.warm_white_percentage != undefined) {
                    this.warm_white_percentage = data.warm_white_percentage;
                }
                if ("cool_white_percentage" in data && data.cool_white_percentage != undefined) {
                    this.cool_white_percentage = data.cool_white_percentage;
                }
            }
        }
        get warm_white_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set warm_white_percentage(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cool_white_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cool_white_percentage(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            warm_white_percentage?: number;
            cool_white_percentage?: number;
        }): WWMixerTraitState {
            const message = new WWMixerTraitState({});
            if (data.warm_white_percentage != null) {
                message.warm_white_percentage = data.warm_white_percentage;
            }
            if (data.cool_white_percentage != null) {
                message.cool_white_percentage = data.cool_white_percentage;
            }
            return message;
        }
        toObject() {
            const data: {
                warm_white_percentage?: number;
                cool_white_percentage?: number;
            } = {};
            if (this.warm_white_percentage != null) {
                data.warm_white_percentage = this.warm_white_percentage;
            }
            if (this.cool_white_percentage != null) {
                data.cool_white_percentage = this.cool_white_percentage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.warm_white_percentage != 0)
                writer.writeUint32(1, this.warm_white_percentage);
            if (this.cool_white_percentage != 0)
                writer.writeUint32(2, this.cool_white_percentage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WWMixerTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WWMixerTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.warm_white_percentage = reader.readUint32();
                        break;
                    case 2:
                        message.cool_white_percentage = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WWMixerTraitState {
            return WWMixerTraitState.deserialize(bytes);
        }
    }
    export class WWMixerTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wwmixer_default_state?: WWMixerTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wwmixer_default_state" in data && data.wwmixer_default_state != undefined) {
                    this.wwmixer_default_state = data.wwmixer_default_state;
                }
            }
        }
        get wwmixer_default_state() {
            return pb_1.Message.getWrapperField(this, WWMixerTraitState, 1) as WWMixerTraitState;
        }
        set wwmixer_default_state(value: WWMixerTraitState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_wwmixer_default_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            wwmixer_default_state?: ReturnType<typeof WWMixerTraitState.prototype.toObject>;
        }): WWMixerTraitProperties {
            const message = new WWMixerTraitProperties({});
            if (data.wwmixer_default_state != null) {
                message.wwmixer_default_state = WWMixerTraitState.fromObject(data.wwmixer_default_state);
            }
            return message;
        }
        toObject() {
            const data: {
                wwmixer_default_state?: ReturnType<typeof WWMixerTraitState.prototype.toObject>;
            } = {};
            if (this.wwmixer_default_state != null) {
                data.wwmixer_default_state = this.wwmixer_default_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_wwmixer_default_state)
                writer.writeMessage(1, this.wwmixer_default_state, () => this.wwmixer_default_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WWMixerTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WWMixerTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.wwmixer_default_state, () => message.wwmixer_default_state = WWMixerTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WWMixerTraitProperties {
            return WWMixerTraitProperties.deserialize(bytes);
        }
    }
}
