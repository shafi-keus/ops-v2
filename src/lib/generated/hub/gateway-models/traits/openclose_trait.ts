/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/openclose_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./trait_constants/blinds_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class OpenCloseTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            open_close_state?: dependency_1.com.keus.gateway.BLIND_OPEN_CLOSE;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("open_close_state" in data && data.open_close_state != undefined) {
                    this.open_close_state = data.open_close_state;
                }
            }
        }
        get open_close_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.gateway.BLIND_OPEN_CLOSE.BLIND_NOACTION) as dependency_1.com.keus.gateway.BLIND_OPEN_CLOSE;
        }
        set open_close_state(value: dependency_1.com.keus.gateway.BLIND_OPEN_CLOSE) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            open_close_state?: dependency_1.com.keus.gateway.BLIND_OPEN_CLOSE;
        }): OpenCloseTraitState {
            const message = new OpenCloseTraitState({});
            if (data.open_close_state != null) {
                message.open_close_state = data.open_close_state;
            }
            return message;
        }
        toObject() {
            const data: {
                open_close_state?: dependency_1.com.keus.gateway.BLIND_OPEN_CLOSE;
            } = {};
            if (this.open_close_state != null) {
                data.open_close_state = this.open_close_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.open_close_state != dependency_1.com.keus.gateway.BLIND_OPEN_CLOSE.BLIND_NOACTION)
                writer.writeEnum(1, this.open_close_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenCloseTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenCloseTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.open_close_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OpenCloseTraitState {
            return OpenCloseTraitState.deserialize(bytes);
        }
    }
    export class OpenCloseTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12]];
        constructor(data?: any[] | ({
            invert_signal?: boolean;
            open_direction?: dependency_1.com.keus.gateway.BLIND_OPEN_DIRECTION;
            default_openclose_state?: OpenCloseTraitState;
        } & (({
            open_style_vertical?: dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_VERTICAL;
            open_style_horizontal?: never;
        } | {
            open_style_vertical?: never;
            open_style_horizontal?: dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_HORIZONTAL;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invert_signal" in data && data.invert_signal != undefined) {
                    this.invert_signal = data.invert_signal;
                }
                if ("open_direction" in data && data.open_direction != undefined) {
                    this.open_direction = data.open_direction;
                }
                if ("default_openclose_state" in data && data.default_openclose_state != undefined) {
                    this.default_openclose_state = data.default_openclose_state;
                }
                if ("open_style_vertical" in data && data.open_style_vertical != undefined) {
                    this.open_style_vertical = data.open_style_vertical;
                }
                if ("open_style_horizontal" in data && data.open_style_horizontal != undefined) {
                    this.open_style_horizontal = data.open_style_horizontal;
                }
            }
        }
        get invert_signal() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set invert_signal(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get open_direction() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.gateway.BLIND_OPEN_DIRECTION.BLIND_VERTICAL) as dependency_1.com.keus.gateway.BLIND_OPEN_DIRECTION;
        }
        set open_direction(value: dependency_1.com.keus.gateway.BLIND_OPEN_DIRECTION) {
            pb_1.Message.setField(this, 2, value);
        }
        get default_openclose_state() {
            return pb_1.Message.getWrapperField(this, OpenCloseTraitState, 3) as OpenCloseTraitState;
        }
        set default_openclose_state(value: OpenCloseTraitState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_default_openclose_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get open_style_vertical() {
            return pb_1.Message.getFieldWithDefault(this, 11, dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_VERTICAL.BLIND_TOP_FIXED) as dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_VERTICAL;
        }
        set open_style_vertical(value: dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_VERTICAL) {
            pb_1.Message.setOneofField(this, 11, this.#one_of_decls[0], value);
        }
        get has_open_style_vertical() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get open_style_horizontal() {
            return pb_1.Message.getFieldWithDefault(this, 12, dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_HORIZONTAL.BLIND_LEFT_FIXED) as dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_HORIZONTAL;
        }
        set open_style_horizontal(value: dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_HORIZONTAL) {
            pb_1.Message.setOneofField(this, 12, this.#one_of_decls[0], value);
        }
        get has_open_style_horizontal() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get open_style() {
            const cases: {
                [index: number]: "none" | "open_style_vertical" | "open_style_horizontal";
            } = {
                0: "none",
                11: "open_style_vertical",
                12: "open_style_horizontal"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12])];
        }
        static fromObject(data: {
            invert_signal?: boolean;
            open_direction?: dependency_1.com.keus.gateway.BLIND_OPEN_DIRECTION;
            default_openclose_state?: ReturnType<typeof OpenCloseTraitState.prototype.toObject>;
            open_style_vertical?: dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_VERTICAL;
            open_style_horizontal?: dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_HORIZONTAL;
        }): OpenCloseTraitProperties {
            const message = new OpenCloseTraitProperties({});
            if (data.invert_signal != null) {
                message.invert_signal = data.invert_signal;
            }
            if (data.open_direction != null) {
                message.open_direction = data.open_direction;
            }
            if (data.default_openclose_state != null) {
                message.default_openclose_state = OpenCloseTraitState.fromObject(data.default_openclose_state);
            }
            if (data.open_style_vertical != null) {
                message.open_style_vertical = data.open_style_vertical;
            }
            if (data.open_style_horizontal != null) {
                message.open_style_horizontal = data.open_style_horizontal;
            }
            return message;
        }
        toObject() {
            const data: {
                invert_signal?: boolean;
                open_direction?: dependency_1.com.keus.gateway.BLIND_OPEN_DIRECTION;
                default_openclose_state?: ReturnType<typeof OpenCloseTraitState.prototype.toObject>;
                open_style_vertical?: dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_VERTICAL;
                open_style_horizontal?: dependency_1.com.keus.gateway.BLIND_OPEN_STYLE_HORIZONTAL;
            } = {};
            if (this.invert_signal != null) {
                data.invert_signal = this.invert_signal;
            }
            if (this.open_direction != null) {
                data.open_direction = this.open_direction;
            }
            if (this.default_openclose_state != null) {
                data.default_openclose_state = this.default_openclose_state.toObject();
            }
            if (this.open_style_vertical != null) {
                data.open_style_vertical = this.open_style_vertical;
            }
            if (this.open_style_horizontal != null) {
                data.open_style_horizontal = this.open_style_horizontal;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invert_signal != false)
                writer.writeBool(1, this.invert_signal);
            if (this.open_direction != dependency_1.com.keus.gateway.BLIND_OPEN_DIRECTION.BLIND_VERTICAL)
                writer.writeEnum(2, this.open_direction);
            if (this.has_default_openclose_state)
                writer.writeMessage(3, this.default_openclose_state, () => this.default_openclose_state.serialize(writer));
            if (this.has_open_style_vertical)
                writer.writeEnum(11, this.open_style_vertical);
            if (this.has_open_style_horizontal)
                writer.writeEnum(12, this.open_style_horizontal);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenCloseTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenCloseTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invert_signal = reader.readBool();
                        break;
                    case 2:
                        message.open_direction = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.default_openclose_state, () => message.default_openclose_state = OpenCloseTraitState.deserialize(reader));
                        break;
                    case 11:
                        message.open_style_vertical = reader.readEnum();
                        break;
                    case 12:
                        message.open_style_horizontal = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OpenCloseTraitProperties {
            return OpenCloseTraitProperties.deserialize(bytes);
        }
    }
}
