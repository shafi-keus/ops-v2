/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/rgbcolor_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./trait_constants/pattern_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class RGBColor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            red_percent?: number;
            green_percent?: number;
            blue_percent?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("red_percent" in data && data.red_percent != undefined) {
                    this.red_percent = data.red_percent;
                }
                if ("green_percent" in data && data.green_percent != undefined) {
                    this.green_percent = data.green_percent;
                }
                if ("blue_percent" in data && data.blue_percent != undefined) {
                    this.blue_percent = data.blue_percent;
                }
            }
        }
        get red_percent() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set red_percent(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get green_percent() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set green_percent(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get blue_percent() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set blue_percent(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            red_percent?: number;
            green_percent?: number;
            blue_percent?: number;
        }): RGBColor {
            const message = new RGBColor({});
            if (data.red_percent != null) {
                message.red_percent = data.red_percent;
            }
            if (data.green_percent != null) {
                message.green_percent = data.green_percent;
            }
            if (data.blue_percent != null) {
                message.blue_percent = data.blue_percent;
            }
            return message;
        }
        toObject() {
            const data: {
                red_percent?: number;
                green_percent?: number;
                blue_percent?: number;
            } = {};
            if (this.red_percent != null) {
                data.red_percent = this.red_percent;
            }
            if (this.green_percent != null) {
                data.green_percent = this.green_percent;
            }
            if (this.blue_percent != null) {
                data.blue_percent = this.blue_percent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.red_percent != 0)
                writer.writeUint32(1, this.red_percent);
            if (this.green_percent != 0)
                writer.writeUint32(2, this.green_percent);
            if (this.blue_percent != 0)
                writer.writeUint32(3, this.blue_percent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RGBColor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RGBColor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.red_percent = reader.readUint32();
                        break;
                    case 2:
                        message.green_percent = reader.readUint32();
                        break;
                    case 3:
                        message.blue_percent = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RGBColor {
            return RGBColor.deserialize(bytes);
        }
    }
    export class RGBPatternProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pattern_properties_id?: dependency_1.com.keus.gateway.RGB_PATTERN_PROPERTIES;
            pattern_properties_value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pattern_properties_id" in data && data.pattern_properties_id != undefined) {
                    this.pattern_properties_id = data.pattern_properties_id;
                }
                if ("pattern_properties_value" in data && data.pattern_properties_value != undefined) {
                    this.pattern_properties_value = data.pattern_properties_value;
                }
            }
        }
        get pattern_properties_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.gateway.RGB_PATTERN_PROPERTIES.PATTERN_SPEED) as dependency_1.com.keus.gateway.RGB_PATTERN_PROPERTIES;
        }
        set pattern_properties_id(value: dependency_1.com.keus.gateway.RGB_PATTERN_PROPERTIES) {
            pb_1.Message.setField(this, 1, value);
        }
        get pattern_properties_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pattern_properties_value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pattern_properties_id?: dependency_1.com.keus.gateway.RGB_PATTERN_PROPERTIES;
            pattern_properties_value?: number;
        }): RGBPatternProperties {
            const message = new RGBPatternProperties({});
            if (data.pattern_properties_id != null) {
                message.pattern_properties_id = data.pattern_properties_id;
            }
            if (data.pattern_properties_value != null) {
                message.pattern_properties_value = data.pattern_properties_value;
            }
            return message;
        }
        toObject() {
            const data: {
                pattern_properties_id?: dependency_1.com.keus.gateway.RGB_PATTERN_PROPERTIES;
                pattern_properties_value?: number;
            } = {};
            if (this.pattern_properties_id != null) {
                data.pattern_properties_id = this.pattern_properties_id;
            }
            if (this.pattern_properties_value != null) {
                data.pattern_properties_value = this.pattern_properties_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pattern_properties_id != dependency_1.com.keus.gateway.RGB_PATTERN_PROPERTIES.PATTERN_SPEED)
                writer.writeEnum(1, this.pattern_properties_id);
            if (this.pattern_properties_value != 0)
                writer.writeUint32(2, this.pattern_properties_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RGBPatternProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RGBPatternProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pattern_properties_id = reader.readEnum();
                        break;
                    case 2:
                        message.pattern_properties_value = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RGBPatternProperties {
            return RGBPatternProperties.deserialize(bytes);
        }
    }
    export class RGBColorTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rgb_pattern_id?: dependency_1.com.keus.gateway.RGB_PATTERNS;
            rgb_pattern_properties?: RGBPatternProperties[];
            rgb_color?: RGBColor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rgb_pattern_id" in data && data.rgb_pattern_id != undefined) {
                    this.rgb_pattern_id = data.rgb_pattern_id;
                }
                if ("rgb_pattern_properties" in data && data.rgb_pattern_properties != undefined) {
                    this.rgb_pattern_properties = data.rgb_pattern_properties;
                }
                if ("rgb_color" in data && data.rgb_color != undefined) {
                    this.rgb_color = data.rgb_color;
                }
            }
        }
        get rgb_pattern_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.gateway.RGB_PATTERNS.STATIC) as dependency_1.com.keus.gateway.RGB_PATTERNS;
        }
        set rgb_pattern_id(value: dependency_1.com.keus.gateway.RGB_PATTERNS) {
            pb_1.Message.setField(this, 1, value);
        }
        get rgb_pattern_properties() {
            return pb_1.Message.getRepeatedWrapperField(this, RGBPatternProperties, 2) as RGBPatternProperties[];
        }
        set rgb_pattern_properties(value: RGBPatternProperties[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get rgb_color() {
            return pb_1.Message.getRepeatedWrapperField(this, RGBColor, 3) as RGBColor[];
        }
        set rgb_color(value: RGBColor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            rgb_pattern_id?: dependency_1.com.keus.gateway.RGB_PATTERNS;
            rgb_pattern_properties?: ReturnType<typeof RGBPatternProperties.prototype.toObject>[];
            rgb_color?: ReturnType<typeof RGBColor.prototype.toObject>[];
        }): RGBColorTraitState {
            const message = new RGBColorTraitState({});
            if (data.rgb_pattern_id != null) {
                message.rgb_pattern_id = data.rgb_pattern_id;
            }
            if (data.rgb_pattern_properties != null) {
                message.rgb_pattern_properties = data.rgb_pattern_properties.map(item => RGBPatternProperties.fromObject(item));
            }
            if (data.rgb_color != null) {
                message.rgb_color = data.rgb_color.map(item => RGBColor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                rgb_pattern_id?: dependency_1.com.keus.gateway.RGB_PATTERNS;
                rgb_pattern_properties?: ReturnType<typeof RGBPatternProperties.prototype.toObject>[];
                rgb_color?: ReturnType<typeof RGBColor.prototype.toObject>[];
            } = {};
            if (this.rgb_pattern_id != null) {
                data.rgb_pattern_id = this.rgb_pattern_id;
            }
            if (this.rgb_pattern_properties != null) {
                data.rgb_pattern_properties = this.rgb_pattern_properties.map((item: RGBPatternProperties) => item.toObject());
            }
            if (this.rgb_color != null) {
                data.rgb_color = this.rgb_color.map((item: RGBColor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rgb_pattern_id != dependency_1.com.keus.gateway.RGB_PATTERNS.STATIC)
                writer.writeEnum(1, this.rgb_pattern_id);
            if (this.rgb_pattern_properties.length)
                writer.writeRepeatedMessage(2, this.rgb_pattern_properties, (item: RGBPatternProperties) => item.serialize(writer));
            if (this.rgb_color.length)
                writer.writeRepeatedMessage(3, this.rgb_color, (item: RGBColor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RGBColorTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RGBColorTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rgb_pattern_id = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.rgb_pattern_properties, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RGBPatternProperties.deserialize(reader), RGBPatternProperties));
                        break;
                    case 3:
                        reader.readMessage(message.rgb_color, () => pb_1.Message.addToRepeatedWrapperField(message, 3, RGBColor.deserialize(reader), RGBColor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RGBColorTraitState {
            return RGBColorTraitState.deserialize(bytes);
        }
    }
    export class RGBColorTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rgbcolor_default_state?: RGBColorTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rgbcolor_default_state" in data && data.rgbcolor_default_state != undefined) {
                    this.rgbcolor_default_state = data.rgbcolor_default_state;
                }
            }
        }
        get rgbcolor_default_state() {
            return pb_1.Message.getWrapperField(this, RGBColorTraitState, 1) as RGBColorTraitState;
        }
        set rgbcolor_default_state(value: RGBColorTraitState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_rgbcolor_default_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            rgbcolor_default_state?: ReturnType<typeof RGBColorTraitState.prototype.toObject>;
        }): RGBColorTraitProperties {
            const message = new RGBColorTraitProperties({});
            if (data.rgbcolor_default_state != null) {
                message.rgbcolor_default_state = RGBColorTraitState.fromObject(data.rgbcolor_default_state);
            }
            return message;
        }
        toObject() {
            const data: {
                rgbcolor_default_state?: ReturnType<typeof RGBColorTraitState.prototype.toObject>;
            } = {};
            if (this.rgbcolor_default_state != null) {
                data.rgbcolor_default_state = this.rgbcolor_default_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rgbcolor_default_state)
                writer.writeMessage(1, this.rgbcolor_default_state, () => this.rgbcolor_default_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RGBColorTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RGBColorTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rgbcolor_default_state, () => message.rgbcolor_default_state = RGBColorTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RGBColorTraitProperties {
            return RGBColorTraitProperties.deserialize(bytes);
        }
    }
}
