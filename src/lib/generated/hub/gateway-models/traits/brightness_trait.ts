/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/brightness_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class BrightnessTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            brightness_percent?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("brightness_percent" in data && data.brightness_percent != undefined) {
                    this.brightness_percent = data.brightness_percent;
                }
            }
        }
        get brightness_percent() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set brightness_percent(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            brightness_percent?: number;
        }): BrightnessTraitState {
            const message = new BrightnessTraitState({});
            if (data.brightness_percent != null) {
                message.brightness_percent = data.brightness_percent;
            }
            return message;
        }
        toObject() {
            const data: {
                brightness_percent?: number;
            } = {};
            if (this.brightness_percent != null) {
                data.brightness_percent = this.brightness_percent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.brightness_percent != 0)
                writer.writeInt32(1, this.brightness_percent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BrightnessTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BrightnessTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.brightness_percent = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BrightnessTraitState {
            return BrightnessTraitState.deserialize(bytes);
        }
    }
    export class BrightnessTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            brightness_min_value?: number;
            brightness_max_value?: number;
            fade_up_time?: number;
            fade_down_time?: number;
            fade_off_time?: number;
            fade_rate?: number;
            brightness_default_state?: BrightnessTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("brightness_min_value" in data && data.brightness_min_value != undefined) {
                    this.brightness_min_value = data.brightness_min_value;
                }
                if ("brightness_max_value" in data && data.brightness_max_value != undefined) {
                    this.brightness_max_value = data.brightness_max_value;
                }
                if ("fade_up_time" in data && data.fade_up_time != undefined) {
                    this.fade_up_time = data.fade_up_time;
                }
                if ("fade_down_time" in data && data.fade_down_time != undefined) {
                    this.fade_down_time = data.fade_down_time;
                }
                if ("fade_off_time" in data && data.fade_off_time != undefined) {
                    this.fade_off_time = data.fade_off_time;
                }
                if ("fade_rate" in data && data.fade_rate != undefined) {
                    this.fade_rate = data.fade_rate;
                }
                if ("brightness_default_state" in data && data.brightness_default_state != undefined) {
                    this.brightness_default_state = data.brightness_default_state;
                }
            }
        }
        get brightness_min_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set brightness_min_value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get brightness_max_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set brightness_max_value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get fade_up_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set fade_up_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fade_down_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set fade_down_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get fade_off_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set fade_off_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get fade_rate() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set fade_rate(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get brightness_default_state() {
            return pb_1.Message.getWrapperField(this, BrightnessTraitState, 3) as BrightnessTraitState;
        }
        set brightness_default_state(value: BrightnessTraitState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_brightness_default_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            brightness_min_value?: number;
            brightness_max_value?: number;
            fade_up_time?: number;
            fade_down_time?: number;
            fade_off_time?: number;
            fade_rate?: number;
            brightness_default_state?: ReturnType<typeof BrightnessTraitState.prototype.toObject>;
        }): BrightnessTraitProperties {
            const message = new BrightnessTraitProperties({});
            if (data.brightness_min_value != null) {
                message.brightness_min_value = data.brightness_min_value;
            }
            if (data.brightness_max_value != null) {
                message.brightness_max_value = data.brightness_max_value;
            }
            if (data.fade_up_time != null) {
                message.fade_up_time = data.fade_up_time;
            }
            if (data.fade_down_time != null) {
                message.fade_down_time = data.fade_down_time;
            }
            if (data.fade_off_time != null) {
                message.fade_off_time = data.fade_off_time;
            }
            if (data.fade_rate != null) {
                message.fade_rate = data.fade_rate;
            }
            if (data.brightness_default_state != null) {
                message.brightness_default_state = BrightnessTraitState.fromObject(data.brightness_default_state);
            }
            return message;
        }
        toObject() {
            const data: {
                brightness_min_value?: number;
                brightness_max_value?: number;
                fade_up_time?: number;
                fade_down_time?: number;
                fade_off_time?: number;
                fade_rate?: number;
                brightness_default_state?: ReturnType<typeof BrightnessTraitState.prototype.toObject>;
            } = {};
            if (this.brightness_min_value != null) {
                data.brightness_min_value = this.brightness_min_value;
            }
            if (this.brightness_max_value != null) {
                data.brightness_max_value = this.brightness_max_value;
            }
            if (this.fade_up_time != null) {
                data.fade_up_time = this.fade_up_time;
            }
            if (this.fade_down_time != null) {
                data.fade_down_time = this.fade_down_time;
            }
            if (this.fade_off_time != null) {
                data.fade_off_time = this.fade_off_time;
            }
            if (this.fade_rate != null) {
                data.fade_rate = this.fade_rate;
            }
            if (this.brightness_default_state != null) {
                data.brightness_default_state = this.brightness_default_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.brightness_min_value != 0)
                writer.writeInt32(1, this.brightness_min_value);
            if (this.brightness_max_value != 0)
                writer.writeInt32(2, this.brightness_max_value);
            if (this.fade_up_time != 0)
                writer.writeInt32(4, this.fade_up_time);
            if (this.fade_down_time != 0)
                writer.writeInt32(5, this.fade_down_time);
            if (this.fade_off_time != 0)
                writer.writeInt32(6, this.fade_off_time);
            if (this.fade_rate != 0)
                writer.writeInt32(7, this.fade_rate);
            if (this.has_brightness_default_state)
                writer.writeMessage(3, this.brightness_default_state, () => this.brightness_default_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BrightnessTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BrightnessTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.brightness_min_value = reader.readInt32();
                        break;
                    case 2:
                        message.brightness_max_value = reader.readInt32();
                        break;
                    case 4:
                        message.fade_up_time = reader.readInt32();
                        break;
                    case 5:
                        message.fade_down_time = reader.readInt32();
                        break;
                    case 6:
                        message.fade_off_time = reader.readInt32();
                        break;
                    case 7:
                        message.fade_rate = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.brightness_default_state, () => message.brightness_default_state = BrightnessTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BrightnessTraitProperties {
            return BrightnessTraitProperties.deserialize(bytes);
        }
    }
}
