/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/percentopen_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class PercentOpenTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            percent_open?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("percent_open" in data && data.percent_open != undefined) {
                    this.percent_open = data.percent_open;
                }
            }
        }
        get percent_open() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set percent_open(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            percent_open?: number;
        }): PercentOpenTraitState {
            const message = new PercentOpenTraitState({});
            if (data.percent_open != null) {
                message.percent_open = data.percent_open;
            }
            return message;
        }
        toObject() {
            const data: {
                percent_open?: number;
            } = {};
            if (this.percent_open != null) {
                data.percent_open = this.percent_open;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.percent_open != 0)
                writer.writeUint32(1, this.percent_open);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PercentOpenTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PercentOpenTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.percent_open = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PercentOpenTraitState {
            return PercentOpenTraitState.deserialize(bytes);
        }
    }
    export class PercentOpenTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            max_percent_value?: number;
            min_percent_value?: number;
            default_percentopen_state?: PercentOpenTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_percent_value" in data && data.max_percent_value != undefined) {
                    this.max_percent_value = data.max_percent_value;
                }
                if ("min_percent_value" in data && data.min_percent_value != undefined) {
                    this.min_percent_value = data.min_percent_value;
                }
                if ("default_percentopen_state" in data && data.default_percentopen_state != undefined) {
                    this.default_percentopen_state = data.default_percentopen_state;
                }
            }
        }
        get max_percent_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set max_percent_value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get min_percent_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set min_percent_value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get default_percentopen_state() {
            return pb_1.Message.getWrapperField(this, PercentOpenTraitState, 3) as PercentOpenTraitState;
        }
        set default_percentopen_state(value: PercentOpenTraitState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_default_percentopen_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            max_percent_value?: number;
            min_percent_value?: number;
            default_percentopen_state?: ReturnType<typeof PercentOpenTraitState.prototype.toObject>;
        }): PercentOpenTraitProperties {
            const message = new PercentOpenTraitProperties({});
            if (data.max_percent_value != null) {
                message.max_percent_value = data.max_percent_value;
            }
            if (data.min_percent_value != null) {
                message.min_percent_value = data.min_percent_value;
            }
            if (data.default_percentopen_state != null) {
                message.default_percentopen_state = PercentOpenTraitState.fromObject(data.default_percentopen_state);
            }
            return message;
        }
        toObject() {
            const data: {
                max_percent_value?: number;
                min_percent_value?: number;
                default_percentopen_state?: ReturnType<typeof PercentOpenTraitState.prototype.toObject>;
            } = {};
            if (this.max_percent_value != null) {
                data.max_percent_value = this.max_percent_value;
            }
            if (this.min_percent_value != null) {
                data.min_percent_value = this.min_percent_value;
            }
            if (this.default_percentopen_state != null) {
                data.default_percentopen_state = this.default_percentopen_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_percent_value != 0)
                writer.writeUint32(1, this.max_percent_value);
            if (this.min_percent_value != 0)
                writer.writeUint32(2, this.min_percent_value);
            if (this.has_default_percentopen_state)
                writer.writeMessage(3, this.default_percentopen_state, () => this.default_percentopen_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PercentOpenTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PercentOpenTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_percent_value = reader.readUint32();
                        break;
                    case 2:
                        message.min_percent_value = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.default_percentopen_state, () => message.default_percentopen_state = PercentOpenTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PercentOpenTraitProperties {
            return PercentOpenTraitProperties.deserialize(bytes);
        }
    }
}
