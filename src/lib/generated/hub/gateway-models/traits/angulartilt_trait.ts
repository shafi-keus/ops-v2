/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/angulartilt_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./trait_constants/blinds_constants";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class AngularTiltTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tilt_angle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tilt_angle" in data && data.tilt_angle != undefined) {
                    this.tilt_angle = data.tilt_angle;
                }
            }
        }
        get tilt_angle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tilt_angle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            tilt_angle?: number;
        }): AngularTiltTraitState {
            const message = new AngularTiltTraitState({});
            if (data.tilt_angle != null) {
                message.tilt_angle = data.tilt_angle;
            }
            return message;
        }
        toObject() {
            const data: {
                tilt_angle?: number;
            } = {};
            if (this.tilt_angle != null) {
                data.tilt_angle = this.tilt_angle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tilt_angle != 0)
                writer.writeUint32(1, this.tilt_angle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AngularTiltTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AngularTiltTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tilt_angle = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AngularTiltTraitState {
            return AngularTiltTraitState.deserialize(bytes);
        }
    }
    export class AngularTiltTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tilt_type?: dependency_1.com.keus.gateway.BLIND_TILT_TYPE;
            full_tilt_angle?: number;
            invert_tilt?: boolean;
            default_tile_state?: AngularTiltTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tilt_type" in data && data.tilt_type != undefined) {
                    this.tilt_type = data.tilt_type;
                }
                if ("full_tilt_angle" in data && data.full_tilt_angle != undefined) {
                    this.full_tilt_angle = data.full_tilt_angle;
                }
                if ("invert_tilt" in data && data.invert_tilt != undefined) {
                    this.invert_tilt = data.invert_tilt;
                }
                if ("default_tile_state" in data && data.default_tile_state != undefined) {
                    this.default_tile_state = data.default_tile_state;
                }
            }
        }
        get tilt_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.com.keus.gateway.BLIND_TILT_TYPE.BLIND_MIDTILT) as dependency_1.com.keus.gateway.BLIND_TILT_TYPE;
        }
        set tilt_type(value: dependency_1.com.keus.gateway.BLIND_TILT_TYPE) {
            pb_1.Message.setField(this, 1, value);
        }
        get full_tilt_angle() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set full_tilt_angle(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get invert_tilt() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set invert_tilt(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get default_tile_state() {
            return pb_1.Message.getWrapperField(this, AngularTiltTraitState, 4) as AngularTiltTraitState;
        }
        set default_tile_state(value: AngularTiltTraitState) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_default_tile_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            tilt_type?: dependency_1.com.keus.gateway.BLIND_TILT_TYPE;
            full_tilt_angle?: number;
            invert_tilt?: boolean;
            default_tile_state?: ReturnType<typeof AngularTiltTraitState.prototype.toObject>;
        }): AngularTiltTraitProperties {
            const message = new AngularTiltTraitProperties({});
            if (data.tilt_type != null) {
                message.tilt_type = data.tilt_type;
            }
            if (data.full_tilt_angle != null) {
                message.full_tilt_angle = data.full_tilt_angle;
            }
            if (data.invert_tilt != null) {
                message.invert_tilt = data.invert_tilt;
            }
            if (data.default_tile_state != null) {
                message.default_tile_state = AngularTiltTraitState.fromObject(data.default_tile_state);
            }
            return message;
        }
        toObject() {
            const data: {
                tilt_type?: dependency_1.com.keus.gateway.BLIND_TILT_TYPE;
                full_tilt_angle?: number;
                invert_tilt?: boolean;
                default_tile_state?: ReturnType<typeof AngularTiltTraitState.prototype.toObject>;
            } = {};
            if (this.tilt_type != null) {
                data.tilt_type = this.tilt_type;
            }
            if (this.full_tilt_angle != null) {
                data.full_tilt_angle = this.full_tilt_angle;
            }
            if (this.invert_tilt != null) {
                data.invert_tilt = this.invert_tilt;
            }
            if (this.default_tile_state != null) {
                data.default_tile_state = this.default_tile_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tilt_type != dependency_1.com.keus.gateway.BLIND_TILT_TYPE.BLIND_MIDTILT)
                writer.writeEnum(1, this.tilt_type);
            if (this.full_tilt_angle != 0)
                writer.writeUint32(2, this.full_tilt_angle);
            if (this.invert_tilt != false)
                writer.writeBool(3, this.invert_tilt);
            if (this.has_default_tile_state)
                writer.writeMessage(4, this.default_tile_state, () => this.default_tile_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AngularTiltTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AngularTiltTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tilt_type = reader.readEnum();
                        break;
                    case 2:
                        message.full_tilt_angle = reader.readUint32();
                        break;
                    case 3:
                        message.invert_tilt = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.default_tile_state, () => message.default_tile_state = AngularTiltTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AngularTiltTraitProperties {
            return AngularTiltTraitProperties.deserialize(bytes);
        }
    }
}
