/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/modecontrol_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class ModeControlTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set mode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            mode?: string;
        }): ModeControlTraitState {
            const message = new ModeControlTraitState({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: string;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mode.length)
                writer.writeString(1, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModeControlTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModeControlTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModeControlTraitState {
            return ModeControlTraitState.deserialize(bytes);
        }
    }
    export class ModeControlTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            modes?: string[];
            default_mode_state?: ModeControlTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("modes" in data && data.modes != undefined) {
                    this.modes = data.modes;
                }
                if ("default_mode_state" in data && data.default_mode_state != undefined) {
                    this.default_mode_state = data.default_mode_state;
                }
            }
        }
        get modes() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set modes(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get default_mode_state() {
            return pb_1.Message.getWrapperField(this, ModeControlTraitState, 2) as ModeControlTraitState;
        }
        set default_mode_state(value: ModeControlTraitState) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_default_mode_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            modes?: string[];
            default_mode_state?: ReturnType<typeof ModeControlTraitState.prototype.toObject>;
        }): ModeControlTraitProperties {
            const message = new ModeControlTraitProperties({});
            if (data.modes != null) {
                message.modes = data.modes;
            }
            if (data.default_mode_state != null) {
                message.default_mode_state = ModeControlTraitState.fromObject(data.default_mode_state);
            }
            return message;
        }
        toObject() {
            const data: {
                modes?: string[];
                default_mode_state?: ReturnType<typeof ModeControlTraitState.prototype.toObject>;
            } = {};
            if (this.modes != null) {
                data.modes = this.modes;
            }
            if (this.default_mode_state != null) {
                data.default_mode_state = this.default_mode_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.modes.length)
                writer.writeRepeatedString(1, this.modes);
            if (this.has_default_mode_state)
                writer.writeMessage(2, this.default_mode_state, () => this.default_mode_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModeControlTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModeControlTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.default_mode_state, () => message.default_mode_state = ModeControlTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModeControlTraitProperties {
            return ModeControlTraitProperties.deserialize(bytes);
        }
    }
}
