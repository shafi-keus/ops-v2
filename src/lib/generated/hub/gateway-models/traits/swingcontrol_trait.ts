/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/traits/swingcontrol_trait.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export enum SWING_TYPE {
        SINGLE = 0,
        DOUBLE = 1
    }
    export class SingleSwingState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            swing_state?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("swing_state" in data && data.swing_state != undefined) {
                    this.swing_state = data.swing_state;
                }
            }
        }
        get swing_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set swing_state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            swing_state?: string;
        }): SingleSwingState {
            const message = new SingleSwingState({});
            if (data.swing_state != null) {
                message.swing_state = data.swing_state;
            }
            return message;
        }
        toObject() {
            const data: {
                swing_state?: string;
            } = {};
            if (this.swing_state != null) {
                data.swing_state = this.swing_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.swing_state.length)
                writer.writeString(1, this.swing_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleSwingState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleSwingState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.swing_state = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleSwingState {
            return SingleSwingState.deserialize(bytes);
        }
    }
    export class DoubleSwingState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            horizontal_swing_state?: string;
            vertival_swing_state?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("horizontal_swing_state" in data && data.horizontal_swing_state != undefined) {
                    this.horizontal_swing_state = data.horizontal_swing_state;
                }
                if ("vertival_swing_state" in data && data.vertival_swing_state != undefined) {
                    this.vertival_swing_state = data.vertival_swing_state;
                }
            }
        }
        get horizontal_swing_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set horizontal_swing_state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get vertival_swing_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set vertival_swing_state(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            horizontal_swing_state?: string;
            vertival_swing_state?: string;
        }): DoubleSwingState {
            const message = new DoubleSwingState({});
            if (data.horizontal_swing_state != null) {
                message.horizontal_swing_state = data.horizontal_swing_state;
            }
            if (data.vertival_swing_state != null) {
                message.vertival_swing_state = data.vertival_swing_state;
            }
            return message;
        }
        toObject() {
            const data: {
                horizontal_swing_state?: string;
                vertival_swing_state?: string;
            } = {};
            if (this.horizontal_swing_state != null) {
                data.horizontal_swing_state = this.horizontal_swing_state;
            }
            if (this.vertival_swing_state != null) {
                data.vertival_swing_state = this.vertival_swing_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.horizontal_swing_state.length)
                writer.writeString(1, this.horizontal_swing_state);
            if (this.vertival_swing_state.length)
                writer.writeString(2, this.vertival_swing_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DoubleSwingState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DoubleSwingState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.horizontal_swing_state = reader.readString();
                        break;
                    case 2:
                        message.vertival_swing_state = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DoubleSwingState {
            return DoubleSwingState.deserialize(bytes);
        }
    }
    export class SwingStates extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            single_swing?: SingleSwingState;
            double_swing?: never;
        } | {
            single_swing?: never;
            double_swing?: DoubleSwingState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("single_swing" in data && data.single_swing != undefined) {
                    this.single_swing = data.single_swing;
                }
                if ("double_swing" in data && data.double_swing != undefined) {
                    this.double_swing = data.double_swing;
                }
            }
        }
        get single_swing() {
            return pb_1.Message.getWrapperField(this, SingleSwingState, 1) as SingleSwingState;
        }
        set single_swing(value: SingleSwingState) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_single_swing() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get double_swing() {
            return pb_1.Message.getWrapperField(this, DoubleSwingState, 2) as DoubleSwingState;
        }
        set double_swing(value: DoubleSwingState) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_double_swing() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get swing_states() {
            const cases: {
                [index: number]: "none" | "single_swing" | "double_swing";
            } = {
                0: "none",
                1: "single_swing",
                2: "double_swing"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            single_swing?: ReturnType<typeof SingleSwingState.prototype.toObject>;
            double_swing?: ReturnType<typeof DoubleSwingState.prototype.toObject>;
        }): SwingStates {
            const message = new SwingStates({});
            if (data.single_swing != null) {
                message.single_swing = SingleSwingState.fromObject(data.single_swing);
            }
            if (data.double_swing != null) {
                message.double_swing = DoubleSwingState.fromObject(data.double_swing);
            }
            return message;
        }
        toObject() {
            const data: {
                single_swing?: ReturnType<typeof SingleSwingState.prototype.toObject>;
                double_swing?: ReturnType<typeof DoubleSwingState.prototype.toObject>;
            } = {};
            if (this.single_swing != null) {
                data.single_swing = this.single_swing.toObject();
            }
            if (this.double_swing != null) {
                data.double_swing = this.double_swing.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_single_swing)
                writer.writeMessage(1, this.single_swing, () => this.single_swing.serialize(writer));
            if (this.has_double_swing)
                writer.writeMessage(2, this.double_swing, () => this.double_swing.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwingStates {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwingStates();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.single_swing, () => message.single_swing = SingleSwingState.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.double_swing, () => message.double_swing = DoubleSwingState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwingStates {
            return SwingStates.deserialize(bytes);
        }
    }
    export class SingleSwing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            swings?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("swings" in data && data.swings != undefined) {
                    this.swings = data.swings;
                }
            }
        }
        get swings() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set swings(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            swings?: string[];
        }): SingleSwing {
            const message = new SingleSwing({});
            if (data.swings != null) {
                message.swings = data.swings;
            }
            return message;
        }
        toObject() {
            const data: {
                swings?: string[];
            } = {};
            if (this.swings != null) {
                data.swings = this.swings;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.swings.length)
                writer.writeRepeatedString(1, this.swings);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleSwing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleSwing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleSwing {
            return SingleSwing.deserialize(bytes);
        }
    }
    export class DoubleSwing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vertical_swing_enabled?: boolean;
            vertical_swing_modes?: string[];
            horizontal_swing_enabled?: boolean;
            horizontal_swing_modes?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vertical_swing_enabled" in data && data.vertical_swing_enabled != undefined) {
                    this.vertical_swing_enabled = data.vertical_swing_enabled;
                }
                if ("vertical_swing_modes" in data && data.vertical_swing_modes != undefined) {
                    this.vertical_swing_modes = data.vertical_swing_modes;
                }
                if ("horizontal_swing_enabled" in data && data.horizontal_swing_enabled != undefined) {
                    this.horizontal_swing_enabled = data.horizontal_swing_enabled;
                }
                if ("horizontal_swing_modes" in data && data.horizontal_swing_modes != undefined) {
                    this.horizontal_swing_modes = data.horizontal_swing_modes;
                }
            }
        }
        get vertical_swing_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set vertical_swing_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get vertical_swing_modes() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set vertical_swing_modes(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get horizontal_swing_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set horizontal_swing_enabled(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get horizontal_swing_modes() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set horizontal_swing_modes(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            vertical_swing_enabled?: boolean;
            vertical_swing_modes?: string[];
            horizontal_swing_enabled?: boolean;
            horizontal_swing_modes?: string[];
        }): DoubleSwing {
            const message = new DoubleSwing({});
            if (data.vertical_swing_enabled != null) {
                message.vertical_swing_enabled = data.vertical_swing_enabled;
            }
            if (data.vertical_swing_modes != null) {
                message.vertical_swing_modes = data.vertical_swing_modes;
            }
            if (data.horizontal_swing_enabled != null) {
                message.horizontal_swing_enabled = data.horizontal_swing_enabled;
            }
            if (data.horizontal_swing_modes != null) {
                message.horizontal_swing_modes = data.horizontal_swing_modes;
            }
            return message;
        }
        toObject() {
            const data: {
                vertical_swing_enabled?: boolean;
                vertical_swing_modes?: string[];
                horizontal_swing_enabled?: boolean;
                horizontal_swing_modes?: string[];
            } = {};
            if (this.vertical_swing_enabled != null) {
                data.vertical_swing_enabled = this.vertical_swing_enabled;
            }
            if (this.vertical_swing_modes != null) {
                data.vertical_swing_modes = this.vertical_swing_modes;
            }
            if (this.horizontal_swing_enabled != null) {
                data.horizontal_swing_enabled = this.horizontal_swing_enabled;
            }
            if (this.horizontal_swing_modes != null) {
                data.horizontal_swing_modes = this.horizontal_swing_modes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vertical_swing_enabled != false)
                writer.writeBool(1, this.vertical_swing_enabled);
            if (this.vertical_swing_modes.length)
                writer.writeRepeatedString(2, this.vertical_swing_modes);
            if (this.horizontal_swing_enabled != false)
                writer.writeBool(3, this.horizontal_swing_enabled);
            if (this.horizontal_swing_modes.length)
                writer.writeRepeatedString(4, this.horizontal_swing_modes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DoubleSwing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DoubleSwing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vertical_swing_enabled = reader.readBool();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.horizontal_swing_enabled = reader.readBool();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DoubleSwing {
            return DoubleSwing.deserialize(bytes);
        }
    }
    export class SwingProps extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            single_swing_props?: SingleSwing;
            double_swing_props?: never;
        } | {
            single_swing_props?: never;
            double_swing_props?: DoubleSwing;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("single_swing_props" in data && data.single_swing_props != undefined) {
                    this.single_swing_props = data.single_swing_props;
                }
                if ("double_swing_props" in data && data.double_swing_props != undefined) {
                    this.double_swing_props = data.double_swing_props;
                }
            }
        }
        get single_swing_props() {
            return pb_1.Message.getWrapperField(this, SingleSwing, 1) as SingleSwing;
        }
        set single_swing_props(value: SingleSwing) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_single_swing_props() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get double_swing_props() {
            return pb_1.Message.getWrapperField(this, DoubleSwing, 2) as DoubleSwing;
        }
        set double_swing_props(value: DoubleSwing) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_double_swing_props() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get swing_props() {
            const cases: {
                [index: number]: "none" | "single_swing_props" | "double_swing_props";
            } = {
                0: "none",
                1: "single_swing_props",
                2: "double_swing_props"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            single_swing_props?: ReturnType<typeof SingleSwing.prototype.toObject>;
            double_swing_props?: ReturnType<typeof DoubleSwing.prototype.toObject>;
        }): SwingProps {
            const message = new SwingProps({});
            if (data.single_swing_props != null) {
                message.single_swing_props = SingleSwing.fromObject(data.single_swing_props);
            }
            if (data.double_swing_props != null) {
                message.double_swing_props = DoubleSwing.fromObject(data.double_swing_props);
            }
            return message;
        }
        toObject() {
            const data: {
                single_swing_props?: ReturnType<typeof SingleSwing.prototype.toObject>;
                double_swing_props?: ReturnType<typeof DoubleSwing.prototype.toObject>;
            } = {};
            if (this.single_swing_props != null) {
                data.single_swing_props = this.single_swing_props.toObject();
            }
            if (this.double_swing_props != null) {
                data.double_swing_props = this.double_swing_props.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_single_swing_props)
                writer.writeMessage(1, this.single_swing_props, () => this.single_swing_props.serialize(writer));
            if (this.has_double_swing_props)
                writer.writeMessage(2, this.double_swing_props, () => this.double_swing_props.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwingProps {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwingProps();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.single_swing_props, () => message.single_swing_props = SingleSwing.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.double_swing_props, () => message.double_swing_props = DoubleSwing.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwingProps {
            return SwingProps.deserialize(bytes);
        }
    }
    export class SwingControlTraitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            swing_type?: SWING_TYPE;
            swing_control_state?: SwingStates;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("swing_type" in data && data.swing_type != undefined) {
                    this.swing_type = data.swing_type;
                }
                if ("swing_control_state" in data && data.swing_control_state != undefined) {
                    this.swing_control_state = data.swing_control_state;
                }
            }
        }
        get swing_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, SWING_TYPE.SINGLE) as SWING_TYPE;
        }
        set swing_type(value: SWING_TYPE) {
            pb_1.Message.setField(this, 1, value);
        }
        get swing_control_state() {
            return pb_1.Message.getWrapperField(this, SwingStates, 2) as SwingStates;
        }
        set swing_control_state(value: SwingStates) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_swing_control_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            swing_type?: SWING_TYPE;
            swing_control_state?: ReturnType<typeof SwingStates.prototype.toObject>;
        }): SwingControlTraitState {
            const message = new SwingControlTraitState({});
            if (data.swing_type != null) {
                message.swing_type = data.swing_type;
            }
            if (data.swing_control_state != null) {
                message.swing_control_state = SwingStates.fromObject(data.swing_control_state);
            }
            return message;
        }
        toObject() {
            const data: {
                swing_type?: SWING_TYPE;
                swing_control_state?: ReturnType<typeof SwingStates.prototype.toObject>;
            } = {};
            if (this.swing_type != null) {
                data.swing_type = this.swing_type;
            }
            if (this.swing_control_state != null) {
                data.swing_control_state = this.swing_control_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.swing_type != SWING_TYPE.SINGLE)
                writer.writeEnum(1, this.swing_type);
            if (this.has_swing_control_state)
                writer.writeMessage(2, this.swing_control_state, () => this.swing_control_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwingControlTraitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwingControlTraitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.swing_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.swing_control_state, () => message.swing_control_state = SwingStates.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwingControlTraitState {
            return SwingControlTraitState.deserialize(bytes);
        }
    }
    export class SwingControlTraitProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            swing_type?: SWING_TYPE;
            swing_properties?: SwingProps;
            default_swing_state?: SwingControlTraitState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("swing_type" in data && data.swing_type != undefined) {
                    this.swing_type = data.swing_type;
                }
                if ("swing_properties" in data && data.swing_properties != undefined) {
                    this.swing_properties = data.swing_properties;
                }
                if ("default_swing_state" in data && data.default_swing_state != undefined) {
                    this.default_swing_state = data.default_swing_state;
                }
            }
        }
        get swing_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, SWING_TYPE.SINGLE) as SWING_TYPE;
        }
        set swing_type(value: SWING_TYPE) {
            pb_1.Message.setField(this, 1, value);
        }
        get swing_properties() {
            return pb_1.Message.getWrapperField(this, SwingProps, 2) as SwingProps;
        }
        set swing_properties(value: SwingProps) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_swing_properties() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get default_swing_state() {
            return pb_1.Message.getWrapperField(this, SwingControlTraitState, 3) as SwingControlTraitState;
        }
        set default_swing_state(value: SwingControlTraitState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_default_swing_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            swing_type?: SWING_TYPE;
            swing_properties?: ReturnType<typeof SwingProps.prototype.toObject>;
            default_swing_state?: ReturnType<typeof SwingControlTraitState.prototype.toObject>;
        }): SwingControlTraitProperties {
            const message = new SwingControlTraitProperties({});
            if (data.swing_type != null) {
                message.swing_type = data.swing_type;
            }
            if (data.swing_properties != null) {
                message.swing_properties = SwingProps.fromObject(data.swing_properties);
            }
            if (data.default_swing_state != null) {
                message.default_swing_state = SwingControlTraitState.fromObject(data.default_swing_state);
            }
            return message;
        }
        toObject() {
            const data: {
                swing_type?: SWING_TYPE;
                swing_properties?: ReturnType<typeof SwingProps.prototype.toObject>;
                default_swing_state?: ReturnType<typeof SwingControlTraitState.prototype.toObject>;
            } = {};
            if (this.swing_type != null) {
                data.swing_type = this.swing_type;
            }
            if (this.swing_properties != null) {
                data.swing_properties = this.swing_properties.toObject();
            }
            if (this.default_swing_state != null) {
                data.default_swing_state = this.default_swing_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.swing_type != SWING_TYPE.SINGLE)
                writer.writeEnum(1, this.swing_type);
            if (this.has_swing_properties)
                writer.writeMessage(2, this.swing_properties, () => this.swing_properties.serialize(writer));
            if (this.has_default_swing_state)
                writer.writeMessage(3, this.default_swing_state, () => this.default_swing_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwingControlTraitProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwingControlTraitProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.swing_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.swing_properties, () => message.swing_properties = SwingProps.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.default_swing_state, () => message.default_swing_state = SwingControlTraitState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwingControlTraitProperties {
            return SwingControlTraitProperties.deserialize(bytes);
        }
    }
}
