/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/protocols/keus-zigbee/device/device-types/push_trigger_controller.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class PushTriggerControllerState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            port_id?: number;
        }): PushTriggerControllerState {
            const message = new PushTriggerControllerState({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: number;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.port_id != 0)
                writer.writeInt32(1, this.port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushTriggerControllerState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushTriggerControllerState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PushTriggerControllerState {
            return PushTriggerControllerState.deserialize(bytes);
        }
    }
    export class PushTriggerControllerPort extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            port_id?: number;
            is_assigned?: boolean;
            assigned_to_appliance?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("is_assigned" in data && data.is_assigned != undefined) {
                    this.is_assigned = data.is_assigned;
                }
                if ("assigned_to_appliance" in data && data.assigned_to_appliance != undefined) {
                    this.assigned_to_appliance = data.assigned_to_appliance;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_assigned() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_assigned(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get assigned_to_appliance() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set assigned_to_appliance(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            port_id?: number;
            is_assigned?: boolean;
            assigned_to_appliance?: string;
        }): PushTriggerControllerPort {
            const message = new PushTriggerControllerPort({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.is_assigned != null) {
                message.is_assigned = data.is_assigned;
            }
            if (data.assigned_to_appliance != null) {
                message.assigned_to_appliance = data.assigned_to_appliance;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: number;
                is_assigned?: boolean;
                assigned_to_appliance?: string;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.is_assigned != null) {
                data.is_assigned = this.is_assigned;
            }
            if (this.assigned_to_appliance != null) {
                data.assigned_to_appliance = this.assigned_to_appliance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.port_id != 0)
                writer.writeInt32(1, this.port_id);
            if (this.is_assigned != false)
                writer.writeBool(2, this.is_assigned);
            if (this.assigned_to_appliance.length)
                writer.writeString(3, this.assigned_to_appliance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushTriggerControllerPort {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushTriggerControllerPort();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readInt32();
                        break;
                    case 2:
                        message.is_assigned = reader.readBool();
                        break;
                    case 3:
                        message.assigned_to_appliance = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PushTriggerControllerPort {
            return PushTriggerControllerPort.deserialize(bytes);
        }
    }
    export class PushTriggerControllerProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            output_port?: PushTriggerControllerPort;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("output_port" in data && data.output_port != undefined) {
                    this.output_port = data.output_port;
                }
            }
        }
        get output_port() {
            return pb_1.Message.getWrapperField(this, PushTriggerControllerPort, 1) as PushTriggerControllerPort;
        }
        set output_port(value: PushTriggerControllerPort) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_output_port() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            output_port?: ReturnType<typeof PushTriggerControllerPort.prototype.toObject>;
        }): PushTriggerControllerProperties {
            const message = new PushTriggerControllerProperties({});
            if (data.output_port != null) {
                message.output_port = PushTriggerControllerPort.fromObject(data.output_port);
            }
            return message;
        }
        toObject() {
            const data: {
                output_port?: ReturnType<typeof PushTriggerControllerPort.prototype.toObject>;
            } = {};
            if (this.output_port != null) {
                data.output_port = this.output_port.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_output_port)
                writer.writeMessage(1, this.output_port, () => this.output_port.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushTriggerControllerProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushTriggerControllerProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.output_port, () => message.output_port = PushTriggerControllerPort.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PushTriggerControllerProperties {
            return PushTriggerControllerProperties.deserialize(bytes);
        }
    }
}
