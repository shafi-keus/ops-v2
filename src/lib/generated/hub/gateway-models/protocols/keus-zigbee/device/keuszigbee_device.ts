/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/protocols/keus-zigbee/device/keuszigbee_device.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./device-types/cv3_strip_controller";
import * as dependency_2 from "./device-types/cv6_strip_controller";
import * as dependency_3 from "./device-types/push_trigger_controller";
import * as dependency_4 from "./device-types/cvaddr_strip_controller";
import * as dependency_5 from "./device-types/relay_blind_controller";
import * as dependency_6 from "./device-types/slider_blind_controller";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class KeusZigbeeDeviceControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            device_parent?: string;
            device_gateway?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_parent" in data && data.device_parent != undefined) {
                    this.device_parent = data.device_parent;
                }
                if ("device_gateway" in data && data.device_gateway != undefined) {
                    this.device_gateway = data.device_gateway;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_parent() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_parent(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_gateway() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_gateway(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            device_parent?: string;
            device_gateway?: string;
        }): KeusZigbeeDeviceControlInfo {
            const message = new KeusZigbeeDeviceControlInfo({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_parent != null) {
                message.device_parent = data.device_parent;
            }
            if (data.device_gateway != null) {
                message.device_gateway = data.device_gateway;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                device_parent?: string;
                device_gateway?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_parent != null) {
                data.device_parent = this.device_parent;
            }
            if (this.device_gateway != null) {
                data.device_gateway = this.device_gateway;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.device_parent.length)
                writer.writeString(2, this.device_parent);
            if (this.device_gateway.length)
                writer.writeString(3, this.device_gateway);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeDeviceControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeDeviceControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.device_parent = reader.readString();
                        break;
                    case 3:
                        message.device_gateway = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeDeviceControlInfo {
            return KeusZigbeeDeviceControlInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeeDeviceProperties extends pb_1.Message {
        #one_of_decls: number[][] = [[101, 102, 103, 104, 105, 106]];
        constructor(data?: any[] | ({} & (({
            cv3_strip_controller_properties?: dependency_1.com.keus.gateway.CV3StripControllerProperties;
            cv6_strip_controller_properties?: never;
            push_trigger_controller_properties?: never;
            slider_blind_controller_properties?: never;
            relay_blind_controller_properties?: never;
            cvaddr_strip_controller_properties?: never;
        } | {
            cv3_strip_controller_properties?: never;
            cv6_strip_controller_properties?: dependency_2.com.keus.gateway.CV6StripControllerProperties;
            push_trigger_controller_properties?: never;
            slider_blind_controller_properties?: never;
            relay_blind_controller_properties?: never;
            cvaddr_strip_controller_properties?: never;
        } | {
            cv3_strip_controller_properties?: never;
            cv6_strip_controller_properties?: never;
            push_trigger_controller_properties?: dependency_3.com.keus.gateway.PushTriggerControllerProperties;
            slider_blind_controller_properties?: never;
            relay_blind_controller_properties?: never;
            cvaddr_strip_controller_properties?: never;
        } | {
            cv3_strip_controller_properties?: never;
            cv6_strip_controller_properties?: never;
            push_trigger_controller_properties?: never;
            slider_blind_controller_properties?: dependency_6.com.keus.gateway.SliderBlindControllerProperties;
            relay_blind_controller_properties?: never;
            cvaddr_strip_controller_properties?: never;
        } | {
            cv3_strip_controller_properties?: never;
            cv6_strip_controller_properties?: never;
            push_trigger_controller_properties?: never;
            slider_blind_controller_properties?: never;
            relay_blind_controller_properties?: dependency_5.com.keus.gateway.RelayBlindControllerProperties;
            cvaddr_strip_controller_properties?: never;
        } | {
            cv3_strip_controller_properties?: never;
            cv6_strip_controller_properties?: never;
            push_trigger_controller_properties?: never;
            slider_blind_controller_properties?: never;
            relay_blind_controller_properties?: never;
            cvaddr_strip_controller_properties?: dependency_4.com.keus.gateway.CVAddrStripControllerProperties;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cv3_strip_controller_properties" in data && data.cv3_strip_controller_properties != undefined) {
                    this.cv3_strip_controller_properties = data.cv3_strip_controller_properties;
                }
                if ("cv6_strip_controller_properties" in data && data.cv6_strip_controller_properties != undefined) {
                    this.cv6_strip_controller_properties = data.cv6_strip_controller_properties;
                }
                if ("push_trigger_controller_properties" in data && data.push_trigger_controller_properties != undefined) {
                    this.push_trigger_controller_properties = data.push_trigger_controller_properties;
                }
                if ("slider_blind_controller_properties" in data && data.slider_blind_controller_properties != undefined) {
                    this.slider_blind_controller_properties = data.slider_blind_controller_properties;
                }
                if ("relay_blind_controller_properties" in data && data.relay_blind_controller_properties != undefined) {
                    this.relay_blind_controller_properties = data.relay_blind_controller_properties;
                }
                if ("cvaddr_strip_controller_properties" in data && data.cvaddr_strip_controller_properties != undefined) {
                    this.cvaddr_strip_controller_properties = data.cvaddr_strip_controller_properties;
                }
            }
        }
        get cv3_strip_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.CV3StripControllerProperties, 101) as dependency_1.com.keus.gateway.CV3StripControllerProperties;
        }
        set cv3_strip_controller_properties(value: dependency_1.com.keus.gateway.CV3StripControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
        }
        get has_cv3_strip_controller_properties() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get cv6_strip_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.CV6StripControllerProperties, 102) as dependency_2.com.keus.gateway.CV6StripControllerProperties;
        }
        set cv6_strip_controller_properties(value: dependency_2.com.keus.gateway.CV6StripControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 102, this.#one_of_decls[0], value);
        }
        get has_cv6_strip_controller_properties() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get push_trigger_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.PushTriggerControllerProperties, 103) as dependency_3.com.keus.gateway.PushTriggerControllerProperties;
        }
        set push_trigger_controller_properties(value: dependency_3.com.keus.gateway.PushTriggerControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 103, this.#one_of_decls[0], value);
        }
        get has_push_trigger_controller_properties() {
            return pb_1.Message.getField(this, 103) != null;
        }
        get slider_blind_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.gateway.SliderBlindControllerProperties, 104) as dependency_6.com.keus.gateway.SliderBlindControllerProperties;
        }
        set slider_blind_controller_properties(value: dependency_6.com.keus.gateway.SliderBlindControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 104, this.#one_of_decls[0], value);
        }
        get has_slider_blind_controller_properties() {
            return pb_1.Message.getField(this, 104) != null;
        }
        get relay_blind_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.gateway.RelayBlindControllerProperties, 105) as dependency_5.com.keus.gateway.RelayBlindControllerProperties;
        }
        set relay_blind_controller_properties(value: dependency_5.com.keus.gateway.RelayBlindControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 105, this.#one_of_decls[0], value);
        }
        get has_relay_blind_controller_properties() {
            return pb_1.Message.getField(this, 105) != null;
        }
        get cvaddr_strip_controller_properties() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.gateway.CVAddrStripControllerProperties, 106) as dependency_4.com.keus.gateway.CVAddrStripControllerProperties;
        }
        set cvaddr_strip_controller_properties(value: dependency_4.com.keus.gateway.CVAddrStripControllerProperties) {
            pb_1.Message.setOneofWrapperField(this, 106, this.#one_of_decls[0], value);
        }
        get has_cvaddr_strip_controller_properties() {
            return pb_1.Message.getField(this, 106) != null;
        }
        get device_properties() {
            const cases: {
                [index: number]: "none" | "cv3_strip_controller_properties" | "cv6_strip_controller_properties" | "push_trigger_controller_properties" | "slider_blind_controller_properties" | "relay_blind_controller_properties" | "cvaddr_strip_controller_properties";
            } = {
                0: "none",
                101: "cv3_strip_controller_properties",
                102: "cv6_strip_controller_properties",
                103: "push_trigger_controller_properties",
                104: "slider_blind_controller_properties",
                105: "relay_blind_controller_properties",
                106: "cvaddr_strip_controller_properties"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101, 102, 103, 104, 105, 106])];
        }
        static fromObject(data: {
            cv3_strip_controller_properties?: ReturnType<typeof dependency_1.com.keus.gateway.CV3StripControllerProperties.prototype.toObject>;
            cv6_strip_controller_properties?: ReturnType<typeof dependency_2.com.keus.gateway.CV6StripControllerProperties.prototype.toObject>;
            push_trigger_controller_properties?: ReturnType<typeof dependency_3.com.keus.gateway.PushTriggerControllerProperties.prototype.toObject>;
            slider_blind_controller_properties?: ReturnType<typeof dependency_6.com.keus.gateway.SliderBlindControllerProperties.prototype.toObject>;
            relay_blind_controller_properties?: ReturnType<typeof dependency_5.com.keus.gateway.RelayBlindControllerProperties.prototype.toObject>;
            cvaddr_strip_controller_properties?: ReturnType<typeof dependency_4.com.keus.gateway.CVAddrStripControllerProperties.prototype.toObject>;
        }): KeusZigbeeDeviceProperties {
            const message = new KeusZigbeeDeviceProperties({});
            if (data.cv3_strip_controller_properties != null) {
                message.cv3_strip_controller_properties = dependency_1.com.keus.gateway.CV3StripControllerProperties.fromObject(data.cv3_strip_controller_properties);
            }
            if (data.cv6_strip_controller_properties != null) {
                message.cv6_strip_controller_properties = dependency_2.com.keus.gateway.CV6StripControllerProperties.fromObject(data.cv6_strip_controller_properties);
            }
            if (data.push_trigger_controller_properties != null) {
                message.push_trigger_controller_properties = dependency_3.com.keus.gateway.PushTriggerControllerProperties.fromObject(data.push_trigger_controller_properties);
            }
            if (data.slider_blind_controller_properties != null) {
                message.slider_blind_controller_properties = dependency_6.com.keus.gateway.SliderBlindControllerProperties.fromObject(data.slider_blind_controller_properties);
            }
            if (data.relay_blind_controller_properties != null) {
                message.relay_blind_controller_properties = dependency_5.com.keus.gateway.RelayBlindControllerProperties.fromObject(data.relay_blind_controller_properties);
            }
            if (data.cvaddr_strip_controller_properties != null) {
                message.cvaddr_strip_controller_properties = dependency_4.com.keus.gateway.CVAddrStripControllerProperties.fromObject(data.cvaddr_strip_controller_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                cv3_strip_controller_properties?: ReturnType<typeof dependency_1.com.keus.gateway.CV3StripControllerProperties.prototype.toObject>;
                cv6_strip_controller_properties?: ReturnType<typeof dependency_2.com.keus.gateway.CV6StripControllerProperties.prototype.toObject>;
                push_trigger_controller_properties?: ReturnType<typeof dependency_3.com.keus.gateway.PushTriggerControllerProperties.prototype.toObject>;
                slider_blind_controller_properties?: ReturnType<typeof dependency_6.com.keus.gateway.SliderBlindControllerProperties.prototype.toObject>;
                relay_blind_controller_properties?: ReturnType<typeof dependency_5.com.keus.gateway.RelayBlindControllerProperties.prototype.toObject>;
                cvaddr_strip_controller_properties?: ReturnType<typeof dependency_4.com.keus.gateway.CVAddrStripControllerProperties.prototype.toObject>;
            } = {};
            if (this.cv3_strip_controller_properties != null) {
                data.cv3_strip_controller_properties = this.cv3_strip_controller_properties.toObject();
            }
            if (this.cv6_strip_controller_properties != null) {
                data.cv6_strip_controller_properties = this.cv6_strip_controller_properties.toObject();
            }
            if (this.push_trigger_controller_properties != null) {
                data.push_trigger_controller_properties = this.push_trigger_controller_properties.toObject();
            }
            if (this.slider_blind_controller_properties != null) {
                data.slider_blind_controller_properties = this.slider_blind_controller_properties.toObject();
            }
            if (this.relay_blind_controller_properties != null) {
                data.relay_blind_controller_properties = this.relay_blind_controller_properties.toObject();
            }
            if (this.cvaddr_strip_controller_properties != null) {
                data.cvaddr_strip_controller_properties = this.cvaddr_strip_controller_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_cv3_strip_controller_properties)
                writer.writeMessage(101, this.cv3_strip_controller_properties, () => this.cv3_strip_controller_properties.serialize(writer));
            if (this.has_cv6_strip_controller_properties)
                writer.writeMessage(102, this.cv6_strip_controller_properties, () => this.cv6_strip_controller_properties.serialize(writer));
            if (this.has_push_trigger_controller_properties)
                writer.writeMessage(103, this.push_trigger_controller_properties, () => this.push_trigger_controller_properties.serialize(writer));
            if (this.has_slider_blind_controller_properties)
                writer.writeMessage(104, this.slider_blind_controller_properties, () => this.slider_blind_controller_properties.serialize(writer));
            if (this.has_relay_blind_controller_properties)
                writer.writeMessage(105, this.relay_blind_controller_properties, () => this.relay_blind_controller_properties.serialize(writer));
            if (this.has_cvaddr_strip_controller_properties)
                writer.writeMessage(106, this.cvaddr_strip_controller_properties, () => this.cvaddr_strip_controller_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeDeviceProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeDeviceProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 101:
                        reader.readMessage(message.cv3_strip_controller_properties, () => message.cv3_strip_controller_properties = dependency_1.com.keus.gateway.CV3StripControllerProperties.deserialize(reader));
                        break;
                    case 102:
                        reader.readMessage(message.cv6_strip_controller_properties, () => message.cv6_strip_controller_properties = dependency_2.com.keus.gateway.CV6StripControllerProperties.deserialize(reader));
                        break;
                    case 103:
                        reader.readMessage(message.push_trigger_controller_properties, () => message.push_trigger_controller_properties = dependency_3.com.keus.gateway.PushTriggerControllerProperties.deserialize(reader));
                        break;
                    case 104:
                        reader.readMessage(message.slider_blind_controller_properties, () => message.slider_blind_controller_properties = dependency_6.com.keus.gateway.SliderBlindControllerProperties.deserialize(reader));
                        break;
                    case 105:
                        reader.readMessage(message.relay_blind_controller_properties, () => message.relay_blind_controller_properties = dependency_5.com.keus.gateway.RelayBlindControllerProperties.deserialize(reader));
                        break;
                    case 106:
                        reader.readMessage(message.cvaddr_strip_controller_properties, () => message.cvaddr_strip_controller_properties = dependency_4.com.keus.gateway.CVAddrStripControllerProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeDeviceProperties {
            return KeusZigbeeDeviceProperties.deserialize(bytes);
        }
    }
    export class KeusZigbeeDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_type?: string;
            device_category?: string;
            kz_device_properties?: KeusZigbeeDeviceProperties;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("device_category" in data && data.device_category != undefined) {
                    this.device_category = data.device_category;
                }
                if ("kz_device_properties" in data && data.kz_device_properties != undefined) {
                    this.kz_device_properties = data.kz_device_properties;
                }
            }
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_category() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_category(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get kz_device_properties() {
            return pb_1.Message.getWrapperField(this, KeusZigbeeDeviceProperties, 3) as KeusZigbeeDeviceProperties;
        }
        set kz_device_properties(value: KeusZigbeeDeviceProperties) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_kz_device_properties() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            device_type?: string;
            device_category?: string;
            kz_device_properties?: ReturnType<typeof KeusZigbeeDeviceProperties.prototype.toObject>;
        }): KeusZigbeeDeviceInfo {
            const message = new KeusZigbeeDeviceInfo({});
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.device_category != null) {
                message.device_category = data.device_category;
            }
            if (data.kz_device_properties != null) {
                message.kz_device_properties = KeusZigbeeDeviceProperties.fromObject(data.kz_device_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                device_type?: string;
                device_category?: string;
                kz_device_properties?: ReturnType<typeof KeusZigbeeDeviceProperties.prototype.toObject>;
            } = {};
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.device_category != null) {
                data.device_category = this.device_category;
            }
            if (this.kz_device_properties != null) {
                data.kz_device_properties = this.kz_device_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_type.length)
                writer.writeString(1, this.device_type);
            if (this.device_category.length)
                writer.writeString(2, this.device_category);
            if (this.has_kz_device_properties)
                writer.writeMessage(3, this.kz_device_properties, () => this.kz_device_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_type = reader.readString();
                        break;
                    case 2:
                        message.device_category = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.kz_device_properties, () => message.kz_device_properties = KeusZigbeeDeviceProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeDeviceInfo {
            return KeusZigbeeDeviceInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeeDeviceState extends pb_1.Message {
        #one_of_decls: number[][] = [[101, 102, 103, 104, 105, 106]];
        constructor(data?: any[] | ({} & (({
            cv3_strip_controller_state?: dependency_1.com.keus.gateway.CV3StripState;
            cv6_strip_controller_state?: never;
            push_trigger_controller_state?: never;
            slider_blind_controller_state?: never;
            relay_blind_controller_state?: never;
            cvaddr_strip_controller_state?: never;
        } | {
            cv3_strip_controller_state?: never;
            cv6_strip_controller_state?: dependency_2.com.keus.gateway.CV6StripState;
            push_trigger_controller_state?: never;
            slider_blind_controller_state?: never;
            relay_blind_controller_state?: never;
            cvaddr_strip_controller_state?: never;
        } | {
            cv3_strip_controller_state?: never;
            cv6_strip_controller_state?: never;
            push_trigger_controller_state?: dependency_3.com.keus.gateway.PushTriggerControllerState;
            slider_blind_controller_state?: never;
            relay_blind_controller_state?: never;
            cvaddr_strip_controller_state?: never;
        } | {
            cv3_strip_controller_state?: never;
            cv6_strip_controller_state?: never;
            push_trigger_controller_state?: never;
            slider_blind_controller_state?: dependency_6.com.keus.gateway.SliderBlindControllerState;
            relay_blind_controller_state?: never;
            cvaddr_strip_controller_state?: never;
        } | {
            cv3_strip_controller_state?: never;
            cv6_strip_controller_state?: never;
            push_trigger_controller_state?: never;
            slider_blind_controller_state?: never;
            relay_blind_controller_state?: dependency_5.com.keus.gateway.RelayBlindControllerState;
            cvaddr_strip_controller_state?: never;
        } | {
            cv3_strip_controller_state?: never;
            cv6_strip_controller_state?: never;
            push_trigger_controller_state?: never;
            slider_blind_controller_state?: never;
            relay_blind_controller_state?: never;
            cvaddr_strip_controller_state?: dependency_4.com.keus.gateway.CVAddrStripState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cv3_strip_controller_state" in data && data.cv3_strip_controller_state != undefined) {
                    this.cv3_strip_controller_state = data.cv3_strip_controller_state;
                }
                if ("cv6_strip_controller_state" in data && data.cv6_strip_controller_state != undefined) {
                    this.cv6_strip_controller_state = data.cv6_strip_controller_state;
                }
                if ("push_trigger_controller_state" in data && data.push_trigger_controller_state != undefined) {
                    this.push_trigger_controller_state = data.push_trigger_controller_state;
                }
                if ("slider_blind_controller_state" in data && data.slider_blind_controller_state != undefined) {
                    this.slider_blind_controller_state = data.slider_blind_controller_state;
                }
                if ("relay_blind_controller_state" in data && data.relay_blind_controller_state != undefined) {
                    this.relay_blind_controller_state = data.relay_blind_controller_state;
                }
                if ("cvaddr_strip_controller_state" in data && data.cvaddr_strip_controller_state != undefined) {
                    this.cvaddr_strip_controller_state = data.cvaddr_strip_controller_state;
                }
            }
        }
        get cv3_strip_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_1.com.keus.gateway.CV3StripState, 101) as dependency_1.com.keus.gateway.CV3StripState;
        }
        set cv3_strip_controller_state(value: dependency_1.com.keus.gateway.CV3StripState) {
            pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
        }
        get has_cv3_strip_controller_state() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get cv6_strip_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_2.com.keus.gateway.CV6StripState, 102) as dependency_2.com.keus.gateway.CV6StripState;
        }
        set cv6_strip_controller_state(value: dependency_2.com.keus.gateway.CV6StripState) {
            pb_1.Message.setOneofWrapperField(this, 102, this.#one_of_decls[0], value);
        }
        get has_cv6_strip_controller_state() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get push_trigger_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_3.com.keus.gateway.PushTriggerControllerState, 103) as dependency_3.com.keus.gateway.PushTriggerControllerState;
        }
        set push_trigger_controller_state(value: dependency_3.com.keus.gateway.PushTriggerControllerState) {
            pb_1.Message.setOneofWrapperField(this, 103, this.#one_of_decls[0], value);
        }
        get has_push_trigger_controller_state() {
            return pb_1.Message.getField(this, 103) != null;
        }
        get slider_blind_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_6.com.keus.gateway.SliderBlindControllerState, 104) as dependency_6.com.keus.gateway.SliderBlindControllerState;
        }
        set slider_blind_controller_state(value: dependency_6.com.keus.gateway.SliderBlindControllerState) {
            pb_1.Message.setOneofWrapperField(this, 104, this.#one_of_decls[0], value);
        }
        get has_slider_blind_controller_state() {
            return pb_1.Message.getField(this, 104) != null;
        }
        get relay_blind_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_5.com.keus.gateway.RelayBlindControllerState, 105) as dependency_5.com.keus.gateway.RelayBlindControllerState;
        }
        set relay_blind_controller_state(value: dependency_5.com.keus.gateway.RelayBlindControllerState) {
            pb_1.Message.setOneofWrapperField(this, 105, this.#one_of_decls[0], value);
        }
        get has_relay_blind_controller_state() {
            return pb_1.Message.getField(this, 105) != null;
        }
        get cvaddr_strip_controller_state() {
            return pb_1.Message.getWrapperField(this, dependency_4.com.keus.gateway.CVAddrStripState, 106) as dependency_4.com.keus.gateway.CVAddrStripState;
        }
        set cvaddr_strip_controller_state(value: dependency_4.com.keus.gateway.CVAddrStripState) {
            pb_1.Message.setOneofWrapperField(this, 106, this.#one_of_decls[0], value);
        }
        get has_cvaddr_strip_controller_state() {
            return pb_1.Message.getField(this, 106) != null;
        }
        get device_state() {
            const cases: {
                [index: number]: "none" | "cv3_strip_controller_state" | "cv6_strip_controller_state" | "push_trigger_controller_state" | "slider_blind_controller_state" | "relay_blind_controller_state" | "cvaddr_strip_controller_state";
            } = {
                0: "none",
                101: "cv3_strip_controller_state",
                102: "cv6_strip_controller_state",
                103: "push_trigger_controller_state",
                104: "slider_blind_controller_state",
                105: "relay_blind_controller_state",
                106: "cvaddr_strip_controller_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101, 102, 103, 104, 105, 106])];
        }
        static fromObject(data: {
            cv3_strip_controller_state?: ReturnType<typeof dependency_1.com.keus.gateway.CV3StripState.prototype.toObject>;
            cv6_strip_controller_state?: ReturnType<typeof dependency_2.com.keus.gateway.CV6StripState.prototype.toObject>;
            push_trigger_controller_state?: ReturnType<typeof dependency_3.com.keus.gateway.PushTriggerControllerState.prototype.toObject>;
            slider_blind_controller_state?: ReturnType<typeof dependency_6.com.keus.gateway.SliderBlindControllerState.prototype.toObject>;
            relay_blind_controller_state?: ReturnType<typeof dependency_5.com.keus.gateway.RelayBlindControllerState.prototype.toObject>;
            cvaddr_strip_controller_state?: ReturnType<typeof dependency_4.com.keus.gateway.CVAddrStripState.prototype.toObject>;
        }): KeusZigbeeDeviceState {
            const message = new KeusZigbeeDeviceState({});
            if (data.cv3_strip_controller_state != null) {
                message.cv3_strip_controller_state = dependency_1.com.keus.gateway.CV3StripState.fromObject(data.cv3_strip_controller_state);
            }
            if (data.cv6_strip_controller_state != null) {
                message.cv6_strip_controller_state = dependency_2.com.keus.gateway.CV6StripState.fromObject(data.cv6_strip_controller_state);
            }
            if (data.push_trigger_controller_state != null) {
                message.push_trigger_controller_state = dependency_3.com.keus.gateway.PushTriggerControllerState.fromObject(data.push_trigger_controller_state);
            }
            if (data.slider_blind_controller_state != null) {
                message.slider_blind_controller_state = dependency_6.com.keus.gateway.SliderBlindControllerState.fromObject(data.slider_blind_controller_state);
            }
            if (data.relay_blind_controller_state != null) {
                message.relay_blind_controller_state = dependency_5.com.keus.gateway.RelayBlindControllerState.fromObject(data.relay_blind_controller_state);
            }
            if (data.cvaddr_strip_controller_state != null) {
                message.cvaddr_strip_controller_state = dependency_4.com.keus.gateway.CVAddrStripState.fromObject(data.cvaddr_strip_controller_state);
            }
            return message;
        }
        toObject() {
            const data: {
                cv3_strip_controller_state?: ReturnType<typeof dependency_1.com.keus.gateway.CV3StripState.prototype.toObject>;
                cv6_strip_controller_state?: ReturnType<typeof dependency_2.com.keus.gateway.CV6StripState.prototype.toObject>;
                push_trigger_controller_state?: ReturnType<typeof dependency_3.com.keus.gateway.PushTriggerControllerState.prototype.toObject>;
                slider_blind_controller_state?: ReturnType<typeof dependency_6.com.keus.gateway.SliderBlindControllerState.prototype.toObject>;
                relay_blind_controller_state?: ReturnType<typeof dependency_5.com.keus.gateway.RelayBlindControllerState.prototype.toObject>;
                cvaddr_strip_controller_state?: ReturnType<typeof dependency_4.com.keus.gateway.CVAddrStripState.prototype.toObject>;
            } = {};
            if (this.cv3_strip_controller_state != null) {
                data.cv3_strip_controller_state = this.cv3_strip_controller_state.toObject();
            }
            if (this.cv6_strip_controller_state != null) {
                data.cv6_strip_controller_state = this.cv6_strip_controller_state.toObject();
            }
            if (this.push_trigger_controller_state != null) {
                data.push_trigger_controller_state = this.push_trigger_controller_state.toObject();
            }
            if (this.slider_blind_controller_state != null) {
                data.slider_blind_controller_state = this.slider_blind_controller_state.toObject();
            }
            if (this.relay_blind_controller_state != null) {
                data.relay_blind_controller_state = this.relay_blind_controller_state.toObject();
            }
            if (this.cvaddr_strip_controller_state != null) {
                data.cvaddr_strip_controller_state = this.cvaddr_strip_controller_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_cv3_strip_controller_state)
                writer.writeMessage(101, this.cv3_strip_controller_state, () => this.cv3_strip_controller_state.serialize(writer));
            if (this.has_cv6_strip_controller_state)
                writer.writeMessage(102, this.cv6_strip_controller_state, () => this.cv6_strip_controller_state.serialize(writer));
            if (this.has_push_trigger_controller_state)
                writer.writeMessage(103, this.push_trigger_controller_state, () => this.push_trigger_controller_state.serialize(writer));
            if (this.has_slider_blind_controller_state)
                writer.writeMessage(104, this.slider_blind_controller_state, () => this.slider_blind_controller_state.serialize(writer));
            if (this.has_relay_blind_controller_state)
                writer.writeMessage(105, this.relay_blind_controller_state, () => this.relay_blind_controller_state.serialize(writer));
            if (this.has_cvaddr_strip_controller_state)
                writer.writeMessage(106, this.cvaddr_strip_controller_state, () => this.cvaddr_strip_controller_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeDeviceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeDeviceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 101:
                        reader.readMessage(message.cv3_strip_controller_state, () => message.cv3_strip_controller_state = dependency_1.com.keus.gateway.CV3StripState.deserialize(reader));
                        break;
                    case 102:
                        reader.readMessage(message.cv6_strip_controller_state, () => message.cv6_strip_controller_state = dependency_2.com.keus.gateway.CV6StripState.deserialize(reader));
                        break;
                    case 103:
                        reader.readMessage(message.push_trigger_controller_state, () => message.push_trigger_controller_state = dependency_3.com.keus.gateway.PushTriggerControllerState.deserialize(reader));
                        break;
                    case 104:
                        reader.readMessage(message.slider_blind_controller_state, () => message.slider_blind_controller_state = dependency_6.com.keus.gateway.SliderBlindControllerState.deserialize(reader));
                        break;
                    case 105:
                        reader.readMessage(message.relay_blind_controller_state, () => message.relay_blind_controller_state = dependency_5.com.keus.gateway.RelayBlindControllerState.deserialize(reader));
                        break;
                    case 106:
                        reader.readMessage(message.cvaddr_strip_controller_state, () => message.cvaddr_strip_controller_state = dependency_4.com.keus.gateway.CVAddrStripState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeDeviceState {
            return KeusZigbeeDeviceState.deserialize(bytes);
        }
    }
    export class KeusZigbeeDeviceStateInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_type?: string;
            kz_device_state?: KeusZigbeeDeviceState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("kz_device_state" in data && data.kz_device_state != undefined) {
                    this.kz_device_state = data.kz_device_state;
                }
            }
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get kz_device_state() {
            return pb_1.Message.getWrapperField(this, KeusZigbeeDeviceState, 2) as KeusZigbeeDeviceState;
        }
        set kz_device_state(value: KeusZigbeeDeviceState) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_kz_device_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            device_type?: string;
            kz_device_state?: ReturnType<typeof KeusZigbeeDeviceState.prototype.toObject>;
        }): KeusZigbeeDeviceStateInfo {
            const message = new KeusZigbeeDeviceStateInfo({});
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.kz_device_state != null) {
                message.kz_device_state = KeusZigbeeDeviceState.fromObject(data.kz_device_state);
            }
            return message;
        }
        toObject() {
            const data: {
                device_type?: string;
                kz_device_state?: ReturnType<typeof KeusZigbeeDeviceState.prototype.toObject>;
            } = {};
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.kz_device_state != null) {
                data.kz_device_state = this.kz_device_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_type.length)
                writer.writeString(1, this.device_type);
            if (this.has_kz_device_state)
                writer.writeMessage(2, this.kz_device_state, () => this.kz_device_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeDeviceStateInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeDeviceStateInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.kz_device_state, () => message.kz_device_state = KeusZigbeeDeviceState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeDeviceStateInfo {
            return KeusZigbeeDeviceStateInfo.deserialize(bytes);
        }
    }
}
