/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/protocols/keus-zigbee/appliance/keuszigbee_appliance.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class KeusZigbeeSwitchApplianceDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            switch_port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("switch_port_id" in data && data.switch_port_id != undefined) {
                    this.switch_port_id = data.switch_port_id;
                }
            }
        }
        get switch_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set switch_port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            switch_port_id?: number;
        }): KeusZigbeeSwitchApplianceDeviceInfo {
            const message = new KeusZigbeeSwitchApplianceDeviceInfo({});
            if (data.switch_port_id != null) {
                message.switch_port_id = data.switch_port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                switch_port_id?: number;
            } = {};
            if (this.switch_port_id != null) {
                data.switch_port_id = this.switch_port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.switch_port_id != 0)
                writer.writeInt32(1, this.switch_port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeSwitchApplianceDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeSwitchApplianceDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.switch_port_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeSwitchApplianceDeviceInfo {
            return KeusZigbeeSwitchApplianceDeviceInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeeDimmerApplianceDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dimmer_port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dimmer_port_id" in data && data.dimmer_port_id != undefined) {
                    this.dimmer_port_id = data.dimmer_port_id;
                }
            }
        }
        get dimmer_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set dimmer_port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            dimmer_port_id?: number;
        }): KeusZigbeeDimmerApplianceDeviceInfo {
            const message = new KeusZigbeeDimmerApplianceDeviceInfo({});
            if (data.dimmer_port_id != null) {
                message.dimmer_port_id = data.dimmer_port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                dimmer_port_id?: number;
            } = {};
            if (this.dimmer_port_id != null) {
                data.dimmer_port_id = this.dimmer_port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dimmer_port_id != 0)
                writer.writeInt32(1, this.dimmer_port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeDimmerApplianceDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeDimmerApplianceDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dimmer_port_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeDimmerApplianceDeviceInfo {
            return KeusZigbeeDimmerApplianceDeviceInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeeRGBColorApplianceDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            red_port_id?: number;
            green_port_id?: number;
            blue_port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("red_port_id" in data && data.red_port_id != undefined) {
                    this.red_port_id = data.red_port_id;
                }
                if ("green_port_id" in data && data.green_port_id != undefined) {
                    this.green_port_id = data.green_port_id;
                }
                if ("blue_port_id" in data && data.blue_port_id != undefined) {
                    this.blue_port_id = data.blue_port_id;
                }
            }
        }
        get red_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set red_port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get green_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set green_port_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get blue_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set blue_port_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            red_port_id?: number;
            green_port_id?: number;
            blue_port_id?: number;
        }): KeusZigbeeRGBColorApplianceDeviceInfo {
            const message = new KeusZigbeeRGBColorApplianceDeviceInfo({});
            if (data.red_port_id != null) {
                message.red_port_id = data.red_port_id;
            }
            if (data.green_port_id != null) {
                message.green_port_id = data.green_port_id;
            }
            if (data.blue_port_id != null) {
                message.blue_port_id = data.blue_port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                red_port_id?: number;
                green_port_id?: number;
                blue_port_id?: number;
            } = {};
            if (this.red_port_id != null) {
                data.red_port_id = this.red_port_id;
            }
            if (this.green_port_id != null) {
                data.green_port_id = this.green_port_id;
            }
            if (this.blue_port_id != null) {
                data.blue_port_id = this.blue_port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.red_port_id != 0)
                writer.writeInt32(1, this.red_port_id);
            if (this.green_port_id != 0)
                writer.writeInt32(2, this.green_port_id);
            if (this.blue_port_id != 0)
                writer.writeInt32(3, this.blue_port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeRGBColorApplianceDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeRGBColorApplianceDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.red_port_id = reader.readInt32();
                        break;
                    case 2:
                        message.green_port_id = reader.readInt32();
                        break;
                    case 3:
                        message.blue_port_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeRGBColorApplianceDeviceInfo {
            return KeusZigbeeRGBColorApplianceDeviceInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeeWWMixerApplianceDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            warm_white_port_id?: number;
            cool_white_port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("warm_white_port_id" in data && data.warm_white_port_id != undefined) {
                    this.warm_white_port_id = data.warm_white_port_id;
                }
                if ("cool_white_port_id" in data && data.cool_white_port_id != undefined) {
                    this.cool_white_port_id = data.cool_white_port_id;
                }
            }
        }
        get warm_white_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set warm_white_port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cool_white_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cool_white_port_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            warm_white_port_id?: number;
            cool_white_port_id?: number;
        }): KeusZigbeeWWMixerApplianceDeviceInfo {
            const message = new KeusZigbeeWWMixerApplianceDeviceInfo({});
            if (data.warm_white_port_id != null) {
                message.warm_white_port_id = data.warm_white_port_id;
            }
            if (data.cool_white_port_id != null) {
                message.cool_white_port_id = data.cool_white_port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                warm_white_port_id?: number;
                cool_white_port_id?: number;
            } = {};
            if (this.warm_white_port_id != null) {
                data.warm_white_port_id = this.warm_white_port_id;
            }
            if (this.cool_white_port_id != null) {
                data.cool_white_port_id = this.cool_white_port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.warm_white_port_id != 0)
                writer.writeInt32(1, this.warm_white_port_id);
            if (this.cool_white_port_id != 0)
                writer.writeInt32(2, this.cool_white_port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeWWMixerApplianceDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeWWMixerApplianceDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.warm_white_port_id = reader.readInt32();
                        break;
                    case 2:
                        message.cool_white_port_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeWWMixerApplianceDeviceInfo {
            return KeusZigbeeWWMixerApplianceDeviceInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeePushTriggerApplianceDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            push_trigger_port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("push_trigger_port_id" in data && data.push_trigger_port_id != undefined) {
                    this.push_trigger_port_id = data.push_trigger_port_id;
                }
            }
        }
        get push_trigger_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set push_trigger_port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            push_trigger_port_id?: number;
        }): KeusZigbeePushTriggerApplianceDeviceInfo {
            const message = new KeusZigbeePushTriggerApplianceDeviceInfo({});
            if (data.push_trigger_port_id != null) {
                message.push_trigger_port_id = data.push_trigger_port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                push_trigger_port_id?: number;
            } = {};
            if (this.push_trigger_port_id != null) {
                data.push_trigger_port_id = this.push_trigger_port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.push_trigger_port_id != 0)
                writer.writeInt32(1, this.push_trigger_port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeePushTriggerApplianceDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeePushTriggerApplianceDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.push_trigger_port_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeePushTriggerApplianceDeviceInfo {
            return KeusZigbeePushTriggerApplianceDeviceInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeeRGBAddrApplianceDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rgbaddr_port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rgbaddr_port_id" in data && data.rgbaddr_port_id != undefined) {
                    this.rgbaddr_port_id = data.rgbaddr_port_id;
                }
            }
        }
        get rgbaddr_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set rgbaddr_port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            rgbaddr_port_id?: number;
        }): KeusZigbeeRGBAddrApplianceDeviceInfo {
            const message = new KeusZigbeeRGBAddrApplianceDeviceInfo({});
            if (data.rgbaddr_port_id != null) {
                message.rgbaddr_port_id = data.rgbaddr_port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                rgbaddr_port_id?: number;
            } = {};
            if (this.rgbaddr_port_id != null) {
                data.rgbaddr_port_id = this.rgbaddr_port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rgbaddr_port_id != 0)
                writer.writeInt32(1, this.rgbaddr_port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeRGBAddrApplianceDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeRGBAddrApplianceDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rgbaddr_port_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeRGBAddrApplianceDeviceInfo {
            return KeusZigbeeRGBAddrApplianceDeviceInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeeBlindApplianceDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blind_port_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blind_port_id" in data && data.blind_port_id != undefined) {
                    this.blind_port_id = data.blind_port_id;
                }
            }
        }
        get blind_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set blind_port_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            blind_port_id?: number;
        }): KeusZigbeeBlindApplianceDeviceInfo {
            const message = new KeusZigbeeBlindApplianceDeviceInfo({});
            if (data.blind_port_id != null) {
                message.blind_port_id = data.blind_port_id;
            }
            return message;
        }
        toObject() {
            const data: {
                blind_port_id?: number;
            } = {};
            if (this.blind_port_id != null) {
                data.blind_port_id = this.blind_port_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blind_port_id != 0)
                writer.writeInt32(1, this.blind_port_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeBlindApplianceDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeBlindApplianceDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.blind_port_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeBlindApplianceDeviceInfo {
            return KeusZigbeeBlindApplianceDeviceInfo.deserialize(bytes);
        }
    }
    export class KeusZigbeeApplianceControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[301, 302, 303, 304, 305, 307, 306]];
        constructor(data?: any[] | ({
            kz_appliance_id?: number;
            kz_appliance_section_id?: number;
            device_id?: string;
        } & (({
            switch_appliance_device_info?: KeusZigbeeSwitchApplianceDeviceInfo;
            dimmer_appliance_device_info?: never;
            rgbcolor_appliance_device_info?: never;
            wwmixer_appliance_device_info?: never;
            push_trigger_appliance_device_info?: never;
            rgbaddr_appliance_device_info?: never;
            blind_appliance_device_info?: never;
        } | {
            switch_appliance_device_info?: never;
            dimmer_appliance_device_info?: KeusZigbeeDimmerApplianceDeviceInfo;
            rgbcolor_appliance_device_info?: never;
            wwmixer_appliance_device_info?: never;
            push_trigger_appliance_device_info?: never;
            rgbaddr_appliance_device_info?: never;
            blind_appliance_device_info?: never;
        } | {
            switch_appliance_device_info?: never;
            dimmer_appliance_device_info?: never;
            rgbcolor_appliance_device_info?: KeusZigbeeRGBColorApplianceDeviceInfo;
            wwmixer_appliance_device_info?: never;
            push_trigger_appliance_device_info?: never;
            rgbaddr_appliance_device_info?: never;
            blind_appliance_device_info?: never;
        } | {
            switch_appliance_device_info?: never;
            dimmer_appliance_device_info?: never;
            rgbcolor_appliance_device_info?: never;
            wwmixer_appliance_device_info?: KeusZigbeeWWMixerApplianceDeviceInfo;
            push_trigger_appliance_device_info?: never;
            rgbaddr_appliance_device_info?: never;
            blind_appliance_device_info?: never;
        } | {
            switch_appliance_device_info?: never;
            dimmer_appliance_device_info?: never;
            rgbcolor_appliance_device_info?: never;
            wwmixer_appliance_device_info?: never;
            push_trigger_appliance_device_info?: KeusZigbeePushTriggerApplianceDeviceInfo;
            rgbaddr_appliance_device_info?: never;
            blind_appliance_device_info?: never;
        } | {
            switch_appliance_device_info?: never;
            dimmer_appliance_device_info?: never;
            rgbcolor_appliance_device_info?: never;
            wwmixer_appliance_device_info?: never;
            push_trigger_appliance_device_info?: never;
            rgbaddr_appliance_device_info?: KeusZigbeeRGBAddrApplianceDeviceInfo;
            blind_appliance_device_info?: never;
        } | {
            switch_appliance_device_info?: never;
            dimmer_appliance_device_info?: never;
            rgbcolor_appliance_device_info?: never;
            wwmixer_appliance_device_info?: never;
            push_trigger_appliance_device_info?: never;
            rgbaddr_appliance_device_info?: never;
            blind_appliance_device_info?: KeusZigbeeBlindApplianceDeviceInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kz_appliance_id" in data && data.kz_appliance_id != undefined) {
                    this.kz_appliance_id = data.kz_appliance_id;
                }
                if ("kz_appliance_section_id" in data && data.kz_appliance_section_id != undefined) {
                    this.kz_appliance_section_id = data.kz_appliance_section_id;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("switch_appliance_device_info" in data && data.switch_appliance_device_info != undefined) {
                    this.switch_appliance_device_info = data.switch_appliance_device_info;
                }
                if ("dimmer_appliance_device_info" in data && data.dimmer_appliance_device_info != undefined) {
                    this.dimmer_appliance_device_info = data.dimmer_appliance_device_info;
                }
                if ("rgbcolor_appliance_device_info" in data && data.rgbcolor_appliance_device_info != undefined) {
                    this.rgbcolor_appliance_device_info = data.rgbcolor_appliance_device_info;
                }
                if ("wwmixer_appliance_device_info" in data && data.wwmixer_appliance_device_info != undefined) {
                    this.wwmixer_appliance_device_info = data.wwmixer_appliance_device_info;
                }
                if ("push_trigger_appliance_device_info" in data && data.push_trigger_appliance_device_info != undefined) {
                    this.push_trigger_appliance_device_info = data.push_trigger_appliance_device_info;
                }
                if ("rgbaddr_appliance_device_info" in data && data.rgbaddr_appliance_device_info != undefined) {
                    this.rgbaddr_appliance_device_info = data.rgbaddr_appliance_device_info;
                }
                if ("blind_appliance_device_info" in data && data.blind_appliance_device_info != undefined) {
                    this.blind_appliance_device_info = data.blind_appliance_device_info;
                }
            }
        }
        get kz_appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set kz_appliance_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get kz_appliance_section_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set kz_appliance_section_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get switch_appliance_device_info() {
            return pb_1.Message.getWrapperField(this, KeusZigbeeSwitchApplianceDeviceInfo, 301) as KeusZigbeeSwitchApplianceDeviceInfo;
        }
        set switch_appliance_device_info(value: KeusZigbeeSwitchApplianceDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 301, this.#one_of_decls[0], value);
        }
        get has_switch_appliance_device_info() {
            return pb_1.Message.getField(this, 301) != null;
        }
        get dimmer_appliance_device_info() {
            return pb_1.Message.getWrapperField(this, KeusZigbeeDimmerApplianceDeviceInfo, 302) as KeusZigbeeDimmerApplianceDeviceInfo;
        }
        set dimmer_appliance_device_info(value: KeusZigbeeDimmerApplianceDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 302, this.#one_of_decls[0], value);
        }
        get has_dimmer_appliance_device_info() {
            return pb_1.Message.getField(this, 302) != null;
        }
        get rgbcolor_appliance_device_info() {
            return pb_1.Message.getWrapperField(this, KeusZigbeeRGBColorApplianceDeviceInfo, 303) as KeusZigbeeRGBColorApplianceDeviceInfo;
        }
        set rgbcolor_appliance_device_info(value: KeusZigbeeRGBColorApplianceDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 303, this.#one_of_decls[0], value);
        }
        get has_rgbcolor_appliance_device_info() {
            return pb_1.Message.getField(this, 303) != null;
        }
        get wwmixer_appliance_device_info() {
            return pb_1.Message.getWrapperField(this, KeusZigbeeWWMixerApplianceDeviceInfo, 304) as KeusZigbeeWWMixerApplianceDeviceInfo;
        }
        set wwmixer_appliance_device_info(value: KeusZigbeeWWMixerApplianceDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 304, this.#one_of_decls[0], value);
        }
        get has_wwmixer_appliance_device_info() {
            return pb_1.Message.getField(this, 304) != null;
        }
        get push_trigger_appliance_device_info() {
            return pb_1.Message.getWrapperField(this, KeusZigbeePushTriggerApplianceDeviceInfo, 305) as KeusZigbeePushTriggerApplianceDeviceInfo;
        }
        set push_trigger_appliance_device_info(value: KeusZigbeePushTriggerApplianceDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 305, this.#one_of_decls[0], value);
        }
        get has_push_trigger_appliance_device_info() {
            return pb_1.Message.getField(this, 305) != null;
        }
        get rgbaddr_appliance_device_info() {
            return pb_1.Message.getWrapperField(this, KeusZigbeeRGBAddrApplianceDeviceInfo, 307) as KeusZigbeeRGBAddrApplianceDeviceInfo;
        }
        set rgbaddr_appliance_device_info(value: KeusZigbeeRGBAddrApplianceDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 307, this.#one_of_decls[0], value);
        }
        get has_rgbaddr_appliance_device_info() {
            return pb_1.Message.getField(this, 307) != null;
        }
        get blind_appliance_device_info() {
            return pb_1.Message.getWrapperField(this, KeusZigbeeBlindApplianceDeviceInfo, 306) as KeusZigbeeBlindApplianceDeviceInfo;
        }
        set blind_appliance_device_info(value: KeusZigbeeBlindApplianceDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 306, this.#one_of_decls[0], value);
        }
        get has_blind_appliance_device_info() {
            return pb_1.Message.getField(this, 306) != null;
        }
        get appliance_type_control_info() {
            const cases: {
                [index: number]: "none" | "switch_appliance_device_info" | "dimmer_appliance_device_info" | "rgbcolor_appliance_device_info" | "wwmixer_appliance_device_info" | "push_trigger_appliance_device_info" | "rgbaddr_appliance_device_info" | "blind_appliance_device_info";
            } = {
                0: "none",
                301: "switch_appliance_device_info",
                302: "dimmer_appliance_device_info",
                303: "rgbcolor_appliance_device_info",
                304: "wwmixer_appliance_device_info",
                305: "push_trigger_appliance_device_info",
                307: "rgbaddr_appliance_device_info",
                306: "blind_appliance_device_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [301, 302, 303, 304, 305, 307, 306])];
        }
        static fromObject(data: {
            kz_appliance_id?: number;
            kz_appliance_section_id?: number;
            device_id?: string;
            switch_appliance_device_info?: ReturnType<typeof KeusZigbeeSwitchApplianceDeviceInfo.prototype.toObject>;
            dimmer_appliance_device_info?: ReturnType<typeof KeusZigbeeDimmerApplianceDeviceInfo.prototype.toObject>;
            rgbcolor_appliance_device_info?: ReturnType<typeof KeusZigbeeRGBColorApplianceDeviceInfo.prototype.toObject>;
            wwmixer_appliance_device_info?: ReturnType<typeof KeusZigbeeWWMixerApplianceDeviceInfo.prototype.toObject>;
            push_trigger_appliance_device_info?: ReturnType<typeof KeusZigbeePushTriggerApplianceDeviceInfo.prototype.toObject>;
            rgbaddr_appliance_device_info?: ReturnType<typeof KeusZigbeeRGBAddrApplianceDeviceInfo.prototype.toObject>;
            blind_appliance_device_info?: ReturnType<typeof KeusZigbeeBlindApplianceDeviceInfo.prototype.toObject>;
        }): KeusZigbeeApplianceControlInfo {
            const message = new KeusZigbeeApplianceControlInfo({});
            if (data.kz_appliance_id != null) {
                message.kz_appliance_id = data.kz_appliance_id;
            }
            if (data.kz_appliance_section_id != null) {
                message.kz_appliance_section_id = data.kz_appliance_section_id;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.switch_appliance_device_info != null) {
                message.switch_appliance_device_info = KeusZigbeeSwitchApplianceDeviceInfo.fromObject(data.switch_appliance_device_info);
            }
            if (data.dimmer_appliance_device_info != null) {
                message.dimmer_appliance_device_info = KeusZigbeeDimmerApplianceDeviceInfo.fromObject(data.dimmer_appliance_device_info);
            }
            if (data.rgbcolor_appliance_device_info != null) {
                message.rgbcolor_appliance_device_info = KeusZigbeeRGBColorApplianceDeviceInfo.fromObject(data.rgbcolor_appliance_device_info);
            }
            if (data.wwmixer_appliance_device_info != null) {
                message.wwmixer_appliance_device_info = KeusZigbeeWWMixerApplianceDeviceInfo.fromObject(data.wwmixer_appliance_device_info);
            }
            if (data.push_trigger_appliance_device_info != null) {
                message.push_trigger_appliance_device_info = KeusZigbeePushTriggerApplianceDeviceInfo.fromObject(data.push_trigger_appliance_device_info);
            }
            if (data.rgbaddr_appliance_device_info != null) {
                message.rgbaddr_appliance_device_info = KeusZigbeeRGBAddrApplianceDeviceInfo.fromObject(data.rgbaddr_appliance_device_info);
            }
            if (data.blind_appliance_device_info != null) {
                message.blind_appliance_device_info = KeusZigbeeBlindApplianceDeviceInfo.fromObject(data.blind_appliance_device_info);
            }
            return message;
        }
        toObject() {
            const data: {
                kz_appliance_id?: number;
                kz_appliance_section_id?: number;
                device_id?: string;
                switch_appliance_device_info?: ReturnType<typeof KeusZigbeeSwitchApplianceDeviceInfo.prototype.toObject>;
                dimmer_appliance_device_info?: ReturnType<typeof KeusZigbeeDimmerApplianceDeviceInfo.prototype.toObject>;
                rgbcolor_appliance_device_info?: ReturnType<typeof KeusZigbeeRGBColorApplianceDeviceInfo.prototype.toObject>;
                wwmixer_appliance_device_info?: ReturnType<typeof KeusZigbeeWWMixerApplianceDeviceInfo.prototype.toObject>;
                push_trigger_appliance_device_info?: ReturnType<typeof KeusZigbeePushTriggerApplianceDeviceInfo.prototype.toObject>;
                rgbaddr_appliance_device_info?: ReturnType<typeof KeusZigbeeRGBAddrApplianceDeviceInfo.prototype.toObject>;
                blind_appliance_device_info?: ReturnType<typeof KeusZigbeeBlindApplianceDeviceInfo.prototype.toObject>;
            } = {};
            if (this.kz_appliance_id != null) {
                data.kz_appliance_id = this.kz_appliance_id;
            }
            if (this.kz_appliance_section_id != null) {
                data.kz_appliance_section_id = this.kz_appliance_section_id;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.switch_appliance_device_info != null) {
                data.switch_appliance_device_info = this.switch_appliance_device_info.toObject();
            }
            if (this.dimmer_appliance_device_info != null) {
                data.dimmer_appliance_device_info = this.dimmer_appliance_device_info.toObject();
            }
            if (this.rgbcolor_appliance_device_info != null) {
                data.rgbcolor_appliance_device_info = this.rgbcolor_appliance_device_info.toObject();
            }
            if (this.wwmixer_appliance_device_info != null) {
                data.wwmixer_appliance_device_info = this.wwmixer_appliance_device_info.toObject();
            }
            if (this.push_trigger_appliance_device_info != null) {
                data.push_trigger_appliance_device_info = this.push_trigger_appliance_device_info.toObject();
            }
            if (this.rgbaddr_appliance_device_info != null) {
                data.rgbaddr_appliance_device_info = this.rgbaddr_appliance_device_info.toObject();
            }
            if (this.blind_appliance_device_info != null) {
                data.blind_appliance_device_info = this.blind_appliance_device_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kz_appliance_id != 0)
                writer.writeInt32(1, this.kz_appliance_id);
            if (this.kz_appliance_section_id != 0)
                writer.writeInt32(2, this.kz_appliance_section_id);
            if (this.device_id.length)
                writer.writeString(3, this.device_id);
            if (this.has_switch_appliance_device_info)
                writer.writeMessage(301, this.switch_appliance_device_info, () => this.switch_appliance_device_info.serialize(writer));
            if (this.has_dimmer_appliance_device_info)
                writer.writeMessage(302, this.dimmer_appliance_device_info, () => this.dimmer_appliance_device_info.serialize(writer));
            if (this.has_rgbcolor_appliance_device_info)
                writer.writeMessage(303, this.rgbcolor_appliance_device_info, () => this.rgbcolor_appliance_device_info.serialize(writer));
            if (this.has_wwmixer_appliance_device_info)
                writer.writeMessage(304, this.wwmixer_appliance_device_info, () => this.wwmixer_appliance_device_info.serialize(writer));
            if (this.has_push_trigger_appliance_device_info)
                writer.writeMessage(305, this.push_trigger_appliance_device_info, () => this.push_trigger_appliance_device_info.serialize(writer));
            if (this.has_rgbaddr_appliance_device_info)
                writer.writeMessage(307, this.rgbaddr_appliance_device_info, () => this.rgbaddr_appliance_device_info.serialize(writer));
            if (this.has_blind_appliance_device_info)
                writer.writeMessage(306, this.blind_appliance_device_info, () => this.blind_appliance_device_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeusZigbeeApplianceControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeusZigbeeApplianceControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kz_appliance_id = reader.readInt32();
                        break;
                    case 2:
                        message.kz_appliance_section_id = reader.readInt32();
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 301:
                        reader.readMessage(message.switch_appliance_device_info, () => message.switch_appliance_device_info = KeusZigbeeSwitchApplianceDeviceInfo.deserialize(reader));
                        break;
                    case 302:
                        reader.readMessage(message.dimmer_appliance_device_info, () => message.dimmer_appliance_device_info = KeusZigbeeDimmerApplianceDeviceInfo.deserialize(reader));
                        break;
                    case 303:
                        reader.readMessage(message.rgbcolor_appliance_device_info, () => message.rgbcolor_appliance_device_info = KeusZigbeeRGBColorApplianceDeviceInfo.deserialize(reader));
                        break;
                    case 304:
                        reader.readMessage(message.wwmixer_appliance_device_info, () => message.wwmixer_appliance_device_info = KeusZigbeeWWMixerApplianceDeviceInfo.deserialize(reader));
                        break;
                    case 305:
                        reader.readMessage(message.push_trigger_appliance_device_info, () => message.push_trigger_appliance_device_info = KeusZigbeePushTriggerApplianceDeviceInfo.deserialize(reader));
                        break;
                    case 307:
                        reader.readMessage(message.rgbaddr_appliance_device_info, () => message.rgbaddr_appliance_device_info = KeusZigbeeRGBAddrApplianceDeviceInfo.deserialize(reader));
                        break;
                    case 306:
                        reader.readMessage(message.blind_appliance_device_info, () => message.blind_appliance_device_info = KeusZigbeeBlindApplianceDeviceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeusZigbeeApplianceControlInfo {
            return KeusZigbeeApplianceControlInfo.deserialize(bytes);
        }
    }
}
