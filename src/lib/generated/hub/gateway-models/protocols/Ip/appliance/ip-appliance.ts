/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/protocols/Ip/appliance/ip-appliance.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class AirConditionerApplianceDeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indoor_unit_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indoor_unit_id" in data && data.indoor_unit_id != undefined) {
                    this.indoor_unit_id = data.indoor_unit_id;
                }
            }
        }
        get indoor_unit_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set indoor_unit_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            indoor_unit_id?: string;
        }): AirConditionerApplianceDeviceInfo {
            const message = new AirConditionerApplianceDeviceInfo({});
            if (data.indoor_unit_id != null) {
                message.indoor_unit_id = data.indoor_unit_id;
            }
            return message;
        }
        toObject() {
            const data: {
                indoor_unit_id?: string;
            } = {};
            if (this.indoor_unit_id != null) {
                data.indoor_unit_id = this.indoor_unit_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.indoor_unit_id.length)
                writer.writeString(1, this.indoor_unit_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AirConditionerApplianceDeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AirConditionerApplianceDeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.indoor_unit_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AirConditionerApplianceDeviceInfo {
            return AirConditionerApplianceDeviceInfo.deserialize(bytes);
        }
    }
    export class IpApplianceControlInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[301]];
        constructor(data?: any[] | ({
            ip_appliance_id?: number;
            device_id?: string;
        } & (({
            air_conditioner_appliance_device_info?: AirConditionerApplianceDeviceInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ip_appliance_id" in data && data.ip_appliance_id != undefined) {
                    this.ip_appliance_id = data.ip_appliance_id;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("air_conditioner_appliance_device_info" in data && data.air_conditioner_appliance_device_info != undefined) {
                    this.air_conditioner_appliance_device_info = data.air_conditioner_appliance_device_info;
                }
            }
        }
        get ip_appliance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set ip_appliance_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get air_conditioner_appliance_device_info() {
            return pb_1.Message.getWrapperField(this, AirConditionerApplianceDeviceInfo, 301) as AirConditionerApplianceDeviceInfo;
        }
        set air_conditioner_appliance_device_info(value: AirConditionerApplianceDeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 301, this.#one_of_decls[0], value);
        }
        get has_air_conditioner_appliance_device_info() {
            return pb_1.Message.getField(this, 301) != null;
        }
        get appliance_type_control_info() {
            const cases: {
                [index: number]: "none" | "air_conditioner_appliance_device_info";
            } = {
                0: "none",
                301: "air_conditioner_appliance_device_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [301])];
        }
        static fromObject(data: {
            ip_appliance_id?: number;
            device_id?: string;
            air_conditioner_appliance_device_info?: ReturnType<typeof AirConditionerApplianceDeviceInfo.prototype.toObject>;
        }): IpApplianceControlInfo {
            const message = new IpApplianceControlInfo({});
            if (data.ip_appliance_id != null) {
                message.ip_appliance_id = data.ip_appliance_id;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.air_conditioner_appliance_device_info != null) {
                message.air_conditioner_appliance_device_info = AirConditionerApplianceDeviceInfo.fromObject(data.air_conditioner_appliance_device_info);
            }
            return message;
        }
        toObject() {
            const data: {
                ip_appliance_id?: number;
                device_id?: string;
                air_conditioner_appliance_device_info?: ReturnType<typeof AirConditionerApplianceDeviceInfo.prototype.toObject>;
            } = {};
            if (this.ip_appliance_id != null) {
                data.ip_appliance_id = this.ip_appliance_id;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.air_conditioner_appliance_device_info != null) {
                data.air_conditioner_appliance_device_info = this.air_conditioner_appliance_device_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ip_appliance_id != 0)
                writer.writeInt32(1, this.ip_appliance_id);
            if (this.device_id.length)
                writer.writeString(3, this.device_id);
            if (this.has_air_conditioner_appliance_device_info)
                writer.writeMessage(301, this.air_conditioner_appliance_device_info, () => this.air_conditioner_appliance_device_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IpApplianceControlInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IpApplianceControlInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ip_appliance_id = reader.readInt32();
                        break;
                    case 3:
                        message.device_id = reader.readString();
                        break;
                    case 301:
                        reader.readMessage(message.air_conditioner_appliance_device_info, () => message.air_conditioner_appliance_device_info = AirConditionerApplianceDeviceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IpApplianceControlInfo {
            return IpApplianceControlInfo.deserialize(bytes);
        }
    }
}
