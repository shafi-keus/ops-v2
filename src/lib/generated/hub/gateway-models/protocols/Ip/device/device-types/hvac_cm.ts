/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: hub/gateway-models/protocols/Ip/device/device-types/hvac_cm.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../appliances/appliance-types/airconditioner";
import * as pb_1 from "google-protobuf";
export namespace com.keus.gateway {
    export class HVACCMIndoorUnit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indoor_unit_name?: string;
            indoor_unit_id?: string;
            indoor_unit_state?: number;
            is_assigned?: boolean;
            assigned_to_appliance?: string;
            indoor_unit_room?: string;
            indoor_unit_section?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indoor_unit_name" in data && data.indoor_unit_name != undefined) {
                    this.indoor_unit_name = data.indoor_unit_name;
                }
                if ("indoor_unit_id" in data && data.indoor_unit_id != undefined) {
                    this.indoor_unit_id = data.indoor_unit_id;
                }
                if ("indoor_unit_state" in data && data.indoor_unit_state != undefined) {
                    this.indoor_unit_state = data.indoor_unit_state;
                }
                if ("is_assigned" in data && data.is_assigned != undefined) {
                    this.is_assigned = data.is_assigned;
                }
                if ("assigned_to_appliance" in data && data.assigned_to_appliance != undefined) {
                    this.assigned_to_appliance = data.assigned_to_appliance;
                }
                if ("indoor_unit_room" in data && data.indoor_unit_room != undefined) {
                    this.indoor_unit_room = data.indoor_unit_room;
                }
                if ("indoor_unit_section" in data && data.indoor_unit_section != undefined) {
                    this.indoor_unit_section = data.indoor_unit_section;
                }
            }
        }
        get indoor_unit_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set indoor_unit_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get indoor_unit_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set indoor_unit_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get indoor_unit_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set indoor_unit_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_assigned() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_assigned(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get assigned_to_appliance() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set assigned_to_appliance(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get indoor_unit_room() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set indoor_unit_room(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get indoor_unit_section() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set indoor_unit_section(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            indoor_unit_name?: string;
            indoor_unit_id?: string;
            indoor_unit_state?: number;
            is_assigned?: boolean;
            assigned_to_appliance?: string;
            indoor_unit_room?: string;
            indoor_unit_section?: string;
        }): HVACCMIndoorUnit {
            const message = new HVACCMIndoorUnit({});
            if (data.indoor_unit_name != null) {
                message.indoor_unit_name = data.indoor_unit_name;
            }
            if (data.indoor_unit_id != null) {
                message.indoor_unit_id = data.indoor_unit_id;
            }
            if (data.indoor_unit_state != null) {
                message.indoor_unit_state = data.indoor_unit_state;
            }
            if (data.is_assigned != null) {
                message.is_assigned = data.is_assigned;
            }
            if (data.assigned_to_appliance != null) {
                message.assigned_to_appliance = data.assigned_to_appliance;
            }
            if (data.indoor_unit_room != null) {
                message.indoor_unit_room = data.indoor_unit_room;
            }
            if (data.indoor_unit_section != null) {
                message.indoor_unit_section = data.indoor_unit_section;
            }
            return message;
        }
        toObject() {
            const data: {
                indoor_unit_name?: string;
                indoor_unit_id?: string;
                indoor_unit_state?: number;
                is_assigned?: boolean;
                assigned_to_appliance?: string;
                indoor_unit_room?: string;
                indoor_unit_section?: string;
            } = {};
            if (this.indoor_unit_name != null) {
                data.indoor_unit_name = this.indoor_unit_name;
            }
            if (this.indoor_unit_id != null) {
                data.indoor_unit_id = this.indoor_unit_id;
            }
            if (this.indoor_unit_state != null) {
                data.indoor_unit_state = this.indoor_unit_state;
            }
            if (this.is_assigned != null) {
                data.is_assigned = this.is_assigned;
            }
            if (this.assigned_to_appliance != null) {
                data.assigned_to_appliance = this.assigned_to_appliance;
            }
            if (this.indoor_unit_room != null) {
                data.indoor_unit_room = this.indoor_unit_room;
            }
            if (this.indoor_unit_section != null) {
                data.indoor_unit_section = this.indoor_unit_section;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.indoor_unit_name.length)
                writer.writeString(1, this.indoor_unit_name);
            if (this.indoor_unit_id.length)
                writer.writeString(2, this.indoor_unit_id);
            if (this.indoor_unit_state != 0)
                writer.writeInt32(3, this.indoor_unit_state);
            if (this.is_assigned != false)
                writer.writeBool(4, this.is_assigned);
            if (this.assigned_to_appliance.length)
                writer.writeString(5, this.assigned_to_appliance);
            if (this.indoor_unit_room.length)
                writer.writeString(6, this.indoor_unit_room);
            if (this.indoor_unit_section.length)
                writer.writeString(7, this.indoor_unit_section);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HVACCMIndoorUnit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HVACCMIndoorUnit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.indoor_unit_name = reader.readString();
                        break;
                    case 2:
                        message.indoor_unit_id = reader.readString();
                        break;
                    case 3:
                        message.indoor_unit_state = reader.readInt32();
                        break;
                    case 4:
                        message.is_assigned = reader.readBool();
                        break;
                    case 5:
                        message.assigned_to_appliance = reader.readString();
                        break;
                    case 6:
                        message.indoor_unit_room = reader.readString();
                        break;
                    case 7:
                        message.indoor_unit_section = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HVACCMIndoorUnit {
            return HVACCMIndoorUnit.deserialize(bytes);
        }
    }
    export class HVACCMProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indoor_units?: HVACCMIndoorUnit[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indoor_units" in data && data.indoor_units != undefined) {
                    this.indoor_units = data.indoor_units;
                }
            }
        }
        get indoor_units() {
            return pb_1.Message.getRepeatedWrapperField(this, HVACCMIndoorUnit, 1) as HVACCMIndoorUnit[];
        }
        set indoor_units(value: HVACCMIndoorUnit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            indoor_units?: ReturnType<typeof HVACCMIndoorUnit.prototype.toObject>[];
        }): HVACCMProperties {
            const message = new HVACCMProperties({});
            if (data.indoor_units != null) {
                message.indoor_units = data.indoor_units.map(item => HVACCMIndoorUnit.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                indoor_units?: ReturnType<typeof HVACCMIndoorUnit.prototype.toObject>[];
            } = {};
            if (this.indoor_units != null) {
                data.indoor_units = this.indoor_units.map((item: HVACCMIndoorUnit) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.indoor_units.length)
                writer.writeRepeatedMessage(1, this.indoor_units, (item: HVACCMIndoorUnit) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HVACCMProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HVACCMProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.indoor_units, () => pb_1.Message.addToRepeatedWrapperField(message, 1, HVACCMIndoorUnit.deserialize(reader), HVACCMIndoorUnit));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HVACCMProperties {
            return HVACCMProperties.deserialize(bytes);
        }
    }
    export class HVACCMIndoorunitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            indoor_unit_id?: string;
            indoor_unit_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("indoor_unit_id" in data && data.indoor_unit_id != undefined) {
                    this.indoor_unit_id = data.indoor_unit_id;
                }
                if ("indoor_unit_state" in data && data.indoor_unit_state != undefined) {
                    this.indoor_unit_state = data.indoor_unit_state;
                }
            }
        }
        get indoor_unit_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set indoor_unit_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get indoor_unit_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set indoor_unit_state(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            indoor_unit_id?: string;
            indoor_unit_state?: number;
        }): HVACCMIndoorunitState {
            const message = new HVACCMIndoorunitState({});
            if (data.indoor_unit_id != null) {
                message.indoor_unit_id = data.indoor_unit_id;
            }
            if (data.indoor_unit_state != null) {
                message.indoor_unit_state = data.indoor_unit_state;
            }
            return message;
        }
        toObject() {
            const data: {
                indoor_unit_id?: string;
                indoor_unit_state?: number;
            } = {};
            if (this.indoor_unit_id != null) {
                data.indoor_unit_id = this.indoor_unit_id;
            }
            if (this.indoor_unit_state != null) {
                data.indoor_unit_state = this.indoor_unit_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.indoor_unit_id.length)
                writer.writeString(1, this.indoor_unit_id);
            if (this.indoor_unit_state != 0)
                writer.writeInt32(2, this.indoor_unit_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HVACCMIndoorunitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HVACCMIndoorunitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.indoor_unit_id = reader.readString();
                        break;
                    case 2:
                        message.indoor_unit_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HVACCMIndoorunitState {
            return HVACCMIndoorunitState.deserialize(bytes);
        }
    }
    export class DiscoverIndoorUnits extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_id?: string;
        }): DiscoverIndoorUnits {
            const message = new DiscoverIndoorUnits({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscoverIndoorUnits {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscoverIndoorUnits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscoverIndoorUnits {
            return DiscoverIndoorUnits.deserialize(bytes);
        }
    }
    export class DiscoverIndoorUnitsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): DiscoverIndoorUnitsResponse {
            const message = new DiscoverIndoorUnitsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscoverIndoorUnitsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscoverIndoorUnitsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscoverIndoorUnitsResponse {
            return DiscoverIndoorUnitsResponse.deserialize(bytes);
        }
    }
    export class DiscoverIndoorUnitEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            device_id?: string;
            units?: HVACCMIndoorUnit[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("units" in data && data.units != undefined) {
                    this.units = data.units;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get units() {
            return pb_1.Message.getRepeatedWrapperField(this, HVACCMIndoorUnit, 6) as HVACCMIndoorUnit[];
        }
        set units(value: HVACCMIndoorUnit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            device_id?: string;
            units?: ReturnType<typeof HVACCMIndoorUnit.prototype.toObject>[];
        }): DiscoverIndoorUnitEvent {
            const message = new DiscoverIndoorUnitEvent({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.units != null) {
                message.units = data.units.map(item => HVACCMIndoorUnit.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                device_id?: string;
                units?: ReturnType<typeof HVACCMIndoorUnit.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.units != null) {
                data.units = this.units.map((item: HVACCMIndoorUnit) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.device_id.length)
                writer.writeString(5, this.device_id);
            if (this.units.length)
                writer.writeRepeatedMessage(6, this.units, (item: HVACCMIndoorUnit) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscoverIndoorUnitEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscoverIndoorUnitEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        message.device_id = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.units, () => pb_1.Message.addToRepeatedWrapperField(message, 6, HVACCMIndoorUnit.deserialize(reader), HVACCMIndoorUnit));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscoverIndoorUnitEvent {
            return DiscoverIndoorUnitEvent.deserialize(bytes);
        }
    }
    export class ConfigureIndoorUnit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            indoor_unit_id?: string;
            room_id?: string;
            section_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("indoor_unit_id" in data && data.indoor_unit_id != undefined) {
                    this.indoor_unit_id = data.indoor_unit_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("section_id" in data && data.section_id != undefined) {
                    this.section_id = data.section_id;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get indoor_unit_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set indoor_unit_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get section_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set section_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            device_id?: string;
            indoor_unit_id?: string;
            room_id?: string;
            section_id?: string;
        }): ConfigureIndoorUnit {
            const message = new ConfigureIndoorUnit({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.indoor_unit_id != null) {
                message.indoor_unit_id = data.indoor_unit_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.section_id != null) {
                message.section_id = data.section_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                indoor_unit_id?: string;
                room_id?: string;
                section_id?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.indoor_unit_id != null) {
                data.indoor_unit_id = this.indoor_unit_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.section_id != null) {
                data.section_id = this.section_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.indoor_unit_id.length)
                writer.writeString(2, this.indoor_unit_id);
            if (this.room_id.length)
                writer.writeString(4, this.room_id);
            if (this.section_id.length)
                writer.writeString(5, this.section_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureIndoorUnit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureIndoorUnit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.indoor_unit_id = reader.readString();
                        break;
                    case 4:
                        message.room_id = reader.readString();
                        break;
                    case 5:
                        message.section_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureIndoorUnit {
            return ConfigureIndoorUnit.deserialize(bytes);
        }
    }
    export class ConfigureIndoorUnitResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ConfigureIndoorUnitResponse {
            const message = new ConfigureIndoorUnitResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureIndoorUnitResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureIndoorUnitResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureIndoorUnitResponse {
            return ConfigureIndoorUnitResponse.deserialize(bytes);
        }
    }
    export class RenameIndoorUnit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            indoor_unit_id?: string;
            indoor_unit_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("indoor_unit_id" in data && data.indoor_unit_id != undefined) {
                    this.indoor_unit_id = data.indoor_unit_id;
                }
                if ("indoor_unit_name" in data && data.indoor_unit_name != undefined) {
                    this.indoor_unit_name = data.indoor_unit_name;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get indoor_unit_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set indoor_unit_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get indoor_unit_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set indoor_unit_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_id?: string;
            indoor_unit_id?: string;
            indoor_unit_name?: string;
        }): RenameIndoorUnit {
            const message = new RenameIndoorUnit({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.indoor_unit_id != null) {
                message.indoor_unit_id = data.indoor_unit_id;
            }
            if (data.indoor_unit_name != null) {
                message.indoor_unit_name = data.indoor_unit_name;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                indoor_unit_id?: string;
                indoor_unit_name?: string;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.indoor_unit_id != null) {
                data.indoor_unit_id = this.indoor_unit_id;
            }
            if (this.indoor_unit_name != null) {
                data.indoor_unit_name = this.indoor_unit_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.indoor_unit_id.length)
                writer.writeString(2, this.indoor_unit_id);
            if (this.indoor_unit_name.length)
                writer.writeString(3, this.indoor_unit_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameIndoorUnit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameIndoorUnit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.indoor_unit_id = reader.readString();
                        break;
                    case 3:
                        message.indoor_unit_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameIndoorUnit {
            return RenameIndoorUnit.deserialize(bytes);
        }
    }
    export class RenameIndoorUnitResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): RenameIndoorUnitResponse {
            const message = new RenameIndoorUnitResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameIndoorUnitResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameIndoorUnitResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameIndoorUnitResponse {
            return RenameIndoorUnitResponse.deserialize(bytes);
        }
    }
    export class GetHVACRemoteList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetHVACRemoteList {
            const message = new GetHVACRemoteList({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHVACRemoteList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHVACRemoteList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHVACRemoteList {
            return GetHVACRemoteList.deserialize(bytes);
        }
    }
    export class GetHVACRemoteListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            remote?: dependency_1.com.keus.gateway.AirConditionerApplianceRemote[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
                if ("remote" in data && data.remote != undefined) {
                    this.remote = data.remote;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get remote() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.com.keus.gateway.AirConditionerApplianceRemote, 5) as dependency_1.com.keus.gateway.AirConditionerApplianceRemote[];
        }
        set remote(value: dependency_1.com.keus.gateway.AirConditionerApplianceRemote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
            remote?: ReturnType<typeof dependency_1.com.keus.gateway.AirConditionerApplianceRemote.prototype.toObject>[];
        }): GetHVACRemoteListResponse {
            const message = new GetHVACRemoteListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            if (data.remote != null) {
                message.remote = data.remote.map(item => dependency_1.com.keus.gateway.AirConditionerApplianceRemote.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
                remote?: ReturnType<typeof dependency_1.com.keus.gateway.AirConditionerApplianceRemote.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            if (this.remote != null) {
                data.remote = this.remote.map((item: dependency_1.com.keus.gateway.AirConditionerApplianceRemote) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (this.remote.length)
                writer.writeRepeatedMessage(5, this.remote, (item: dependency_1.com.keus.gateway.AirConditionerApplianceRemote) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHVACRemoteListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHVACRemoteListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.remote, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.com.keus.gateway.AirConditionerApplianceRemote.deserialize(reader), dependency_1.com.keus.gateway.AirConditionerApplianceRemote));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHVACRemoteListResponse {
            return GetHVACRemoteListResponse.deserialize(bytes);
        }
    }
    export class ValidateHVACCMIP extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_ip" in data && data.device_ip != undefined) {
                    this.device_ip = data.device_ip;
                }
            }
        }
        get device_ip() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_ip(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            device_ip?: string;
        }): ValidateHVACCMIP {
            const message = new ValidateHVACCMIP({});
            if (data.device_ip != null) {
                message.device_ip = data.device_ip;
            }
            return message;
        }
        toObject() {
            const data: {
                device_ip?: string;
            } = {};
            if (this.device_ip != null) {
                data.device_ip = this.device_ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_ip.length)
                writer.writeString(1, this.device_ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateHVACCMIP {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateHVACCMIP();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateHVACCMIP {
            return ValidateHVACCMIP.deserialize(bytes);
        }
    }
    export class ValidateHVACCMIPResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("ops_message" in data && data.ops_message != undefined) {
                    this.ops_message = data.ops_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ops_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ops_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            ops_message?: string;
        }): ValidateHVACCMIPResponse {
            const message = new ValidateHVACCMIPResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.ops_message != null) {
                message.ops_message = data.ops_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                ops_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.ops_message != null) {
                data.ops_message = this.ops_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.ops_message.length)
                writer.writeString(4, this.ops_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateHVACCMIPResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateHVACCMIPResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.ops_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateHVACCMIPResponse {
            return ValidateHVACCMIPResponse.deserialize(bytes);
        }
    }
}
