/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: cloud/gateway_to_cloud.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.keus.cloud {
    export enum USER_ROLES {
        GUEST = 0,
        ADMIN = 1,
        SUPER_ADMIN = 2
    }
    export enum IR_REMOTE_TYPES {
        IR_AC = 0,
        IR_TV = 1,
        IR_AMP = 2,
        IR_PR = 3,
        IR_FAN = 4
    }
    export class GetUserDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            phone?: string;
        }): GetUserDetails {
            const message = new GetUserDetails({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserDetails {
            return GetUserDetails.deserialize(bytes);
        }
    }
    export class GetUserDetailsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user_data" in data && data.user_data != undefined) {
                    this.user_data = data.user_data;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_data() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_data(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: string;
        }): GetUserDetailsResponse {
            const message = new GetUserDetailsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user_data != null) {
                message.user_data = data.user_data;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                user_data?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user_data != null) {
                data.user_data = this.user_data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.user_data.length)
                writer.writeString(4, this.user_data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.user_data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserDetailsResponse {
            return GetUserDetailsResponse.deserialize(bytes);
        }
    }
    export class GetUsersType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            phone?: string;
        }): GetUsersType {
            const message = new GetUsersType({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUsersType {
            return GetUsersType.deserialize(bytes);
        }
    }
    export class GetUsersDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_keys?: GetUsersType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_keys" in data && data.user_keys != undefined) {
                    this.user_keys = data.user_keys;
                }
            }
        }
        get user_keys() {
            return pb_1.Message.getRepeatedWrapperField(this, GetUsersType, 1) as GetUsersType[];
        }
        set user_keys(value: GetUsersType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            user_keys?: ReturnType<typeof GetUsersType.prototype.toObject>[];
        }): GetUsersDetails {
            const message = new GetUsersDetails({});
            if (data.user_keys != null) {
                message.user_keys = data.user_keys.map(item => GetUsersType.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                user_keys?: ReturnType<typeof GetUsersType.prototype.toObject>[];
            } = {};
            if (this.user_keys != null) {
                data.user_keys = this.user_keys.map((item: GetUsersType) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_keys.length)
                writer.writeRepeatedMessage(1, this.user_keys, (item: GetUsersType) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user_keys, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetUsersType.deserialize(reader), GetUsersType));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUsersDetails {
            return GetUsersDetails.deserialize(bytes);
        }
    }
    export class GetUsersDetailsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user_data" in data && data.user_data != undefined) {
                    this.user_data = data.user_data;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_data() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_data(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: string;
        }): GetUsersDetailsResponse {
            const message = new GetUsersDetailsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user_data != null) {
                message.user_data = data.user_data;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                user_data?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user_data != null) {
                data.user_data = this.user_data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.user_data.length)
                writer.writeString(4, this.user_data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.user_data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUsersDetailsResponse {
            return GetUsersDetailsResponse.deserialize(bytes);
        }
    }
    export class GetGatewayInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            gateway_id?: string;
        }): GetGatewayInfo {
            const message = new GetGatewayInfo({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGatewayInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGatewayInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetGatewayInfo {
            return GetGatewayInfo.deserialize(bytes);
        }
    }
    export class GatewayInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ip?: string;
            sub_gateway?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("sub_gateway" in data && data.sub_gateway != undefined) {
                    this.sub_gateway = data.sub_gateway;
                }
            }
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sub_gateway() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set sub_gateway(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ip?: string;
            sub_gateway?: string;
        }): GatewayInfo {
            const message = new GatewayInfo({});
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.sub_gateway != null) {
                message.sub_gateway = data.sub_gateway;
            }
            return message;
        }
        toObject() {
            const data: {
                ip?: string;
                sub_gateway?: string;
            } = {};
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.sub_gateway != null) {
                data.sub_gateway = this.sub_gateway;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ip.length)
                writer.writeString(1, this.ip);
            if (this.sub_gateway.length)
                writer.writeString(2, this.sub_gateway);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GatewayInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GatewayInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ip = reader.readString();
                        break;
                    case 2:
                        message.sub_gateway = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GatewayInfo {
            return GatewayInfo.deserialize(bytes);
        }
    }
    export class GetGatewayInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            data?: GatewayInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, GatewayInfo, 4) as GatewayInfo;
        }
        set data(value: GatewayInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            data?: ReturnType<typeof GatewayInfo.prototype.toObject>;
        }): GetGatewayInfoResponse {
            const message = new GetGatewayInfoResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.data != null) {
                message.data = GatewayInfo.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                data?: ReturnType<typeof GatewayInfo.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_data)
                writer.writeMessage(4, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGatewayInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGatewayInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = GatewayInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetGatewayInfoResponse {
            return GetGatewayInfoResponse.deserialize(bytes);
        }
    }
    export class AssignSuperUser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
            target_phone?: string;
            gateway_id?: string;
            gateway_key?: string;
            otp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("target_phone" in data && data.target_phone != undefined) {
                    this.target_phone = data.target_phone;
                }
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("gateway_key" in data && data.gateway_key != undefined) {
                    this.gateway_key = data.gateway_key;
                }
                if ("otp" in data && data.otp != undefined) {
                    this.otp = data.otp;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get target_phone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set target_phone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get gateway_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set gateway_key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get otp() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set otp(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            phone?: string;
            target_phone?: string;
            gateway_id?: string;
            gateway_key?: string;
            otp?: number;
        }): AssignSuperUser {
            const message = new AssignSuperUser({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.target_phone != null) {
                message.target_phone = data.target_phone;
            }
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.gateway_key != null) {
                message.gateway_key = data.gateway_key;
            }
            if (data.otp != null) {
                message.otp = data.otp;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                target_phone?: string;
                gateway_id?: string;
                gateway_key?: string;
                otp?: number;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.target_phone != null) {
                data.target_phone = this.target_phone;
            }
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.gateway_key != null) {
                data.gateway_key = this.gateway_key;
            }
            if (this.otp != null) {
                data.otp = this.otp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (this.target_phone.length)
                writer.writeString(2, this.target_phone);
            if (this.gateway_id.length)
                writer.writeString(3, this.gateway_id);
            if (this.gateway_key.length)
                writer.writeString(4, this.gateway_key);
            if (this.otp != 0)
                writer.writeInt32(5, this.otp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignSuperUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignSuperUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.target_phone = reader.readString();
                        break;
                    case 3:
                        message.gateway_id = reader.readString();
                        break;
                    case 4:
                        message.gateway_key = reader.readString();
                        break;
                    case 5:
                        message.otp = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignSuperUser {
            return AssignSuperUser.deserialize(bytes);
        }
    }
    export class AssignSuperUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            user_info?: string;
            target_user_info?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user_info" in data && data.user_info != undefined) {
                    this.user_info = data.user_info;
                }
                if ("target_user_info" in data && data.target_user_info != undefined) {
                    this.target_user_info = data.target_user_info;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_info() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_info(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get target_user_info() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set target_user_info(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            user_info?: string;
            target_user_info?: string;
        }): AssignSuperUserResponse {
            const message = new AssignSuperUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user_info != null) {
                message.user_info = data.user_info;
            }
            if (data.target_user_info != null) {
                message.target_user_info = data.target_user_info;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                user_info?: string;
                target_user_info?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user_info != null) {
                data.user_info = this.user_info;
            }
            if (this.target_user_info != null) {
                data.target_user_info = this.target_user_info;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.user_info.length)
                writer.writeString(4, this.user_info);
            if (this.target_user_info.length)
                writer.writeString(5, this.target_user_info);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignSuperUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignSuperUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.user_info = reader.readString();
                        break;
                    case 5:
                        message.target_user_info = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignSuperUserResponse {
            return AssignSuperUserResponse.deserialize(bytes);
        }
    }
    export class GrantUserPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            target_phone?: string;
            access_level?: USER_ROLES;
            rooms_list?: string[];
            start_time?: number;
            end_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target_phone" in data && data.target_phone != undefined) {
                    this.target_phone = data.target_phone;
                }
                if ("access_level" in data && data.access_level != undefined) {
                    this.access_level = data.access_level;
                }
                if ("rooms_list" in data && data.rooms_list != undefined) {
                    this.rooms_list = data.rooms_list;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
        }
        get target_phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set target_phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_level() {
            return pb_1.Message.getFieldWithDefault(this, 2, USER_ROLES.GUEST) as USER_ROLES;
        }
        set access_level(value: USER_ROLES) {
            pb_1.Message.setField(this, 2, value);
        }
        get rooms_list() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set rooms_list(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            target_phone?: string;
            access_level?: USER_ROLES;
            rooms_list?: string[];
            start_time?: number;
            end_time?: number;
        }): GrantUserPermission {
            const message = new GrantUserPermission({});
            if (data.target_phone != null) {
                message.target_phone = data.target_phone;
            }
            if (data.access_level != null) {
                message.access_level = data.access_level;
            }
            if (data.rooms_list != null) {
                message.rooms_list = data.rooms_list;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            return message;
        }
        toObject() {
            const data: {
                target_phone?: string;
                access_level?: USER_ROLES;
                rooms_list?: string[];
                start_time?: number;
                end_time?: number;
            } = {};
            if (this.target_phone != null) {
                data.target_phone = this.target_phone;
            }
            if (this.access_level != null) {
                data.access_level = this.access_level;
            }
            if (this.rooms_list != null) {
                data.rooms_list = this.rooms_list;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target_phone.length)
                writer.writeString(1, this.target_phone);
            if (this.access_level != USER_ROLES.GUEST)
                writer.writeEnum(2, this.access_level);
            if (this.rooms_list.length)
                writer.writeRepeatedString(3, this.rooms_list);
            if (this.start_time != 0)
                writer.writeUint64(4, this.start_time);
            if (this.end_time != 0)
                writer.writeUint64(5, this.end_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GrantUserPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GrantUserPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target_phone = reader.readString();
                        break;
                    case 2:
                        message.access_level = reader.readEnum();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.start_time = reader.readUint64();
                        break;
                    case 5:
                        message.end_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GrantUserPermission {
            return GrantUserPermission.deserialize(bytes);
        }
    }
    export class GrantUserPermissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            target_user_info?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("target_user_info" in data && data.target_user_info != undefined) {
                    this.target_user_info = data.target_user_info;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get target_user_info() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set target_user_info(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            target_user_info?: string;
        }): GrantUserPermissionResponse {
            const message = new GrantUserPermissionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.target_user_info != null) {
                message.target_user_info = data.target_user_info;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                target_user_info?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.target_user_info != null) {
                data.target_user_info = this.target_user_info;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.target_user_info.length)
                writer.writeString(4, this.target_user_info);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GrantUserPermissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GrantUserPermissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.target_user_info = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GrantUserPermissionResponse {
            return GrantUserPermissionResponse.deserialize(bytes);
        }
    }
    export class RemoveHomeFromUser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            target_phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target_phone" in data && data.target_phone != undefined) {
                    this.target_phone = data.target_phone;
                }
            }
        }
        get target_phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set target_phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            target_phone?: string;
        }): RemoveHomeFromUser {
            const message = new RemoveHomeFromUser({});
            if (data.target_phone != null) {
                message.target_phone = data.target_phone;
            }
            return message;
        }
        toObject() {
            const data: {
                target_phone?: string;
            } = {};
            if (this.target_phone != null) {
                data.target_phone = this.target_phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target_phone.length)
                writer.writeString(1, this.target_phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveHomeFromUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveHomeFromUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target_phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveHomeFromUser {
            return RemoveHomeFromUser.deserialize(bytes);
        }
    }
    export class RemoveHomeFromUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): RemoveHomeFromUserResponse {
            const message = new RemoveHomeFromUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveHomeFromUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveHomeFromUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveHomeFromUserResponse {
            return RemoveHomeFromUserResponse.deserialize(bytes);
        }
    }
    export class RequestOtpFromGateway extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            phone?: string;
            email?: never;
        } | {
            phone?: never;
            email?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_phone() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_email() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get user_input() {
            const cases: {
                [index: number]: "none" | "phone" | "email";
            } = {
                0: "none",
                1: "phone",
                2: "email"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            phone?: string;
            email?: string;
        }): RequestOtpFromGateway {
            const message = new RequestOtpFromGateway({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                email?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_phone)
                writer.writeString(1, this.phone);
            if (this.has_email)
                writer.writeString(2, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestOtpFromGateway {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestOtpFromGateway();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestOtpFromGateway {
            return RequestOtpFromGateway.deserialize(bytes);
        }
    }
    export class RequestOtpFromGatewayResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): RequestOtpFromGatewayResponse {
            const message = new RequestOtpFromGatewayResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestOtpFromGatewayResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestOtpFromGatewayResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestOtpFromGatewayResponse {
            return RequestOtpFromGatewayResponse.deserialize(bytes);
        }
    }
    export class CloudRemoteStructure extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            company_id?: string;
            company_name?: string;
            model_id?: string;
            model_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("company_id" in data && data.company_id != undefined) {
                    this.company_id = data.company_id;
                }
                if ("company_name" in data && data.company_name != undefined) {
                    this.company_name = data.company_name;
                }
                if ("model_id" in data && data.model_id != undefined) {
                    this.model_id = data.model_id;
                }
                if ("model_name" in data && data.model_name != undefined) {
                    this.model_name = data.model_name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get company_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set company_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get company_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set company_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get model_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set model_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get model_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set model_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            company_id?: string;
            company_name?: string;
            model_id?: string;
            model_name?: string;
        }): CloudRemoteStructure {
            const message = new CloudRemoteStructure({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.company_id != null) {
                message.company_id = data.company_id;
            }
            if (data.company_name != null) {
                message.company_name = data.company_name;
            }
            if (data.model_id != null) {
                message.model_id = data.model_id;
            }
            if (data.model_name != null) {
                message.model_name = data.model_name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                company_id?: string;
                company_name?: string;
                model_id?: string;
                model_name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.company_id != null) {
                data.company_id = this.company_id;
            }
            if (this.company_name != null) {
                data.company_name = this.company_name;
            }
            if (this.model_id != null) {
                data.model_id = this.model_id;
            }
            if (this.model_name != null) {
                data.model_name = this.model_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.company_id.length)
                writer.writeString(2, this.company_id);
            if (this.company_name.length)
                writer.writeString(3, this.company_name);
            if (this.model_id.length)
                writer.writeString(4, this.model_id);
            if (this.model_name.length)
                writer.writeString(5, this.model_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloudRemoteStructure {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CloudRemoteStructure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.company_id = reader.readString();
                        break;
                    case 3:
                        message.company_name = reader.readString();
                        break;
                    case 4:
                        message.model_id = reader.readString();
                        break;
                    case 5:
                        message.model_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CloudRemoteStructure {
            return CloudRemoteStructure.deserialize(bytes);
        }
    }
    export class GetRemoteList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_type?: IR_REMOTE_TYPES;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
            }
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, IR_REMOTE_TYPES.IR_AC) as IR_REMOTE_TYPES;
        }
        set remote_type(value: IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            remote_type?: IR_REMOTE_TYPES;
        }): GetRemoteList {
            const message = new GetRemoteList({});
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_type?: IR_REMOTE_TYPES;
            } = {};
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_type != IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(1, this.remote_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRemoteList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRemoteList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRemoteList {
            return GetRemoteList.deserialize(bytes);
        }
    }
    export class GetRemoteListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            remotes?: CloudRemoteStructure[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("remotes" in data && data.remotes != undefined) {
                    this.remotes = data.remotes;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get remotes() {
            return pb_1.Message.getRepeatedWrapperField(this, CloudRemoteStructure, 4) as CloudRemoteStructure[];
        }
        set remotes(value: CloudRemoteStructure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            remotes?: ReturnType<typeof CloudRemoteStructure.prototype.toObject>[];
        }): GetRemoteListResponse {
            const message = new GetRemoteListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.remotes != null) {
                message.remotes = data.remotes.map(item => CloudRemoteStructure.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                remotes?: ReturnType<typeof CloudRemoteStructure.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.remotes != null) {
                data.remotes = this.remotes.map((item: CloudRemoteStructure) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.remotes.length)
                writer.writeRepeatedMessage(4, this.remotes, (item: CloudRemoteStructure) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRemoteListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRemoteListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.remotes, () => pb_1.Message.addToRepeatedWrapperField(message, 4, CloudRemoteStructure.deserialize(reader), CloudRemoteStructure));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRemoteListResponse {
            return GetRemoteListResponse.deserialize(bytes);
        }
    }
    export class GetRemoteFileLink extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_type?: IR_REMOTE_TYPES;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, IR_REMOTE_TYPES.IR_AC) as IR_REMOTE_TYPES;
        }
        set remote_type(value: IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            remote_type?: IR_REMOTE_TYPES;
            id?: string;
        }): GetRemoteFileLink {
            const message = new GetRemoteFileLink({});
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_type?: IR_REMOTE_TYPES;
                id?: string;
            } = {};
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_type != IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(1, this.remote_type);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRemoteFileLink {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRemoteFileLink();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_type = reader.readEnum();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRemoteFileLink {
            return GetRemoteFileLink.deserialize(bytes);
        }
    }
    export class GetRemoteFileLinkResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            remote_link?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("remote_link" in data && data.remote_link != undefined) {
                    this.remote_link = data.remote_link;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get remote_link() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set remote_link(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            remote_link?: string;
        }): GetRemoteFileLinkResponse {
            const message = new GetRemoteFileLinkResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.remote_link != null) {
                message.remote_link = data.remote_link;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                remote_link?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.remote_link != null) {
                data.remote_link = this.remote_link;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.remote_link.length)
                writer.writeString(4, this.remote_link);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRemoteFileLinkResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRemoteFileLinkResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.remote_link = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRemoteFileLinkResponse {
            return GetRemoteFileLinkResponse.deserialize(bytes);
        }
    }
    export class GetRemoteVersionList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            remote_type?: IR_REMOTE_TYPES;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("remote_type" in data && data.remote_type != undefined) {
                    this.remote_type = data.remote_type;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get remote_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, IR_REMOTE_TYPES.IR_AC) as IR_REMOTE_TYPES;
        }
        set remote_type(value: IR_REMOTE_TYPES) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            remote_type?: IR_REMOTE_TYPES;
            id?: string;
        }): GetRemoteVersionList {
            const message = new GetRemoteVersionList({});
            if (data.remote_type != null) {
                message.remote_type = data.remote_type;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                remote_type?: IR_REMOTE_TYPES;
                id?: string;
            } = {};
            if (this.remote_type != null) {
                data.remote_type = this.remote_type;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.remote_type != IR_REMOTE_TYPES.IR_AC)
                writer.writeEnum(1, this.remote_type);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRemoteVersionList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRemoteVersionList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.remote_type = reader.readEnum();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRemoteVersionList {
            return GetRemoteVersionList.deserialize(bytes);
        }
    }
    export class RemoteVerionsData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            last_modified?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("last_modified" in data && data.last_modified != undefined) {
                    this.last_modified = data.last_modified;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get last_modified() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set last_modified(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            last_modified?: number;
        }): RemoteVerionsData {
            const message = new RemoteVerionsData({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.last_modified != null) {
                message.last_modified = data.last_modified;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                last_modified?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.last_modified != null) {
                data.last_modified = this.last_modified;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.last_modified != 0)
                writer.writeUint32(2, this.last_modified);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoteVerionsData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoteVerionsData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.last_modified = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoteVerionsData {
            return RemoteVerionsData.deserialize(bytes);
        }
    }
    export class GetRemoteVersionListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            remote_version_array?: RemoteVerionsData[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("remote_version_array" in data && data.remote_version_array != undefined) {
                    this.remote_version_array = data.remote_version_array;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get remote_version_array() {
            return pb_1.Message.getRepeatedWrapperField(this, RemoteVerionsData, 4) as RemoteVerionsData[];
        }
        set remote_version_array(value: RemoteVerionsData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            remote_version_array?: ReturnType<typeof RemoteVerionsData.prototype.toObject>[];
        }): GetRemoteVersionListResponse {
            const message = new GetRemoteVersionListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.remote_version_array != null) {
                message.remote_version_array = data.remote_version_array.map(item => RemoteVerionsData.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                remote_version_array?: ReturnType<typeof RemoteVerionsData.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.remote_version_array != null) {
                data.remote_version_array = this.remote_version_array.map((item: RemoteVerionsData) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.remote_version_array.length)
                writer.writeRepeatedMessage(4, this.remote_version_array, (item: RemoteVerionsData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRemoteVersionListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRemoteVersionListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.remote_version_array, () => pb_1.Message.addToRepeatedWrapperField(message, 4, RemoteVerionsData.deserialize(reader), RemoteVerionsData));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRemoteVersionListResponse {
            return GetRemoteVersionListResponse.deserialize(bytes);
        }
    }
    export class PushNotification extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            data_payload?: string;
            notification_payload?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("data_payload" in data && data.data_payload != undefined) {
                    this.data_payload = data.data_payload;
                }
                if ("notification_payload" in data && data.notification_payload != undefined) {
                    this.notification_payload = data.notification_payload;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data_payload() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set data_payload(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get notification_payload() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set notification_payload(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            data_payload?: string;
            notification_payload?: string;
        }): PushNotification {
            const message = new PushNotification({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.data_payload != null) {
                message.data_payload = data.data_payload;
            }
            if (data.notification_payload != null) {
                message.notification_payload = data.notification_payload;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                data_payload?: string;
                notification_payload?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.data_payload != null) {
                data.data_payload = this.data_payload;
            }
            if (this.notification_payload != null) {
                data.notification_payload = this.notification_payload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.data_payload.length)
                writer.writeString(2, this.data_payload);
            if (this.notification_payload.length)
                writer.writeString(3, this.notification_payload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushNotification {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushNotification();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.data_payload = reader.readString();
                        break;
                    case 3:
                        message.notification_payload = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PushNotification {
            return PushNotification.deserialize(bytes);
        }
    }
    export class PushNotificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): PushNotificationResponse {
            const message = new PushNotificationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushNotificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushNotificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PushNotificationResponse {
            return PushNotificationResponse.deserialize(bytes);
        }
    }
    export class CloudHVACCMRemoteStructure extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            company_id?: string;
            company_name?: string;
            model_id?: string;
            model_name?: string;
            fan_speed_properties?: string[];
            mode_properties?: string[];
            louver_properties?: string[];
            temperature_properties?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7, 8, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("company_id" in data && data.company_id != undefined) {
                    this.company_id = data.company_id;
                }
                if ("company_name" in data && data.company_name != undefined) {
                    this.company_name = data.company_name;
                }
                if ("model_id" in data && data.model_id != undefined) {
                    this.model_id = data.model_id;
                }
                if ("model_name" in data && data.model_name != undefined) {
                    this.model_name = data.model_name;
                }
                if ("fan_speed_properties" in data && data.fan_speed_properties != undefined) {
                    this.fan_speed_properties = data.fan_speed_properties;
                }
                if ("mode_properties" in data && data.mode_properties != undefined) {
                    this.mode_properties = data.mode_properties;
                }
                if ("louver_properties" in data && data.louver_properties != undefined) {
                    this.louver_properties = data.louver_properties;
                }
                if ("temperature_properties" in data && data.temperature_properties != undefined) {
                    this.temperature_properties = data.temperature_properties;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get company_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set company_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get company_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set company_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get model_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set model_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get model_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set model_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get fan_speed_properties() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set fan_speed_properties(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get mode_properties() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set mode_properties(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get louver_properties() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set louver_properties(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get temperature_properties() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
        }
        set temperature_properties(value: number[]) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: string;
            company_id?: string;
            company_name?: string;
            model_id?: string;
            model_name?: string;
            fan_speed_properties?: string[];
            mode_properties?: string[];
            louver_properties?: string[];
            temperature_properties?: number[];
        }): CloudHVACCMRemoteStructure {
            const message = new CloudHVACCMRemoteStructure({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.company_id != null) {
                message.company_id = data.company_id;
            }
            if (data.company_name != null) {
                message.company_name = data.company_name;
            }
            if (data.model_id != null) {
                message.model_id = data.model_id;
            }
            if (data.model_name != null) {
                message.model_name = data.model_name;
            }
            if (data.fan_speed_properties != null) {
                message.fan_speed_properties = data.fan_speed_properties;
            }
            if (data.mode_properties != null) {
                message.mode_properties = data.mode_properties;
            }
            if (data.louver_properties != null) {
                message.louver_properties = data.louver_properties;
            }
            if (data.temperature_properties != null) {
                message.temperature_properties = data.temperature_properties;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                company_id?: string;
                company_name?: string;
                model_id?: string;
                model_name?: string;
                fan_speed_properties?: string[];
                mode_properties?: string[];
                louver_properties?: string[];
                temperature_properties?: number[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.company_id != null) {
                data.company_id = this.company_id;
            }
            if (this.company_name != null) {
                data.company_name = this.company_name;
            }
            if (this.model_id != null) {
                data.model_id = this.model_id;
            }
            if (this.model_name != null) {
                data.model_name = this.model_name;
            }
            if (this.fan_speed_properties != null) {
                data.fan_speed_properties = this.fan_speed_properties;
            }
            if (this.mode_properties != null) {
                data.mode_properties = this.mode_properties;
            }
            if (this.louver_properties != null) {
                data.louver_properties = this.louver_properties;
            }
            if (this.temperature_properties != null) {
                data.temperature_properties = this.temperature_properties;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.company_id.length)
                writer.writeString(2, this.company_id);
            if (this.company_name.length)
                writer.writeString(3, this.company_name);
            if (this.model_id.length)
                writer.writeString(4, this.model_id);
            if (this.model_name.length)
                writer.writeString(5, this.model_name);
            if (this.fan_speed_properties.length)
                writer.writeRepeatedString(6, this.fan_speed_properties);
            if (this.mode_properties.length)
                writer.writeRepeatedString(7, this.mode_properties);
            if (this.louver_properties.length)
                writer.writeRepeatedString(8, this.louver_properties);
            if (this.temperature_properties.length)
                writer.writePackedInt32(9, this.temperature_properties);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloudHVACCMRemoteStructure {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CloudHVACCMRemoteStructure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.company_id = reader.readString();
                        break;
                    case 3:
                        message.company_name = reader.readString();
                        break;
                    case 4:
                        message.model_id = reader.readString();
                        break;
                    case 5:
                        message.model_name = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.temperature_properties = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CloudHVACCMRemoteStructure {
            return CloudHVACCMRemoteStructure.deserialize(bytes);
        }
    }
    export class GetHVACCMRemoteList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetHVACCMRemoteList {
            const message = new GetHVACCMRemoteList({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHVACCMRemoteList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHVACCMRemoteList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHVACCMRemoteList {
            return GetHVACCMRemoteList.deserialize(bytes);
        }
    }
    export class GetHVACCMRemoteListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            remotes?: CloudHVACCMRemoteStructure[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("remotes" in data && data.remotes != undefined) {
                    this.remotes = data.remotes;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get remotes() {
            return pb_1.Message.getRepeatedWrapperField(this, CloudHVACCMRemoteStructure, 4) as CloudHVACCMRemoteStructure[];
        }
        set remotes(value: CloudHVACCMRemoteStructure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            remotes?: ReturnType<typeof CloudHVACCMRemoteStructure.prototype.toObject>[];
        }): GetHVACCMRemoteListResponse {
            const message = new GetHVACCMRemoteListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.remotes != null) {
                message.remotes = data.remotes.map(item => CloudHVACCMRemoteStructure.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                remotes?: ReturnType<typeof CloudHVACCMRemoteStructure.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.remotes != null) {
                data.remotes = this.remotes.map((item: CloudHVACCMRemoteStructure) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.remotes.length)
                writer.writeRepeatedMessage(4, this.remotes, (item: CloudHVACCMRemoteStructure) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHVACCMRemoteListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHVACCMRemoteListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.remotes, () => pb_1.Message.addToRepeatedWrapperField(message, 4, CloudHVACCMRemoteStructure.deserialize(reader), CloudHVACCMRemoteStructure));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHVACCMRemoteListResponse {
            return GetHVACCMRemoteListResponse.deserialize(bytes);
        }
    }
}
