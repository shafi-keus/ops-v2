/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.11.2
 * source: cloud/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./gateway_to_cloud";
import * as pb_1 from "google-protobuf";
export namespace com.keus.cloud {
    export class LoginData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_key?: string;
            secret_key?: string;
            validity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_key" in data && data.device_key != undefined) {
                    this.device_key = data.device_key;
                }
                if ("secret_key" in data && data.secret_key != undefined) {
                    this.secret_key = data.secret_key;
                }
                if ("validity" in data && data.validity != undefined) {
                    this.validity = data.validity;
                }
            }
        }
        get device_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get secret_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set secret_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get validity() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set validity(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            device_key?: string;
            secret_key?: string;
            validity?: number;
        }): LoginData {
            const message = new LoginData({});
            if (data.device_key != null) {
                message.device_key = data.device_key;
            }
            if (data.secret_key != null) {
                message.secret_key = data.secret_key;
            }
            if (data.validity != null) {
                message.validity = data.validity;
            }
            return message;
        }
        toObject() {
            const data: {
                device_key?: string;
                secret_key?: string;
                validity?: number;
            } = {};
            if (this.device_key != null) {
                data.device_key = this.device_key;
            }
            if (this.secret_key != null) {
                data.secret_key = this.secret_key;
            }
            if (this.validity != null) {
                data.validity = this.validity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_key.length)
                writer.writeString(1, this.device_key);
            if (this.secret_key.length)
                writer.writeString(2, this.secret_key);
            if (this.validity != 0)
                writer.writeInt64(3, this.validity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_key = reader.readString();
                        break;
                    case 2:
                        message.secret_key = reader.readString();
                        break;
                    case 3:
                        message.validity = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginData {
            return LoginData.deserialize(bytes);
        }
    }
    export class LoginUser extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            otp?: number;
            device_id?: string;
            device_type?: string;
            device_name?: string;
            remember?: boolean;
        } & (({
            phone?: string;
            email?: never;
        } | {
            phone?: never;
            email?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("otp" in data && data.otp != undefined) {
                    this.otp = data.otp;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("remember" in data && data.remember != undefined) {
                    this.remember = data.remember;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_phone() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_email() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get otp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set otp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get remember() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set remember(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get user_input() {
            const cases: {
                [index: number]: "none" | "phone" | "email";
            } = {
                0: "none",
                1: "phone",
                2: "email"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            phone?: string;
            email?: string;
            otp?: number;
            device_id?: string;
            device_type?: string;
            device_name?: string;
            remember?: boolean;
        }): LoginUser {
            const message = new LoginUser({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.otp != null) {
                message.otp = data.otp;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.remember != null) {
                message.remember = data.remember;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                email?: string;
                otp?: number;
                device_id?: string;
                device_type?: string;
                device_name?: string;
                remember?: boolean;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.otp != null) {
                data.otp = this.otp;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.remember != null) {
                data.remember = this.remember;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_phone)
                writer.writeString(1, this.phone);
            if (this.has_email)
                writer.writeString(2, this.email);
            if (this.otp != 0)
                writer.writeInt32(3, this.otp);
            if (this.device_id.length)
                writer.writeString(4, this.device_id);
            if (this.device_type.length)
                writer.writeString(5, this.device_type);
            if (this.device_name.length)
                writer.writeString(6, this.device_name);
            if (this.remember != false)
                writer.writeBool(7, this.remember);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.otp = reader.readInt32();
                        break;
                    case 4:
                        message.device_id = reader.readString();
                        break;
                    case 5:
                        message.device_type = reader.readString();
                        break;
                    case 6:
                        message.device_name = reader.readString();
                        break;
                    case 7:
                        message.remember = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginUser {
            return LoginUser.deserialize(bytes);
        }
    }
    export class LoginUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: LoginData;
            profile_data?: Profile;
            app_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user_data" in data && data.user_data != undefined) {
                    this.user_data = data.user_data;
                }
                if ("profile_data" in data && data.profile_data != undefined) {
                    this.profile_data = data.profile_data;
                }
                if ("app_version" in data && data.app_version != undefined) {
                    this.app_version = data.app_version;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_data() {
            return pb_1.Message.getWrapperField(this, LoginData, 4) as LoginData;
        }
        set user_data(value: LoginData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_user_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get profile_data() {
            return pb_1.Message.getWrapperField(this, Profile, 5) as Profile;
        }
        set profile_data(value: Profile) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_profile_data() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get app_version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set app_version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            user_data?: ReturnType<typeof LoginData.prototype.toObject>;
            profile_data?: ReturnType<typeof Profile.prototype.toObject>;
            app_version?: string;
        }): LoginUserResponse {
            const message = new LoginUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user_data != null) {
                message.user_data = LoginData.fromObject(data.user_data);
            }
            if (data.profile_data != null) {
                message.profile_data = Profile.fromObject(data.profile_data);
            }
            if (data.app_version != null) {
                message.app_version = data.app_version;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                user_data?: ReturnType<typeof LoginData.prototype.toObject>;
                profile_data?: ReturnType<typeof Profile.prototype.toObject>;
                app_version?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user_data != null) {
                data.user_data = this.user_data.toObject();
            }
            if (this.profile_data != null) {
                data.profile_data = this.profile_data.toObject();
            }
            if (this.app_version != null) {
                data.app_version = this.app_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_user_data)
                writer.writeMessage(4, this.user_data, () => this.user_data.serialize(writer));
            if (this.has_profile_data)
                writer.writeMessage(5, this.profile_data, () => this.profile_data.serialize(writer));
            if (this.app_version.length)
                writer.writeString(6, this.app_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.user_data, () => message.user_data = LoginData.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.profile_data, () => message.profile_data = Profile.deserialize(reader));
                        break;
                    case 6:
                        message.app_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginUserResponse {
            return LoginUserResponse.deserialize(bytes);
        }
    }
    export class UpdateUserProfile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
            user_name?: string;
            gender?: string;
            date_of_birth?: number;
            location?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("date_of_birth" in data && data.date_of_birth != undefined) {
                    this.date_of_birth = data.date_of_birth;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get date_of_birth() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set date_of_birth(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            phone?: string;
            user_name?: string;
            gender?: string;
            date_of_birth?: number;
            location?: string;
            email?: string;
        }): UpdateUserProfile {
            const message = new UpdateUserProfile({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.date_of_birth != null) {
                message.date_of_birth = data.date_of_birth;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                user_name?: string;
                gender?: string;
                date_of_birth?: number;
                location?: string;
                email?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.date_of_birth != null) {
                data.date_of_birth = this.date_of_birth;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (this.user_name.length)
                writer.writeString(2, this.user_name);
            if (this.gender.length)
                writer.writeString(3, this.gender);
            if (this.date_of_birth != 0)
                writer.writeInt64(4, this.date_of_birth);
            if (this.location.length)
                writer.writeString(5, this.location);
            if (this.email.length)
                writer.writeString(6, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserProfile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserProfile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.user_name = reader.readString();
                        break;
                    case 3:
                        message.gender = reader.readString();
                        break;
                    case 4:
                        message.date_of_birth = reader.readInt64();
                        break;
                    case 5:
                        message.location = reader.readString();
                        break;
                    case 6:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserProfile {
            return UpdateUserProfile.deserialize(bytes);
        }
    }
    export class UpdateUserProfileResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): UpdateUserProfileResponse {
            const message = new UpdateUserProfileResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserProfileResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserProfileResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserProfileResponse {
            return UpdateUserProfileResponse.deserialize(bytes);
        }
    }
    export class GetUserProfile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            phone?: string;
        }): GetUserProfile {
            const message = new GetUserProfile({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserProfile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserProfile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserProfile {
            return GetUserProfile.deserialize(bytes);
        }
    }
    export class HomesData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            access_level?: dependency_1.com.keus.cloud.USER_ROLES;
            rooms_list?: string[];
            secret_key?: string;
            gateway_name?: string;
            gateway_description?: string;
            start_time?: number;
            end_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("access_level" in data && data.access_level != undefined) {
                    this.access_level = data.access_level;
                }
                if ("rooms_list" in data && data.rooms_list != undefined) {
                    this.rooms_list = data.rooms_list;
                }
                if ("secret_key" in data && data.secret_key != undefined) {
                    this.secret_key = data.secret_key;
                }
                if ("gateway_name" in data && data.gateway_name != undefined) {
                    this.gateway_name = data.gateway_name;
                }
                if ("gateway_description" in data && data.gateway_description != undefined) {
                    this.gateway_description = data.gateway_description;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_level() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.com.keus.cloud.USER_ROLES.GUEST) as dependency_1.com.keus.cloud.USER_ROLES;
        }
        set access_level(value: dependency_1.com.keus.cloud.USER_ROLES) {
            pb_1.Message.setField(this, 2, value);
        }
        get rooms_list() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set rooms_list(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get secret_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set secret_key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get gateway_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set gateway_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get gateway_description() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set gateway_description(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            access_level?: dependency_1.com.keus.cloud.USER_ROLES;
            rooms_list?: string[];
            secret_key?: string;
            gateway_name?: string;
            gateway_description?: string;
            start_time?: number;
            end_time?: number;
        }): HomesData {
            const message = new HomesData({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.access_level != null) {
                message.access_level = data.access_level;
            }
            if (data.rooms_list != null) {
                message.rooms_list = data.rooms_list;
            }
            if (data.secret_key != null) {
                message.secret_key = data.secret_key;
            }
            if (data.gateway_name != null) {
                message.gateway_name = data.gateway_name;
            }
            if (data.gateway_description != null) {
                message.gateway_description = data.gateway_description;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                access_level?: dependency_1.com.keus.cloud.USER_ROLES;
                rooms_list?: string[];
                secret_key?: string;
                gateway_name?: string;
                gateway_description?: string;
                start_time?: number;
                end_time?: number;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.access_level != null) {
                data.access_level = this.access_level;
            }
            if (this.rooms_list != null) {
                data.rooms_list = this.rooms_list;
            }
            if (this.secret_key != null) {
                data.secret_key = this.secret_key;
            }
            if (this.gateway_name != null) {
                data.gateway_name = this.gateway_name;
            }
            if (this.gateway_description != null) {
                data.gateway_description = this.gateway_description;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.access_level != dependency_1.com.keus.cloud.USER_ROLES.GUEST)
                writer.writeEnum(2, this.access_level);
            if (this.rooms_list.length)
                writer.writeRepeatedString(3, this.rooms_list);
            if (this.secret_key.length)
                writer.writeString(4, this.secret_key);
            if (this.gateway_name.length)
                writer.writeString(5, this.gateway_name);
            if (this.gateway_description.length)
                writer.writeString(6, this.gateway_description);
            if (this.start_time != 0)
                writer.writeUint64(7, this.start_time);
            if (this.end_time != 0)
                writer.writeUint64(8, this.end_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HomesData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HomesData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.access_level = reader.readEnum();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.secret_key = reader.readString();
                        break;
                    case 5:
                        message.gateway_name = reader.readString();
                        break;
                    case 6:
                        message.gateway_description = reader.readString();
                        break;
                    case 7:
                        message.start_time = reader.readUint64();
                        break;
                    case 8:
                        message.end_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HomesData {
            return HomesData.deserialize(bytes);
        }
    }
    export class GatewayIpData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            ip?: string;
        }): GatewayIpData {
            const message = new GatewayIpData({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                ip?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.ip.length)
                writer.writeString(2, this.ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GatewayIpData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GatewayIpData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GatewayIpData {
            return GatewayIpData.deserialize(bytes);
        }
    }
    export class Profile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            user_name?: string;
            gender?: string;
            date_of_birth?: number;
            location?: string;
            phone?: string;
            homes_info?: HomesData[];
            favorite_home?: string;
            gateway_ips?: GatewayIpData[];
            show_configs?: boolean;
            image_url?: string;
            email_verified?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("date_of_birth" in data && data.date_of_birth != undefined) {
                    this.date_of_birth = data.date_of_birth;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("homes_info" in data && data.homes_info != undefined) {
                    this.homes_info = data.homes_info;
                }
                if ("favorite_home" in data && data.favorite_home != undefined) {
                    this.favorite_home = data.favorite_home;
                }
                if ("gateway_ips" in data && data.gateway_ips != undefined) {
                    this.gateway_ips = data.gateway_ips;
                }
                if ("show_configs" in data && data.show_configs != undefined) {
                    this.show_configs = data.show_configs;
                }
                if ("image_url" in data && data.image_url != undefined) {
                    this.image_url = data.image_url;
                }
                if ("email_verified" in data && data.email_verified != undefined) {
                    this.email_verified = data.email_verified;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get date_of_birth() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set date_of_birth(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get homes_info() {
            return pb_1.Message.getRepeatedWrapperField(this, HomesData, 7) as HomesData[];
        }
        set homes_info(value: HomesData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get favorite_home() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set favorite_home(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get gateway_ips() {
            return pb_1.Message.getRepeatedWrapperField(this, GatewayIpData, 9) as GatewayIpData[];
        }
        set gateway_ips(value: GatewayIpData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get show_configs() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set show_configs(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get image_url() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set image_url(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get email_verified() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set email_verified(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            email?: string;
            user_name?: string;
            gender?: string;
            date_of_birth?: number;
            location?: string;
            phone?: string;
            homes_info?: ReturnType<typeof HomesData.prototype.toObject>[];
            favorite_home?: string;
            gateway_ips?: ReturnType<typeof GatewayIpData.prototype.toObject>[];
            show_configs?: boolean;
            image_url?: string;
            email_verified?: boolean;
        }): Profile {
            const message = new Profile({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.date_of_birth != null) {
                message.date_of_birth = data.date_of_birth;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.homes_info != null) {
                message.homes_info = data.homes_info.map(item => HomesData.fromObject(item));
            }
            if (data.favorite_home != null) {
                message.favorite_home = data.favorite_home;
            }
            if (data.gateway_ips != null) {
                message.gateway_ips = data.gateway_ips.map(item => GatewayIpData.fromObject(item));
            }
            if (data.show_configs != null) {
                message.show_configs = data.show_configs;
            }
            if (data.image_url != null) {
                message.image_url = data.image_url;
            }
            if (data.email_verified != null) {
                message.email_verified = data.email_verified;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                user_name?: string;
                gender?: string;
                date_of_birth?: number;
                location?: string;
                phone?: string;
                homes_info?: ReturnType<typeof HomesData.prototype.toObject>[];
                favorite_home?: string;
                gateway_ips?: ReturnType<typeof GatewayIpData.prototype.toObject>[];
                show_configs?: boolean;
                image_url?: string;
                email_verified?: boolean;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.date_of_birth != null) {
                data.date_of_birth = this.date_of_birth;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.homes_info != null) {
                data.homes_info = this.homes_info.map((item: HomesData) => item.toObject());
            }
            if (this.favorite_home != null) {
                data.favorite_home = this.favorite_home;
            }
            if (this.gateway_ips != null) {
                data.gateway_ips = this.gateway_ips.map((item: GatewayIpData) => item.toObject());
            }
            if (this.show_configs != null) {
                data.show_configs = this.show_configs;
            }
            if (this.image_url != null) {
                data.image_url = this.image_url;
            }
            if (this.email_verified != null) {
                data.email_verified = this.email_verified;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.user_name.length)
                writer.writeString(2, this.user_name);
            if (this.gender.length)
                writer.writeString(3, this.gender);
            if (this.date_of_birth != 0)
                writer.writeInt64(4, this.date_of_birth);
            if (this.location.length)
                writer.writeString(5, this.location);
            if (this.phone.length)
                writer.writeString(6, this.phone);
            if (this.homes_info.length)
                writer.writeRepeatedMessage(7, this.homes_info, (item: HomesData) => item.serialize(writer));
            if (this.favorite_home.length)
                writer.writeString(8, this.favorite_home);
            if (this.gateway_ips.length)
                writer.writeRepeatedMessage(9, this.gateway_ips, (item: GatewayIpData) => item.serialize(writer));
            if (this.show_configs != false)
                writer.writeBool(10, this.show_configs);
            if (this.image_url.length)
                writer.writeString(11, this.image_url);
            if (this.email_verified != false)
                writer.writeBool(12, this.email_verified);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Profile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Profile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.user_name = reader.readString();
                        break;
                    case 3:
                        message.gender = reader.readString();
                        break;
                    case 4:
                        message.date_of_birth = reader.readInt64();
                        break;
                    case 5:
                        message.location = reader.readString();
                        break;
                    case 6:
                        message.phone = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.homes_info, () => pb_1.Message.addToRepeatedWrapperField(message, 7, HomesData.deserialize(reader), HomesData));
                        break;
                    case 8:
                        message.favorite_home = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.gateway_ips, () => pb_1.Message.addToRepeatedWrapperField(message, 9, GatewayIpData.deserialize(reader), GatewayIpData));
                        break;
                    case 10:
                        message.show_configs = reader.readBool();
                        break;
                    case 11:
                        message.image_url = reader.readString();
                        break;
                    case 12:
                        message.email_verified = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Profile {
            return Profile.deserialize(bytes);
        }
    }
    export class GetUserProfileResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            data?: Profile;
            app_version?: string;
            user_current_app_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("app_version" in data && data.app_version != undefined) {
                    this.app_version = data.app_version;
                }
                if ("user_current_app_version" in data && data.user_current_app_version != undefined) {
                    this.user_current_app_version = data.user_current_app_version;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Profile, 4) as Profile;
        }
        set data(value: Profile) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get app_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set app_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get user_current_app_version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user_current_app_version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            data?: ReturnType<typeof Profile.prototype.toObject>;
            app_version?: string;
            user_current_app_version?: string;
        }): GetUserProfileResponse {
            const message = new GetUserProfileResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.data != null) {
                message.data = Profile.fromObject(data.data);
            }
            if (data.app_version != null) {
                message.app_version = data.app_version;
            }
            if (data.user_current_app_version != null) {
                message.user_current_app_version = data.user_current_app_version;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                data?: ReturnType<typeof Profile.prototype.toObject>;
                app_version?: string;
                user_current_app_version?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.app_version != null) {
                data.app_version = this.app_version;
            }
            if (this.user_current_app_version != null) {
                data.user_current_app_version = this.user_current_app_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.has_data)
                writer.writeMessage(4, this.data, () => this.data.serialize(writer));
            if (this.app_version.length)
                writer.writeString(5, this.app_version);
            if (this.user_current_app_version.length)
                writer.writeString(6, this.user_current_app_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserProfileResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserProfileResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = Profile.deserialize(reader));
                        break;
                    case 5:
                        message.app_version = reader.readString();
                        break;
                    case 6:
                        message.user_current_app_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserProfileResponse {
            return GetUserProfileResponse.deserialize(bytes);
        }
    }
    export class GetHomesList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            phone?: string;
        }): GetHomesList {
            const message = new GetHomesList({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHomesList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHomesList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHomesList {
            return GetHomesList.deserialize(bytes);
        }
    }
    export class GetHomesListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            homes_list?: string;
            favorite_home?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("homes_list" in data && data.homes_list != undefined) {
                    this.homes_list = data.homes_list;
                }
                if ("favorite_home" in data && data.favorite_home != undefined) {
                    this.favorite_home = data.favorite_home;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get homes_list() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set homes_list(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get favorite_home() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set favorite_home(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            homes_list?: string;
            favorite_home?: string;
        }): GetHomesListResponse {
            const message = new GetHomesListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.homes_list != null) {
                message.homes_list = data.homes_list;
            }
            if (data.favorite_home != null) {
                message.favorite_home = data.favorite_home;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                homes_list?: string;
                favorite_home?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.homes_list != null) {
                data.homes_list = this.homes_list;
            }
            if (this.favorite_home != null) {
                data.favorite_home = this.favorite_home;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.homes_list.length)
                writer.writeString(4, this.homes_list);
            if (this.favorite_home.length)
                writer.writeString(5, this.favorite_home);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHomesListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHomesListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.homes_list = reader.readString();
                        break;
                    case 5:
                        message.favorite_home = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHomesListResponse {
            return GetHomesListResponse.deserialize(bytes);
        }
    }
    export class LoggedInDevices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_type?: string;
            device_id?: string;
            device_name?: string;
            remember?: boolean;
            last_access_time?: number;
            validity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("remember" in data && data.remember != undefined) {
                    this.remember = data.remember;
                }
                if ("last_access_time" in data && data.last_access_time != undefined) {
                    this.last_access_time = data.last_access_time;
                }
                if ("validity" in data && data.validity != undefined) {
                    this.validity = data.validity;
                }
            }
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get remember() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set remember(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_access_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_access_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get validity() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set validity(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            device_type?: string;
            device_id?: string;
            device_name?: string;
            remember?: boolean;
            last_access_time?: number;
            validity?: number;
        }): LoggedInDevices {
            const message = new LoggedInDevices({});
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.remember != null) {
                message.remember = data.remember;
            }
            if (data.last_access_time != null) {
                message.last_access_time = data.last_access_time;
            }
            if (data.validity != null) {
                message.validity = data.validity;
            }
            return message;
        }
        toObject() {
            const data: {
                device_type?: string;
                device_id?: string;
                device_name?: string;
                remember?: boolean;
                last_access_time?: number;
                validity?: number;
            } = {};
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.remember != null) {
                data.remember = this.remember;
            }
            if (this.last_access_time != null) {
                data.last_access_time = this.last_access_time;
            }
            if (this.validity != null) {
                data.validity = this.validity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_type.length)
                writer.writeString(1, this.device_type);
            if (this.device_id.length)
                writer.writeString(2, this.device_id);
            if (this.device_name.length)
                writer.writeString(3, this.device_name);
            if (this.remember != false)
                writer.writeBool(4, this.remember);
            if (this.last_access_time != 0)
                writer.writeInt64(5, this.last_access_time);
            if (this.validity != 0)
                writer.writeInt64(6, this.validity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoggedInDevices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoggedInDevices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_type = reader.readString();
                        break;
                    case 2:
                        message.device_id = reader.readString();
                        break;
                    case 3:
                        message.device_name = reader.readString();
                        break;
                    case 4:
                        message.remember = reader.readBool();
                        break;
                    case 5:
                        message.last_access_time = reader.readInt64();
                        break;
                    case 6:
                        message.validity = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoggedInDevices {
            return LoggedInDevices.deserialize(bytes);
        }
    }
    export class GetLoggedInDevices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            phone?: string;
        }): GetLoggedInDevices {
            const message = new GetLoggedInDevices({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLoggedInDevices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLoggedInDevices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLoggedInDevices {
            return GetLoggedInDevices.deserialize(bytes);
        }
    }
    export class GetLoggedInDevicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            list?: LoggedInDevices[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, LoggedInDevices, 4) as LoggedInDevices[];
        }
        set list(value: LoggedInDevices[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            list?: ReturnType<typeof LoggedInDevices.prototype.toObject>[];
        }): GetLoggedInDevicesResponse {
            const message = new GetLoggedInDevicesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.list != null) {
                message.list = data.list.map(item => LoggedInDevices.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                list?: ReturnType<typeof LoggedInDevices.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.list != null) {
                data.list = this.list.map((item: LoggedInDevices) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.list.length)
                writer.writeRepeatedMessage(4, this.list, (item: LoggedInDevices) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLoggedInDevicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLoggedInDevicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 4, LoggedInDevices.deserialize(reader), LoggedInDevices));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLoggedInDevicesResponse {
            return GetLoggedInDevicesResponse.deserialize(bytes);
        }
    }
    export class InvalidateAllUserDevices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
            device_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("device_key" in data && data.device_key != undefined) {
                    this.device_key = data.device_key;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get device_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            phone?: string;
            device_key?: string;
        }): InvalidateAllUserDevices {
            const message = new InvalidateAllUserDevices({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.device_key != null) {
                message.device_key = data.device_key;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                device_key?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.device_key != null) {
                data.device_key = this.device_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (this.device_key.length)
                writer.writeString(2, this.device_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvalidateAllUserDevices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvalidateAllUserDevices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.device_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvalidateAllUserDevices {
            return InvalidateAllUserDevices.deserialize(bytes);
        }
    }
    export class InvalidateAllUserDevicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): InvalidateAllUserDevicesResponse {
            const message = new InvalidateAllUserDevicesResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvalidateAllUserDevicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvalidateAllUserDevicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvalidateAllUserDevicesResponse {
            return InvalidateAllUserDevicesResponse.deserialize(bytes);
        }
    }
    export class InvalidateUserDevice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_key?: string;
            secret_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_key" in data && data.device_key != undefined) {
                    this.device_key = data.device_key;
                }
                if ("secret_key" in data && data.secret_key != undefined) {
                    this.secret_key = data.secret_key;
                }
            }
        }
        get device_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get secret_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set secret_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            device_key?: string;
            secret_key?: string;
        }): InvalidateUserDevice {
            const message = new InvalidateUserDevice({});
            if (data.device_key != null) {
                message.device_key = data.device_key;
            }
            if (data.secret_key != null) {
                message.secret_key = data.secret_key;
            }
            return message;
        }
        toObject() {
            const data: {
                device_key?: string;
                secret_key?: string;
            } = {};
            if (this.device_key != null) {
                data.device_key = this.device_key;
            }
            if (this.secret_key != null) {
                data.secret_key = this.secret_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_key.length)
                writer.writeString(1, this.device_key);
            if (this.secret_key.length)
                writer.writeString(2, this.secret_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvalidateUserDevice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvalidateUserDevice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_key = reader.readString();
                        break;
                    case 2:
                        message.secret_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvalidateUserDevice {
            return InvalidateUserDevice.deserialize(bytes);
        }
    }
    export class InvalidateUserDeviceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): InvalidateUserDeviceResponse {
            const message = new InvalidateUserDeviceResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvalidateUserDeviceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvalidateUserDeviceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvalidateUserDeviceResponse {
            return InvalidateUserDeviceResponse.deserialize(bytes);
        }
    }
    export class SetFavoriteHome extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
            favorite_home?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("favorite_home" in data && data.favorite_home != undefined) {
                    this.favorite_home = data.favorite_home;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get favorite_home() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set favorite_home(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            phone?: string;
            favorite_home?: string;
        }): SetFavoriteHome {
            const message = new SetFavoriteHome({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.favorite_home != null) {
                message.favorite_home = data.favorite_home;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                favorite_home?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.favorite_home != null) {
                data.favorite_home = this.favorite_home;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (this.favorite_home.length)
                writer.writeString(2, this.favorite_home);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetFavoriteHome {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetFavoriteHome();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.favorite_home = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetFavoriteHome {
            return SetFavoriteHome.deserialize(bytes);
        }
    }
    export class SetFavoriteHomeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): SetFavoriteHomeResponse {
            const message = new SetFavoriteHomeResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetFavoriteHomeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetFavoriteHomeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetFavoriteHomeResponse {
            return SetFavoriteHomeResponse.deserialize(bytes);
        }
    }
    export class UpdateEmail extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phone?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            phone?: string;
            email?: string;
        }): UpdateEmail {
            const message = new UpdateEmail({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                email?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phone.length)
                writer.writeString(1, this.phone);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEmail {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEmail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEmail {
            return UpdateEmail.deserialize(bytes);
        }
    }
    export class UpdateEmailResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): UpdateEmailResponse {
            const message = new UpdateEmailResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEmailResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEmailResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEmailResponse {
            return UpdateEmailResponse.deserialize(bytes);
        }
    }
    export class RequestOtp extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            phone?: string;
            email?: never;
        } | {
            phone?: never;
            email?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_phone() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_email() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get user_input() {
            const cases: {
                [index: number]: "none" | "phone" | "email";
            } = {
                0: "none",
                1: "phone",
                2: "email"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            phone?: string;
            email?: string;
        }): RequestOtp {
            const message = new RequestOtp({});
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                phone?: string;
                email?: string;
            } = {};
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_phone)
                writer.writeString(1, this.phone);
            if (this.has_email)
                writer.writeString(2, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestOtp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestOtp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestOtp {
            return RequestOtp.deserialize(bytes);
        }
    }
    export class RequestOtpResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): RequestOtpResponse {
            const message = new RequestOtpResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestOtpResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestOtpResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestOtpResponse {
            return RequestOtpResponse.deserialize(bytes);
        }
    }
    export class RenameGateway extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            gateway_name?: string;
            gateway_description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("gateway_name" in data && data.gateway_name != undefined) {
                    this.gateway_name = data.gateway_name;
                }
                if ("gateway_description" in data && data.gateway_description != undefined) {
                    this.gateway_description = data.gateway_description;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get gateway_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set gateway_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get gateway_description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set gateway_description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            gateway_name?: string;
            gateway_description?: string;
        }): RenameGateway {
            const message = new RenameGateway({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.gateway_name != null) {
                message.gateway_name = data.gateway_name;
            }
            if (data.gateway_description != null) {
                message.gateway_description = data.gateway_description;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                gateway_name?: string;
                gateway_description?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.gateway_name != null) {
                data.gateway_name = this.gateway_name;
            }
            if (this.gateway_description != null) {
                data.gateway_description = this.gateway_description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.gateway_name.length)
                writer.writeString(2, this.gateway_name);
            if (this.gateway_description.length)
                writer.writeString(3, this.gateway_description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameGateway {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameGateway();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.gateway_name = reader.readString();
                        break;
                    case 3:
                        message.gateway_description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameGateway {
            return RenameGateway.deserialize(bytes);
        }
    }
    export class RenameGatewayResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): RenameGatewayResponse {
            const message = new RenameGatewayResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameGatewayResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameGatewayResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameGatewayResponse {
            return RenameGatewayResponse.deserialize(bytes);
        }
    }
    export class DeleteHomeBySelf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            force_delete?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("force_delete" in data && data.force_delete != undefined) {
                    this.force_delete = data.force_delete;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get force_delete() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set force_delete(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            force_delete?: boolean;
        }): DeleteHomeBySelf {
            const message = new DeleteHomeBySelf({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.force_delete != null) {
                message.force_delete = data.force_delete;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                force_delete?: boolean;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.force_delete != null) {
                data.force_delete = this.force_delete;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.force_delete != false)
                writer.writeBool(2, this.force_delete);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteHomeBySelf {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteHomeBySelf();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.force_delete = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteHomeBySelf {
            return DeleteHomeBySelf.deserialize(bytes);
        }
    }
    export class DeleteHomeBySelfResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): DeleteHomeBySelfResponse {
            const message = new DeleteHomeBySelfResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteHomeBySelfResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteHomeBySelfResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteHomeBySelfResponse {
            return DeleteHomeBySelfResponse.deserialize(bytes);
        }
    }
    export class UpdateGatewayIpByUser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: string;
            ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gateway_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            gateway_id?: string;
            ip?: string;
        }): UpdateGatewayIpByUser {
            const message = new UpdateGatewayIpByUser({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: string;
                ip?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id.length)
                writer.writeString(1, this.gateway_id);
            if (this.ip.length)
                writer.writeString(2, this.ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGatewayIpByUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGatewayIpByUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readString();
                        break;
                    case 2:
                        message.ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGatewayIpByUser {
            return UpdateGatewayIpByUser.deserialize(bytes);
        }
    }
    export class UpdateGatewayIpByUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): UpdateGatewayIpByUserResponse {
            const message = new UpdateGatewayIpByUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGatewayIpByUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGatewayIpByUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGatewayIpByUserResponse {
            return UpdateGatewayIpByUserResponse.deserialize(bytes);
        }
    }
    export class UploadProfileImage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            image_data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("image_data" in data && data.image_data != undefined) {
                    this.image_data = data.image_data;
                }
            }
        }
        get image_data() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set image_data(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            image_data?: string;
        }): UploadProfileImage {
            const message = new UploadProfileImage({});
            if (data.image_data != null) {
                message.image_data = data.image_data;
            }
            return message;
        }
        toObject() {
            const data: {
                image_data?: string;
            } = {};
            if (this.image_data != null) {
                data.image_data = this.image_data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.image_data.length)
                writer.writeString(1, this.image_data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadProfileImage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadProfileImage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.image_data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadProfileImage {
            return UploadProfileImage.deserialize(bytes);
        }
    }
    export class UploadProfileImageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            image_url?: string;
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("image_url" in data && data.image_url != undefined) {
                    this.image_url = data.image_url;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get image_url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set image_url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            image_url?: string;
            success?: boolean;
            code?: number;
            message?: string;
        }): UploadProfileImageResponse {
            const message = new UploadProfileImageResponse({});
            if (data.image_url != null) {
                message.image_url = data.image_url;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                image_url?: string;
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.image_url != null) {
                data.image_url = this.image_url;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.image_url.length)
                writer.writeString(1, this.image_url);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.code != 0)
                writer.writeInt32(3, this.code);
            if (this.message.length)
                writer.writeString(4, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadProfileImageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadProfileImageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.image_url = reader.readString();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.code = reader.readInt32();
                        break;
                    case 4:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadProfileImageResponse {
            return UploadProfileImageResponse.deserialize(bytes);
        }
    }
    export class GetProfileImageUrl extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetProfileImageUrl {
            const message = new GetProfileImageUrl({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetProfileImageUrl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetProfileImageUrl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetProfileImageUrl {
            return GetProfileImageUrl.deserialize(bytes);
        }
    }
    export class GetProfileImageUrlResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            image_url?: string;
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("image_url" in data && data.image_url != undefined) {
                    this.image_url = data.image_url;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get image_url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set image_url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            image_url?: string;
            success?: boolean;
            code?: number;
            message?: string;
        }): GetProfileImageUrlResponse {
            const message = new GetProfileImageUrlResponse({});
            if (data.image_url != null) {
                message.image_url = data.image_url;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                image_url?: string;
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.image_url != null) {
                data.image_url = this.image_url;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.image_url.length)
                writer.writeString(1, this.image_url);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.code != 0)
                writer.writeInt32(3, this.code);
            if (this.message.length)
                writer.writeString(4, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetProfileImageUrlResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetProfileImageUrlResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.image_url = reader.readString();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.code = reader.readInt32();
                        break;
                    case 4:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetProfileImageUrlResponse {
            return GetProfileImageUrlResponse.deserialize(bytes);
        }
    }
    export class DeleteProfileImage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteProfileImage {
            const message = new DeleteProfileImage({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteProfileImage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteProfileImage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteProfileImage {
            return DeleteProfileImage.deserialize(bytes);
        }
    }
    export class DeleteProfileImageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): DeleteProfileImageResponse {
            const message = new DeleteProfileImageResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteProfileImageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteProfileImageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteProfileImageResponse {
            return DeleteProfileImageResponse.deserialize(bytes);
        }
    }
    export class VerifyEmailEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: string;
            verification_status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("verification_status" in data && data.verification_status != undefined) {
                    this.verification_status = data.verification_status;
                }
            }
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get verification_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set verification_status(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user?: string;
            verification_status?: boolean;
        }): VerifyEmailEvent {
            const message = new VerifyEmailEvent({});
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.verification_status != null) {
                message.verification_status = data.verification_status;
            }
            return message;
        }
        toObject() {
            const data: {
                user?: string;
                verification_status?: boolean;
            } = {};
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.verification_status != null) {
                data.verification_status = this.verification_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user.length)
                writer.writeString(1, this.user);
            if (this.verification_status != false)
                writer.writeBool(2, this.verification_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyEmailEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyEmailEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user = reader.readString();
                        break;
                    case 2:
                        message.verification_status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyEmailEvent {
            return VerifyEmailEvent.deserialize(bytes);
        }
    }
    export class GetTutorialVideoLinks extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetTutorialVideoLinks {
            const message = new GetTutorialVideoLinks({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTutorialVideoLinks {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTutorialVideoLinks();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTutorialVideoLinks {
            return GetTutorialVideoLinks.deserialize(bytes);
        }
    }
    export class TutorialVideoLink extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            video_name?: string;
            thumbnail_link?: string;
            video_link?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("video_name" in data && data.video_name != undefined) {
                    this.video_name = data.video_name;
                }
                if ("thumbnail_link" in data && data.thumbnail_link != undefined) {
                    this.thumbnail_link = data.thumbnail_link;
                }
                if ("video_link" in data && data.video_link != undefined) {
                    this.video_link = data.video_link;
                }
            }
        }
        get video_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set video_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get thumbnail_link() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set thumbnail_link(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get video_link() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set video_link(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            video_name?: string;
            thumbnail_link?: string;
            video_link?: string;
        }): TutorialVideoLink {
            const message = new TutorialVideoLink({});
            if (data.video_name != null) {
                message.video_name = data.video_name;
            }
            if (data.thumbnail_link != null) {
                message.thumbnail_link = data.thumbnail_link;
            }
            if (data.video_link != null) {
                message.video_link = data.video_link;
            }
            return message;
        }
        toObject() {
            const data: {
                video_name?: string;
                thumbnail_link?: string;
                video_link?: string;
            } = {};
            if (this.video_name != null) {
                data.video_name = this.video_name;
            }
            if (this.thumbnail_link != null) {
                data.thumbnail_link = this.thumbnail_link;
            }
            if (this.video_link != null) {
                data.video_link = this.video_link;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.video_name.length)
                writer.writeString(1, this.video_name);
            if (this.thumbnail_link.length)
                writer.writeString(2, this.thumbnail_link);
            if (this.video_link.length)
                writer.writeString(3, this.video_link);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TutorialVideoLink {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TutorialVideoLink();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.video_name = reader.readString();
                        break;
                    case 2:
                        message.thumbnail_link = reader.readString();
                        break;
                    case 3:
                        message.video_link = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TutorialVideoLink {
            return TutorialVideoLink.deserialize(bytes);
        }
    }
    export class GetTutorialVideoLinksResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
            tutorial_video?: TutorialVideoLink[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("tutorial_video" in data && data.tutorial_video != undefined) {
                    this.tutorial_video = data.tutorial_video;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tutorial_video() {
            return pb_1.Message.getRepeatedWrapperField(this, TutorialVideoLink, 4) as TutorialVideoLink[];
        }
        set tutorial_video(value: TutorialVideoLink[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
            tutorial_video?: ReturnType<typeof TutorialVideoLink.prototype.toObject>[];
        }): GetTutorialVideoLinksResponse {
            const message = new GetTutorialVideoLinksResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.tutorial_video != null) {
                message.tutorial_video = data.tutorial_video.map(item => TutorialVideoLink.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
                tutorial_video?: ReturnType<typeof TutorialVideoLink.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.tutorial_video != null) {
                data.tutorial_video = this.tutorial_video.map((item: TutorialVideoLink) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.tutorial_video.length)
                writer.writeRepeatedMessage(4, this.tutorial_video, (item: TutorialVideoLink) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTutorialVideoLinksResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTutorialVideoLinksResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.tutorial_video, () => pb_1.Message.addToRepeatedWrapperField(message, 4, TutorialVideoLink.deserialize(reader), TutorialVideoLink));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTutorialVideoLinksResponse {
            return GetTutorialVideoLinksResponse.deserialize(bytes);
        }
    }
    export class UpdateUserAppVersion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_version" in data && data.app_version != undefined) {
                    this.app_version = data.app_version;
                }
            }
        }
        get app_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set app_version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            app_version?: string;
        }): UpdateUserAppVersion {
            const message = new UpdateUserAppVersion({});
            if (data.app_version != null) {
                message.app_version = data.app_version;
            }
            return message;
        }
        toObject() {
            const data: {
                app_version?: string;
            } = {};
            if (this.app_version != null) {
                data.app_version = this.app_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_version.length)
                writer.writeString(1, this.app_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserAppVersion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserAppVersion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserAppVersion {
            return UpdateUserAppVersion.deserialize(bytes);
        }
    }
    export class UpdateUserAppVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            code?: number;
            message?: string;
        }): UpdateUserAppVersionResponse {
            const message = new UpdateUserAppVersionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                code?: number;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserAppVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserAppVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserAppVersionResponse {
            return UpdateUserAppVersionResponse.deserialize(bytes);
        }
    }
}
